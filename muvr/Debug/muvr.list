
muvr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f728  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800f8b8  0800f8b8  000108b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff80  0800ff80  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff80  0800ff80  00010f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff88  0800ff88  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff88  0800ff88  00010f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff8c  0800ff8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ff90  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111d8  2**0
                  CONTENTS
 10 .bss          00004dfc  200001d8  200001d8  000111d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004fd4  20004fd4  000111d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e764  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e26  00000000  00000000  0002f96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  00033798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000141d  00000000  00000000  00035140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002591d  00000000  00000000  0003655d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e0e0  00000000  00000000  0005be7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e799f  00000000  00000000  00079f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001618f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008108  00000000  00000000  0016193c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00169a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f8a0 	.word	0x0800f8a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800f8a0 	.word	0x0800f8a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9b5 	b.w	8000fd4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	@ 0x30
 8000fdc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2319      	movs	r3, #25
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	463b      	mov	r3, r7
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	2288      	movs	r2, #136	@ 0x88
 8000ff0:	21ec      	movs	r1, #236	@ 0xec
 8000ff2:	4857      	ldr	r0, [pc, #348]	@ (8001150 <TrimRead+0x178>)
 8000ff4:	f003 fe58 	bl	8004ca8 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	3319      	adds	r3, #25
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	9202      	str	r2, [sp, #8]
 8001002:	2207      	movs	r2, #7
 8001004:	9201      	str	r2, [sp, #4]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	22e1      	movs	r2, #225	@ 0xe1
 800100c:	21ec      	movs	r1, #236	@ 0xec
 800100e:	4850      	ldr	r0, [pc, #320]	@ (8001150 <TrimRead+0x178>)
 8001010:	f003 fe4a 	bl	8004ca8 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001014:	787b      	ldrb	r3, [r7, #1]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	783b      	ldrb	r3, [r7, #0]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b4b      	ldr	r3, [pc, #300]	@ (8001154 <TrimRead+0x17c>)
 8001026:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	78bb      	ldrb	r3, [r7, #2]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21a      	sxth	r2, r3
 8001036:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <TrimRead+0x180>)
 8001038:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800103a:	797b      	ldrb	r3, [r7, #5]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	793b      	ldrb	r3, [r7, #4]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b44      	ldr	r3, [pc, #272]	@ (800115c <TrimRead+0x184>)
 800104a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <TrimRead+0x188>)
 800105e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001060:	7a7b      	ldrb	r3, [r7, #9]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b3d      	ldr	r3, [pc, #244]	@ (8001164 <TrimRead+0x18c>)
 8001070:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7abb      	ldrb	r3, [r7, #10]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <TrimRead+0x190>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001084:	7b7b      	ldrb	r3, [r7, #13]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b36      	ldr	r3, [pc, #216]	@ (800116c <TrimRead+0x194>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <TrimRead+0x198>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7c3b      	ldrb	r3, [r7, #16]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <TrimRead+0x19c>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010ba:	7cfb      	ldrb	r3, [r7, #19]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7cbb      	ldrb	r3, [r7, #18]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <TrimRead+0x1a0>)
 80010ca:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010cc:	7d7b      	ldrb	r3, [r7, #21]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7d3b      	ldrb	r3, [r7, #20]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <TrimRead+0x1a4>)
 80010dc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <TrimRead+0x1a8>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80010f0:	7e3b      	ldrb	r3, [r7, #24]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <TrimRead+0x1ac>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80010f8:	7ebb      	ldrb	r3, [r7, #26]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7e7b      	ldrb	r3, [r7, #25]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <TrimRead+0x1b0>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800110a:	7efb      	ldrb	r3, [r7, #27]
 800110c:	461a      	mov	r2, r3
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <TrimRead+0x1b4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001112:	7f3b      	ldrb	r3, [r7, #28]
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	b21a      	sxth	r2, r3
 8001118:	7f7b      	ldrb	r3, [r7, #29]
 800111a:	b21b      	sxth	r3, r3
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <TrimRead+0x1b8>)
 8001128:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800112a:	7fbb      	ldrb	r3, [r7, #30]
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	b21a      	sxth	r2, r3
 8001130:	7f7b      	ldrb	r3, [r7, #29]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <TrimRead+0x1bc>)
 800113e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001140:	7ffb      	ldrb	r3, [r7, #31]
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <TrimRead+0x1c0>)
 8001146:	801a      	strh	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200002d4 	.word	0x200002d4
 8001154:	20000204 	.word	0x20000204
 8001158:	2000020c 	.word	0x2000020c
 800115c:	2000020e 	.word	0x2000020e
 8001160:	20000206 	.word	0x20000206
 8001164:	20000210 	.word	0x20000210
 8001168:	20000212 	.word	0x20000212
 800116c:	20000214 	.word	0x20000214
 8001170:	20000216 	.word	0x20000216
 8001174:	20000218 	.word	0x20000218
 8001178:	2000021a 	.word	0x2000021a
 800117c:	2000021c 	.word	0x2000021c
 8001180:	2000021e 	.word	0x2000021e
 8001184:	20000208 	.word	0x20000208
 8001188:	20000220 	.word	0x20000220
 800118c:	2000020a 	.word	0x2000020a
 8001190:	20000222 	.word	0x20000222
 8001194:	20000224 	.word	0x20000224
 8001198:	20000226 	.word	0x20000226

0800119c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4604      	mov	r4, r0
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	4623      	mov	r3, r4
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	4603      	mov	r3, r0
 80011b0:	71bb      	strb	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	717b      	strb	r3, [r7, #5]
 80011b6:	4613      	mov	r3, r2
 80011b8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011ba:	f7ff ff0d 	bl	8000fd8 <TrimRead>


	uint8_t datatowrite = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011c6:	23b6      	movs	r3, #182	@ 0xb6
 80011c8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 030f 	add.w	r3, r7, #15
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	22e0      	movs	r2, #224	@ 0xe0
 80011de:	21ec      	movs	r1, #236	@ 0xec
 80011e0:	4858      	ldr	r0, [pc, #352]	@ (8001344 <BME280_Config+0x1a8>)
 80011e2:	f003 fc67 	bl	8004ab4 <HAL_I2C_Mem_Write>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <BME280_Config+0x56>
	{
		return -1;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	e0a3      	b.n	800133a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80011f2:	2064      	movs	r0, #100	@ 0x64
 80011f4:	f002 f8e2 	bl	80033bc <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f107 030f 	add.w	r3, r7, #15
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	22f2      	movs	r2, #242	@ 0xf2
 8001210:	21ec      	movs	r1, #236	@ 0xec
 8001212:	484c      	ldr	r0, [pc, #304]	@ (8001344 <BME280_Config+0x1a8>)
 8001214:	f003 fc4e 	bl	8004ab4 <HAL_I2C_Mem_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <BME280_Config+0x88>
	{
		return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e08a      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001224:	2064      	movs	r0, #100	@ 0x64
 8001226:	f002 f8c9 	bl	80033bc <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 030e 	add.w	r3, r7, #14
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	22f2      	movs	r2, #242	@ 0xf2
 800123e:	21ec      	movs	r1, #236	@ 0xec
 8001240:	4840      	ldr	r0, [pc, #256]	@ (8001344 <BME280_Config+0x1a8>)
 8001242:	f003 fd31 	bl	8004ca8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001246:	7bba      	ldrb	r2, [r7, #14]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	429a      	cmp	r2, r3
 800124c:	d002      	beq.n	8001254 <BME280_Config+0xb8>
	{
		return -1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e072      	b.n	800133a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001254:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001258:	015b      	lsls	r3, r3, #5
 800125a:	b25a      	sxtb	r2, r3
 800125c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b25b      	sxtb	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b25b      	sxtb	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800126c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f107 030f 	add.w	r3, r7, #15
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	22f5      	movs	r2, #245	@ 0xf5
 8001280:	21ec      	movs	r1, #236	@ 0xec
 8001282:	4830      	ldr	r0, [pc, #192]	@ (8001344 <BME280_Config+0x1a8>)
 8001284:	f003 fc16 	bl	8004ab4 <HAL_I2C_Mem_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <BME280_Config+0xf8>
	{
		return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e052      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001294:	2064      	movs	r0, #100	@ 0x64
 8001296:	f002 f891 	bl	80033bc <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22f5      	movs	r2, #245	@ 0xf5
 80012ae:	21ec      	movs	r1, #236	@ 0xec
 80012b0:	4824      	ldr	r0, [pc, #144]	@ (8001344 <BME280_Config+0x1a8>)
 80012b2:	f003 fcf9 	bl	8004ca8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012b6:	7bba      	ldrb	r2, [r7, #14]
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d002      	beq.n	80012c4 <BME280_Config+0x128>
	{
		return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e03a      	b.n	800133a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	015b      	lsls	r3, r3, #5
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 030f 	add.w	r3, r7, #15
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	22f4      	movs	r2, #244	@ 0xf4
 80012f4:	21ec      	movs	r1, #236	@ 0xec
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <BME280_Config+0x1a8>)
 80012f8:	f003 fbdc 	bl	8004ab4 <HAL_I2C_Mem_Write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <BME280_Config+0x16c>
	{
		return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e018      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001308:	2064      	movs	r0, #100	@ 0x64
 800130a:	f002 f857 	bl	80033bc <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800130e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 030e 	add.w	r3, r7, #14
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	22f4      	movs	r2, #244	@ 0xf4
 8001322:	21ec      	movs	r1, #236	@ 0xec
 8001324:	4807      	ldr	r0, [pc, #28]	@ (8001344 <BME280_Config+0x1a8>)
 8001326:	f003 fcbf 	bl	8004ca8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800132a:	7bba      	ldrb	r2, [r7, #14]
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	429a      	cmp	r2, r3
 8001330:	d002      	beq.n	8001338 <BME280_Config+0x19c>
	{
		return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e000      	b.n	800133a <BME280_Config+0x19e>
	}

	return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bd90      	pop	{r4, r7, pc}
 8001342:	bf00      	nop
 8001344:	200002d4 	.word	0x200002d4

08001348 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c3, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2301      	movs	r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <BMEReadRaw+0x8c>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	22d0      	movs	r2, #208	@ 0xd0
 8001360:	21ec      	movs	r1, #236	@ 0xec
 8001362:	481d      	ldr	r0, [pc, #116]	@ (80013d8 <BMEReadRaw+0x90>)
 8001364:	f003 fca0 	bl	8004ca8 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001368:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <BMEReadRaw+0x8c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b60      	cmp	r3, #96	@ 0x60
 800136e:	d12a      	bne.n	80013c6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2308      	movs	r3, #8
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	463b      	mov	r3, r7
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2301      	movs	r3, #1
 8001380:	22f7      	movs	r2, #247	@ 0xf7
 8001382:	21ec      	movs	r1, #236	@ 0xec
 8001384:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <BMEReadRaw+0x90>)
 8001386:	f003 fc8f 	bl	8004ca8 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800138a:	783b      	ldrb	r3, [r7, #0]
 800138c:	031a      	lsls	r2, r3, #12
 800138e:	787b      	ldrb	r3, [r7, #1]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4313      	orrs	r3, r2
 8001394:	78ba      	ldrb	r2, [r7, #2]
 8001396:	0912      	lsrs	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	4313      	orrs	r3, r2
 800139c:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <BMEReadRaw+0x94>)
 800139e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	793b      	ldrb	r3, [r7, #4]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4313      	orrs	r3, r2
 80013aa:	797a      	ldrb	r2, [r7, #5]
 80013ac:	0912      	lsrs	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	4313      	orrs	r3, r2
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <BMEReadRaw+0x98>)
 80013b4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	4313      	orrs	r3, r2
 80013be:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <BMEReadRaw+0x9c>)
 80013c0:	6013      	str	r3, [r2, #0]

		return 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e001      	b.n	80013ca <BMEReadRaw+0x82>
	}

	else return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001f4 	.word	0x200001f4
 80013d8:	200002d4 	.word	0x200002d4
 80013dc:	200001fc 	.word	0x200001fc
 80013e0:	200001f8 	.word	0x200001f8
 80013e4:	20000200 	.word	0x20000200

080013e8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	10da      	asrs	r2, r3, #3
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <BME280_compensate_T_int32+0x74>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <BME280_compensate_T_int32+0x78>)
 80013fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	12db      	asrs	r3, r3, #11
 8001408:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	111b      	asrs	r3, r3, #4
 800140e:	4a13      	ldr	r2, [pc, #76]	@ (800145c <BME280_compensate_T_int32+0x74>)
 8001410:	8812      	ldrh	r2, [r2, #0]
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	1112      	asrs	r2, r2, #4
 8001418:	4910      	ldr	r1, [pc, #64]	@ (800145c <BME280_compensate_T_int32+0x74>)
 800141a:	8809      	ldrh	r1, [r1, #0]
 800141c:	1a52      	subs	r2, r2, r1
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	131b      	asrs	r3, r3, #12
 8001424:	4a0f      	ldr	r2, [pc, #60]	@ (8001464 <BME280_compensate_T_int32+0x7c>)
 8001426:	f9b2 2000 	ldrsh.w	r2, [r2]
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	139b      	asrs	r3, r3, #14
 8001430:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <BME280_compensate_T_int32+0x80>)
 800143a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <BME280_compensate_T_int32+0x80>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3380      	adds	r3, #128	@ 0x80
 8001448:	121b      	asrs	r3, r3, #8
 800144a:	60fb      	str	r3, [r7, #12]
	return T;
 800144c:	68fb      	ldr	r3, [r7, #12]
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000204 	.word	0x20000204
 8001460:	2000020c 	.word	0x2000020c
 8001464:	2000020e 	.word	0x2000020e
 8001468:	20000228 	.word	0x20000228

0800146c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001470:	b0ca      	sub	sp, #296	@ 0x128
 8001472:	af00      	add	r7, sp, #0
 8001474:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001478:	4baf      	ldr	r3, [pc, #700]	@ (8001738 <BME280_compensate_P_int64+0x2cc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	17da      	asrs	r2, r3, #31
 800147e:	461c      	mov	r4, r3
 8001480:	4615      	mov	r5, r2
 8001482:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001486:	f145 3bff 	adc.w	fp, r5, #4294967295
 800148a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800148e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001492:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001496:	fb03 f102 	mul.w	r1, r3, r2
 800149a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800149e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	18ca      	adds	r2, r1, r3
 80014a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014ac:	fba3 8903 	umull	r8, r9, r3, r3
 80014b0:	eb02 0309 	add.w	r3, r2, r9
 80014b4:	4699      	mov	r9, r3
 80014b6:	4ba1      	ldr	r3, [pc, #644]	@ (800173c <BME280_compensate_P_int64+0x2d0>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	17da      	asrs	r2, r3, #31
 80014c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014cc:	4603      	mov	r3, r0
 80014ce:	fb03 f209 	mul.w	r2, r3, r9
 80014d2:	460b      	mov	r3, r1
 80014d4:	fb08 f303 	mul.w	r3, r8, r3
 80014d8:	4413      	add	r3, r2
 80014da:	4602      	mov	r2, r0
 80014dc:	fba8 1202 	umull	r1, r2, r8, r2
 80014e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014e4:	460a      	mov	r2, r1
 80014e6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014ee:	4413      	add	r3, r2
 80014f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014f4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80014f8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80014fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001500:	4b8f      	ldr	r3, [pc, #572]	@ (8001740 <BME280_compensate_P_int64+0x2d4>)
 8001502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001506:	b21b      	sxth	r3, r3
 8001508:	17da      	asrs	r2, r3, #31
 800150a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800150e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001512:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001516:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800151a:	462a      	mov	r2, r5
 800151c:	fb02 f203 	mul.w	r2, r2, r3
 8001520:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001524:	4621      	mov	r1, r4
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	441a      	add	r2, r3
 800152c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001530:	4621      	mov	r1, r4
 8001532:	fba3 1301 	umull	r1, r3, r3, r1
 8001536:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800153a:	460b      	mov	r3, r1
 800153c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001544:	18d3      	adds	r3, r2, r3
 8001546:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001556:	462b      	mov	r3, r5
 8001558:	0459      	lsls	r1, r3, #17
 800155a:	4623      	mov	r3, r4
 800155c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001560:	4623      	mov	r3, r4
 8001562:	0458      	lsls	r0, r3, #17
 8001564:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001568:	1814      	adds	r4, r2, r0
 800156a:	643c      	str	r4, [r7, #64]	@ 0x40
 800156c:	414b      	adcs	r3, r1
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001570:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001574:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001578:	4b72      	ldr	r3, [pc, #456]	@ (8001744 <BME280_compensate_P_int64+0x2d8>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	b21b      	sxth	r3, r3
 8001580:	17da      	asrs	r2, r3, #31
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001586:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001596:	00d9      	lsls	r1, r3, #3
 8001598:	2000      	movs	r0, #0
 800159a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800159e:	1814      	adds	r4, r2, r0
 80015a0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80015a2:	414b      	adcs	r3, r1
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80015aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015ae:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b6:	fb03 f102 	mul.w	r1, r3, r2
 80015ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	18ca      	adds	r2, r1, r3
 80015c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015cc:	fba3 1303 	umull	r1, r3, r3, r3
 80015d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015d4:	460b      	mov	r3, r1
 80015d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015de:	18d3      	adds	r3, r2, r3
 80015e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015e4:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <BME280_compensate_P_int64+0x2dc>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	17da      	asrs	r2, r3, #31
 80015ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015f6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015fa:	462b      	mov	r3, r5
 80015fc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001600:	4642      	mov	r2, r8
 8001602:	fb02 f203 	mul.w	r2, r2, r3
 8001606:	464b      	mov	r3, r9
 8001608:	4621      	mov	r1, r4
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	4622      	mov	r2, r4
 8001612:	4641      	mov	r1, r8
 8001614:	fba2 1201 	umull	r1, r2, r2, r1
 8001618:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800161c:	460a      	mov	r2, r1
 800161e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001622:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001626:	4413      	add	r3, r2
 8001628:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001638:	4623      	mov	r3, r4
 800163a:	0a18      	lsrs	r0, r3, #8
 800163c:	462b      	mov	r3, r5
 800163e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001642:	462b      	mov	r3, r5
 8001644:	1219      	asrs	r1, r3, #8
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <BME280_compensate_P_int64+0x2e0>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	b21b      	sxth	r3, r3
 800164e:	17da      	asrs	r2, r3, #31
 8001650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001654:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001658:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800165c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001660:	464a      	mov	r2, r9
 8001662:	fb02 f203 	mul.w	r2, r2, r3
 8001666:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800166a:	4644      	mov	r4, r8
 800166c:	fb04 f303 	mul.w	r3, r4, r3
 8001670:	441a      	add	r2, r3
 8001672:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001676:	4644      	mov	r4, r8
 8001678:	fba3 4304 	umull	r4, r3, r3, r4
 800167c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001680:	4623      	mov	r3, r4
 8001682:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800169c:	464c      	mov	r4, r9
 800169e:	0323      	lsls	r3, r4, #12
 80016a0:	4644      	mov	r4, r8
 80016a2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016a6:	4644      	mov	r4, r8
 80016a8:	0322      	lsls	r2, r4, #12
 80016aa:	1884      	adds	r4, r0, r2
 80016ac:	633c      	str	r4, [r7, #48]	@ 0x30
 80016ae:	eb41 0303 	adc.w	r3, r1, r3
 80016b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80016b8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016c0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80016c4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80016c8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016cc:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <BME280_compensate_P_int64+0x2e4>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016dc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016e0:	462b      	mov	r3, r5
 80016e2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016e6:	4642      	mov	r2, r8
 80016e8:	fb02 f203 	mul.w	r2, r2, r3
 80016ec:	464b      	mov	r3, r9
 80016ee:	4621      	mov	r1, r4
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	4622      	mov	r2, r4
 80016f8:	4641      	mov	r1, r8
 80016fa:	fba2 1201 	umull	r1, r2, r2, r1
 80016fe:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001702:	460a      	mov	r2, r1
 8001704:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001708:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800171e:	4629      	mov	r1, r5
 8001720:	104a      	asrs	r2, r1, #1
 8001722:	4629      	mov	r1, r5
 8001724:	17cb      	asrs	r3, r1, #31
 8001726:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 800172a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800172e:	4313      	orrs	r3, r2
 8001730:	d110      	bne.n	8001754 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001732:	2300      	movs	r3, #0
 8001734:	e154      	b.n	80019e0 <BME280_compensate_P_int64+0x574>
 8001736:	bf00      	nop
 8001738:	20000228 	.word	0x20000228
 800173c:	20000218 	.word	0x20000218
 8001740:	20000216 	.word	0x20000216
 8001744:	20000214 	.word	0x20000214
 8001748:	20000212 	.word	0x20000212
 800174c:	20000210 	.word	0x20000210
 8001750:	20000206 	.word	0x20000206
	}
	p = 1048576-adc_P;
 8001754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001758:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800175c:	17da      	asrs	r2, r3, #31
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001762:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001766:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800176a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800176e:	105b      	asrs	r3, r3, #1
 8001770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001774:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001778:	07db      	lsls	r3, r3, #31
 800177a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800177e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001782:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001786:	4621      	mov	r1, r4
 8001788:	1a89      	subs	r1, r1, r2
 800178a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800178c:	4629      	mov	r1, r5
 800178e:	eb61 0303 	sbc.w	r3, r1, r3
 8001792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001794:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	1891      	adds	r1, r2, r2
 800179e:	6239      	str	r1, [r7, #32]
 80017a0:	415b      	adcs	r3, r3
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017a8:	4621      	mov	r1, r4
 80017aa:	1851      	adds	r1, r2, r1
 80017ac:	61b9      	str	r1, [r7, #24]
 80017ae:	4629      	mov	r1, r5
 80017b0:	414b      	adcs	r3, r1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017c0:	4649      	mov	r1, r9
 80017c2:	018b      	lsls	r3, r1, #6
 80017c4:	4641      	mov	r1, r8
 80017c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ca:	4641      	mov	r1, r8
 80017cc:	018a      	lsls	r2, r1, #6
 80017ce:	4641      	mov	r1, r8
 80017d0:	1889      	adds	r1, r1, r2
 80017d2:	6139      	str	r1, [r7, #16]
 80017d4:	4649      	mov	r1, r9
 80017d6:	eb43 0101 	adc.w	r1, r3, r1
 80017da:	6179      	str	r1, [r7, #20]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017e8:	4649      	mov	r1, r9
 80017ea:	008b      	lsls	r3, r1, #2
 80017ec:	4641      	mov	r1, r8
 80017ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017f2:	4641      	mov	r1, r8
 80017f4:	008a      	lsls	r2, r1, #2
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	4622      	mov	r2, r4
 80017fe:	189b      	adds	r3, r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	460b      	mov	r3, r1
 8001804:	462a      	mov	r2, r5
 8001806:	eb42 0303 	adc.w	r3, r2, r3
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001818:	4649      	mov	r1, r9
 800181a:	008b      	lsls	r3, r1, #2
 800181c:	4641      	mov	r1, r8
 800181e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001822:	4641      	mov	r1, r8
 8001824:	008a      	lsls	r2, r1, #2
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	4603      	mov	r3, r0
 800182c:	4622      	mov	r2, r4
 800182e:	189b      	adds	r3, r3, r2
 8001830:	673b      	str	r3, [r7, #112]	@ 0x70
 8001832:	462b      	mov	r3, r5
 8001834:	460a      	mov	r2, r1
 8001836:	eb42 0303 	adc.w	r3, r2, r3
 800183a:	677b      	str	r3, [r7, #116]	@ 0x74
 800183c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001840:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001844:	f7ff fa00 	bl	8000c48 <__aeabi_ldivmod>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001850:	4b66      	ldr	r3, [pc, #408]	@ (80019ec <BME280_compensate_P_int64+0x580>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	b21b      	sxth	r3, r3
 8001858:	17da      	asrs	r2, r3, #31
 800185a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800185c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800185e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	0b50      	lsrs	r0, r2, #13
 800186c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001870:	1359      	asrs	r1, r3, #13
 8001872:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001876:	462b      	mov	r3, r5
 8001878:	fb00 f203 	mul.w	r2, r0, r3
 800187c:	4623      	mov	r3, r4
 800187e:	fb03 f301 	mul.w	r3, r3, r1
 8001882:	4413      	add	r3, r2
 8001884:	4622      	mov	r2, r4
 8001886:	fba2 1200 	umull	r1, r2, r2, r0
 800188a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800188e:	460a      	mov	r2, r1
 8001890:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001894:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001898:	4413      	add	r3, r2
 800189a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800189e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0b50      	lsrs	r0, r2, #13
 80018ac:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018b0:	1359      	asrs	r1, r3, #13
 80018b2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80018b6:	462b      	mov	r3, r5
 80018b8:	fb00 f203 	mul.w	r2, r0, r3
 80018bc:	4623      	mov	r3, r4
 80018be:	fb03 f301 	mul.w	r3, r3, r1
 80018c2:	4413      	add	r3, r2
 80018c4:	4622      	mov	r2, r4
 80018c6:	fba2 1200 	umull	r1, r2, r2, r0
 80018ca:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018ce:	460a      	mov	r2, r1
 80018d0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018d4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018ea:	4621      	mov	r1, r4
 80018ec:	0e4a      	lsrs	r2, r1, #25
 80018ee:	4629      	mov	r1, r5
 80018f0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018f4:	4629      	mov	r1, r5
 80018f6:	164b      	asrs	r3, r1, #25
 80018f8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80018fc:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <BME280_compensate_P_int64+0x584>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	b21b      	sxth	r3, r3
 8001904:	17da      	asrs	r2, r3, #31
 8001906:	663b      	str	r3, [r7, #96]	@ 0x60
 8001908:	667a      	str	r2, [r7, #100]	@ 0x64
 800190a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800190e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001912:	462a      	mov	r2, r5
 8001914:	fb02 f203 	mul.w	r2, r2, r3
 8001918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191c:	4621      	mov	r1, r4
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001928:	4621      	mov	r1, r4
 800192a:	fba2 1201 	umull	r1, r2, r2, r1
 800192e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001932:	460a      	mov	r2, r1
 8001934:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001938:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800193c:	4413      	add	r3, r2
 800193e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800194e:	4621      	mov	r1, r4
 8001950:	0cca      	lsrs	r2, r1, #19
 8001952:	4629      	mov	r1, r5
 8001954:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001958:	4629      	mov	r1, r5
 800195a:	14cb      	asrs	r3, r1, #19
 800195c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001960:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001964:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001968:	1884      	adds	r4, r0, r2
 800196a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800196c:	eb41 0303 	adc.w	r3, r1, r3
 8001970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001972:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001976:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800197a:	4621      	mov	r1, r4
 800197c:	1889      	adds	r1, r1, r2
 800197e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001980:	4629      	mov	r1, r5
 8001982:	eb43 0101 	adc.w	r1, r3, r1
 8001986:	6579      	str	r1, [r7, #84]	@ 0x54
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001994:	4623      	mov	r3, r4
 8001996:	0a18      	lsrs	r0, r3, #8
 8001998:	462b      	mov	r3, r5
 800199a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800199e:	462b      	mov	r3, r5
 80019a0:	1219      	asrs	r1, r3, #8
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <BME280_compensate_P_int64+0x588>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	17da      	asrs	r2, r3, #31
 80019ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80019bc:	464c      	mov	r4, r9
 80019be:	0123      	lsls	r3, r4, #4
 80019c0:	4644      	mov	r4, r8
 80019c2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019c6:	4644      	mov	r4, r8
 80019c8:	0122      	lsls	r2, r4, #4
 80019ca:	1884      	adds	r4, r0, r2
 80019cc:	603c      	str	r4, [r7, #0]
 80019ce:	eb41 0303 	adc.w	r3, r1, r3
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019d8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80019dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80019e6:	46bd      	mov	sp, r7
 80019e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ec:	2000021e 	.word	0x2000021e
 80019f0:	2000021c 	.word	0x2000021c
 80019f4:	2000021a 	.word	0x2000021a

080019f8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a00:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <bme280_compensate_H_int32+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001a08:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	039a      	lsls	r2, r3, #14
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <bme280_compensate_H_int32+0xc0>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	051b      	lsls	r3, r3, #20
 8001a16:	1ad2      	subs	r2, r2, r3
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <bme280_compensate_H_int32+0xc4>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a28:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a2c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a2e:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <bme280_compensate_H_int32+0xc8>)
 8001a30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a34:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a3c:	1292      	asrs	r2, r2, #10
 8001a3e:	4921      	ldr	r1, [pc, #132]	@ (8001ac4 <bme280_compensate_H_int32+0xcc>)
 8001a40:	8809      	ldrh	r1, [r1, #0]
 8001a42:	4608      	mov	r0, r1
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	fb00 f101 	mul.w	r1, r0, r1
 8001a4a:	12c9      	asrs	r1, r1, #11
 8001a4c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001a50:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a54:	1292      	asrs	r2, r2, #10
 8001a56:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001a5a:	491b      	ldr	r1, [pc, #108]	@ (8001ac8 <bme280_compensate_H_int32+0xd0>)
 8001a5c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a60:	fb01 f202 	mul.w	r2, r1, r2
 8001a64:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001a68:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	13db      	asrs	r3, r3, #15
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	13d2      	asrs	r2, r2, #15
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a7e:	4a13      	ldr	r2, [pc, #76]	@ (8001acc <bme280_compensate_H_int32+0xd4>)
 8001a80:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001a86:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a94:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a9c:	bfa8      	it	ge
 8001a9e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001aa2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	131b      	asrs	r3, r3, #12
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	20000228 	.word	0x20000228
 8001ab8:	20000222 	.word	0x20000222
 8001abc:	20000224 	.word	0x20000224
 8001ac0:	20000226 	.word	0x20000226
 8001ac4:	2000020a 	.word	0x2000020a
 8001ac8:	20000220 	.word	0x20000220
 8001acc:	20000208 	.word	0x20000208

08001ad0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ad4:	f7ff fc38 	bl	8001348 <BMEReadRaw>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d163      	bne.n	8001ba6 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001ade:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <BME280_Measure+0x104>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ae6:	d104      	bne.n	8001af2 <BME280_Measure+0x22>
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <BME280_Measure+0x108>)
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e016      	b.n	8001b20 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <BME280_Measure+0x104>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fc76 	bl	80013e8 <BME280_compensate_T_int32>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd10 	bl	8000524 <__aeabi_i2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b34      	ldr	r3, [pc, #208]	@ (8001bdc <BME280_Measure+0x10c>)
 8001b0a:	f7fe fe9f 	bl	800084c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f847 	bl	8000ba8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b1e:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001b20:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <BME280_Measure+0x110>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b28:	d104      	bne.n	8001b34 <BME280_Measure+0x64>
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <BME280_Measure+0x114>)
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e016      	b.n	8001b62 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b34:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <BME280_Measure+0x110>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fc97 	bl	800146c <BME280_compensate_P_int64>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcdf 	bl	8000504 <__aeabi_ui2d>
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <BME280_Measure+0x118>)
 8001b4c:	f7fe fe7e 	bl	800084c <__aeabi_ddiv>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff f826 	bl	8000ba8 <__aeabi_d2f>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a21      	ldr	r2, [pc, #132]	@ (8001be4 <BME280_Measure+0x114>)
 8001b60:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <BME280_Measure+0x11c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b6a:	d104      	bne.n	8001b76 <BME280_Measure+0xa6>
 8001b6c:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <BME280_Measure+0x120>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e023      	b.n	8001bbe <BME280_Measure+0xee>
		  else
		  {
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <BME280_Measure+0x11c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff3c 	bl	80019f8 <bme280_compensate_H_int32>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcbe 	bl	8000504 <__aeabi_ui2d>
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <BME280_Measure+0x124>)
 8001b8e:	f7fe fe5d 	bl	800084c <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff f805 	bl	8000ba8 <__aeabi_d2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a13      	ldr	r2, [pc, #76]	@ (8001bf0 <BME280_Measure+0x120>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e00b      	b.n	8001bbe <BME280_Measure+0xee>


	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <BME280_Measure+0x120>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <BME280_Measure+0x120>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001be4 <BME280_Measure+0x114>)
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <BME280_Measure+0x114>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bbc:	6013      	str	r3, [r2, #0]
	}
	data.temperature = Temperature;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <BME280_Measure+0x128>)
 8001bc4:	6013      	str	r3, [r2, #0]
	data.humidity = Humidity;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <BME280_Measure+0x120>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <BME280_Measure+0x128>)
 8001bcc:	6053      	str	r3, [r2, #4]



}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200001f8 	.word	0x200001f8
 8001bd8:	20000438 	.word	0x20000438
 8001bdc:	40590000 	.word	0x40590000
 8001be0:	200001fc 	.word	0x200001fc
 8001be4:	2000043c 	.word	0x2000043c
 8001be8:	40700000 	.word	0x40700000
 8001bec:	20000200 	.word	0x20000200
 8001bf0:	20000440 	.word	0x20000440
 8001bf4:	40900000 	.word	0x40900000
 8001bf8:	20000444 	.word	0x20000444

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c02:	f001 fb99 	bl	8003338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c06:	f000 f8d3 	bl	8001db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0a:	f000 fb1b 	bl	8002244 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c0e:	f000 faf9 	bl	8002204 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c12:	f000 facd 	bl	80021b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001c16:	f000 fa55 	bl	80020c4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001c1a:	f000 f933 	bl	8001e84 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001c1e:	f000 f983 	bl	8001f28 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001c22:	f000 f9af 	bl	8001f84 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001c26:	2304      	movs	r3, #4
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2303      	movs	r3, #3
 8001c30:	2201      	movs	r2, #1
 8001c32:	2105      	movs	r1, #5
 8001c34:	2002      	movs	r0, #2
 8001c36:	f7ff fab1 	bl	800119c <BME280_Config>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c3a:	f006 fc41 	bl	80084c0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of xUARTMutex */
  xUARTMutexHandle = osMutexNew(&xUARTMutex_attributes);
 8001c3e:	4839      	ldr	r0, [pc, #228]	@ (8001d24 <main+0x128>)
 8001c40:	f006 fd35 	bl	80086ae <osMutexNew>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a38      	ldr	r2, [pc, #224]	@ (8001d28 <main+0x12c>)
 8001c48:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSpeakerSem */
  xSpeakerSemHandle = osSemaphoreNew(1, 0, &xSpeakerSem_attributes);
 8001c4a:	4a38      	ldr	r2, [pc, #224]	@ (8001d2c <main+0x130>)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f006 fe3b 	bl	80088ca <osSemaphoreNew>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4a36      	ldr	r2, [pc, #216]	@ (8001d30 <main+0x134>)
 8001c58:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue_r0 */
  queue_r0Handle = osMessageQueueNew (5, sizeof(WeatherData_t), &queue_r0_attributes);
 8001c5a:	4a36      	ldr	r2, [pc, #216]	@ (8001d34 <main+0x138>)
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	2005      	movs	r0, #5
 8001c60:	f006 ff52 	bl	8008b08 <osMessageQueueNew>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4a34      	ldr	r2, [pc, #208]	@ (8001d38 <main+0x13c>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* creation of queue_pr */
  queue_prHandle = osMessageQueueNew (5, sizeof(float), &queue_pr_attributes);
 8001c6a:	4a34      	ldr	r2, [pc, #208]	@ (8001d3c <main+0x140>)
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	2005      	movs	r0, #5
 8001c70:	f006 ff4a 	bl	8008b08 <osMessageQueueNew>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4a32      	ldr	r2, [pc, #200]	@ (8001d40 <main+0x144>)
 8001c78:	6013      	str	r3, [r2, #0]

  /* creation of queue_co */
  queue_coHandle = osMessageQueueNew (5, sizeof(float), &queue_co_attributes);
 8001c7a:	4a32      	ldr	r2, [pc, #200]	@ (8001d44 <main+0x148>)
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	2005      	movs	r0, #5
 8001c80:	f006 ff42 	bl	8008b08 <osMessageQueueNew>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4a30      	ldr	r2, [pc, #192]	@ (8001d48 <main+0x14c>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* creation of uartCommandQueue */
  uartCommandQueueHandle = osMessageQueueNew (3, sizeof(uint8_t), &uartCommandQueue_attributes);
 8001c8a:	4a30      	ldr	r2, [pc, #192]	@ (8001d4c <main+0x150>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2003      	movs	r0, #3
 8001c90:	f006 ff3a 	bl	8008b08 <osMessageQueueNew>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a2e      	ldr	r2, [pc, #184]	@ (8001d50 <main+0x154>)
 8001c98:	6013      	str	r3, [r2, #0]

  /* creation of queue_watchdog */
  queue_watchdogHandle = osMessageQueueNew (4, sizeof(WatchdogError_t), &queue_watchdog_attributes);
 8001c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001d54 <main+0x158>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2004      	movs	r0, #4
 8001ca0:	f006 ff32 	bl	8008b08 <osMessageQueueNew>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d58 <main+0x15c>)
 8001ca8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CoMeasureTask */
  CoMeasureTaskHandle = osThreadNew(co_measure_task, NULL, &CoMeasureTask_attributes);
 8001caa:	4a2c      	ldr	r2, [pc, #176]	@ (8001d5c <main+0x160>)
 8001cac:	2100      	movs	r1, #0
 8001cae:	482c      	ldr	r0, [pc, #176]	@ (8001d60 <main+0x164>)
 8001cb0:	f006 fc50 	bl	8008554 <osThreadNew>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8001d64 <main+0x168>)
 8001cb8:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(weather_task, NULL, &WeatherTask_attributes);
 8001cba:	4a2b      	ldr	r2, [pc, #172]	@ (8001d68 <main+0x16c>)
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	482b      	ldr	r0, [pc, #172]	@ (8001d6c <main+0x170>)
 8001cc0:	f006 fc48 	bl	8008554 <osThreadNew>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d70 <main+0x174>)
 8001cc8:	6013      	str	r3, [r2, #0]

  /* creation of Speaker */
  SpeakerHandle = osThreadNew(speaker_alarm_task, NULL, &Speaker_attributes);
 8001cca:	4a2a      	ldr	r2, [pc, #168]	@ (8001d74 <main+0x178>)
 8001ccc:	2100      	movs	r1, #0
 8001cce:	482a      	ldr	r0, [pc, #168]	@ (8001d78 <main+0x17c>)
 8001cd0:	f006 fc40 	bl	8008554 <osThreadNew>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a29      	ldr	r2, [pc, #164]	@ (8001d7c <main+0x180>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* creation of FanTask */
  FanTaskHandle = osThreadNew(fan_task, NULL, &FanTask_attributes);
 8001cda:	4a29      	ldr	r2, [pc, #164]	@ (8001d80 <main+0x184>)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4829      	ldr	r0, [pc, #164]	@ (8001d84 <main+0x188>)
 8001ce0:	f006 fc38 	bl	8008554 <osThreadNew>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4a28      	ldr	r2, [pc, #160]	@ (8001d88 <main+0x18c>)
 8001ce8:	6013      	str	r3, [r2, #0]

  /* creation of UartCommand */
  UartCommandHandle = osThreadNew(uart_command_task, NULL, &UartCommand_attributes);
 8001cea:	4a28      	ldr	r2, [pc, #160]	@ (8001d8c <main+0x190>)
 8001cec:	2100      	movs	r1, #0
 8001cee:	4828      	ldr	r0, [pc, #160]	@ (8001d90 <main+0x194>)
 8001cf0:	f006 fc30 	bl	8008554 <osThreadNew>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a27      	ldr	r2, [pc, #156]	@ (8001d94 <main+0x198>)
 8001cf8:	6013      	str	r3, [r2, #0]

  /* creation of UartDisplay */
  UartDisplayHandle = osThreadNew(uart_display_task, NULL, &UartDisplay_attributes);
 8001cfa:	4a27      	ldr	r2, [pc, #156]	@ (8001d98 <main+0x19c>)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4827      	ldr	r0, [pc, #156]	@ (8001d9c <main+0x1a0>)
 8001d00:	f006 fc28 	bl	8008554 <osThreadNew>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a26      	ldr	r2, [pc, #152]	@ (8001da0 <main+0x1a4>)
 8001d08:	6013      	str	r3, [r2, #0]

  /* creation of WatchdogTask */
  WatchdogTaskHandle = osThreadNew(watch_dog_task, NULL, &WatchdogTask_attributes);
 8001d0a:	4a26      	ldr	r2, [pc, #152]	@ (8001da4 <main+0x1a8>)
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4826      	ldr	r0, [pc, #152]	@ (8001da8 <main+0x1ac>)
 8001d10:	f006 fc20 	bl	8008554 <osThreadNew>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a25      	ldr	r2, [pc, #148]	@ (8001dac <main+0x1b0>)
 8001d18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d1a:	f006 fbf5 	bl	8008508 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d1e:	bf00      	nop
 8001d20:	e7fd      	b.n	8001d1e <main+0x122>
 8001d22:	bf00      	nop
 8001d24:	0800fbb4 	.word	0x0800fbb4
 8001d28:	20000430 	.word	0x20000430
 8001d2c:	0800fbc4 	.word	0x0800fbc4
 8001d30:	20000434 	.word	0x20000434
 8001d34:	0800fb3c 	.word	0x0800fb3c
 8001d38:	2000041c 	.word	0x2000041c
 8001d3c:	0800fb54 	.word	0x0800fb54
 8001d40:	20000420 	.word	0x20000420
 8001d44:	0800fb6c 	.word	0x0800fb6c
 8001d48:	20000424 	.word	0x20000424
 8001d4c:	0800fb84 	.word	0x0800fb84
 8001d50:	20000428 	.word	0x20000428
 8001d54:	0800fb9c 	.word	0x0800fb9c
 8001d58:	2000042c 	.word	0x2000042c
 8001d5c:	0800fa40 	.word	0x0800fa40
 8001d60:	0800247d 	.word	0x0800247d
 8001d64:	20000400 	.word	0x20000400
 8001d68:	0800fa64 	.word	0x0800fa64
 8001d6c:	0800270d 	.word	0x0800270d
 8001d70:	20000404 	.word	0x20000404
 8001d74:	0800fa88 	.word	0x0800fa88
 8001d78:	08002789 	.word	0x08002789
 8001d7c:	20000408 	.word	0x20000408
 8001d80:	0800faac 	.word	0x0800faac
 8001d84:	080027b1 	.word	0x080027b1
 8001d88:	2000040c 	.word	0x2000040c
 8001d8c:	0800fad0 	.word	0x0800fad0
 8001d90:	08002861 	.word	0x08002861
 8001d94:	20000410 	.word	0x20000410
 8001d98:	0800faf4 	.word	0x0800faf4
 8001d9c:	080028f5 	.word	0x080028f5
 8001da0:	20000414 	.word	0x20000414
 8001da4:	0800fb18 	.word	0x0800fb18
 8001da8:	08002a91 	.word	0x08002a91
 8001dac:	20000418 	.word	0x20000418

08001db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b094      	sub	sp, #80	@ 0x50
 8001db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db6:	f107 0320 	add.w	r3, r7, #32
 8001dba:	2230      	movs	r2, #48	@ 0x30
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00b f883 	bl	800ceca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <SystemClock_Config+0xcc>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	4a27      	ldr	r2, [pc, #156]	@ (8001e7c <SystemClock_Config+0xcc>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de4:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <SystemClock_Config+0xcc>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <SystemClock_Config+0xd0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <SystemClock_Config+0xd0>)
 8001dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <SystemClock_Config+0xd0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e14:	2310      	movs	r3, #16
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e20:	2308      	movs	r3, #8
 8001e22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e24:	2364      	movs	r3, #100	@ 0x64
 8001e26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e30:	f107 0320 	add.w	r3, r7, #32
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fd1d 	bl	8005874 <HAL_RCC_OscConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e40:	f000 fec8 	bl	8002bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e44:	230f      	movs	r3, #15
 8001e46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e50:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2103      	movs	r1, #3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 ff7e 	bl	8005d64 <HAL_RCC_ClockConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e6e:	f000 feb1 	bl	8002bd4 <Error_Handler>
  }
}
 8001e72:	bf00      	nop
 8001e74:	3750      	adds	r7, #80	@ 0x50
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000

08001e84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e96:	4b21      	ldr	r3, [pc, #132]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001e98:	4a21      	ldr	r2, [pc, #132]	@ (8001f20 <MX_ADC1_Init+0x9c>)
 8001e9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eae:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eb4:	4b19      	ldr	r3, [pc, #100]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ebc:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec2:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001ec4:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <MX_ADC1_Init+0xa0>)
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ee2:	480e      	ldr	r0, [pc, #56]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001ee4:	f001 fa8e 	bl	8003404 <HAL_ADC_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001eee:	f000 fe71 	bl	8002bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001ef2:	230f      	movs	r3, #15
 8001ef4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <MX_ADC1_Init+0x98>)
 8001f04:	f001 fc60 	bl	80037c8 <HAL_ADC_ConfigChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f0e:	f000 fe61 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000022c 	.word	0x2000022c
 8001f20:	40012000 	.word	0x40012000
 8001f24:	0f000001 	.word	0x0f000001

08001f28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f2e:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <MX_I2C3_Init+0x54>)
 8001f30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f32:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f34:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <MX_I2C3_Init+0x58>)
 8001f36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f4a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f58:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f64:	4804      	ldr	r0, [pc, #16]	@ (8001f78 <MX_I2C3_Init+0x50>)
 8001f66:	f002 fc61 	bl	800482c <HAL_I2C_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f70:	f000 fe30 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200002d4 	.word	0x200002d4
 8001f7c:	40005c00 	.word	0x40005c00
 8001f80:	000186a0 	.word	0x000186a0

08001f84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b096      	sub	sp, #88	@ 0x58
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2220      	movs	r2, #32
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f00a ff84 	bl	800ceca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fc4:	4a3e      	ldr	r2, [pc, #248]	@ (80020c0 <MX_TIM1_Init+0x13c>)
 8001fc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fca:	2253      	movs	r2, #83	@ 0x53
 8001fcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fce:	4b3b      	ldr	r3, [pc, #236]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001fd4:	4b39      	ldr	r3, [pc, #228]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fd6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001fda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fdc:	4b37      	ldr	r3, [pc, #220]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fe2:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fee:	4833      	ldr	r0, [pc, #204]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001ff0:	f004 f8ca 	bl	8006188 <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ffa:	f000 fdeb 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002002:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002004:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002008:	4619      	mov	r1, r3
 800200a:	482c      	ldr	r0, [pc, #176]	@ (80020bc <MX_TIM1_Init+0x138>)
 800200c:	f004 fcc0 	bl	8006990 <HAL_TIM_ConfigClockSource>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002016:	f000 fddd 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800201a:	4828      	ldr	r0, [pc, #160]	@ (80020bc <MX_TIM1_Init+0x138>)
 800201c:	f004 f974 	bl	8006308 <HAL_TIM_PWM_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002026:	f000 fdd5 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002032:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002036:	4619      	mov	r1, r3
 8002038:	4820      	ldr	r0, [pc, #128]	@ (80020bc <MX_TIM1_Init+0x138>)
 800203a:	f005 f8af 	bl	800719c <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002044:	f000 fdc6 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002048:	2360      	movs	r3, #96	@ 0x60
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002054:	2300      	movs	r3, #0
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002068:	2208      	movs	r2, #8
 800206a:	4619      	mov	r1, r3
 800206c:	4813      	ldr	r0, [pc, #76]	@ (80020bc <MX_TIM1_Init+0x138>)
 800206e:	f004 fbcd 	bl	800680c <HAL_TIM_PWM_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002078:	f000 fdac 	bl	8002bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002090:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002094:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4807      	ldr	r0, [pc, #28]	@ (80020bc <MX_TIM1_Init+0x138>)
 80020a0:	f005 f8f8 	bl	8007294 <HAL_TIMEx_ConfigBreakDeadTime>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80020aa:	f000 fd93 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020ae:	4803      	ldr	r0, [pc, #12]	@ (80020bc <MX_TIM1_Init+0x138>)
 80020b0:	f000 feda 	bl	8002e68 <HAL_TIM_MspPostInit>

}
 80020b4:	bf00      	nop
 80020b6:	3758      	adds	r7, #88	@ 0x58
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000328 	.word	0x20000328
 80020c0:	40010000 	.word	0x40010000

080020c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	@ 0x38
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d8:	f107 0320 	add.w	r3, r7, #32
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f4:	4b2d      	ldr	r3, [pc, #180]	@ (80021ac <MX_TIM2_Init+0xe8>)
 80020f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80020fc:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <MX_TIM2_Init+0xe8>)
 80020fe:	2253      	movs	r2, #83	@ 0x53
 8002100:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002102:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <MX_TIM2_Init+0xe8>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8002108:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <MX_TIM2_Init+0xe8>)
 800210a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800210e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002110:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <MX_TIM2_Init+0xe8>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <MX_TIM2_Init+0xe8>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800211c:	4823      	ldr	r0, [pc, #140]	@ (80021ac <MX_TIM2_Init+0xe8>)
 800211e:	f004 f833 	bl	8006188 <HAL_TIM_Base_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002128:	f000 fd54 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800212c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002136:	4619      	mov	r1, r3
 8002138:	481c      	ldr	r0, [pc, #112]	@ (80021ac <MX_TIM2_Init+0xe8>)
 800213a:	f004 fc29 	bl	8006990 <HAL_TIM_ConfigClockSource>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002144:	f000 fd46 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002148:	4818      	ldr	r0, [pc, #96]	@ (80021ac <MX_TIM2_Init+0xe8>)
 800214a:	f004 f8dd 	bl	8006308 <HAL_TIM_PWM_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002154:	f000 fd3e 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002160:	f107 0320 	add.w	r3, r7, #32
 8002164:	4619      	mov	r1, r3
 8002166:	4811      	ldr	r0, [pc, #68]	@ (80021ac <MX_TIM2_Init+0xe8>)
 8002168:	f005 f818 	bl	800719c <HAL_TIMEx_MasterConfigSynchronization>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002172:	f000 fd2f 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002176:	2360      	movs	r3, #96	@ 0x60
 8002178:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2204      	movs	r2, #4
 800218a:	4619      	mov	r1, r3
 800218c:	4807      	ldr	r0, [pc, #28]	@ (80021ac <MX_TIM2_Init+0xe8>)
 800218e:	f004 fb3d 	bl	800680c <HAL_TIM_PWM_ConfigChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002198:	f000 fd1c 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800219c:	4803      	ldr	r0, [pc, #12]	@ (80021ac <MX_TIM2_Init+0xe8>)
 800219e:	f000 fe63 	bl	8002e68 <HAL_TIM_MspPostInit>

}
 80021a2:	bf00      	nop
 80021a4:	3738      	adds	r7, #56	@ 0x38
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000370 	.word	0x20000370

080021b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <MX_USART2_UART_Init+0x50>)
 80021b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021d6:	220c      	movs	r2, #12
 80021d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021e8:	f005 f8ba 	bl	8007360 <HAL_UART_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021f2:	f000 fcef 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200003b8 	.word	0x200003b8
 8002200:	40004400 	.word	0x40004400

08002204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <MX_DMA_Init+0x3c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <MX_DMA_Init+0x3c>)
 8002214:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <MX_DMA_Init+0x3c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2105      	movs	r1, #5
 800222a:	2038      	movs	r0, #56	@ 0x38
 800222c:	f001 fda2 	bl	8003d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002230:	2038      	movs	r0, #56	@ 0x38
 8002232:	f001 fdbb 	bl	8003dac <HAL_NVIC_EnableIRQ>

}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800

08002244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b39      	ldr	r3, [pc, #228]	@ (8002344 <MX_GPIO_Init+0x100>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a38      	ldr	r2, [pc, #224]	@ (8002344 <MX_GPIO_Init+0x100>)
 8002264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b36      	ldr	r3, [pc, #216]	@ (8002344 <MX_GPIO_Init+0x100>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <MX_GPIO_Init+0x100>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <MX_GPIO_Init+0x100>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b2f      	ldr	r3, [pc, #188]	@ (8002344 <MX_GPIO_Init+0x100>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b2b      	ldr	r3, [pc, #172]	@ (8002344 <MX_GPIO_Init+0x100>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a2a      	ldr	r2, [pc, #168]	@ (8002344 <MX_GPIO_Init+0x100>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b28      	ldr	r3, [pc, #160]	@ (8002344 <MX_GPIO_Init+0x100>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <MX_GPIO_Init+0x100>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a23      	ldr	r2, [pc, #140]	@ (8002344 <MX_GPIO_Init+0x100>)
 80022b8:	f043 0310 	orr.w	r3, r3, #16
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <MX_GPIO_Init+0x100>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <MX_GPIO_Init+0x100>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002344 <MX_GPIO_Init+0x100>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022da:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <MX_GPIO_Init+0x100>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 41a2 	mov.w	r1, #20736	@ 0x5100
 80022ec:	4816      	ldr	r0, [pc, #88]	@ (8002348 <MX_GPIO_Init+0x104>)
 80022ee:	f002 fa83 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80022f8:	4814      	ldr	r0, [pc, #80]	@ (800234c <MX_GPIO_Init+0x108>)
 80022fa:	f002 fa7d 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE12 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_14;
 80022fe:	f44f 43a2 	mov.w	r3, #20736	@ 0x5100
 8002302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002304:	2301      	movs	r3, #1
 8002306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	480c      	ldr	r0, [pc, #48]	@ (8002348 <MX_GPIO_Init+0x104>)
 8002318:	f002 f8d2 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800231c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002322:	2301      	movs	r3, #1
 8002324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	@ (800234c <MX_GPIO_Init+0x108>)
 8002336:	f002 f8c3 	bl	80044c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	@ 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40021000 	.word	0x40021000
 800234c:	40020c00 	.word	0x40020c00

08002350 <Speaker_Beep>:

/* USER CODE BEGIN 4 */
void Speaker_Beep(uint32_t duration_ms)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
    htim2.Instance->CCR2 = 470;
 8002358:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <Speaker_Beep+0x44>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8002360:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002362:	2104      	movs	r1, #4
 8002364:	480b      	ldr	r0, [pc, #44]	@ (8002394 <Speaker_Beep+0x44>)
 8002366:	f004 f829 	bl	80063bc <HAL_TIM_PWM_Start>
    osDelay(pdMS_TO_TICKS(duration_ms));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	4a08      	ldr	r2, [pc, #32]	@ (8002398 <Speaker_Beep+0x48>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	4618      	mov	r0, r3
 800237e:	f006 f97b 	bl	8008678 <osDelay>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002382:	2104      	movs	r1, #4
 8002384:	4803      	ldr	r0, [pc, #12]	@ (8002394 <Speaker_Beep+0x44>)
 8002386:	f004 f8e1 	bl	800654c <HAL_TIM_PWM_Stop>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000370 	.word	0x20000370
 8002398:	10624dd3 	.word	0x10624dd3

0800239c <fan_rotating>:

void fan_rotating(uint32_t duration_ms)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_GPIO_Pin, GPIO_PIN_RESET);
 80023a4:	2200      	movs	r2, #0
 80023a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023aa:	4816      	ldr	r0, [pc, #88]	@ (8002404 <fan_rotating+0x68>)
 80023ac:	f002 fa24 	bl	80047f8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 19000);
 80023b0:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <fan_rotating+0x6c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f644 2238 	movw	r2, #19000	@ 0x4a38
 80023b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	osMutexAcquire(xUARTMutexHandle, osWaitForever);
 80023ba:	4b14      	ldr	r3, [pc, #80]	@ (800240c <fan_rotating+0x70>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f04f 31ff 	mov.w	r1, #4294967295
 80023c2:	4618      	mov	r0, r3
 80023c4:	f006 f9f9 	bl	80087ba <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)"F\r\n", 3, 100);
 80023c8:	2364      	movs	r3, #100	@ 0x64
 80023ca:	2203      	movs	r2, #3
 80023cc:	4910      	ldr	r1, [pc, #64]	@ (8002410 <fan_rotating+0x74>)
 80023ce:	4811      	ldr	r0, [pc, #68]	@ (8002414 <fan_rotating+0x78>)
 80023d0:	f005 f816 	bl	8007400 <HAL_UART_Transmit>
	osMutexRelease(xUARTMutexHandle);
 80023d4:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <fan_rotating+0x70>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f006 fa39 	bl	8008850 <osMutexRelease>
    osDelay(pdMS_TO_TICKS(duration_ms));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002418 <fan_rotating+0x7c>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	099b      	lsrs	r3, r3, #6
 80023f0:	4618      	mov	r0, r3
 80023f2:	f006 f941 	bl	8008678 <osDelay>
	fan_stop();
 80023f6:	f000 f811 	bl	800241c <fan_stop>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	20000328 	.word	0x20000328
 800240c:	20000430 	.word	0x20000430
 8002410:	0800f96c 	.word	0x0800f96c
 8002414:	200003b8 	.word	0x200003b8
 8002418:	10624dd3 	.word	0x10624dd3

0800241c <fan_stop>:

void fan_stop(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <fan_stop+0x18>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2200      	movs	r2, #0
 8002426:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000328 	.word	0x20000328

08002438 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a09      	ldr	r2, [pc, #36]	@ (800246c <HAL_UART_RxCpltCallback+0x34>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10b      	bne.n	8002462 <HAL_UART_RxCpltCallback+0x2a>
        osMessageQueuePut(uartCommandQueueHandle, &rx_buff, 0, 0);
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_UART_RxCpltCallback+0x38>)
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	2300      	movs	r3, #0
 8002450:	2200      	movs	r2, #0
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <HAL_UART_RxCpltCallback+0x3c>)
 8002454:	f006 fbcc 	bl	8008bf0 <osMessageQueuePut>
        HAL_UART_Receive_IT(&huart2, &rx_buff, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	4906      	ldr	r1, [pc, #24]	@ (8002474 <HAL_UART_RxCpltCallback+0x3c>)
 800245c:	4806      	ldr	r0, [pc, #24]	@ (8002478 <HAL_UART_RxCpltCallback+0x40>)
 800245e:	f005 f85a 	bl	8007516 <HAL_UART_Receive_IT>
    }
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40004400 	.word	0x40004400
 8002470:	20000428 	.word	0x20000428
 8002474:	2000044c 	.word	0x2000044c
 8002478:	200003b8 	.word	0x200003b8

0800247c <co_measure_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_co_measure_task */
void co_measure_task(void *argument)
{
 800247c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002480:	b0a6      	sub	sp, #152	@ 0x98
 8002482:	af06      	add	r7, sp, #24
 8002484:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t adc_value;
	const float Vcc = 5.0f;
 8002486:	4b8f      	ldr	r3, [pc, #572]	@ (80026c4 <co_measure_task+0x248>)
 8002488:	66bb      	str	r3, [r7, #104]	@ 0x68
	const float RL = 10000.0f;
 800248a:	4b8f      	ldr	r3, [pc, #572]	@ (80026c8 <co_measure_task+0x24c>)
 800248c:	667b      	str	r3, [r7, #100]	@ 0x64
	WeatherData_t latestWeather = { .temperature = 25.0f, .humidity = 52.0f };
 800248e:	4a8f      	ldr	r2, [pc, #572]	@ (80026cc <co_measure_task+0x250>)
 8002490:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002498:	e883 0003 	stmia.w	r3, {r0, r1}
	// Kalibracija R0 (izvodi se jednom na početku)
//	osDelay(pdMS_TO_TICKS(1000));
	float R0_i = 0;
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	67bb      	str	r3, [r7, #120]	@ 0x78
	float Vout;
	float Rs, T, H;
	for(int i=0; i<10; i++){
 80024a2:	2300      	movs	r3, #0
 80024a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024a6:	e05f      	b.n	8002568 <co_measure_task+0xec>
		HAL_ADC_Start(&hadc1);
 80024a8:	4889      	ldr	r0, [pc, #548]	@ (80026d0 <co_measure_task+0x254>)
 80024aa:	f000 ffef 	bl	800348c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80024ae:	2164      	movs	r1, #100	@ 0x64
 80024b0:	4887      	ldr	r0, [pc, #540]	@ (80026d0 <co_measure_task+0x254>)
 80024b2:	f001 f8f0 	bl	8003696 <HAL_ADC_PollForConversion>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <co_measure_task+0x48>
			adc_value = HAL_ADC_GetValue(&hadc1);
 80024bc:	4884      	ldr	r0, [pc, #528]	@ (80026d0 <co_measure_task+0x254>)
 80024be:	f001 f975 	bl	80037ac <HAL_ADC_GetValue>
 80024c2:	67f8      	str	r0, [r7, #124]	@ 0x7c
		}
		HAL_ADC_Stop(&hadc1);
 80024c4:	4882      	ldr	r0, [pc, #520]	@ (80026d0 <co_measure_task+0x254>)
 80024c6:	f001 f8b3 	bl	8003630 <HAL_ADC_Stop>

		Vout = (adc_value * Vcc) / 4095.0f;
 80024ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80024d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024dc:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80026d4 <co_measure_task+0x258>
 80024e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024e4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		Rs = ((Vcc - Vout) * RL) / Vout;
 80024e8:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80024ec:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80024f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024f4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80024f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80024fc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002504:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

		osMessageQueueGet(queue_r0Handle, &latestWeather, NULL, osWaitForever);
 8002508:	4b73      	ldr	r3, [pc, #460]	@ (80026d8 <co_measure_task+0x25c>)
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 8002514:	2200      	movs	r2, #0
 8002516:	f006 fbcb 	bl	8008cb0 <osMessageQueueGet>
		T = latestWeather.temperature;
 800251a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800251c:	677b      	str	r3, [r7, #116]	@ 0x74
		H = latestWeather.humidity;
 800251e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002520:	673b      	str	r3, [r7, #112]	@ 0x70
		float R0 = Rs / (-0.0122f * T - 0.00609f * H + 1.7086f);
 8002522:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002526:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80026dc <co_measure_task+0x260>
 800252a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800252e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002532:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80026e0 <co_measure_task+0x264>
 8002536:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800253a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253e:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80026e4 <co_measure_task+0x268>
 8002542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002546:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800254a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		R0_i = R0_i + R0;
 8002552:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002556:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800255a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	for(int i=0; i<10; i++){
 8002562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002564:	3301      	adds	r3, #1
 8002566:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800256a:	2b09      	cmp	r3, #9
 800256c:	dd9c      	ble.n	80024a8 <co_measure_task+0x2c>
	}
	R0_i = R0_i / 10;
 800256e:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002572:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800257a:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	char msg[64];
	snprintf(msg, sizeof(msg), "R0 = %.2f\r\n (T=%.1fC H=%.1f%%)", R0_i, T, H);
 800257e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002580:	f7fd ffe2 	bl	8000548 <__aeabi_f2d>
 8002584:	4604      	mov	r4, r0
 8002586:	460d      	mov	r5, r1
 8002588:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800258a:	f7fd ffdd 	bl	8000548 <__aeabi_f2d>
 800258e:	4680      	mov	r8, r0
 8002590:	4689      	mov	r9, r1
 8002592:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002594:	f7fd ffd8 	bl	8000548 <__aeabi_f2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	f107 000c 	add.w	r0, r7, #12
 80025a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80025a4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80025a8:	e9cd 4500 	strd	r4, r5, [sp]
 80025ac:	4a4e      	ldr	r2, [pc, #312]	@ (80026e8 <co_measure_task+0x26c>)
 80025ae:	2140      	movs	r1, #64	@ 0x40
 80025b0:	f00a fc14 	bl	800cddc <sniprintf>
	osMutexAcquire(xUARTMutexHandle, osWaitForever);
 80025b4:	4b4d      	ldr	r3, [pc, #308]	@ (80026ec <co_measure_task+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	4618      	mov	r0, r3
 80025be:	f006 f8fc 	bl	80087ba <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80025c2:	f107 030c 	add.w	r3, r7, #12
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd fe52 	bl	8000270 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f107 010c 	add.w	r1, r7, #12
 80025d4:	2364      	movs	r3, #100	@ 0x64
 80025d6:	4846      	ldr	r0, [pc, #280]	@ (80026f0 <co_measure_task+0x274>)
 80025d8:	f004 ff12 	bl	8007400 <HAL_UART_Transmit>
	osMutexRelease(xUARTMutexHandle);
 80025dc:	4b43      	ldr	r3, [pc, #268]	@ (80026ec <co_measure_task+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f006 f935 	bl	8008850 <osMutexRelease>

	// Petlja za merenje CO
	for (;;) {
		HAL_ADC_Start(&hadc1);
 80025e6:	483a      	ldr	r0, [pc, #232]	@ (80026d0 <co_measure_task+0x254>)
 80025e8:	f000 ff50 	bl	800348c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80025ec:	2164      	movs	r1, #100	@ 0x64
 80025ee:	4838      	ldr	r0, [pc, #224]	@ (80026d0 <co_measure_task+0x254>)
 80025f0:	f001 f851 	bl	8003696 <HAL_ADC_PollForConversion>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d155      	bne.n	80026a6 <co_measure_task+0x22a>
			adc_value = HAL_ADC_GetValue(&hadc1);
 80025fa:	4835      	ldr	r0, [pc, #212]	@ (80026d0 <co_measure_task+0x254>)
 80025fc:	f001 f8d6 	bl	80037ac <HAL_ADC_GetValue>
 8002600:	67f8      	str	r0, [r7, #124]	@ 0x7c
			Vout = (adc_value * Vcc) / 4095.0f;
 8002602:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800260c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002614:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80026d4 <co_measure_task+0x258>
 8002618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800261c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			Rs = ((Vcc - Vout) * RL) / Vout;
 8002620:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002624:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002628:	ee37 7a67 	vsub.f32	s14, s14, s15
 800262c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002630:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002634:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800263c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

			float ratio = Rs / R0_i;
 8002640:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8002644:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
			float co_ppm = 19.709f * powf(ratio, -0.652f);
 8002650:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80026f4 <co_measure_task+0x278>
 8002654:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8002658:	f00c fd58 	bl	800f10c <powf>
 800265c:	eef0 7a40 	vmov.f32	s15, s0
 8002660:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80026f8 <co_measure_task+0x27c>
 8002664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002668:	edc7 7a02 	vstr	s15, [r7, #8]
//			snprintf(msg, sizeof(msg), "CO: %.1f ppm \r\n", co_ppm);
//			osMutexAcquire(xUARTMutexHandle, osWaitForever);
//			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
//			osMutexRelease(xUARTMutexHandle);
//
			osMessageQueuePut(queue_coHandle, &co_ppm, 0, pdMS_TO_TICKS(100));
 800266c:	4b23      	ldr	r3, [pc, #140]	@ (80026fc <co_measure_task+0x280>)
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	f107 0108 	add.w	r1, r7, #8
 8002674:	2364      	movs	r3, #100	@ 0x64
 8002676:	2200      	movs	r2, #0
 8002678:	f006 faba 	bl	8008bf0 <osMessageQueuePut>
			if (co_ppm > 30.0f) {
 800267c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002680:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268c:	dd0b      	ble.n	80026a6 <co_measure_task+0x22a>
//			    HAL_UART_Transmit(&huart2, (uint8_t*)"Speaker Semafor RELEASE\r\n", 26, 100);
			    xTaskNotifyGive(FanTaskHandle);
 800268e:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <co_measure_task+0x284>)
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	2300      	movs	r3, #0
 8002694:	2202      	movs	r2, #2
 8002696:	2100      	movs	r1, #0
 8002698:	f008 fdd6 	bl	800b248 <xTaskGenericNotify>
				osSemaphoreRelease(xSpeakerSemHandle);
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <co_measure_task+0x288>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f006 f9ed 	bl	8008a80 <osSemaphoreRelease>
			}
		}
		HAL_ADC_Stop(&hadc1);
 80026a6:	480a      	ldr	r0, [pc, #40]	@ (80026d0 <co_measure_task+0x254>)
 80026a8:	f000 ffc2 	bl	8003630 <HAL_ADC_Stop>
		xTaskNotify(WatchdogTaskHandle, 0x01, eSetBits);
 80026ac:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <co_measure_task+0x28c>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	2300      	movs	r3, #0
 80026b2:	2201      	movs	r2, #1
 80026b4:	2101      	movs	r1, #1
 80026b6:	f008 fdc7 	bl	800b248 <xTaskGenericNotify>
		osDelay(pdMS_TO_TICKS(500));
 80026ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026be:	f005 ffdb 	bl	8008678 <osDelay>
		HAL_ADC_Start(&hadc1);
 80026c2:	e790      	b.n	80025e6 <co_measure_task+0x16a>
 80026c4:	40a00000 	.word	0x40a00000
 80026c8:	461c4000 	.word	0x461c4000
 80026cc:	0800f990 	.word	0x0800f990
 80026d0:	2000022c 	.word	0x2000022c
 80026d4:	457ff000 	.word	0x457ff000
 80026d8:	2000041c 	.word	0x2000041c
 80026dc:	bc47e282 	.word	0xbc47e282
 80026e0:	3bc78e9f 	.word	0x3bc78e9f
 80026e4:	3fdab368 	.word	0x3fdab368
 80026e8:	0800f970 	.word	0x0800f970
 80026ec:	20000430 	.word	0x20000430
 80026f0:	200003b8 	.word	0x200003b8
 80026f4:	bf26e979 	.word	0xbf26e979
 80026f8:	419dac08 	.word	0x419dac08
 80026fc:	20000424 	.word	0x20000424
 8002700:	2000040c 	.word	0x2000040c
 8002704:	20000434 	.word	0x20000434
 8002708:	20000418 	.word	0x20000418

0800270c <weather_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_weather_task */
void weather_task(void *argument)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN weather_task */
//	char uart_buf[128];
//	int uart_buf_len;
	for (;;) {
		BME280_Measure();
 8002714:	f7ff f9dc 	bl	8001ad0 <BME280_Measure>
		osMessageQueuePut(queue_r0Handle, &data, 0, pdMS_TO_TICKS(100));
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <weather_task+0x60>)
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	2364      	movs	r3, #100	@ 0x64
 800271e:	2200      	movs	r2, #0
 8002720:	4913      	ldr	r1, [pc, #76]	@ (8002770 <weather_task+0x64>)
 8002722:	f006 fa65 	bl	8008bf0 <osMessageQueuePut>
//				      "Temp: %.2f C, Press: %.2f hPa, Hum: %.2f %%\r\n",
//				      data.temperature, Pressure / 100.0f, data.humidity);
//		osMutexAcquire(xUARTMutexHandle, osWaitForever);
//		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
//		osMutexRelease(xUARTMutexHandle);
		osMessageQueuePut(queue_prHandle, &Pressure, 0, pdMS_TO_TICKS(100));
 8002726:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <weather_task+0x68>)
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	2364      	movs	r3, #100	@ 0x64
 800272c:	2200      	movs	r2, #0
 800272e:	4912      	ldr	r1, [pc, #72]	@ (8002778 <weather_task+0x6c>)
 8002730:	f006 fa5e 	bl	8008bf0 <osMessageQueuePut>
		if(Pressure>1020000	){
 8002734:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <weather_task+0x6c>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800277c <weather_task+0x70>
 800273e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	dd04      	ble.n	8002752 <weather_task+0x46>
//			osMutexAcquire(xUARTMutexHandle, osWaitForever);
//		    HAL_UART_Transmit(&huart2, (uint8_t*)"Speaker Semafor PRESSURE\r\n", 27, 100);
//			osMutexRelease(xUARTMutexHandle);
		    osSemaphoreRelease(xSpeakerSemHandle);
 8002748:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <weather_task+0x74>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f006 f997 	bl	8008a80 <osSemaphoreRelease>
		}
		xTaskNotify(WatchdogTaskHandle, 0x02, eSetBits);
 8002752:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <weather_task+0x78>)
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	2300      	movs	r3, #0
 8002758:	2201      	movs	r2, #1
 800275a:	2102      	movs	r1, #2
 800275c:	f008 fd74 	bl	800b248 <xTaskGenericNotify>
		osDelay(pdMS_TO_TICKS(500));
 8002760:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002764:	f005 ff88 	bl	8008678 <osDelay>
		BME280_Measure();
 8002768:	e7d4      	b.n	8002714 <weather_task+0x8>
 800276a:	bf00      	nop
 800276c:	2000041c 	.word	0x2000041c
 8002770:	20000444 	.word	0x20000444
 8002774:	20000420 	.word	0x20000420
 8002778:	2000043c 	.word	0x2000043c
 800277c:	49790600 	.word	0x49790600
 8002780:	20000434 	.word	0x20000434
 8002784:	20000418 	.word	0x20000418

08002788 <speaker_alarm_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_speaker_alarm_task */
void speaker_alarm_task(void *argument)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN speaker_alarm_task */
//	HAL_UART_Transmit(&huart2, (uint8_t*)"Speaker task running...\r\n", 26, 100);
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(xSpeakerSemHandle, osWaitForever);
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <speaker_alarm_task+0x24>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f04f 31ff 	mov.w	r1, #4294967295
 8002798:	4618      	mov	r0, r3
 800279a:	f006 f91f 	bl	80089dc <osSemaphoreAcquire>
//	  HAL_UART_Transmit(&huart2, (uint8_t*)"Beep!\r\n", 7, 100);
	  Speaker_Beep(1000);
 800279e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027a2:	f7ff fdd5 	bl	8002350 <Speaker_Beep>
	  osSemaphoreAcquire(xSpeakerSemHandle, osWaitForever);
 80027a6:	bf00      	nop
 80027a8:	e7f2      	b.n	8002790 <speaker_alarm_task+0x8>
 80027aa:	bf00      	nop
 80027ac:	20000434 	.word	0x20000434

080027b0 <fan_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fan_task */
void fan_task(void *argument)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fan_task */
	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_GPIO_Pin, GPIO_PIN_SET);
 80027b8:	2201      	movs	r2, #1
 80027ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027be:	4822      	ldr	r0, [pc, #136]	@ (8002848 <fan_task+0x98>)
 80027c0:	f002 f81a 	bl	80047f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_GPIO_Pin, GPIO_PIN_SET);
 80027c4:	2201      	movs	r2, #1
 80027c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027ca:	481f      	ldr	r0, [pc, #124]	@ (8002848 <fan_task+0x98>)
 80027cc:	f002 f814 	bl	80047f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SLP_GPIO_Port, SLP_GPIO_Pin, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027d6:	481c      	ldr	r0, [pc, #112]	@ (8002848 <fan_task+0x98>)
 80027d8:	f002 f80e 	bl	80047f8 <HAL_GPIO_WritePin>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80027dc:	2108      	movs	r1, #8
 80027de:	481b      	ldr	r0, [pc, #108]	@ (800284c <fan_task+0x9c>)
 80027e0:	f003 fdec 	bl	80063bc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	2001      	movs	r0, #1
 80027ea:	f008 fc81 	bl	800b0f0 <ulTaskNotifyTake>
//	  HAL_UART_Transmit(&huart2, (uint8_t*)"FAN\r\n", 5, 100);
	  if (fan_continuous_mode){
 80027ee:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <fan_task+0xa0>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d022      	beq.n	800283e <fan_task+0x8e>
		  // Uključi ventilator i čekaj dok se fan_continuous_mode ne resetuje na 0
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 19000);
 80027f8:	4b14      	ldr	r3, [pc, #80]	@ (800284c <fan_task+0x9c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f644 2238 	movw	r2, #19000	@ 0x4a38
 8002800:	63da      	str	r2, [r3, #60]	@ 0x3c
		  while (fan_continuous_mode)
 8002802:	e014      	b.n	800282e <fan_task+0x7e>
		  {
			  osDelay(100);
 8002804:	2064      	movs	r0, #100	@ 0x64
 8002806:	f005 ff37 	bl	8008678 <osDelay>

			osMutexAcquire(xUARTMutexHandle, osWaitForever);
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <fan_task+0xa4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f04f 31ff 	mov.w	r1, #4294967295
 8002812:	4618      	mov	r0, r3
 8002814:	f005 ffd1 	bl	80087ba <osMutexAcquire>
			HAL_UART_Transmit(&huart2, (uint8_t*)"F\r\n", 3, 100);
 8002818:	2364      	movs	r3, #100	@ 0x64
 800281a:	2203      	movs	r2, #3
 800281c:	490e      	ldr	r1, [pc, #56]	@ (8002858 <fan_task+0xa8>)
 800281e:	480f      	ldr	r0, [pc, #60]	@ (800285c <fan_task+0xac>)
 8002820:	f004 fdee 	bl	8007400 <HAL_UART_Transmit>
			osMutexRelease(xUARTMutexHandle);
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <fan_task+0xa4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f006 f811 	bl	8008850 <osMutexRelease>
		  while (fan_continuous_mode)
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <fan_task+0xa0>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e5      	bne.n	8002804 <fan_task+0x54>
		  }
		  fan_stop();
 8002838:	f7ff fdf0 	bl	800241c <fan_stop>
 800283c:	e7d2      	b.n	80027e4 <fan_task+0x34>
	  }else{
		  fan_rotating(1000);
 800283e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002842:	f7ff fdab 	bl	800239c <fan_rotating>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002846:	e7cd      	b.n	80027e4 <fan_task+0x34>
 8002848:	40021000 	.word	0x40021000
 800284c:	20000328 	.word	0x20000328
 8002850:	2000044d 	.word	0x2000044d
 8002854:	20000430 	.word	0x20000430
 8002858:	0800f96c 	.word	0x0800f96c
 800285c:	200003b8 	.word	0x200003b8

08002860 <uart_command_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_command_task */
void uart_command_task(void *argument)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_command_task */
  /* Infinite loop */
	uint8_t fan_state;
	HAL_UART_Receive_IT(&huart2, &rx_buff, 1);
 8002868:	2201      	movs	r2, #1
 800286a:	491d      	ldr	r1, [pc, #116]	@ (80028e0 <uart_command_task+0x80>)
 800286c:	481d      	ldr	r0, [pc, #116]	@ (80028e4 <uart_command_task+0x84>)
 800286e:	f004 fe52 	bl	8007516 <HAL_UART_Receive_IT>
	for(;;)
	{
		if(osMessageQueueGet(uartCommandQueueHandle, &fan_state, NULL, osWaitForever) == osOK){
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <uart_command_task+0x88>)
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	f107 010b 	add.w	r1, r7, #11
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	2200      	movs	r2, #0
 8002880:	f006 fa16 	bl	8008cb0 <osMessageQueueGet>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f3      	bne.n	8002872 <uart_command_task+0x12>
			if (fan_state == '0') {
 800288a:	7afb      	ldrb	r3, [r7, #11]
 800288c:	2b30      	cmp	r3, #48	@ 0x30
 800288e:	d105      	bne.n	800289c <uart_command_task+0x3c>
			    fan_continuous_mode = 0;
 8002890:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <uart_command_task+0x8c>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
			    fan_stop();
 8002896:	f7ff fdc1 	bl	800241c <fan_stop>
 800289a:	e7ea      	b.n	8002872 <uart_command_task+0x12>
			}
			else if (fan_state == '1') {
 800289c:	7afb      	ldrb	r3, [r7, #11]
 800289e:	2b31      	cmp	r3, #49	@ 0x31
 80028a0:	d10a      	bne.n	80028b8 <uart_command_task+0x58>
			    fan_continuous_mode = 1;
 80028a2:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <uart_command_task+0x8c>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
			    xTaskNotifyGive(FanTaskHandle);
 80028a8:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <uart_command_task+0x90>)
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	2300      	movs	r3, #0
 80028ae:	2202      	movs	r2, #2
 80028b0:	2100      	movs	r1, #0
 80028b2:	f008 fcc9 	bl	800b248 <xTaskGenericNotify>
 80028b6:	e7dc      	b.n	8002872 <uart_command_task+0x12>
			}
			else if (fan_state >= '2' && fan_state <= '9') {
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	2b31      	cmp	r3, #49	@ 0x31
 80028bc:	d9d9      	bls.n	8002872 <uart_command_task+0x12>
 80028be:	7afb      	ldrb	r3, [r7, #11]
 80028c0:	2b39      	cmp	r3, #57	@ 0x39
 80028c2:	d8d6      	bhi.n	8002872 <uart_command_task+0x12>
			    fan_continuous_mode = 0;
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <uart_command_task+0x8c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
			    uint32_t duration = (fan_state - '0') * 1000;
 80028ca:	7afb      	ldrb	r3, [r7, #11]
 80028cc:	3b30      	subs	r3, #48	@ 0x30
 80028ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	60fb      	str	r3, [r7, #12]
			    fan_rotating(duration);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f7ff fd5f 	bl	800239c <fan_rotating>
		if(osMessageQueueGet(uartCommandQueueHandle, &fan_state, NULL, osWaitForever) == osOK){
 80028de:	e7c8      	b.n	8002872 <uart_command_task+0x12>
 80028e0:	2000044c 	.word	0x2000044c
 80028e4:	200003b8 	.word	0x200003b8
 80028e8:	20000428 	.word	0x20000428
 80028ec:	2000044d 	.word	0x2000044d
 80028f0:	2000040c 	.word	0x2000040c

080028f4 <uart_display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_display_task */
void uart_display_task(void *argument)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b098      	sub	sp, #96	@ 0x60
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	6078      	str	r0, [r7, #4]
	char msg[64];
	WatchdogError_t err;
  /* Infinite loop */
  for(;;)
  {
	  if(osMessageQueueGet(queue_coHandle, &co_ppm, NULL, osWaitForever) == osOK){
 80028fc:	4b59      	ldr	r3, [pc, #356]	@ (8002a64 <uart_display_task+0x170>)
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	2200      	movs	r2, #0
 800290a:	f006 f9d1 	bl	8008cb0 <osMessageQueueGet>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d126      	bne.n	8002962 <uart_display_task+0x6e>
		  snprintf(msg, sizeof(msg), "UART: Co: %.1f ppm\r\n", co_ppm);
 8002914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe16 	bl	8000548 <__aeabi_f2d>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	f107 0010 	add.w	r0, r7, #16
 8002924:	e9cd 2300 	strd	r2, r3, [sp]
 8002928:	4a4f      	ldr	r2, [pc, #316]	@ (8002a68 <uart_display_task+0x174>)
 800292a:	2140      	movs	r1, #64	@ 0x40
 800292c:	f00a fa56 	bl	800cddc <sniprintf>
		  osMutexAcquire(xUARTMutexHandle, osWaitForever);
 8002930:	4b4e      	ldr	r3, [pc, #312]	@ (8002a6c <uart_display_task+0x178>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	4618      	mov	r0, r3
 800293a:	f005 ff3e 	bl	80087ba <osMutexAcquire>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), pdMS_TO_TICKS(100));
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc94 	bl	8000270 <strlen>
 8002948:	4603      	mov	r3, r0
 800294a:	b29a      	uxth	r2, r3
 800294c:	f107 0110 	add.w	r1, r7, #16
 8002950:	2364      	movs	r3, #100	@ 0x64
 8002952:	4847      	ldr	r0, [pc, #284]	@ (8002a70 <uart_display_task+0x17c>)
 8002954:	f004 fd54 	bl	8007400 <HAL_UART_Transmit>
		  osMutexRelease(xUARTMutexHandle);
 8002958:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <uart_display_task+0x178>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f005 ff77 	bl	8008850 <osMutexRelease>
	  }
	  if(osMessageQueueGet(queue_prHandle, &Pressure, NULL, osWaitForever) == osOK){
 8002962:	4b44      	ldr	r3, [pc, #272]	@ (8002a74 <uart_display_task+0x180>)
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
 800296e:	2200      	movs	r2, #0
 8002970:	f006 f99e 	bl	8008cb0 <osMessageQueueGet>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d126      	bne.n	80029c8 <uart_display_task+0xd4>
		  snprintf(msg, sizeof(msg), "UART: P: %.2f hPa\r\n", Pressure);
 800297a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fde3 	bl	8000548 <__aeabi_f2d>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	f107 0010 	add.w	r0, r7, #16
 800298a:	e9cd 2300 	strd	r2, r3, [sp]
 800298e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a78 <uart_display_task+0x184>)
 8002990:	2140      	movs	r1, #64	@ 0x40
 8002992:	f00a fa23 	bl	800cddc <sniprintf>
		  osMutexAcquire(xUARTMutexHandle, osWaitForever);
 8002996:	4b35      	ldr	r3, [pc, #212]	@ (8002a6c <uart_display_task+0x178>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f04f 31ff 	mov.w	r1, #4294967295
 800299e:	4618      	mov	r0, r3
 80029a0:	f005 ff0b 	bl	80087ba <osMutexAcquire>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), pdMS_TO_TICKS(100));
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fc61 	bl	8000270 <strlen>
 80029ae:	4603      	mov	r3, r0
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	f107 0110 	add.w	r1, r7, #16
 80029b6:	2364      	movs	r3, #100	@ 0x64
 80029b8:	482d      	ldr	r0, [pc, #180]	@ (8002a70 <uart_display_task+0x17c>)
 80029ba:	f004 fd21 	bl	8007400 <HAL_UART_Transmit>
		  osMutexRelease(xUARTMutexHandle);
 80029be:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <uart_display_task+0x178>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f005 ff44 	bl	8008850 <osMutexRelease>
	  }
	  if (osMessageQueueGet(queue_watchdogHandle, &err, NULL, pdMS_TO_TICKS(100)) == osOK){
 80029c8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a7c <uart_display_task+0x188>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f107 010f 	add.w	r1, r7, #15
 80029d0:	2364      	movs	r3, #100	@ 0x64
 80029d2:	2200      	movs	r2, #0
 80029d4:	f006 f96c 	bl	8008cb0 <osMessageQueueGet>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d136      	bne.n	8002a4c <uart_display_task+0x158>
		  switch (err){
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d016      	beq.n	8002a12 <uart_display_task+0x11e>
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	dc1c      	bgt.n	8002a22 <uart_display_task+0x12e>
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d002      	beq.n	80029f2 <uart_display_task+0xfe>
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d008      	beq.n	8002a02 <uart_display_task+0x10e>
 80029f0:	e017      	b.n	8002a22 <uart_display_task+0x12e>
			case WTDG_ERROR_CO:
				snprintf(msg, sizeof(msg), "[WDTG] Greska u CO mjerenju\r\n");
 80029f2:	f107 0310 	add.w	r3, r7, #16
 80029f6:	4a22      	ldr	r2, [pc, #136]	@ (8002a80 <uart_display_task+0x18c>)
 80029f8:	2140      	movs	r1, #64	@ 0x40
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00a f9ee 	bl	800cddc <sniprintf>
				break;
 8002a00:	e017      	b.n	8002a32 <uart_display_task+0x13e>
			case WTDG_ERROR_WEATHER:
				snprintf(msg, sizeof(msg), "[WDTG] Greska u Weather mjerenju\r\n");
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	4a1f      	ldr	r2, [pc, #124]	@ (8002a84 <uart_display_task+0x190>)
 8002a08:	2140      	movs	r1, #64	@ 0x40
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f00a f9e6 	bl	800cddc <sniprintf>
				break;
 8002a10:	e00f      	b.n	8002a32 <uart_display_task+0x13e>
			case WTDG_ERROR_UART:
				snprintf(msg, sizeof(msg), "[WDTG] Greska u UART Prikazu\r\n");
 8002a12:	f107 0310 	add.w	r3, r7, #16
 8002a16:	4a1c      	ldr	r2, [pc, #112]	@ (8002a88 <uart_display_task+0x194>)
 8002a18:	2140      	movs	r1, #64	@ 0x40
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00a f9de 	bl	800cddc <sniprintf>
				break;
 8002a20:	e007      	b.n	8002a32 <uart_display_task+0x13e>
			default:
				snprintf(msg, sizeof(msg), "[WDTG] Greska u CO mjerenju\r\n");
 8002a22:	f107 0310 	add.w	r3, r7, #16
 8002a26:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <uart_display_task+0x18c>)
 8002a28:	2140      	movs	r1, #64	@ 0x40
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f00a f9d6 	bl	800cddc <sniprintf>
				break;
 8002a30:	bf00      	nop
		}
		 HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 100);
 8002a32:	f107 0310 	add.w	r3, r7, #16
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fc1a 	bl	8000270 <strlen>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	f107 0110 	add.w	r1, r7, #16
 8002a44:	2364      	movs	r3, #100	@ 0x64
 8002a46:	480a      	ldr	r0, [pc, #40]	@ (8002a70 <uart_display_task+0x17c>)
 8002a48:	f004 fcda 	bl	8007400 <HAL_UART_Transmit>
	  }
	  xTaskNotify(WatchdogTaskHandle, 0x04, eSetBits);  // uart task
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <uart_display_task+0x198>)
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	2300      	movs	r3, #0
 8002a52:	2201      	movs	r2, #1
 8002a54:	2104      	movs	r1, #4
 8002a56:	f008 fbf7 	bl	800b248 <xTaskGenericNotify>
	  osDelay(pdMS_TO_TICKS(500));
 8002a5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a5e:	f005 fe0b 	bl	8008678 <osDelay>
	  if(osMessageQueueGet(queue_coHandle, &co_ppm, NULL, osWaitForever) == osOK){
 8002a62:	e74b      	b.n	80028fc <uart_display_task+0x8>
 8002a64:	20000424 	.word	0x20000424
 8002a68:	0800f998 	.word	0x0800f998
 8002a6c:	20000430 	.word	0x20000430
 8002a70:	200003b8 	.word	0x200003b8
 8002a74:	20000420 	.word	0x20000420
 8002a78:	0800f9b0 	.word	0x0800f9b0
 8002a7c:	2000042c 	.word	0x2000042c
 8002a80:	0800f9c4 	.word	0x0800f9c4
 8002a84:	0800f9e4 	.word	0x0800f9e4
 8002a88:	0800fa08 	.word	0x0800fa08
 8002a8c:	20000418 	.word	0x20000418

08002a90 <watch_dog_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_watch_dog_task */
void watch_dog_task(void *argument)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watch_dog_task */
	//bit mask co 0x01, weather 0x02, uart 0x04
	const TickType_t xDelay = pdMS_TO_TICKS(5000);
 8002a98:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a9c:	61bb      	str	r3, [r7, #24]
	uint32_t ulNotificationValue;
	uint32_t aliveMask;
	WatchdogError_t err;
	for (;;)
	{
		aliveMask = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
		TickType_t startTick = xTaskGetTickCount();
 8002aa2:	f007 fe3f 	bl	800a724 <xTaskGetTickCount>
 8002aa6:	6178      	str	r0, [r7, #20]
		while ((xTaskGetTickCount() - startTick) < xDelay)
 8002aa8:	e00f      	b.n	8002aca <watch_dog_task+0x3a>
				{
					if (xTaskNotifyWait(0x00, 0xFFFFFFFF, &ulNotificationValue, pdMS_TO_TICKS(500)) == pdTRUE)
 8002aaa:	f107 0210 	add.w	r2, r7, #16
 8002aae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f008 fb66 	bl	800b188 <xTaskNotifyWait>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d103      	bne.n	8002aca <watch_dog_task+0x3a>
					{
						aliveMask |= ulNotificationValue;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61fb      	str	r3, [r7, #28]
		while ((xTaskGetTickCount() - startTick) < xDelay)
 8002aca:	f007 fe2b 	bl	800a724 <xTaskGetTickCount>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d8e7      	bhi.n	8002aaa <watch_dog_task+0x1a>
					}
				}
		if ((aliveMask & 0x07) == 0x07)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	2b07      	cmp	r3, #7
 8002ae2:	d10c      	bne.n	8002afe <watch_dog_task+0x6e>
				{
					// Svi taskovi su se javili
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // ZELENA
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002aea:	482f      	ldr	r0, [pc, #188]	@ (8002ba8 <watch_dog_task+0x118>)
 8002aec:	f001 fe84 	bl	80047f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // CRVENA
 8002af0:	2200      	movs	r2, #0
 8002af2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002af6:	482c      	ldr	r0, [pc, #176]	@ (8002ba8 <watch_dog_task+0x118>)
 8002af8:	f001 fe7e 	bl	80047f8 <HAL_GPIO_WritePin>
 8002afc:	e7cf      	b.n	8002a9e <watch_dog_task+0xe>
				}else if (!(aliveMask & 0x01)) {
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d116      	bne.n	8002b36 <watch_dog_task+0xa6>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // ZELENA
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b0e:	4826      	ldr	r0, [pc, #152]	@ (8002ba8 <watch_dog_task+0x118>)
 8002b10:	f001 fe72 	bl	80047f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);   // CRVENA
 8002b14:	2201      	movs	r2, #1
 8002b16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b1a:	4823      	ldr	r0, [pc, #140]	@ (8002ba8 <watch_dog_task+0x118>)
 8002b1c:	f001 fe6c 	bl	80047f8 <HAL_GPIO_WritePin>
					err = WTDG_ERROR_CO;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
					osMessageQueuePut(queue_watchdogHandle, &err, 0, pdMS_TO_TICKS(100));
 8002b24:	4b21      	ldr	r3, [pc, #132]	@ (8002bac <watch_dog_task+0x11c>)
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	f107 010f 	add.w	r1, r7, #15
 8002b2c:	2364      	movs	r3, #100	@ 0x64
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f006 f85e 	bl	8008bf0 <osMessageQueuePut>
 8002b34:	e7b3      	b.n	8002a9e <watch_dog_task+0xe>
				}else if (!(aliveMask & 0x02)) {
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d116      	bne.n	8002b6e <watch_dog_task+0xde>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // ZELENA
 8002b40:	2200      	movs	r2, #0
 8002b42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b46:	4818      	ldr	r0, [pc, #96]	@ (8002ba8 <watch_dog_task+0x118>)
 8002b48:	f001 fe56 	bl	80047f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);   // CRVENA
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b52:	4815      	ldr	r0, [pc, #84]	@ (8002ba8 <watch_dog_task+0x118>)
 8002b54:	f001 fe50 	bl	80047f8 <HAL_GPIO_WritePin>
					err = WTDG_ERROR_WEATHER;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	73fb      	strb	r3, [r7, #15]
					osMessageQueuePut(queue_watchdogHandle, &err, 0, pdMS_TO_TICKS(100));
 8002b5c:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <watch_dog_task+0x11c>)
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	f107 010f 	add.w	r1, r7, #15
 8002b64:	2364      	movs	r3, #100	@ 0x64
 8002b66:	2200      	movs	r2, #0
 8002b68:	f006 f842 	bl	8008bf0 <osMessageQueuePut>
 8002b6c:	e797      	b.n	8002a9e <watch_dog_task+0xe>


				}else if (!(aliveMask & 0x03)) {
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d192      	bne.n	8002a9e <watch_dog_task+0xe>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // ZELENA
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b7e:	480a      	ldr	r0, [pc, #40]	@ (8002ba8 <watch_dog_task+0x118>)
 8002b80:	f001 fe3a 	bl	80047f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);   // CRVENA
 8002b84:	2201      	movs	r2, #1
 8002b86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b8a:	4807      	ldr	r0, [pc, #28]	@ (8002ba8 <watch_dog_task+0x118>)
 8002b8c:	f001 fe34 	bl	80047f8 <HAL_GPIO_WritePin>
					err = WTDG_ERROR_UART;
 8002b90:	2303      	movs	r3, #3
 8002b92:	73fb      	strb	r3, [r7, #15]
					osMessageQueuePut(queue_watchdogHandle, &err, 0, pdMS_TO_TICKS(100));
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <watch_dog_task+0x11c>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f107 010f 	add.w	r1, r7, #15
 8002b9c:	2364      	movs	r3, #100	@ 0x64
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f006 f826 	bl	8008bf0 <osMessageQueuePut>
	{
 8002ba4:	e77b      	b.n	8002a9e <watch_dog_task+0xe>
 8002ba6:	bf00      	nop
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	2000042c 	.word	0x2000042c

08002bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bc2:	f000 fbdb 	bl	800337c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40001000 	.word	0x40001000

08002bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <Error_Handler+0x8>

08002be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <HAL_MspInit+0x54>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	4a11      	ldr	r2, [pc, #68]	@ (8002c34 <HAL_MspInit+0x54>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <HAL_MspInit+0x54>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <HAL_MspInit+0x54>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <HAL_MspInit+0x54>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <HAL_MspInit+0x54>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	210f      	movs	r1, #15
 8002c22:	f06f 0001 	mvn.w	r0, #1
 8002c26:	f001 f8a5 	bl	8003d74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800

08002c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	@ 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	@ (8002d14 <HAL_ADC_MspInit+0xdc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d158      	bne.n	8002d0c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d18 <HAL_ADC_MspInit+0xe0>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	4a2d      	ldr	r2, [pc, #180]	@ (8002d18 <HAL_ADC_MspInit+0xe0>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <HAL_ADC_MspInit+0xe0>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b27      	ldr	r3, [pc, #156]	@ (8002d18 <HAL_ADC_MspInit+0xe0>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	4a26      	ldr	r2, [pc, #152]	@ (8002d18 <HAL_ADC_MspInit+0xe0>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_ADC_MspInit+0xe0>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c92:	2320      	movs	r3, #32
 8002c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c96:	2303      	movs	r3, #3
 8002c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9e:	f107 0314 	add.w	r3, r7, #20
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	481d      	ldr	r0, [pc, #116]	@ (8002d1c <HAL_ADC_MspInit+0xe4>)
 8002ca6:	f001 fc0b 	bl	80044c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002cac:	4a1d      	ldr	r2, [pc, #116]	@ (8002d24 <HAL_ADC_MspInit+0xec>)
 8002cae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cbc:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cc2:	4b17      	ldr	r3, [pc, #92]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002ccc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cd2:	4b13      	ldr	r3, [pc, #76]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002cd4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cda:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002cdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ce0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002ce4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ce8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cea:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002cf0:	480b      	ldr	r0, [pc, #44]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002cf2:	f001 f869 	bl	8003dc8 <HAL_DMA_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002cfc:	f7ff ff6a 	bl	8002bd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a07      	ldr	r2, [pc, #28]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002d04:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d06:	4a06      	ldr	r2, [pc, #24]	@ (8002d20 <HAL_ADC_MspInit+0xe8>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d0c:	bf00      	nop
 8002d0e:	3728      	adds	r7, #40	@ 0x28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40012000 	.word	0x40012000
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020800 	.word	0x40020800
 8002d20:	20000274 	.word	0x20000274
 8002d24:	40026410 	.word	0x40026410

08002d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a29      	ldr	r2, [pc, #164]	@ (8002dec <HAL_I2C_MspInit+0xc4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d14b      	bne.n	8002de2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_I2C_MspInit+0xc8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	4a27      	ldr	r2, [pc, #156]	@ (8002df0 <HAL_I2C_MspInit+0xc8>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5a:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <HAL_I2C_MspInit+0xc8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <HAL_I2C_MspInit+0xc8>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a20      	ldr	r2, [pc, #128]	@ (8002df0 <HAL_I2C_MspInit+0xc8>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <HAL_I2C_MspInit+0xc8>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d88:	2312      	movs	r3, #18
 8002d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d90:	2303      	movs	r3, #3
 8002d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d94:	2304      	movs	r3, #4
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4815      	ldr	r0, [pc, #84]	@ (8002df4 <HAL_I2C_MspInit+0xcc>)
 8002da0:	f001 fb8e 	bl	80044c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002da4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002daa:	2312      	movs	r3, #18
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002db6:	2304      	movs	r3, #4
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480d      	ldr	r0, [pc, #52]	@ (8002df8 <HAL_I2C_MspInit+0xd0>)
 8002dc2:	f001 fb7d 	bl	80044c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_I2C_MspInit+0xc8>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	4a08      	ldr	r2, [pc, #32]	@ (8002df0 <HAL_I2C_MspInit+0xc8>)
 8002dd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_I2C_MspInit+0xc8>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	@ 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40005c00 	.word	0x40005c00
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020000 	.word	0x40020000

08002dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <HAL_TIM_Base_MspInit+0x64>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <HAL_TIM_Base_MspInit+0x68>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <HAL_TIM_Base_MspInit+0x68>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e1e:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <HAL_TIM_Base_MspInit+0x68>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e2a:	e012      	b.n	8002e52 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e34:	d10d      	bne.n	8002e52 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <HAL_TIM_Base_MspInit+0x68>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	4a09      	ldr	r2, [pc, #36]	@ (8002e64 <HAL_TIM_Base_MspInit+0x68>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e46:	4b07      	ldr	r3, [pc, #28]	@ (8002e64 <HAL_TIM_Base_MspInit+0x68>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	@ 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a24      	ldr	r2, [pc, #144]	@ (8002f18 <HAL_TIM_MspPostInit+0xb0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d11f      	bne.n	8002eca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <HAL_TIM_MspPostInit+0xb4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a22      	ldr	r2, [pc, #136]	@ (8002f1c <HAL_TIM_MspPostInit+0xb4>)
 8002e94:	f043 0310 	orr.w	r3, r3, #16
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_TIM_MspPostInit+0xb4>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ea6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4817      	ldr	r0, [pc, #92]	@ (8002f20 <HAL_TIM_MspPostInit+0xb8>)
 8002ec4:	f001 fafc 	bl	80044c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ec8:	e022      	b.n	8002f10 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed2:	d11d      	bne.n	8002f10 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <HAL_TIM_MspPostInit+0xb4>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	4a0f      	ldr	r2, [pc, #60]	@ (8002f1c <HAL_TIM_MspPostInit+0xb4>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_TIM_MspPostInit+0xb4>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f00:	2301      	movs	r3, #1
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4806      	ldr	r0, [pc, #24]	@ (8002f24 <HAL_TIM_MspPostInit+0xbc>)
 8002f0c:	f001 fad8 	bl	80044c0 <HAL_GPIO_Init>
}
 8002f10:	bf00      	nop
 8002f12:	3728      	adds	r7, #40	@ 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40020000 	.word	0x40020000

08002f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	@ 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1d      	ldr	r2, [pc, #116]	@ (8002fbc <HAL_UART_MspInit+0x94>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d133      	bne.n	8002fb2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc0 <HAL_UART_MspInit+0x98>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc0 <HAL_UART_MspInit+0x98>)
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f5a:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <HAL_UART_MspInit+0x98>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	4b15      	ldr	r3, [pc, #84]	@ (8002fc0 <HAL_UART_MspInit+0x98>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <HAL_UART_MspInit+0x98>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f76:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <HAL_UART_MspInit+0x98>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f82:	230c      	movs	r3, #12
 8002f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f92:	2307      	movs	r3, #7
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4809      	ldr	r0, [pc, #36]	@ (8002fc4 <HAL_UART_MspInit+0x9c>)
 8002f9e:	f001 fa8f 	bl	80044c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2105      	movs	r1, #5
 8002fa6:	2026      	movs	r0, #38	@ 0x26
 8002fa8:	f000 fee4 	bl	8003d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fac:	2026      	movs	r0, #38	@ 0x26
 8002fae:	f000 fefd 	bl	8003dac <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002fb2:	bf00      	nop
 8002fb4:	3728      	adds	r7, #40	@ 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40004400 	.word	0x40004400
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40020000 	.word	0x40020000

08002fc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08e      	sub	sp, #56	@ 0x38
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <HAL_InitTick+0xe4>)
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	4a32      	ldr	r2, [pc, #200]	@ (80030ac <HAL_InitTick+0xe4>)
 8002fe2:	f043 0310 	orr.w	r3, r3, #16
 8002fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe8:	4b30      	ldr	r3, [pc, #192]	@ (80030ac <HAL_InitTick+0xe4>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ff4:	f107 0210 	add.w	r2, r7, #16
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 f890 	bl	8006124 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800300e:	f003 f861 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 8003012:	6378      	str	r0, [r7, #52]	@ 0x34
 8003014:	e004      	b.n	8003020 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003016:	f003 f85d 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 800301a:	4603      	mov	r3, r0
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003022:	4a23      	ldr	r2, [pc, #140]	@ (80030b0 <HAL_InitTick+0xe8>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	0c9b      	lsrs	r3, r3, #18
 800302a:	3b01      	subs	r3, #1
 800302c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800302e:	4b21      	ldr	r3, [pc, #132]	@ (80030b4 <HAL_InitTick+0xec>)
 8003030:	4a21      	ldr	r2, [pc, #132]	@ (80030b8 <HAL_InitTick+0xf0>)
 8003032:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003034:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <HAL_InitTick+0xec>)
 8003036:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800303a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800303c:	4a1d      	ldr	r2, [pc, #116]	@ (80030b4 <HAL_InitTick+0xec>)
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003042:	4b1c      	ldr	r3, [pc, #112]	@ (80030b4 <HAL_InitTick+0xec>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003048:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <HAL_InitTick+0xec>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800304e:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <HAL_InitTick+0xec>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003054:	4817      	ldr	r0, [pc, #92]	@ (80030b4 <HAL_InitTick+0xec>)
 8003056:	f003 f897 	bl	8006188 <HAL_TIM_Base_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003060:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11b      	bne.n	80030a0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003068:	4812      	ldr	r0, [pc, #72]	@ (80030b4 <HAL_InitTick+0xec>)
 800306a:	f003 f8dd 	bl	8006228 <HAL_TIM_Base_Start_IT>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003074:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003078:	2b00      	cmp	r3, #0
 800307a:	d111      	bne.n	80030a0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800307c:	2036      	movs	r0, #54	@ 0x36
 800307e:	f000 fe95 	bl	8003dac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d808      	bhi.n	800309a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003088:	2200      	movs	r2, #0
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	2036      	movs	r0, #54	@ 0x36
 800308e:	f000 fe71 	bl	8003d74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003092:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <HAL_InitTick+0xf4>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e002      	b.n	80030a0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80030a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	@ 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	431bde83 	.word	0x431bde83
 80030b4:	20000450 	.word	0x20000450
 80030b8:	40001000 	.word	0x40001000
 80030bc:	20000004 	.word	0x20000004

080030c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <NMI_Handler+0x4>

080030c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <HardFault_Handler+0x4>

080030d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <MemManage_Handler+0x4>

080030d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <BusFault_Handler+0x4>

080030e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <UsageFault_Handler+0x4>

080030e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030fc:	4802      	ldr	r0, [pc, #8]	@ (8003108 <USART2_IRQHandler+0x10>)
 80030fe:	f004 fa2f 	bl	8007560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200003b8 	.word	0x200003b8

0800310c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003110:	4802      	ldr	r0, [pc, #8]	@ (800311c <TIM6_DAC_IRQHandler+0x10>)
 8003112:	f003 fa8b 	bl	800662c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000450 	.word	0x20000450

08003120 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003124:	4802      	ldr	r0, [pc, #8]	@ (8003130 <DMA2_Stream0_IRQHandler+0x10>)
 8003126:	f000 ff8f 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000274 	.word	0x20000274

08003134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return 1;
 8003138:	2301      	movs	r3, #1
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <_kill>:

int _kill(int pid, int sig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800314e:	f009 ff65 	bl	800d01c <__errno>
 8003152:	4603      	mov	r3, r0
 8003154:	2216      	movs	r2, #22
 8003156:	601a      	str	r2, [r3, #0]
  return -1;
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_exit>:

void _exit (int status)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800316c:	f04f 31ff 	mov.w	r1, #4294967295
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ffe7 	bl	8003144 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <_exit+0x12>

0800317a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e00a      	b.n	80031a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800318c:	f3af 8000 	nop.w
 8003190:	4601      	mov	r1, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	60ba      	str	r2, [r7, #8]
 8003198:	b2ca      	uxtb	r2, r1
 800319a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3301      	adds	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	dbf0      	blt.n	800318c <_read+0x12>
  }

  return len;
 80031aa:	687b      	ldr	r3, [r7, #4]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e009      	b.n	80031da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	60ba      	str	r2, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3301      	adds	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	dbf1      	blt.n	80031c6 <_write+0x12>
  }
  return len;
 80031e2:	687b      	ldr	r3, [r7, #4]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_close>:

int _close(int file)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003214:	605a      	str	r2, [r3, #4]
  return 0;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <_isatty>:

int _isatty(int file)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800325c:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <_sbrk+0x5c>)
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <_sbrk+0x60>)
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003268:	4b13      	ldr	r3, [pc, #76]	@ (80032b8 <_sbrk+0x64>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003270:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <_sbrk+0x64>)
 8003272:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <_sbrk+0x68>)
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003276:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <_sbrk+0x64>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	429a      	cmp	r2, r3
 8003282:	d207      	bcs.n	8003294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003284:	f009 feca 	bl	800d01c <__errno>
 8003288:	4603      	mov	r3, r0
 800328a:	220c      	movs	r2, #12
 800328c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	e009      	b.n	80032a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003294:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <_sbrk+0x64>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <_sbrk+0x64>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <_sbrk+0x64>)
 80032a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032a6:	68fb      	ldr	r3, [r7, #12]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20020000 	.word	0x20020000
 80032b4:	00000400 	.word	0x00000400
 80032b8:	20000498 	.word	0x20000498
 80032bc:	20004fd8 	.word	0x20004fd8

080032c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <SystemInit+0x20>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	4a05      	ldr	r2, [pc, #20]	@ (80032e0 <SystemInit+0x20>)
 80032cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800331c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032e8:	f7ff ffea 	bl	80032c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032ec:	480c      	ldr	r0, [pc, #48]	@ (8003320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ee:	490d      	ldr	r1, [pc, #52]	@ (8003324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032f4:	e002      	b.n	80032fc <LoopCopyDataInit>

080032f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032fa:	3304      	adds	r3, #4

080032fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003300:	d3f9      	bcc.n	80032f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003304:	4c0a      	ldr	r4, [pc, #40]	@ (8003330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003308:	e001      	b.n	800330e <LoopFillZerobss>

0800330a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800330a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800330c:	3204      	adds	r2, #4

0800330e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800330e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003310:	d3fb      	bcc.n	800330a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003312:	f009 fe89 	bl	800d028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003316:	f7fe fc71 	bl	8001bfc <main>
  bx  lr    
 800331a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800331c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003324:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003328:	0800ff90 	.word	0x0800ff90
  ldr r2, =_sbss
 800332c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003330:	20004fd4 	.word	0x20004fd4

08003334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003334:	e7fe      	b.n	8003334 <ADC_IRQHandler>
	...

08003338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800333c:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <HAL_Init+0x40>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <HAL_Init+0x40>)
 8003342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_Init+0x40>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <HAL_Init+0x40>)
 800334e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003354:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <HAL_Init+0x40>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a07      	ldr	r2, [pc, #28]	@ (8003378 <HAL_Init+0x40>)
 800335a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003360:	2003      	movs	r0, #3
 8003362:	f000 fcfc 	bl	8003d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003366:	200f      	movs	r0, #15
 8003368:	f7ff fe2e 	bl	8002fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800336c:	f7ff fc38 	bl	8002be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023c00 	.word	0x40023c00

0800337c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_IncTick+0x20>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_IncTick+0x24>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4413      	add	r3, r2
 800338c:	4a04      	ldr	r2, [pc, #16]	@ (80033a0 <HAL_IncTick+0x24>)
 800338e:	6013      	str	r3, [r2, #0]
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000008 	.word	0x20000008
 80033a0:	2000049c 	.word	0x2000049c

080033a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return uwTick;
 80033a8:	4b03      	ldr	r3, [pc, #12]	@ (80033b8 <HAL_GetTick+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	2000049c 	.word	0x2000049c

080033bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7ff ffee 	bl	80033a4 <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d005      	beq.n	80033e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <HAL_Delay+0x44>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033e2:	bf00      	nop
 80033e4:	f7ff ffde 	bl	80033a4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d8f7      	bhi.n	80033e4 <HAL_Delay+0x28>
  {
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000008 	.word	0x20000008

08003404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e033      	b.n	8003482 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fc08 	bl	8002c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800344a:	f023 0302 	bic.w	r3, r3, #2
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fad8 	bl	8003a0c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	@ 0x40
 8003472:	e001      	b.n	8003478 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_Start+0x1a>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e0b2      	b.n	800360c <HAL_ADC_Start+0x180>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d018      	beq.n	80034ee <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034cc:	4b52      	ldr	r3, [pc, #328]	@ (8003618 <HAL_ADC_Start+0x18c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a52      	ldr	r2, [pc, #328]	@ (800361c <HAL_ADC_Start+0x190>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	0c9a      	lsrs	r2, r3, #18
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034e0:	e002      	b.n	80034e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f9      	bne.n	80034e2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d17a      	bne.n	80035f2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003526:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353a:	d106      	bne.n	800354a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	f023 0206 	bic.w	r2, r3, #6
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	645a      	str	r2, [r3, #68]	@ 0x44
 8003548:	e002      	b.n	8003550 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003558:	4b31      	ldr	r3, [pc, #196]	@ (8003620 <HAL_ADC_Start+0x194>)
 800355a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003564:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	2b00      	cmp	r3, #0
 8003570:	d12a      	bne.n	80035c8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2b      	ldr	r2, [pc, #172]	@ (8003624 <HAL_ADC_Start+0x198>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d015      	beq.n	80035a8 <HAL_ADC_Start+0x11c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a29      	ldr	r2, [pc, #164]	@ (8003628 <HAL_ADC_Start+0x19c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d105      	bne.n	8003592 <HAL_ADC_Start+0x106>
 8003586:	4b26      	ldr	r3, [pc, #152]	@ (8003620 <HAL_ADC_Start+0x194>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a25      	ldr	r2, [pc, #148]	@ (800362c <HAL_ADC_Start+0x1a0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d136      	bne.n	800360a <HAL_ADC_Start+0x17e>
 800359c:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <HAL_ADC_Start+0x194>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d130      	bne.n	800360a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d129      	bne.n	800360a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	e020      	b.n	800360a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a15      	ldr	r2, [pc, #84]	@ (8003624 <HAL_ADC_Start+0x198>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d11b      	bne.n	800360a <HAL_ADC_Start+0x17e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d114      	bne.n	800360a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	e00b      	b.n	800360a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f043 0210 	orr.w	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	20000000 	.word	0x20000000
 800361c:	431bde83 	.word	0x431bde83
 8003620:	40012300 	.word	0x40012300
 8003624:	40012000 	.word	0x40012000
 8003628:	40012100 	.word	0x40012100
 800362c:	40012200 	.word	0x40012200

08003630 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_ADC_Stop+0x16>
 8003642:	2302      	movs	r3, #2
 8003644:	e021      	b.n	800368a <HAL_ADC_Stop+0x5a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d113      	bne.n	80036dc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c2:	d10b      	bne.n	80036dc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e063      	b.n	80037a4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80036dc:	f7ff fe62 	bl	80033a4 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036e2:	e021      	b.n	8003728 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d01d      	beq.n	8003728 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_ADC_PollForConversion+0x6c>
 80036f2:	f7ff fe57 	bl	80033a4 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d212      	bcs.n	8003728 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d00b      	beq.n	8003728 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e03d      	b.n	80037a4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d1d6      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0212 	mvn.w	r2, #18
 800373e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d123      	bne.n	80037a2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11f      	bne.n	80037a2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800376c:	2b00      	cmp	r3, #0
 800376e:	d006      	beq.n	800377e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800377a:	2b00      	cmp	r3, #0
 800377c:	d111      	bne.n	80037a2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	f043 0201 	orr.w	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x1c>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e105      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x228>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d925      	bls.n	8003840 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68d9      	ldr	r1, [r3, #12]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	3b1e      	subs	r3, #30
 800380a:	2207      	movs	r2, #7
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43da      	mvns	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	400a      	ands	r2, r1
 8003818:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68d9      	ldr	r1, [r3, #12]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	4618      	mov	r0, r3
 800382c:	4603      	mov	r3, r0
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	4403      	add	r3, r0
 8003832:	3b1e      	subs	r3, #30
 8003834:	409a      	lsls	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	e022      	b.n	8003886 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6919      	ldr	r1, [r3, #16]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	2207      	movs	r2, #7
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	400a      	ands	r2, r1
 8003862:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6919      	ldr	r1, [r3, #16]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4618      	mov	r0, r3
 8003876:	4603      	mov	r3, r0
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4403      	add	r3, r0
 800387c:	409a      	lsls	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b06      	cmp	r3, #6
 800388c:	d824      	bhi.n	80038d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	3b05      	subs	r3, #5
 80038a0:	221f      	movs	r2, #31
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	400a      	ands	r2, r1
 80038ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4618      	mov	r0, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	3b05      	subs	r3, #5
 80038ca:	fa00 f203 	lsl.w	r2, r0, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80038d6:	e04c      	b.n	8003972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d824      	bhi.n	800392a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	3b23      	subs	r3, #35	@ 0x23
 80038f2:	221f      	movs	r2, #31
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43da      	mvns	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	400a      	ands	r2, r1
 8003900:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	4618      	mov	r0, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	3b23      	subs	r3, #35	@ 0x23
 800391c:	fa00 f203 	lsl.w	r2, r0, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
 8003928:	e023      	b.n	8003972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	3b41      	subs	r3, #65	@ 0x41
 800393c:	221f      	movs	r2, #31
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	400a      	ands	r2, r1
 800394a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	4618      	mov	r0, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	3b41      	subs	r3, #65	@ 0x41
 8003966:	fa00 f203 	lsl.w	r2, r0, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <HAL_ADC_ConfigChannel+0x234>)
 8003974:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a21      	ldr	r2, [pc, #132]	@ (8003a00 <HAL_ADC_ConfigChannel+0x238>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d109      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x1cc>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b12      	cmp	r3, #18
 8003986:	d105      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a19      	ldr	r2, [pc, #100]	@ (8003a00 <HAL_ADC_ConfigChannel+0x238>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d123      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x21e>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d003      	beq.n	80039ae <HAL_ADC_ConfigChannel+0x1e6>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b11      	cmp	r3, #17
 80039ac:	d11b      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d111      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039c2:	4b10      	ldr	r3, [pc, #64]	@ (8003a04 <HAL_ADC_ConfigChannel+0x23c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a10      	ldr	r2, [pc, #64]	@ (8003a08 <HAL_ADC_ConfigChannel+0x240>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	0c9a      	lsrs	r2, r3, #18
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039d8:	e002      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3b01      	subs	r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f9      	bne.n	80039da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40012300 	.word	0x40012300
 8003a00:	40012000 	.word	0x40012000
 8003a04:	20000000 	.word	0x20000000
 8003a08:	431bde83 	.word	0x431bde83

08003a0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a14:	4b79      	ldr	r3, [pc, #484]	@ (8003bfc <ADC_Init+0x1f0>)
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	021a      	lsls	r2, r3, #8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	4a58      	ldr	r2, [pc, #352]	@ (8003c00 <ADC_Init+0x1f4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ab2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	e00f      	b.n	8003b0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b08:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0202 	bic.w	r2, r2, #2
 8003b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6899      	ldr	r1, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7e1b      	ldrb	r3, [r3, #24]
 8003b24:	005a      	lsls	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01b      	beq.n	8003b70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b46:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	3b01      	subs	r3, #1
 8003b64:	035a      	lsls	r2, r3, #13
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	e007      	b.n	8003b80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b7e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	051a      	lsls	r2, r3, #20
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bc2:	025a      	lsls	r2, r3, #9
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	029a      	lsls	r2, r3, #10
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40012300 	.word	0x40012300
 8003c00:	0f000001 	.word	0x0f000001

08003c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c14:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c36:	4a04      	ldr	r2, [pc, #16]	@ (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	60d3      	str	r3, [r2, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c50:	4b04      	ldr	r3, [pc, #16]	@ (8003c64 <__NVIC_GetPriorityGrouping+0x18>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 0307 	and.w	r3, r3, #7
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db0b      	blt.n	8003c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4907      	ldr	r1, [pc, #28]	@ (8003ca0 <__NVIC_EnableIRQ+0x38>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2001      	movs	r0, #1
 8003c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	@ (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	@ (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	@ 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	@ 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff4c 	bl	8003c04 <__NVIC_SetPriorityGrouping>
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d86:	f7ff ff61 	bl	8003c4c <__NVIC_GetPriorityGrouping>
 8003d8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	6978      	ldr	r0, [r7, #20]
 8003d92:	f7ff ffb1 	bl	8003cf8 <NVIC_EncodePriority>
 8003d96:	4602      	mov	r2, r0
 8003d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff80 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff54 	bl	8003c68 <__NVIC_EnableIRQ>
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003dd4:	f7ff fae6 	bl	80033a4 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e099      	b.n	8003f18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e04:	e00f      	b.n	8003e26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e06:	f7ff facd 	bl	80033a4 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d908      	bls.n	8003e26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e078      	b.n	8003f18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e8      	bne.n	8003e06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4b38      	ldr	r3, [pc, #224]	@ (8003f20 <HAL_DMA_Init+0x158>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d107      	bne.n	8003e90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0307 	bic.w	r3, r3, #7
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d117      	bne.n	8003eea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fa7b 	bl	80043c8 <DMA_CheckFifoParam>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2240      	movs	r2, #64	@ 0x40
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e016      	b.n	8003f18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fa32 	bl	800435c <DMA_CalcBaseAndBitshift>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	223f      	movs	r2, #63	@ 0x3f
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	f010803f 	.word	0xf010803f

08003f24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f32:	f7ff fa37 	bl	80033a4 <HAL_GetTick>
 8003f36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d008      	beq.n	8003f56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2280      	movs	r2, #128	@ 0x80
 8003f48:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e052      	b.n	8003ffc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0216 	bic.w	r2, r2, #22
 8003f64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <HAL_DMA_Abort+0x62>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0208 	bic.w	r2, r2, #8
 8003f94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa6:	e013      	b.n	8003fd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fa8:	f7ff f9fc 	bl	80033a4 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d90c      	bls.n	8003fd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e015      	b.n	8003ffc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e4      	bne.n	8003fa8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	223f      	movs	r2, #63	@ 0x3f
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d004      	beq.n	8004022 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2280      	movs	r2, #128	@ 0x80
 800401c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e00c      	b.n	800403c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2205      	movs	r2, #5
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004054:	4b8e      	ldr	r3, [pc, #568]	@ (8004290 <HAL_DMA_IRQHandler+0x248>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a8e      	ldr	r2, [pc, #568]	@ (8004294 <HAL_DMA_IRQHandler+0x24c>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0a9b      	lsrs	r3, r3, #10
 8004060:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004066:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004072:	2208      	movs	r2, #8
 8004074:	409a      	lsls	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01a      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0204 	bic.w	r2, r2, #4
 800409a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	2208      	movs	r2, #8
 80040a2:	409a      	lsls	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	2201      	movs	r2, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d012      	beq.n	80040ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d6:	2201      	movs	r2, #1
 80040d8:	409a      	lsls	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e2:	f043 0202 	orr.w	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ee:	2204      	movs	r2, #4
 80040f0:	409a      	lsls	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d012      	beq.n	8004120 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	2204      	movs	r2, #4
 800410e:	409a      	lsls	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004118:	f043 0204 	orr.w	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004124:	2210      	movs	r2, #16
 8004126:	409a      	lsls	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d043      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03c      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004142:	2210      	movs	r2, #16
 8004144:	409a      	lsls	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d018      	beq.n	800418a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d108      	bne.n	8004178 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d024      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
 8004176:	e01f      	b.n	80041b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01b      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
 8004188:	e016      	b.n	80041b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d107      	bne.n	80041a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0208 	bic.w	r2, r2, #8
 80041a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041bc:	2220      	movs	r2, #32
 80041be:	409a      	lsls	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 808f 	beq.w	80042e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8087 	beq.w	80042e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	2220      	movs	r2, #32
 80041e0:	409a      	lsls	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b05      	cmp	r3, #5
 80041f0:	d136      	bne.n	8004260 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0216 	bic.w	r2, r2, #22
 8004200:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004210:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <HAL_DMA_IRQHandler+0x1da>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0208 	bic.w	r2, r2, #8
 8004230:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004236:	223f      	movs	r2, #63	@ 0x3f
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d07e      	beq.n	8004354 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
        }
        return;
 800425e:	e079      	b.n	8004354 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004280:	2b00      	cmp	r3, #0
 8004282:	d031      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
 800428c:	e02c      	b.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
 800428e:	bf00      	nop
 8004290:	20000000 	.word	0x20000000
 8004294:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d023      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
 80042a8:	e01e      	b.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10f      	bne.n	80042d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0210 	bic.w	r2, r2, #16
 80042c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d032      	beq.n	8004356 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d022      	beq.n	8004342 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2205      	movs	r2, #5
 8004300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3301      	adds	r3, #1
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	429a      	cmp	r2, r3
 800431e:	d307      	bcc.n	8004330 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f2      	bne.n	8004314 <HAL_DMA_IRQHandler+0x2cc>
 800432e:	e000      	b.n	8004332 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004330:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
 8004352:	e000      	b.n	8004356 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004354:	bf00      	nop
    }
  }
}
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	3b10      	subs	r3, #16
 800436c:	4a14      	ldr	r2, [pc, #80]	@ (80043c0 <DMA_CalcBaseAndBitshift+0x64>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004376:	4a13      	ldr	r2, [pc, #76]	@ (80043c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d909      	bls.n	800439e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004392:	f023 0303 	bic.w	r3, r3, #3
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	659a      	str	r2, [r3, #88]	@ 0x58
 800439c:	e007      	b.n	80043ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	aaaaaaab 	.word	0xaaaaaaab
 80043c4:	0800fbec 	.word	0x0800fbec

080043c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d11f      	bne.n	8004422 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d856      	bhi.n	8004496 <DMA_CheckFifoParam+0xce>
 80043e8:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <DMA_CheckFifoParam+0x28>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004401 	.word	0x08004401
 80043f4:	08004413 	.word	0x08004413
 80043f8:	08004401 	.word	0x08004401
 80043fc:	08004497 	.word	0x08004497
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d046      	beq.n	800449a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004410:	e043      	b.n	800449a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800441a:	d140      	bne.n	800449e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004420:	e03d      	b.n	800449e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442a:	d121      	bne.n	8004470 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b03      	cmp	r3, #3
 8004430:	d837      	bhi.n	80044a2 <DMA_CheckFifoParam+0xda>
 8004432:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <DMA_CheckFifoParam+0x70>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	08004449 	.word	0x08004449
 800443c:	0800444f 	.word	0x0800444f
 8004440:	08004449 	.word	0x08004449
 8004444:	08004461 	.word	0x08004461
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      break;
 800444c:	e030      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004452:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d025      	beq.n	80044a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800445e:	e022      	b.n	80044a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004464:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004468:	d11f      	bne.n	80044aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800446e:	e01c      	b.n	80044aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d903      	bls.n	800447e <DMA_CheckFifoParam+0xb6>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d003      	beq.n	8004484 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800447c:	e018      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
      break;
 8004482:	e015      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00e      	beq.n	80044ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      break;
 8004494:	e00b      	b.n	80044ae <DMA_CheckFifoParam+0xe6>
      break;
 8004496:	bf00      	nop
 8004498:	e00a      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
      break;
 800449a:	bf00      	nop
 800449c:	e008      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
      break;
 800449e:	bf00      	nop
 80044a0:	e006      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
      break;
 80044a2:	bf00      	nop
 80044a4:	e004      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
      break;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ae:	bf00      	nop
    }
  } 
  
  return status; 
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b089      	sub	sp, #36	@ 0x24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	e16b      	b.n	80047b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044dc:	2201      	movs	r2, #1
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	f040 815a 	bne.w	80047ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b01      	cmp	r3, #1
 8004504:	d005      	beq.n	8004512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800450e:	2b02      	cmp	r3, #2
 8004510:	d130      	bne.n	8004574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	2203      	movs	r2, #3
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004548:	2201      	movs	r2, #1
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 0201 	and.w	r2, r3, #1
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b03      	cmp	r3, #3
 800457e:	d017      	beq.n	80045b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	2203      	movs	r2, #3
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d123      	bne.n	8004604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	08da      	lsrs	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3208      	adds	r2, #8
 80045c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	220f      	movs	r2, #15
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	08da      	lsrs	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3208      	adds	r2, #8
 80045fe:	69b9      	ldr	r1, [r7, #24]
 8004600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0203 	and.w	r2, r3, #3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80b4 	beq.w	80047ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	4b60      	ldr	r3, [pc, #384]	@ (80047cc <HAL_GPIO_Init+0x30c>)
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	4a5f      	ldr	r2, [pc, #380]	@ (80047cc <HAL_GPIO_Init+0x30c>)
 8004650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004654:	6453      	str	r3, [r2, #68]	@ 0x44
 8004656:	4b5d      	ldr	r3, [pc, #372]	@ (80047cc <HAL_GPIO_Init+0x30c>)
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004662:	4a5b      	ldr	r2, [pc, #364]	@ (80047d0 <HAL_GPIO_Init+0x310>)
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	089b      	lsrs	r3, r3, #2
 8004668:	3302      	adds	r3, #2
 800466a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	220f      	movs	r2, #15
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a52      	ldr	r2, [pc, #328]	@ (80047d4 <HAL_GPIO_Init+0x314>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d02b      	beq.n	80046e6 <HAL_GPIO_Init+0x226>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a51      	ldr	r2, [pc, #324]	@ (80047d8 <HAL_GPIO_Init+0x318>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d025      	beq.n	80046e2 <HAL_GPIO_Init+0x222>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a50      	ldr	r2, [pc, #320]	@ (80047dc <HAL_GPIO_Init+0x31c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01f      	beq.n	80046de <HAL_GPIO_Init+0x21e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4f      	ldr	r2, [pc, #316]	@ (80047e0 <HAL_GPIO_Init+0x320>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d019      	beq.n	80046da <HAL_GPIO_Init+0x21a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4e      	ldr	r2, [pc, #312]	@ (80047e4 <HAL_GPIO_Init+0x324>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_GPIO_Init+0x216>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4d      	ldr	r2, [pc, #308]	@ (80047e8 <HAL_GPIO_Init+0x328>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00d      	beq.n	80046d2 <HAL_GPIO_Init+0x212>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4c      	ldr	r2, [pc, #304]	@ (80047ec <HAL_GPIO_Init+0x32c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <HAL_GPIO_Init+0x20e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a4b      	ldr	r2, [pc, #300]	@ (80047f0 <HAL_GPIO_Init+0x330>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_GPIO_Init+0x20a>
 80046c6:	2307      	movs	r3, #7
 80046c8:	e00e      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046ca:	2308      	movs	r3, #8
 80046cc:	e00c      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046ce:	2306      	movs	r3, #6
 80046d0:	e00a      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046d2:	2305      	movs	r3, #5
 80046d4:	e008      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046d6:	2304      	movs	r3, #4
 80046d8:	e006      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046da:	2303      	movs	r3, #3
 80046dc:	e004      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046de:	2302      	movs	r3, #2
 80046e0:	e002      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046e6:	2300      	movs	r3, #0
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	f002 0203 	and.w	r2, r2, #3
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	4093      	lsls	r3, r2
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f8:	4935      	ldr	r1, [pc, #212]	@ (80047d0 <HAL_GPIO_Init+0x310>)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	3302      	adds	r3, #2
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004706:	4b3b      	ldr	r3, [pc, #236]	@ (80047f4 <HAL_GPIO_Init+0x334>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800472a:	4a32      	ldr	r2, [pc, #200]	@ (80047f4 <HAL_GPIO_Init+0x334>)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004730:	4b30      	ldr	r3, [pc, #192]	@ (80047f4 <HAL_GPIO_Init+0x334>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004754:	4a27      	ldr	r2, [pc, #156]	@ (80047f4 <HAL_GPIO_Init+0x334>)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800475a:	4b26      	ldr	r3, [pc, #152]	@ (80047f4 <HAL_GPIO_Init+0x334>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800477e:	4a1d      	ldr	r2, [pc, #116]	@ (80047f4 <HAL_GPIO_Init+0x334>)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004784:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <HAL_GPIO_Init+0x334>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047a8:	4a12      	ldr	r2, [pc, #72]	@ (80047f4 <HAL_GPIO_Init+0x334>)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3301      	adds	r3, #1
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	f67f ae90 	bls.w	80044dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	3724      	adds	r7, #36	@ 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40013800 	.word	0x40013800
 80047d4:	40020000 	.word	0x40020000
 80047d8:	40020400 	.word	0x40020400
 80047dc:	40020800 	.word	0x40020800
 80047e0:	40020c00 	.word	0x40020c00
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40021400 	.word	0x40021400
 80047ec:	40021800 	.word	0x40021800
 80047f0:	40021c00 	.word	0x40021c00
 80047f4:	40013c00 	.word	0x40013c00

080047f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
 8004804:	4613      	mov	r3, r2
 8004806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004808:	787b      	ldrb	r3, [r7, #1]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004814:	e003      	b.n	800481e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	041a      	lsls	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	619a      	str	r2, [r3, #24]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e12b      	b.n	8004a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fe fa68 	bl	8002d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	@ 0x24
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800487e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800488e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004890:	f001 fc20 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 8004894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4a81      	ldr	r2, [pc, #516]	@ (8004aa0 <HAL_I2C_Init+0x274>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d807      	bhi.n	80048b0 <HAL_I2C_Init+0x84>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a80      	ldr	r2, [pc, #512]	@ (8004aa4 <HAL_I2C_Init+0x278>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	bf94      	ite	ls
 80048a8:	2301      	movls	r3, #1
 80048aa:	2300      	movhi	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e006      	b.n	80048be <HAL_I2C_Init+0x92>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a7d      	ldr	r2, [pc, #500]	@ (8004aa8 <HAL_I2C_Init+0x27c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	bf94      	ite	ls
 80048b8:	2301      	movls	r3, #1
 80048ba:	2300      	movhi	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0e7      	b.n	8004a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a78      	ldr	r2, [pc, #480]	@ (8004aac <HAL_I2C_Init+0x280>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	0c9b      	lsrs	r3, r3, #18
 80048d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa0 <HAL_I2C_Init+0x274>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d802      	bhi.n	8004900 <HAL_I2C_Init+0xd4>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	3301      	adds	r3, #1
 80048fe:	e009      	b.n	8004914 <HAL_I2C_Init+0xe8>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	4a69      	ldr	r2, [pc, #420]	@ (8004ab0 <HAL_I2C_Init+0x284>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	099b      	lsrs	r3, r3, #6
 8004912:	3301      	adds	r3, #1
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	430b      	orrs	r3, r1
 800491a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004926:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	495c      	ldr	r1, [pc, #368]	@ (8004aa0 <HAL_I2C_Init+0x274>)
 8004930:	428b      	cmp	r3, r1
 8004932:	d819      	bhi.n	8004968 <HAL_I2C_Init+0x13c>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1e59      	subs	r1, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004942:	1c59      	adds	r1, r3, #1
 8004944:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004948:	400b      	ands	r3, r1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_I2C_Init+0x138>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1e59      	subs	r1, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	fbb1 f3f3 	udiv	r3, r1, r3
 800495c:	3301      	adds	r3, #1
 800495e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004962:	e051      	b.n	8004a08 <HAL_I2C_Init+0x1dc>
 8004964:	2304      	movs	r3, #4
 8004966:	e04f      	b.n	8004a08 <HAL_I2C_Init+0x1dc>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d111      	bne.n	8004994 <HAL_I2C_Init+0x168>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1e58      	subs	r0, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	440b      	add	r3, r1
 800497e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e012      	b.n	80049ba <HAL_I2C_Init+0x18e>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1e58      	subs	r0, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	0099      	lsls	r1, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049aa:	3301      	adds	r3, #1
 80049ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Init+0x196>
 80049be:	2301      	movs	r3, #1
 80049c0:	e022      	b.n	8004a08 <HAL_I2C_Init+0x1dc>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10e      	bne.n	80049e8 <HAL_I2C_Init+0x1bc>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1e58      	subs	r0, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6859      	ldr	r1, [r3, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	440b      	add	r3, r1
 80049d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80049dc:	3301      	adds	r3, #1
 80049de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e6:	e00f      	b.n	8004a08 <HAL_I2C_Init+0x1dc>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1e58      	subs	r0, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	0099      	lsls	r1, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80049fe:	3301      	adds	r3, #1
 8004a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	6809      	ldr	r1, [r1, #0]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69da      	ldr	r2, [r3, #28]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6911      	ldr	r1, [r2, #16]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68d2      	ldr	r2, [r2, #12]
 8004a42:	4311      	orrs	r1, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	000186a0 	.word	0x000186a0
 8004aa4:	001e847f 	.word	0x001e847f
 8004aa8:	003d08ff 	.word	0x003d08ff
 8004aac:	431bde83 	.word	0x431bde83
 8004ab0:	10624dd3 	.word	0x10624dd3

08004ab4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	817b      	strh	r3, [r7, #10]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	813b      	strh	r3, [r7, #8]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ace:	f7fe fc69 	bl	80033a4 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	f040 80d9 	bne.w	8004c94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	2319      	movs	r3, #25
 8004ae8:	2201      	movs	r2, #1
 8004aea:	496d      	ldr	r1, [pc, #436]	@ (8004ca0 <HAL_I2C_Mem_Write+0x1ec>)
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fc8b 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
 8004afa:	e0cc      	b.n	8004c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_I2C_Mem_Write+0x56>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e0c5      	b.n	8004c96 <HAL_I2C_Mem_Write+0x1e2>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d007      	beq.n	8004b30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2221      	movs	r2, #33	@ 0x21
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2240      	movs	r2, #64	@ 0x40
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a4d      	ldr	r2, [pc, #308]	@ (8004ca4 <HAL_I2C_Mem_Write+0x1f0>)
 8004b70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b72:	88f8      	ldrh	r0, [r7, #6]
 8004b74:	893a      	ldrh	r2, [r7, #8]
 8004b76:	8979      	ldrh	r1, [r7, #10]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4603      	mov	r3, r0
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fac2 	bl	800510c <I2C_RequestMemoryWrite>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d052      	beq.n	8004c34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e081      	b.n	8004c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fd50 	bl	800563c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d107      	bne.n	8004bba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e06b      	b.n	8004c96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d11b      	bne.n	8004c34 <HAL_I2C_Mem_Write+0x180>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d017      	beq.n	8004c34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1aa      	bne.n	8004b92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fd43 	bl	80056cc <I2C_WaitOnBTFFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00d      	beq.n	8004c68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d107      	bne.n	8004c64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e016      	b.n	8004c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e000      	b.n	8004c96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	00100002 	.word	0x00100002
 8004ca4:	ffff0000 	.word	0xffff0000

08004ca8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	@ 0x30
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	817b      	strh	r3, [r7, #10]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	813b      	strh	r3, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cc2:	f7fe fb6f 	bl	80033a4 <HAL_GetTick>
 8004cc6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	f040 8214 	bne.w	80050fe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	2319      	movs	r3, #25
 8004cdc:	2201      	movs	r2, #1
 8004cde:	497b      	ldr	r1, [pc, #492]	@ (8004ecc <HAL_I2C_Mem_Read+0x224>)
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fb91 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
 8004cee:	e207      	b.n	8005100 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_I2C_Mem_Read+0x56>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e200      	b.n	8005100 <HAL_I2C_Mem_Read+0x458>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d007      	beq.n	8004d24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2222      	movs	r2, #34	@ 0x22
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2240      	movs	r2, #64	@ 0x40
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a5b      	ldr	r2, [pc, #364]	@ (8004ed0 <HAL_I2C_Mem_Read+0x228>)
 8004d64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d66:	88f8      	ldrh	r0, [r7, #6]
 8004d68:	893a      	ldrh	r2, [r7, #8]
 8004d6a:	8979      	ldrh	r1, [r7, #10]
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	4603      	mov	r3, r0
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fa5e 	bl	8005238 <I2C_RequestMemoryRead>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e1bc      	b.n	8005100 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d113      	bne.n	8004db6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8e:	2300      	movs	r3, #0
 8004d90:	623b      	str	r3, [r7, #32]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	623b      	str	r3, [r7, #32]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	623b      	str	r3, [r7, #32]
 8004da2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e190      	b.n	80050d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d11b      	bne.n	8004df6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e170      	b.n	80050d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d11b      	bne.n	8004e36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	e150      	b.n	80050d8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e4c:	e144      	b.n	80050d8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	f200 80f1 	bhi.w	800503a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d123      	bne.n	8004ea8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fc79 	bl	800575c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e145      	b.n	8005100 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ea6:	e117      	b.n	80050d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d14e      	bne.n	8004f4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4906      	ldr	r1, [pc, #24]	@ (8004ed4 <HAL_I2C_Mem_Read+0x22c>)
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 faa4 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e11a      	b.n	8005100 <HAL_I2C_Mem_Read+0x458>
 8004eca:	bf00      	nop
 8004ecc:	00100002 	.word	0x00100002
 8004ed0:	ffff0000 	.word	0xffff0000
 8004ed4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f4c:	e0c4      	b.n	80050d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f54:	2200      	movs	r2, #0
 8004f56:	496c      	ldr	r1, [pc, #432]	@ (8005108 <HAL_I2C_Mem_Read+0x460>)
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fa55 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0cb      	b.n	8005100 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	4955      	ldr	r1, [pc, #340]	@ (8005108 <HAL_I2C_Mem_Read+0x460>)
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fa27 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e09d      	b.n	8005100 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005038:	e04e      	b.n	80050d8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800503a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fb8c 	bl	800575c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e058      	b.n	8005100 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b04      	cmp	r3, #4
 800508c:	d124      	bne.n	80050d8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005092:	2b03      	cmp	r3, #3
 8005094:	d107      	bne.n	80050a6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f47f aeb6 	bne.w	8004e4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e000      	b.n	8005100 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3728      	adds	r7, #40	@ 0x28
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	00010004 	.word	0x00010004

0800510c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	4608      	mov	r0, r1
 8005116:	4611      	mov	r1, r2
 8005118:	461a      	mov	r2, r3
 800511a:	4603      	mov	r3, r0
 800511c:	817b      	strh	r3, [r7, #10]
 800511e:	460b      	mov	r3, r1
 8005120:	813b      	strh	r3, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005134:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	2200      	movs	r2, #0
 800513e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f960 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800515c:	d103      	bne.n	8005166 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005164:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e05f      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800516a:	897b      	ldrh	r3, [r7, #10]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005178:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	6a3a      	ldr	r2, [r7, #32]
 800517e:	492d      	ldr	r1, [pc, #180]	@ (8005234 <I2C_RequestMemoryWrite+0x128>)
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f9bb 	bl	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e04c      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a8:	6a39      	ldr	r1, [r7, #32]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fa46 	bl	800563c <I2C_WaitOnTXEFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d107      	bne.n	80051ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e02b      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d105      	bne.n	80051e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051d8:	893b      	ldrh	r3, [r7, #8]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	611a      	str	r2, [r3, #16]
 80051e2:	e021      	b.n	8005228 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051e4:	893b      	ldrh	r3, [r7, #8]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f4:	6a39      	ldr	r1, [r7, #32]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fa20 	bl	800563c <I2C_WaitOnTXEFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00d      	beq.n	800521e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	2b04      	cmp	r3, #4
 8005208:	d107      	bne.n	800521a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005218:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e005      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800521e:	893b      	ldrh	r3, [r7, #8]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	00010002 	.word	0x00010002

08005238 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	4608      	mov	r0, r1
 8005242:	4611      	mov	r1, r2
 8005244:	461a      	mov	r2, r3
 8005246:	4603      	mov	r3, r0
 8005248:	817b      	strh	r3, [r7, #10]
 800524a:	460b      	mov	r3, r1
 800524c:	813b      	strh	r3, [r7, #8]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005260:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	2200      	movs	r2, #0
 800527a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f8c2 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005298:	d103      	bne.n	80052a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e0aa      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052a6:	897b      	ldrh	r3, [r7, #10]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	4952      	ldr	r1, [pc, #328]	@ (8005404 <I2C_RequestMemoryRead+0x1cc>)
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f91d 	bl	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e097      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e4:	6a39      	ldr	r1, [r7, #32]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f9a8 	bl	800563c <I2C_WaitOnTXEFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d107      	bne.n	800530a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e076      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005314:	893b      	ldrh	r3, [r7, #8]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	611a      	str	r2, [r3, #16]
 800531e:	e021      	b.n	8005364 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005320:	893b      	ldrh	r3, [r7, #8]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	b29b      	uxth	r3, r3
 8005326:	b2da      	uxtb	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800532e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005330:	6a39      	ldr	r1, [r7, #32]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f982 	bl	800563c <I2C_WaitOnTXEFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	2b04      	cmp	r3, #4
 8005344:	d107      	bne.n	8005356 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e050      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800535a:	893b      	ldrh	r3, [r7, #8]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005366:	6a39      	ldr	r1, [r7, #32]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f967 	bl	800563c <I2C_WaitOnTXEFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00d      	beq.n	8005390 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005378:	2b04      	cmp	r3, #4
 800537a:	d107      	bne.n	800538c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800538a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e035      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800539e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f82b 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c6:	d103      	bne.n	80053d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e013      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053d4:	897b      	ldrh	r3, [r7, #10]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	6a3a      	ldr	r2, [r7, #32]
 80053e8:	4906      	ldr	r1, [pc, #24]	@ (8005404 <I2C_RequestMemoryRead+0x1cc>)
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f886 	bl	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	00010002 	.word	0x00010002

08005408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005418:	e048      	b.n	80054ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d044      	beq.n	80054ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005422:	f7fd ffbf 	bl	80033a4 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d139      	bne.n	80054ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d10d      	bne.n	800545e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	43da      	mvns	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	e00c      	b.n	8005478 <I2C_WaitOnFlagUntilTimeout+0x70>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	43da      	mvns	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	429a      	cmp	r2, r3
 800547c:	d116      	bne.n	80054ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	f043 0220 	orr.w	r2, r3, #32
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e023      	b.n	80054f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	0c1b      	lsrs	r3, r3, #16
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d10d      	bne.n	80054d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	43da      	mvns	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	e00c      	b.n	80054ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	43da      	mvns	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4013      	ands	r3, r2
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d093      	beq.n	800541a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800550a:	e071      	b.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800551a:	d123      	bne.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800552a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005534:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	f043 0204 	orr.w	r2, r3, #4
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e067      	b.n	8005634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d041      	beq.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556c:	f7fd ff1a 	bl	80033a4 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	429a      	cmp	r2, r3
 800557a:	d302      	bcc.n	8005582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d136      	bne.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10c      	bne.n	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	43da      	mvns	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	bf14      	ite	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	2300      	moveq	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	e00b      	b.n	80055be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	43da      	mvns	r2, r3
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4013      	ands	r3, r2
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bf14      	ite	ne
 80055b8:	2301      	movne	r3, #1
 80055ba:	2300      	moveq	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	f043 0220 	orr.w	r2, r3, #32
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e021      	b.n	8005634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	0c1b      	lsrs	r3, r3, #16
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d10c      	bne.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	43da      	mvns	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4013      	ands	r3, r2
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	bf14      	ite	ne
 800560c:	2301      	movne	r3, #1
 800560e:	2300      	moveq	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	e00b      	b.n	800562c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	43da      	mvns	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	f47f af6d 	bne.w	800550c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005648:	e034      	b.n	80056b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f8e3 	bl	8005816 <I2C_IsAcknowledgeFailed>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e034      	b.n	80056c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d028      	beq.n	80056b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005662:	f7fd fe9f 	bl	80033a4 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	429a      	cmp	r2, r3
 8005670:	d302      	bcc.n	8005678 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11d      	bne.n	80056b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005682:	2b80      	cmp	r3, #128	@ 0x80
 8005684:	d016      	beq.n	80056b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	f043 0220 	orr.w	r2, r3, #32
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e007      	b.n	80056c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056be:	2b80      	cmp	r3, #128	@ 0x80
 80056c0:	d1c3      	bne.n	800564a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056d8:	e034      	b.n	8005744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f89b 	bl	8005816 <I2C_IsAcknowledgeFailed>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e034      	b.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d028      	beq.n	8005744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f2:	f7fd fe57 	bl	80033a4 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11d      	bne.n	8005744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b04      	cmp	r3, #4
 8005714:	d016      	beq.n	8005744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e007      	b.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b04      	cmp	r3, #4
 8005750:	d1c3      	bne.n	80056da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005768:	e049      	b.n	80057fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b10      	cmp	r3, #16
 8005776:	d119      	bne.n	80057ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0210 	mvn.w	r2, #16
 8005780:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e030      	b.n	800580e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ac:	f7fd fdfa 	bl	80033a4 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d302      	bcc.n	80057c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d11d      	bne.n	80057fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057cc:	2b40      	cmp	r3, #64	@ 0x40
 80057ce:	d016      	beq.n	80057fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	f043 0220 	orr.w	r2, r3, #32
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e007      	b.n	800580e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005808:	2b40      	cmp	r3, #64	@ 0x40
 800580a:	d1ae      	bne.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582c:	d11b      	bne.n	8005866 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005836:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	f043 0204 	orr.w	r2, r3, #4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e267      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d075      	beq.n	800597e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005892:	4b88      	ldr	r3, [pc, #544]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b04      	cmp	r3, #4
 800589c:	d00c      	beq.n	80058b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800589e:	4b85      	ldr	r3, [pc, #532]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d112      	bne.n	80058d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058aa:	4b82      	ldr	r3, [pc, #520]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058b6:	d10b      	bne.n	80058d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05b      	beq.n	800597c <HAL_RCC_OscConfig+0x108>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d157      	bne.n	800597c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e242      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d8:	d106      	bne.n	80058e8 <HAL_RCC_OscConfig+0x74>
 80058da:	4b76      	ldr	r3, [pc, #472]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a75      	ldr	r2, [pc, #468]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e01d      	b.n	8005924 <HAL_RCC_OscConfig+0xb0>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058f0:	d10c      	bne.n	800590c <HAL_RCC_OscConfig+0x98>
 80058f2:	4b70      	ldr	r3, [pc, #448]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a6f      	ldr	r2, [pc, #444]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	4b6d      	ldr	r3, [pc, #436]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a6c      	ldr	r2, [pc, #432]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e00b      	b.n	8005924 <HAL_RCC_OscConfig+0xb0>
 800590c:	4b69      	ldr	r3, [pc, #420]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a68      	ldr	r2, [pc, #416]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	4b66      	ldr	r3, [pc, #408]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a65      	ldr	r2, [pc, #404]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 800591e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d013      	beq.n	8005954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592c:	f7fd fd3a 	bl	80033a4 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005934:	f7fd fd36 	bl	80033a4 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	@ 0x64
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e207      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005946:	4b5b      	ldr	r3, [pc, #364]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0xc0>
 8005952:	e014      	b.n	800597e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fd fd26 	bl	80033a4 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800595c:	f7fd fd22 	bl	80033a4 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b64      	cmp	r3, #100	@ 0x64
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e1f3      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800596e:	4b51      	ldr	r3, [pc, #324]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0xe8>
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800597c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d063      	beq.n	8005a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800598a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00b      	beq.n	80059ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005996:	4b47      	ldr	r3, [pc, #284]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d11c      	bne.n	80059dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059a2:	4b44      	ldr	r3, [pc, #272]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d116      	bne.n	80059dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ae:	4b41      	ldr	r3, [pc, #260]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_RCC_OscConfig+0x152>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d001      	beq.n	80059c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e1c7      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4937      	ldr	r1, [pc, #220]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059da:	e03a      	b.n	8005a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d020      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e4:	4b34      	ldr	r3, [pc, #208]	@ (8005ab8 <HAL_RCC_OscConfig+0x244>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ea:	f7fd fcdb 	bl	80033a4 <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059f2:	f7fd fcd7 	bl	80033a4 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e1a8      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a04:	4b2b      	ldr	r3, [pc, #172]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0f0      	beq.n	80059f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a10:	4b28      	ldr	r3, [pc, #160]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4925      	ldr	r1, [pc, #148]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]
 8005a24:	e015      	b.n	8005a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a26:	4b24      	ldr	r3, [pc, #144]	@ (8005ab8 <HAL_RCC_OscConfig+0x244>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2c:	f7fd fcba 	bl	80033a4 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a34:	f7fd fcb6 	bl	80033a4 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e187      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a46:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d036      	beq.n	8005acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d016      	beq.n	8005a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a66:	4b15      	ldr	r3, [pc, #84]	@ (8005abc <HAL_RCC_OscConfig+0x248>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fd fc9a 	bl	80033a4 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fd fc96 	bl	80033a4 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e167      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a86:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCC_OscConfig+0x200>
 8005a92:	e01b      	b.n	8005acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a94:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <HAL_RCC_OscConfig+0x248>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9a:	f7fd fc83 	bl	80033a4 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa0:	e00e      	b.n	8005ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa2:	f7fd fc7f 	bl	80033a4 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d907      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e150      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	42470000 	.word	0x42470000
 8005abc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac0:	4b88      	ldr	r3, [pc, #544]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ea      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8097 	beq.w	8005c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ade:	4b81      	ldr	r3, [pc, #516]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10f      	bne.n	8005b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	4b7d      	ldr	r3, [pc, #500]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005afa:	4b7a      	ldr	r3, [pc, #488]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b06:	2301      	movs	r3, #1
 8005b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0a:	4b77      	ldr	r3, [pc, #476]	@ (8005ce8 <HAL_RCC_OscConfig+0x474>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d118      	bne.n	8005b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b16:	4b74      	ldr	r3, [pc, #464]	@ (8005ce8 <HAL_RCC_OscConfig+0x474>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a73      	ldr	r2, [pc, #460]	@ (8005ce8 <HAL_RCC_OscConfig+0x474>)
 8005b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b22:	f7fd fc3f 	bl	80033a4 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2a:	f7fd fc3b 	bl	80033a4 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e10c      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ce8 <HAL_RCC_OscConfig+0x474>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f0      	beq.n	8005b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCC_OscConfig+0x2ea>
 8005b50:	4b64      	ldr	r3, [pc, #400]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b54:	4a63      	ldr	r2, [pc, #396]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b5c:	e01c      	b.n	8005b98 <HAL_RCC_OscConfig+0x324>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b05      	cmp	r3, #5
 8005b64:	d10c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x30c>
 8005b66:	4b5f      	ldr	r3, [pc, #380]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b6c:	f043 0304 	orr.w	r3, r3, #4
 8005b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b72:	4b5c      	ldr	r3, [pc, #368]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b76:	4a5b      	ldr	r2, [pc, #364]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b7e:	e00b      	b.n	8005b98 <HAL_RCC_OscConfig+0x324>
 8005b80:	4b58      	ldr	r3, [pc, #352]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b84:	4a57      	ldr	r2, [pc, #348]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b8c:	4b55      	ldr	r3, [pc, #340]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b90:	4a54      	ldr	r2, [pc, #336]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b92:	f023 0304 	bic.w	r3, r3, #4
 8005b96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7fd fc00 	bl	80033a4 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba6:	e00a      	b.n	8005bbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba8:	f7fd fbfc 	bl	80033a4 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e0cb      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bbe:	4b49      	ldr	r3, [pc, #292]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ee      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x334>
 8005bca:	e014      	b.n	8005bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bcc:	f7fd fbea 	bl	80033a4 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd2:	e00a      	b.n	8005bea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd4:	f7fd fbe6 	bl	80033a4 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e0b5      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bea:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1ee      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d105      	bne.n	8005c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bfc:	4b39      	ldr	r3, [pc, #228]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c00:	4a38      	ldr	r2, [pc, #224]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80a1 	beq.w	8005d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c12:	4b34      	ldr	r3, [pc, #208]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 030c 	and.w	r3, r3, #12
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d05c      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d141      	bne.n	8005caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c26:	4b31      	ldr	r3, [pc, #196]	@ (8005cec <HAL_RCC_OscConfig+0x478>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2c:	f7fd fbba 	bl	80033a4 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c34:	f7fd fbb6 	bl	80033a4 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e087      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c46:	4b27      	ldr	r3, [pc, #156]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	019b      	lsls	r3, r3, #6
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	061b      	lsls	r3, r3, #24
 8005c76:	491b      	ldr	r1, [pc, #108]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cec <HAL_RCC_OscConfig+0x478>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c82:	f7fd fb8f 	bl	80033a4 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8a:	f7fd fb8b 	bl	80033a4 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e05c      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c9c:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f0      	beq.n	8005c8a <HAL_RCC_OscConfig+0x416>
 8005ca8:	e054      	b.n	8005d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005caa:	4b10      	ldr	r3, [pc, #64]	@ (8005cec <HAL_RCC_OscConfig+0x478>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb0:	f7fd fb78 	bl	80033a4 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb8:	f7fd fb74 	bl	80033a4 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e045      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cca:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x444>
 8005cd6:	e03d      	b.n	8005d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d107      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e038      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	40007000 	.word	0x40007000
 8005cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d60 <HAL_RCC_OscConfig+0x4ec>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d028      	beq.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d121      	bne.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d11a      	bne.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d20:	4013      	ands	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d111      	bne.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40023800 	.word	0x40023800

08005d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0cc      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d78:	4b68      	ldr	r3, [pc, #416]	@ (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d90c      	bls.n	8005da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d86:	4b65      	ldr	r3, [pc, #404]	@ (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8e:	4b63      	ldr	r3, [pc, #396]	@ (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0b8      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d020      	beq.n	8005dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005db8:	4b59      	ldr	r3, [pc, #356]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4a58      	ldr	r2, [pc, #352]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dd0:	4b53      	ldr	r3, [pc, #332]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	4a52      	ldr	r2, [pc, #328]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ddc:	4b50      	ldr	r3, [pc, #320]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	494d      	ldr	r1, [pc, #308]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d044      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d107      	bne.n	8005e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	4b47      	ldr	r3, [pc, #284]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d119      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e07f      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d003      	beq.n	8005e22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d107      	bne.n	8005e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e22:	4b3f      	ldr	r3, [pc, #252]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e06f      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e32:	4b3b      	ldr	r3, [pc, #236]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e067      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e42:	4b37      	ldr	r3, [pc, #220]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f023 0203 	bic.w	r2, r3, #3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4934      	ldr	r1, [pc, #208]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e54:	f7fd faa6 	bl	80033a4 <HAL_GetTick>
 8005e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5a:	e00a      	b.n	8005e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e5c:	f7fd faa2 	bl	80033a4 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e04f      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e72:	4b2b      	ldr	r3, [pc, #172]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 020c 	and.w	r2, r3, #12
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d1eb      	bne.n	8005e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e84:	4b25      	ldr	r3, [pc, #148]	@ (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d20c      	bcs.n	8005eac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e92:	4b22      	ldr	r3, [pc, #136]	@ (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9a:	4b20      	ldr	r3, [pc, #128]	@ (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e032      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb8:	4b19      	ldr	r3, [pc, #100]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4916      	ldr	r1, [pc, #88]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ed6:	4b12      	ldr	r3, [pc, #72]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	490e      	ldr	r1, [pc, #56]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005eea:	f000 f821 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	490a      	ldr	r1, [pc, #40]	@ (8005f24 <HAL_RCC_ClockConfig+0x1c0>)
 8005efc:	5ccb      	ldrb	r3, [r1, r3]
 8005efe:	fa22 f303 	lsr.w	r3, r2, r3
 8005f02:	4a09      	ldr	r2, [pc, #36]	@ (8005f28 <HAL_RCC_ClockConfig+0x1c4>)
 8005f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f06:	4b09      	ldr	r3, [pc, #36]	@ (8005f2c <HAL_RCC_ClockConfig+0x1c8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fd f85c 	bl	8002fc8 <HAL_InitTick>

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40023c00 	.word	0x40023c00
 8005f20:	40023800 	.word	0x40023800
 8005f24:	0800fbd4 	.word	0x0800fbd4
 8005f28:	20000000 	.word	0x20000000
 8005f2c:	20000004 	.word	0x20000004

08005f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f34:	b090      	sub	sp, #64	@ 0x40
 8005f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f48:	4b59      	ldr	r3, [pc, #356]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 030c 	and.w	r3, r3, #12
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d00d      	beq.n	8005f70 <HAL_RCC_GetSysClockFreq+0x40>
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	f200 80a1 	bhi.w	800609c <HAL_RCC_GetSysClockFreq+0x16c>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x34>
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d003      	beq.n	8005f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f62:	e09b      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f64:	4b53      	ldr	r3, [pc, #332]	@ (80060b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f68:	e09b      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f6a:	4b53      	ldr	r3, [pc, #332]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f6e:	e098      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f70:	4b4f      	ldr	r3, [pc, #316]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d028      	beq.n	8005fd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f86:	4b4a      	ldr	r3, [pc, #296]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	099b      	lsrs	r3, r3, #6
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	623b      	str	r3, [r7, #32]
 8005f90:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4b47      	ldr	r3, [pc, #284]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f9c:	fb03 f201 	mul.w	r2, r3, r1
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	fb00 f303 	mul.w	r3, r0, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	4a43      	ldr	r2, [pc, #268]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005faa:	fba0 1202 	umull	r1, r2, r0, r2
 8005fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fb0:	460a      	mov	r2, r1
 8005fb2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fb6:	4413      	add	r3, r2
 8005fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	61bb      	str	r3, [r7, #24]
 8005fc0:	61fa      	str	r2, [r7, #28]
 8005fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005fca:	f7fa fe8d 	bl	8000ce8 <__aeabi_uldivmod>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fd6:	e053      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fd8:	4b35      	ldr	r3, [pc, #212]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	099b      	lsrs	r3, r3, #6
 8005fde:	2200      	movs	r2, #0
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	617a      	str	r2, [r7, #20]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005fea:	f04f 0b00 	mov.w	fp, #0
 8005fee:	4652      	mov	r2, sl
 8005ff0:	465b      	mov	r3, fp
 8005ff2:	f04f 0000 	mov.w	r0, #0
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	0159      	lsls	r1, r3, #5
 8005ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006000:	0150      	lsls	r0, r2, #5
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	ebb2 080a 	subs.w	r8, r2, sl
 800600a:	eb63 090b 	sbc.w	r9, r3, fp
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800601a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800601e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006022:	ebb2 0408 	subs.w	r4, r2, r8
 8006026:	eb63 0509 	sbc.w	r5, r3, r9
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	00eb      	lsls	r3, r5, #3
 8006034:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006038:	00e2      	lsls	r2, r4, #3
 800603a:	4614      	mov	r4, r2
 800603c:	461d      	mov	r5, r3
 800603e:	eb14 030a 	adds.w	r3, r4, sl
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	eb45 030b 	adc.w	r3, r5, fp
 8006048:	607b      	str	r3, [r7, #4]
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006056:	4629      	mov	r1, r5
 8006058:	028b      	lsls	r3, r1, #10
 800605a:	4621      	mov	r1, r4
 800605c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006060:	4621      	mov	r1, r4
 8006062:	028a      	lsls	r2, r1, #10
 8006064:	4610      	mov	r0, r2
 8006066:	4619      	mov	r1, r3
 8006068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606a:	2200      	movs	r2, #0
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	60fa      	str	r2, [r7, #12]
 8006070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006074:	f7fa fe38 	bl	8000ce8 <__aeabi_uldivmod>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4613      	mov	r3, r2
 800607e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006080:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	0c1b      	lsrs	r3, r3, #16
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	3301      	adds	r3, #1
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006090:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800609a:	e002      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800609e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80060a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3740      	adds	r7, #64	@ 0x40
 80060a8:	46bd      	mov	sp, r7
 80060aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ae:	bf00      	nop
 80060b0:	40023800 	.word	0x40023800
 80060b4:	00f42400 	.word	0x00f42400
 80060b8:	017d7840 	.word	0x017d7840

080060bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060c0:	4b03      	ldr	r3, [pc, #12]	@ (80060d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000000 	.word	0x20000000

080060d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060d8:	f7ff fff0 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b05      	ldr	r3, [pc, #20]	@ (80060f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	0a9b      	lsrs	r3, r3, #10
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	4903      	ldr	r1, [pc, #12]	@ (80060f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ea:	5ccb      	ldrb	r3, [r1, r3]
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40023800 	.word	0x40023800
 80060f8:	0800fbe4 	.word	0x0800fbe4

080060fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006100:	f7ff ffdc 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 8006104:	4602      	mov	r2, r0
 8006106:	4b05      	ldr	r3, [pc, #20]	@ (800611c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	0b5b      	lsrs	r3, r3, #13
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	4903      	ldr	r1, [pc, #12]	@ (8006120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006112:	5ccb      	ldrb	r3, [r1, r3]
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006118:	4618      	mov	r0, r3
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40023800 	.word	0x40023800
 8006120:	0800fbe4 	.word	0x0800fbe4

08006124 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	220f      	movs	r2, #15
 8006132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006134:	4b12      	ldr	r3, [pc, #72]	@ (8006180 <HAL_RCC_GetClockConfig+0x5c>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0203 	and.w	r2, r3, #3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006140:	4b0f      	ldr	r3, [pc, #60]	@ (8006180 <HAL_RCC_GetClockConfig+0x5c>)
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800614c:	4b0c      	ldr	r3, [pc, #48]	@ (8006180 <HAL_RCC_GetClockConfig+0x5c>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006158:	4b09      	ldr	r3, [pc, #36]	@ (8006180 <HAL_RCC_GetClockConfig+0x5c>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	08db      	lsrs	r3, r3, #3
 800615e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006166:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <HAL_RCC_GetClockConfig+0x60>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0207 	and.w	r2, r3, #7
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	601a      	str	r2, [r3, #0]
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800
 8006184:	40023c00 	.word	0x40023c00

08006188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e041      	b.n	800621e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fc fe24 	bl	8002dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f000 fcd2 	bl	8006b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	d001      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e04e      	b.n	80062de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a23      	ldr	r2, [pc, #140]	@ (80062ec <HAL_TIM_Base_Start_IT+0xc4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d022      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x80>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626a:	d01d      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x80>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1f      	ldr	r2, [pc, #124]	@ (80062f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d018      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x80>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1e      	ldr	r2, [pc, #120]	@ (80062f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x80>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1c      	ldr	r2, [pc, #112]	@ (80062f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00e      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x80>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1b      	ldr	r2, [pc, #108]	@ (80062fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x80>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a19      	ldr	r2, [pc, #100]	@ (8006300 <HAL_TIM_Base_Start_IT+0xd8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x80>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a18      	ldr	r2, [pc, #96]	@ (8006304 <HAL_TIM_Base_Start_IT+0xdc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d111      	bne.n	80062cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b06      	cmp	r3, #6
 80062b8:	d010      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ca:	e007      	b.n	80062dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40010000 	.word	0x40010000
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40000800 	.word	0x40000800
 80062f8:	40000c00 	.word	0x40000c00
 80062fc:	40010400 	.word	0x40010400
 8006300:	40014000 	.word	0x40014000
 8006304:	40001800 	.word	0x40001800

08006308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e041      	b.n	800639e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f839 	bl	80063a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	4619      	mov	r1, r3
 8006346:	4610      	mov	r0, r2
 8006348:	f000 fc12 	bl	8006b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <HAL_TIM_PWM_Start+0x24>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	e022      	b.n	8006426 <HAL_TIM_PWM_Start+0x6a>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d109      	bne.n	80063fa <HAL_TIM_PWM_Start+0x3e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	bf14      	ite	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	2300      	moveq	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	e015      	b.n	8006426 <HAL_TIM_PWM_Start+0x6a>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d109      	bne.n	8006414 <HAL_TIM_PWM_Start+0x58>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	e008      	b.n	8006426 <HAL_TIM_PWM_Start+0x6a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e07c      	b.n	8006528 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0x82>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800643c:	e013      	b.n	8006466 <HAL_TIM_PWM_Start+0xaa>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b04      	cmp	r3, #4
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Start+0x92>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800644c:	e00b      	b.n	8006466 <HAL_TIM_PWM_Start+0xaa>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b08      	cmp	r3, #8
 8006452:	d104      	bne.n	800645e <HAL_TIM_PWM_Start+0xa2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800645c:	e003      	b.n	8006466 <HAL_TIM_PWM_Start+0xaa>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fe6e 	bl	8007150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2d      	ldr	r2, [pc, #180]	@ (8006530 <HAL_TIM_PWM_Start+0x174>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <HAL_TIM_PWM_Start+0xcc>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2c      	ldr	r2, [pc, #176]	@ (8006534 <HAL_TIM_PWM_Start+0x178>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d101      	bne.n	800648c <HAL_TIM_PWM_Start+0xd0>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <HAL_TIM_PWM_Start+0xd2>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a22      	ldr	r2, [pc, #136]	@ (8006530 <HAL_TIM_PWM_Start+0x174>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x136>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d01d      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x136>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006538 <HAL_TIM_PWM_Start+0x17c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d018      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x136>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1d      	ldr	r2, [pc, #116]	@ (800653c <HAL_TIM_PWM_Start+0x180>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x136>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006540 <HAL_TIM_PWM_Start+0x184>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x136>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a16      	ldr	r2, [pc, #88]	@ (8006534 <HAL_TIM_PWM_Start+0x178>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x136>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a18      	ldr	r2, [pc, #96]	@ (8006544 <HAL_TIM_PWM_Start+0x188>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x136>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a16      	ldr	r2, [pc, #88]	@ (8006548 <HAL_TIM_PWM_Start+0x18c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d111      	bne.n	8006516 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b06      	cmp	r3, #6
 8006502:	d010      	beq.n	8006526 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006514:	e007      	b.n	8006526 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0201 	orr.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40010000 	.word	0x40010000
 8006534:	40010400 	.word	0x40010400
 8006538:	40000400 	.word	0x40000400
 800653c:	40000800 	.word	0x40000800
 8006540:	40000c00 	.word	0x40000c00
 8006544:	40014000 	.word	0x40014000
 8006548:	40001800 	.word	0x40001800

0800654c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fdf6 	bl	8007150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a2e      	ldr	r2, [pc, #184]	@ (8006624 <HAL_TIM_PWM_Stop+0xd8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_TIM_PWM_Stop+0x2c>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a2d      	ldr	r2, [pc, #180]	@ (8006628 <HAL_TIM_PWM_Stop+0xdc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d101      	bne.n	800657c <HAL_TIM_PWM_Stop+0x30>
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <HAL_TIM_PWM_Stop+0x32>
 800657c:	2300      	movs	r3, #0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d017      	beq.n	80065b2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6a1a      	ldr	r2, [r3, #32]
 8006588:	f241 1311 	movw	r3, #4369	@ 0x1111
 800658c:	4013      	ands	r3, r2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10f      	bne.n	80065b2 <HAL_TIM_PWM_Stop+0x66>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6a1a      	ldr	r2, [r3, #32]
 8006598:	f240 4344 	movw	r3, #1092	@ 0x444
 800659c:	4013      	ands	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d107      	bne.n	80065b2 <HAL_TIM_PWM_Stop+0x66>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6a1a      	ldr	r2, [r3, #32]
 80065b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10f      	bne.n	80065e2 <HAL_TIM_PWM_Stop+0x96>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6a1a      	ldr	r2, [r3, #32]
 80065c8:	f240 4344 	movw	r3, #1092	@ 0x444
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d107      	bne.n	80065e2 <HAL_TIM_PWM_Stop+0x96>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <HAL_TIM_PWM_Stop+0xa6>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065f0:	e013      	b.n	800661a <HAL_TIM_PWM_Stop+0xce>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d104      	bne.n	8006602 <HAL_TIM_PWM_Stop+0xb6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006600:	e00b      	b.n	800661a <HAL_TIM_PWM_Stop+0xce>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d104      	bne.n	8006612 <HAL_TIM_PWM_Stop+0xc6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006610:	e003      	b.n	800661a <HAL_TIM_PWM_Stop+0xce>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40010000 	.word	0x40010000
 8006628:	40010400 	.word	0x40010400

0800662c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d020      	beq.n	8006690 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01b      	beq.n	8006690 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f06f 0202 	mvn.w	r2, #2
 8006660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa5b 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 800667c:	e005      	b.n	800668a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa4d 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fa5e 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d020      	beq.n	80066dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01b      	beq.n	80066dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0204 	mvn.w	r2, #4
 80066ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa35 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 80066c8:	e005      	b.n	80066d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa27 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa38 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d020      	beq.n	8006728 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01b      	beq.n	8006728 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0208 	mvn.w	r2, #8
 80066f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2204      	movs	r2, #4
 80066fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa0f 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 8006714:	e005      	b.n	8006722 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa01 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fa12 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b00      	cmp	r3, #0
 8006730:	d020      	beq.n	8006774 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01b      	beq.n	8006774 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0210 	mvn.w	r2, #16
 8006744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2208      	movs	r2, #8
 800674a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9e9 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 8006760:	e005      	b.n	800676e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f9db 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f9ec 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0201 	mvn.w	r2, #1
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fc fa0c 	bl	8002bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fdc8 	bl	800734c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9bd 	bl	8006b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00c      	beq.n	8006804 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0220 	mvn.w	r2, #32
 80067fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fd9a 	bl	8007338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006826:	2302      	movs	r3, #2
 8006828:	e0ae      	b.n	8006988 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b0c      	cmp	r3, #12
 8006836:	f200 809f 	bhi.w	8006978 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800683a:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006875 	.word	0x08006875
 8006844:	08006979 	.word	0x08006979
 8006848:	08006979 	.word	0x08006979
 800684c:	08006979 	.word	0x08006979
 8006850:	080068b5 	.word	0x080068b5
 8006854:	08006979 	.word	0x08006979
 8006858:	08006979 	.word	0x08006979
 800685c:	08006979 	.word	0x08006979
 8006860:	080068f7 	.word	0x080068f7
 8006864:	08006979 	.word	0x08006979
 8006868:	08006979 	.word	0x08006979
 800686c:	08006979 	.word	0x08006979
 8006870:	08006937 	.word	0x08006937
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fa1e 	bl	8006cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0208 	orr.w	r2, r2, #8
 800688e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0204 	bic.w	r2, r2, #4
 800689e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6999      	ldr	r1, [r3, #24]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	619a      	str	r2, [r3, #24]
      break;
 80068b2:	e064      	b.n	800697e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fa6e 	bl	8006d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6999      	ldr	r1, [r3, #24]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	021a      	lsls	r2, r3, #8
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	619a      	str	r2, [r3, #24]
      break;
 80068f4:	e043      	b.n	800697e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fac3 	bl	8006e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0208 	orr.w	r2, r2, #8
 8006910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0204 	bic.w	r2, r2, #4
 8006920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69d9      	ldr	r1, [r3, #28]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	61da      	str	r2, [r3, #28]
      break;
 8006934:	e023      	b.n	800697e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fb17 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69d9      	ldr	r1, [r3, #28]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	021a      	lsls	r2, r3, #8
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	61da      	str	r2, [r3, #28]
      break;
 8006976:	e002      	b.n	800697e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
      break;
 800697c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_TIM_ConfigClockSource+0x1c>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e0b4      	b.n	8006b16 <HAL_TIM_ConfigClockSource+0x186>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069e4:	d03e      	beq.n	8006a64 <HAL_TIM_ConfigClockSource+0xd4>
 80069e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ea:	f200 8087 	bhi.w	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f2:	f000 8086 	beq.w	8006b02 <HAL_TIM_ConfigClockSource+0x172>
 80069f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069fa:	d87f      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 80069fc:	2b70      	cmp	r3, #112	@ 0x70
 80069fe:	d01a      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0xa6>
 8006a00:	2b70      	cmp	r3, #112	@ 0x70
 8006a02:	d87b      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a04:	2b60      	cmp	r3, #96	@ 0x60
 8006a06:	d050      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x11a>
 8006a08:	2b60      	cmp	r3, #96	@ 0x60
 8006a0a:	d877      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a0c:	2b50      	cmp	r3, #80	@ 0x50
 8006a0e:	d03c      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0xfa>
 8006a10:	2b50      	cmp	r3, #80	@ 0x50
 8006a12:	d873      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a14:	2b40      	cmp	r3, #64	@ 0x40
 8006a16:	d058      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x13a>
 8006a18:	2b40      	cmp	r3, #64	@ 0x40
 8006a1a:	d86f      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b30      	cmp	r3, #48	@ 0x30
 8006a1e:	d064      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15a>
 8006a20:	2b30      	cmp	r3, #48	@ 0x30
 8006a22:	d86b      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d060      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15a>
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d867      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d05c      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15a>
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d05a      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15a>
 8006a34:	e062      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a46:	f000 fb63 	bl	8007110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	609a      	str	r2, [r3, #8]
      break;
 8006a62:	e04f      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a74:	f000 fb4c 	bl	8007110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a86:	609a      	str	r2, [r3, #8]
      break;
 8006a88:	e03c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a96:	461a      	mov	r2, r3
 8006a98:	f000 fac0 	bl	800701c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2150      	movs	r1, #80	@ 0x50
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fb19 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006aa8:	e02c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f000 fadf 	bl	800707a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2160      	movs	r1, #96	@ 0x60
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fb09 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006ac8:	e01c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f000 faa0 	bl	800701c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2140      	movs	r1, #64	@ 0x40
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 faf9 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006ae8:	e00c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4619      	mov	r1, r3
 8006af4:	4610      	mov	r0, r2
 8006af6:	f000 faf0 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006afa:	e003      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	73fb      	strb	r3, [r7, #15]
      break;
 8006b00:	e000      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a43      	ldr	r2, [pc, #268]	@ (8006c90 <TIM_Base_SetConfig+0x120>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8e:	d00f      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a40      	ldr	r2, [pc, #256]	@ (8006c94 <TIM_Base_SetConfig+0x124>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00b      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c98 <TIM_Base_SetConfig+0x128>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8006c9c <TIM_Base_SetConfig+0x12c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a3d      	ldr	r2, [pc, #244]	@ (8006ca0 <TIM_Base_SetConfig+0x130>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d108      	bne.n	8006bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a32      	ldr	r2, [pc, #200]	@ (8006c90 <TIM_Base_SetConfig+0x120>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d02b      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd0:	d027      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8006c94 <TIM_Base_SetConfig+0x124>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d023      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8006c98 <TIM_Base_SetConfig+0x128>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01f      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2d      	ldr	r2, [pc, #180]	@ (8006c9c <TIM_Base_SetConfig+0x12c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01b      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca0 <TIM_Base_SetConfig+0x130>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d017      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8006ca4 <TIM_Base_SetConfig+0x134>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8006ca8 <TIM_Base_SetConfig+0x138>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00f      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a29      	ldr	r2, [pc, #164]	@ (8006cac <TIM_Base_SetConfig+0x13c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a28      	ldr	r2, [pc, #160]	@ (8006cb0 <TIM_Base_SetConfig+0x140>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d007      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a27      	ldr	r2, [pc, #156]	@ (8006cb4 <TIM_Base_SetConfig+0x144>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a26      	ldr	r2, [pc, #152]	@ (8006cb8 <TIM_Base_SetConfig+0x148>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d108      	bne.n	8006c34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a0e      	ldr	r2, [pc, #56]	@ (8006c90 <TIM_Base_SetConfig+0x120>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d003      	beq.n	8006c62 <TIM_Base_SetConfig+0xf2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a10      	ldr	r2, [pc, #64]	@ (8006ca0 <TIM_Base_SetConfig+0x130>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d103      	bne.n	8006c6a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f043 0204 	orr.w	r2, r3, #4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	601a      	str	r2, [r3, #0]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	40010400 	.word	0x40010400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800
 8006cb0:	40001800 	.word	0x40001800
 8006cb4:	40001c00 	.word	0x40001c00
 8006cb8:	40002000 	.word	0x40002000

08006cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	f023 0201 	bic.w	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 0302 	bic.w	r3, r3, #2
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a20      	ldr	r2, [pc, #128]	@ (8006d94 <TIM_OC1_SetConfig+0xd8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_OC1_SetConfig+0x64>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8006d98 <TIM_OC1_SetConfig+0xdc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d10c      	bne.n	8006d3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0308 	bic.w	r3, r3, #8
 8006d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 0304 	bic.w	r3, r3, #4
 8006d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a15      	ldr	r2, [pc, #84]	@ (8006d94 <TIM_OC1_SetConfig+0xd8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_OC1_SetConfig+0x8e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a14      	ldr	r2, [pc, #80]	@ (8006d98 <TIM_OC1_SetConfig+0xdc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d111      	bne.n	8006d6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40010400 	.word	0x40010400

08006d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f023 0210 	bic.w	r2, r3, #16
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 0320 	bic.w	r3, r3, #32
 8006de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a22      	ldr	r2, [pc, #136]	@ (8006e80 <TIM_OC2_SetConfig+0xe4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0x68>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a21      	ldr	r2, [pc, #132]	@ (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d10d      	bne.n	8006e20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a17      	ldr	r2, [pc, #92]	@ (8006e80 <TIM_OC2_SetConfig+0xe4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC2_SetConfig+0x94>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a16      	ldr	r2, [pc, #88]	@ (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d113      	bne.n	8006e58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400

08006e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0303 	bic.w	r3, r3, #3
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a21      	ldr	r2, [pc, #132]	@ (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_OC3_SetConfig+0x66>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a20      	ldr	r2, [pc, #128]	@ (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10d      	bne.n	8006f0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a16      	ldr	r2, [pc, #88]	@ (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC3_SetConfig+0x92>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	@ (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d113      	bne.n	8006f42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	621a      	str	r2, [r3, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	031b      	lsls	r3, r3, #12
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a12      	ldr	r2, [pc, #72]	@ (8007014 <TIM_OC4_SetConfig+0xa4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC4_SetConfig+0x68>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a11      	ldr	r2, [pc, #68]	@ (8007018 <TIM_OC4_SetConfig+0xa8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d109      	bne.n	8006fec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40010000 	.word	0x40010000
 8007018:	40010400 	.word	0x40010400

0800701c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 030a 	bic.w	r3, r3, #10
 8007058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800707a:	b480      	push	{r7}
 800707c:	b087      	sub	sp, #28
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	f023 0210 	bic.w	r2, r3, #16
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	031b      	lsls	r3, r3, #12
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f043 0307 	orr.w	r3, r3, #7
 80070fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	609a      	str	r2, [r3, #8]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800712a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	021a      	lsls	r2, r3, #8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	431a      	orrs	r2, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	4313      	orrs	r3, r2
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	4313      	orrs	r3, r2
 800713c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	609a      	str	r2, [r3, #8]
}
 8007144:	bf00      	nop
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f003 031f 	and.w	r3, r3, #31
 8007162:	2201      	movs	r2, #1
 8007164:	fa02 f303 	lsl.w	r3, r2, r3
 8007168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1a      	ldr	r2, [r3, #32]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	43db      	mvns	r3, r3
 8007172:	401a      	ands	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a1a      	ldr	r2, [r3, #32]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 031f 	and.w	r3, r3, #31
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	fa01 f303 	lsl.w	r3, r1, r3
 8007188:	431a      	orrs	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e05a      	b.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a21      	ldr	r2, [pc, #132]	@ (8007278 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d022      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007200:	d01d      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1d      	ldr	r2, [pc, #116]	@ (800727c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d018      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1b      	ldr	r2, [pc, #108]	@ (8007280 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1a      	ldr	r2, [pc, #104]	@ (8007284 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00e      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a18      	ldr	r2, [pc, #96]	@ (8007288 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a17      	ldr	r2, [pc, #92]	@ (800728c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a15      	ldr	r2, [pc, #84]	@ (8007290 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d10c      	bne.n	8007258 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	4313      	orrs	r3, r2
 800724e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40010000 	.word	0x40010000
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800
 8007284:	40000c00 	.word	0x40000c00
 8007288:	40010400 	.word	0x40010400
 800728c:	40014000 	.word	0x40014000
 8007290:	40001800 	.word	0x40001800

08007294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e03d      	b.n	800732c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	4313      	orrs	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e042      	b.n	80073f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d106      	bne.n	800738c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fb fdce 	bl	8002f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2224      	movs	r2, #36	@ 0x24
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fdd3 	bl	8007f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	@ 0x28
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4613      	mov	r3, r2
 800740e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b20      	cmp	r3, #32
 800741e:	d175      	bne.n	800750c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_UART_Transmit+0x2c>
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e06e      	b.n	800750e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2221      	movs	r2, #33	@ 0x21
 800743a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800743e:	f7fb ffb1 	bl	80033a4 <HAL_GetTick>
 8007442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	88fa      	ldrh	r2, [r7, #6]
 8007448:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	88fa      	ldrh	r2, [r7, #6]
 800744e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007458:	d108      	bne.n	800746c <HAL_UART_Transmit+0x6c>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d104      	bne.n	800746c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	e003      	b.n	8007474 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007474:	e02e      	b.n	80074d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2200      	movs	r2, #0
 800747e:	2180      	movs	r1, #128	@ 0x80
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fb37 	bl	8007af4 <UART_WaitOnFlagUntilTimeout>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e03a      	b.n	800750e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10b      	bne.n	80074b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	3302      	adds	r3, #2
 80074b2:	61bb      	str	r3, [r7, #24]
 80074b4:	e007      	b.n	80074c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	781a      	ldrb	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	3301      	adds	r3, #1
 80074c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1cb      	bne.n	8007476 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2200      	movs	r2, #0
 80074e6:	2140      	movs	r1, #64	@ 0x40
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fb03 	bl	8007af4 <UART_WaitOnFlagUntilTimeout>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e006      	b.n	800750e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2220      	movs	r2, #32
 8007504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	e000      	b.n	800750e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800750c:	2302      	movs	r3, #2
  }
}
 800750e:	4618      	mov	r0, r3
 8007510:	3720      	adds	r7, #32
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	4613      	mov	r3, r2
 8007522:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b20      	cmp	r3, #32
 800752e:	d112      	bne.n	8007556 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <HAL_UART_Receive_IT+0x26>
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e00b      	b.n	8007558 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	461a      	mov	r2, r3
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fb2a 	bl	8007ba6 <UART_Start_Receive_IT>
 8007552:	4603      	mov	r3, r0
 8007554:	e000      	b.n	8007558 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b0ba      	sub	sp, #232	@ 0xe8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007586:	2300      	movs	r3, #0
 8007588:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800758c:	2300      	movs	r3, #0
 800758e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800759e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10f      	bne.n	80075c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d009      	beq.n	80075c6 <HAL_UART_IRQHandler+0x66>
 80075b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fc07 	bl	8007dd2 <UART_Receive_IT>
      return;
 80075c4:	e273      	b.n	8007aae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80de 	beq.w	800778c <HAL_UART_IRQHandler+0x22c>
 80075d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80d1 	beq.w	800778c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <HAL_UART_IRQHandler+0xae>
 80075f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007606:	f043 0201 	orr.w	r2, r3, #1
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800760e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <HAL_UART_IRQHandler+0xd2>
 800761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762a:	f043 0202 	orr.w	r2, r3, #2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <HAL_UART_IRQHandler+0xf6>
 800763e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800764e:	f043 0204 	orr.w	r2, r3, #4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d011      	beq.n	8007686 <HAL_UART_IRQHandler+0x126>
 8007662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d105      	bne.n	800767a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800766e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767e:	f043 0208 	orr.w	r2, r3, #8
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 820a 	beq.w	8007aa4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_UART_IRQHandler+0x14e>
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fb92 	bl	8007dd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b8:	2b40      	cmp	r3, #64	@ 0x40
 80076ba:	bf0c      	ite	eq
 80076bc:	2301      	moveq	r3, #1
 80076be:	2300      	movne	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ca:	f003 0308 	and.w	r3, r3, #8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <HAL_UART_IRQHandler+0x17a>
 80076d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d04f      	beq.n	800777a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa9d 	bl	8007c1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ea:	2b40      	cmp	r3, #64	@ 0x40
 80076ec:	d141      	bne.n	8007772 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3314      	adds	r3, #20
 80076f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007704:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800770c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3314      	adds	r3, #20
 8007716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800771a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800771e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1d9      	bne.n	80076ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d013      	beq.n	800776a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007746:	4a8a      	ldr	r2, [pc, #552]	@ (8007970 <HAL_UART_IRQHandler+0x410>)
 8007748:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800774e:	4618      	mov	r0, r3
 8007750:	f7fc fc58 	bl	8004004 <HAL_DMA_Abort_IT>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d016      	beq.n	8007788 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007768:	e00e      	b.n	8007788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f9ac 	bl	8007ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007770:	e00a      	b.n	8007788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f9a8 	bl	8007ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	e006      	b.n	8007788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9a4 	bl	8007ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007786:	e18d      	b.n	8007aa4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	bf00      	nop
    return;
 800778a:	e18b      	b.n	8007aa4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007790:	2b01      	cmp	r3, #1
 8007792:	f040 8167 	bne.w	8007a64 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8160 	beq.w	8007a64 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80077a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 8159 	beq.w	8007a64 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077b2:	2300      	movs	r3, #0
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d2:	2b40      	cmp	r3, #64	@ 0x40
 80077d4:	f040 80ce 	bne.w	8007974 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 80a9 	beq.w	8007940 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077f6:	429a      	cmp	r2, r3
 80077f8:	f080 80a2 	bcs.w	8007940 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007802:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800780e:	f000 8088 	beq.w	8007922 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	330c      	adds	r3, #12
 8007818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007828:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800782c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800783e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800784a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1d9      	bne.n	8007812 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3314      	adds	r3, #20
 8007864:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800786e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3314      	adds	r3, #20
 800787e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007882:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007886:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800788a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e1      	bne.n	800785e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3314      	adds	r3, #20
 80078a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3314      	adds	r3, #20
 80078ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80078be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80078c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e3      	bne.n	800789a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f2:	f023 0310 	bic.w	r3, r3, #16
 80078f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007904:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007906:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800790a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e3      	bne.n	80078e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791c:	4618      	mov	r0, r3
 800791e:	f7fc fb01 	bl	8003f24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2202      	movs	r2, #2
 8007926:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007930:	b29b      	uxth	r3, r3
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	b29b      	uxth	r3, r3
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f8cf 	bl	8007adc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800793e:	e0b3      	b.n	8007aa8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007944:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007948:	429a      	cmp	r2, r3
 800794a:	f040 80ad 	bne.w	8007aa8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007958:	f040 80a6 	bne.w	8007aa8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f8b7 	bl	8007adc <HAL_UARTEx_RxEventCallback>
      return;
 800796e:	e09b      	b.n	8007aa8 <HAL_UART_IRQHandler+0x548>
 8007970:	08007ce1 	.word	0x08007ce1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800797c:	b29b      	uxth	r3, r3
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007988:	b29b      	uxth	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 808e 	beq.w	8007aac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 8089 	beq.w	8007aac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	330c      	adds	r3, #12
 80079a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	330c      	adds	r3, #12
 80079ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80079be:	647a      	str	r2, [r7, #68]	@ 0x44
 80079c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e3      	bne.n	800799a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3314      	adds	r3, #20
 80079d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	623b      	str	r3, [r7, #32]
   return(result);
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	f023 0301 	bic.w	r3, r3, #1
 80079e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3314      	adds	r3, #20
 80079f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80079f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e3      	bne.n	80079d2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0310 	bic.w	r3, r3, #16
 8007a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007a3c:	61fa      	str	r2, [r7, #28]
 8007a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	69b9      	ldr	r1, [r7, #24]
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	617b      	str	r3, [r7, #20]
   return(result);
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e3      	bne.n	8007a18 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f83d 	bl	8007adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a62:	e023      	b.n	8007aac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <HAL_UART_IRQHandler+0x524>
 8007a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f940 	bl	8007d02 <UART_Transmit_IT>
    return;
 8007a82:	e014      	b.n	8007aae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00e      	beq.n	8007aae <HAL_UART_IRQHandler+0x54e>
 8007a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f980 	bl	8007da2 <UART_EndTransmit_IT>
    return;
 8007aa2:	e004      	b.n	8007aae <HAL_UART_IRQHandler+0x54e>
    return;
 8007aa4:	bf00      	nop
 8007aa6:	e002      	b.n	8007aae <HAL_UART_IRQHandler+0x54e>
      return;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <HAL_UART_IRQHandler+0x54e>
      return;
 8007aac:	bf00      	nop
  }
}
 8007aae:	37e8      	adds	r7, #232	@ 0xe8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	4613      	mov	r3, r2
 8007b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b04:	e03b      	b.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0c:	d037      	beq.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b0e:	f7fb fc49 	bl	80033a4 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	6a3a      	ldr	r2, [r7, #32]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d302      	bcc.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e03a      	b.n	8007b9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	f003 0304 	and.w	r3, r3, #4
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d023      	beq.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2b80      	cmp	r3, #128	@ 0x80
 8007b3a:	d020      	beq.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b40      	cmp	r3, #64	@ 0x40
 8007b40:	d01d      	beq.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d116      	bne.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	617b      	str	r3, [r7, #20]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f857 	bl	8007c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2208      	movs	r2, #8
 8007b70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e00f      	b.n	8007b9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4013      	ands	r3, r2
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	bf0c      	ite	eq
 8007b8e:	2301      	moveq	r3, #1
 8007b90:	2300      	movne	r3, #0
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d0b4      	beq.n	8007b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b085      	sub	sp, #20
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	88fa      	ldrh	r2, [r7, #6]
 8007bbe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	88fa      	ldrh	r2, [r7, #6]
 8007bc4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2222      	movs	r2, #34	@ 0x22
 8007bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695a      	ldr	r2, [r3, #20]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0220 	orr.w	r2, r2, #32
 8007c0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b095      	sub	sp, #84	@ 0x54
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	330c      	adds	r3, #12
 8007c28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	330c      	adds	r3, #12
 8007c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c42:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e5      	bne.n	8007c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3314      	adds	r3, #20
 8007c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	f023 0301 	bic.w	r3, r3, #1
 8007c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3314      	adds	r3, #20
 8007c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e5      	bne.n	8007c56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d119      	bne.n	8007cc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	330c      	adds	r3, #12
 8007c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f023 0310 	bic.w	r3, r3, #16
 8007ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	330c      	adds	r3, #12
 8007cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cb2:	61ba      	str	r2, [r7, #24]
 8007cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6979      	ldr	r1, [r7, #20]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e5      	bne.n	8007c92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007cd4:	bf00      	nop
 8007cd6:	3754      	adds	r7, #84	@ 0x54
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff fee7 	bl	8007ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b21      	cmp	r3, #33	@ 0x21
 8007d14:	d13e      	bne.n	8007d94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d1e:	d114      	bne.n	8007d4a <UART_Transmit_IT+0x48>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d110      	bne.n	8007d4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	1c9a      	adds	r2, r3, #2
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	621a      	str	r2, [r3, #32]
 8007d48:	e008      	b.n	8007d5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	1c59      	adds	r1, r3, #1
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6211      	str	r1, [r2, #32]
 8007d54:	781a      	ldrb	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10f      	bne.n	8007d90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e000      	b.n	8007d96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d94:	2302      	movs	r3, #2
  }
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007db8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff fe76 	bl	8007ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b08c      	sub	sp, #48	@ 0x30
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b22      	cmp	r3, #34	@ 0x22
 8007dec:	f040 80aa 	bne.w	8007f44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df8:	d115      	bne.n	8007e26 <UART_Receive_IT+0x54>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d111      	bne.n	8007e26 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1e:	1c9a      	adds	r2, r3, #2
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e24:	e024      	b.n	8007e70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e34:	d007      	beq.n	8007e46 <UART_Receive_IT+0x74>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <UART_Receive_IT+0x82>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	e008      	b.n	8007e66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d15d      	bne.n	8007f40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68da      	ldr	r2, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0220 	bic.w	r2, r2, #32
 8007e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695a      	ldr	r2, [r3, #20]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0201 	bic.w	r2, r2, #1
 8007eb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d135      	bne.n	8007f36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f023 0310 	bic.w	r3, r3, #16
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ef0:	623a      	str	r2, [r7, #32]
 8007ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	69f9      	ldr	r1, [r7, #28]
 8007ef6:	6a3a      	ldr	r2, [r7, #32]
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e5      	bne.n	8007ed0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d10a      	bne.n	8007f28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff fdd4 	bl	8007adc <HAL_UARTEx_RxEventCallback>
 8007f34:	e002      	b.n	8007f3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7fa fa7e 	bl	8002438 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e002      	b.n	8007f46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	e000      	b.n	8007f46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007f44:	2302      	movs	r3, #2
  }
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3730      	adds	r7, #48	@ 0x30
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f54:	b0c0      	sub	sp, #256	@ 0x100
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f6c:	68d9      	ldr	r1, [r3, #12]
 8007f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	ea40 0301 	orr.w	r3, r0, r1
 8007f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	431a      	orrs	r2, r3
 8007f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007fa8:	f021 010c 	bic.w	r1, r1, #12
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fca:	6999      	ldr	r1, [r3, #24]
 8007fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	ea40 0301 	orr.w	r3, r0, r1
 8007fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	4b8f      	ldr	r3, [pc, #572]	@ (800821c <UART_SetConfig+0x2cc>)
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d005      	beq.n	8007ff0 <UART_SetConfig+0xa0>
 8007fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	4b8d      	ldr	r3, [pc, #564]	@ (8008220 <UART_SetConfig+0x2d0>)
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d104      	bne.n	8007ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ff0:	f7fe f884 	bl	80060fc <HAL_RCC_GetPCLK2Freq>
 8007ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ff8:	e003      	b.n	8008002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ffa:	f7fe f86b 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 8007ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800800c:	f040 810c 	bne.w	8008228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008014:	2200      	movs	r2, #0
 8008016:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800801a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800801e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008022:	4622      	mov	r2, r4
 8008024:	462b      	mov	r3, r5
 8008026:	1891      	adds	r1, r2, r2
 8008028:	65b9      	str	r1, [r7, #88]	@ 0x58
 800802a:	415b      	adcs	r3, r3
 800802c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800802e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008032:	4621      	mov	r1, r4
 8008034:	eb12 0801 	adds.w	r8, r2, r1
 8008038:	4629      	mov	r1, r5
 800803a:	eb43 0901 	adc.w	r9, r3, r1
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800804a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800804e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008052:	4690      	mov	r8, r2
 8008054:	4699      	mov	r9, r3
 8008056:	4623      	mov	r3, r4
 8008058:	eb18 0303 	adds.w	r3, r8, r3
 800805c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008060:	462b      	mov	r3, r5
 8008062:	eb49 0303 	adc.w	r3, r9, r3
 8008066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800806a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008076:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800807a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800807e:	460b      	mov	r3, r1
 8008080:	18db      	adds	r3, r3, r3
 8008082:	653b      	str	r3, [r7, #80]	@ 0x50
 8008084:	4613      	mov	r3, r2
 8008086:	eb42 0303 	adc.w	r3, r2, r3
 800808a:	657b      	str	r3, [r7, #84]	@ 0x54
 800808c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008094:	f7f8 fe28 	bl	8000ce8 <__aeabi_uldivmod>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4b61      	ldr	r3, [pc, #388]	@ (8008224 <UART_SetConfig+0x2d4>)
 800809e:	fba3 2302 	umull	r2, r3, r3, r2
 80080a2:	095b      	lsrs	r3, r3, #5
 80080a4:	011c      	lsls	r4, r3, #4
 80080a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80080b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80080b8:	4642      	mov	r2, r8
 80080ba:	464b      	mov	r3, r9
 80080bc:	1891      	adds	r1, r2, r2
 80080be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80080c0:	415b      	adcs	r3, r3
 80080c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80080c8:	4641      	mov	r1, r8
 80080ca:	eb12 0a01 	adds.w	sl, r2, r1
 80080ce:	4649      	mov	r1, r9
 80080d0:	eb43 0b01 	adc.w	fp, r3, r1
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080e8:	4692      	mov	sl, r2
 80080ea:	469b      	mov	fp, r3
 80080ec:	4643      	mov	r3, r8
 80080ee:	eb1a 0303 	adds.w	r3, sl, r3
 80080f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080f6:	464b      	mov	r3, r9
 80080f8:	eb4b 0303 	adc.w	r3, fp, r3
 80080fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800810c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008114:	460b      	mov	r3, r1
 8008116:	18db      	adds	r3, r3, r3
 8008118:	643b      	str	r3, [r7, #64]	@ 0x40
 800811a:	4613      	mov	r3, r2
 800811c:	eb42 0303 	adc.w	r3, r2, r3
 8008120:	647b      	str	r3, [r7, #68]	@ 0x44
 8008122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800812a:	f7f8 fddd 	bl	8000ce8 <__aeabi_uldivmod>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4611      	mov	r1, r2
 8008134:	4b3b      	ldr	r3, [pc, #236]	@ (8008224 <UART_SetConfig+0x2d4>)
 8008136:	fba3 2301 	umull	r2, r3, r3, r1
 800813a:	095b      	lsrs	r3, r3, #5
 800813c:	2264      	movs	r2, #100	@ 0x64
 800813e:	fb02 f303 	mul.w	r3, r2, r3
 8008142:	1acb      	subs	r3, r1, r3
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800814a:	4b36      	ldr	r3, [pc, #216]	@ (8008224 <UART_SetConfig+0x2d4>)
 800814c:	fba3 2302 	umull	r2, r3, r3, r2
 8008150:	095b      	lsrs	r3, r3, #5
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008158:	441c      	add	r4, r3
 800815a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800815e:	2200      	movs	r2, #0
 8008160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008164:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800816c:	4642      	mov	r2, r8
 800816e:	464b      	mov	r3, r9
 8008170:	1891      	adds	r1, r2, r2
 8008172:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008174:	415b      	adcs	r3, r3
 8008176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800817c:	4641      	mov	r1, r8
 800817e:	1851      	adds	r1, r2, r1
 8008180:	6339      	str	r1, [r7, #48]	@ 0x30
 8008182:	4649      	mov	r1, r9
 8008184:	414b      	adcs	r3, r1
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
 8008188:	f04f 0200 	mov.w	r2, #0
 800818c:	f04f 0300 	mov.w	r3, #0
 8008190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008194:	4659      	mov	r1, fp
 8008196:	00cb      	lsls	r3, r1, #3
 8008198:	4651      	mov	r1, sl
 800819a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800819e:	4651      	mov	r1, sl
 80081a0:	00ca      	lsls	r2, r1, #3
 80081a2:	4610      	mov	r0, r2
 80081a4:	4619      	mov	r1, r3
 80081a6:	4603      	mov	r3, r0
 80081a8:	4642      	mov	r2, r8
 80081aa:	189b      	adds	r3, r3, r2
 80081ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081b0:	464b      	mov	r3, r9
 80081b2:	460a      	mov	r2, r1
 80081b4:	eb42 0303 	adc.w	r3, r2, r3
 80081b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80081c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80081cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80081d0:	460b      	mov	r3, r1
 80081d2:	18db      	adds	r3, r3, r3
 80081d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081d6:	4613      	mov	r3, r2
 80081d8:	eb42 0303 	adc.w	r3, r2, r3
 80081dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80081e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80081e6:	f7f8 fd7f 	bl	8000ce8 <__aeabi_uldivmod>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008224 <UART_SetConfig+0x2d4>)
 80081f0:	fba3 1302 	umull	r1, r3, r3, r2
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	2164      	movs	r1, #100	@ 0x64
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	3332      	adds	r3, #50	@ 0x32
 8008202:	4a08      	ldr	r2, [pc, #32]	@ (8008224 <UART_SetConfig+0x2d4>)
 8008204:	fba2 2303 	umull	r2, r3, r2, r3
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	f003 0207 	and.w	r2, r3, #7
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4422      	add	r2, r4
 8008216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008218:	e106      	b.n	8008428 <UART_SetConfig+0x4d8>
 800821a:	bf00      	nop
 800821c:	40011000 	.word	0x40011000
 8008220:	40011400 	.word	0x40011400
 8008224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800822c:	2200      	movs	r2, #0
 800822e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008232:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800823a:	4642      	mov	r2, r8
 800823c:	464b      	mov	r3, r9
 800823e:	1891      	adds	r1, r2, r2
 8008240:	6239      	str	r1, [r7, #32]
 8008242:	415b      	adcs	r3, r3
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
 8008246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800824a:	4641      	mov	r1, r8
 800824c:	1854      	adds	r4, r2, r1
 800824e:	4649      	mov	r1, r9
 8008250:	eb43 0501 	adc.w	r5, r3, r1
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	00eb      	lsls	r3, r5, #3
 800825e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008262:	00e2      	lsls	r2, r4, #3
 8008264:	4614      	mov	r4, r2
 8008266:	461d      	mov	r5, r3
 8008268:	4643      	mov	r3, r8
 800826a:	18e3      	adds	r3, r4, r3
 800826c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008270:	464b      	mov	r3, r9
 8008272:	eb45 0303 	adc.w	r3, r5, r3
 8008276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800827a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008286:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	f04f 0300 	mov.w	r3, #0
 8008292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008296:	4629      	mov	r1, r5
 8008298:	008b      	lsls	r3, r1, #2
 800829a:	4621      	mov	r1, r4
 800829c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082a0:	4621      	mov	r1, r4
 80082a2:	008a      	lsls	r2, r1, #2
 80082a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80082a8:	f7f8 fd1e 	bl	8000ce8 <__aeabi_uldivmod>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4b60      	ldr	r3, [pc, #384]	@ (8008434 <UART_SetConfig+0x4e4>)
 80082b2:	fba3 2302 	umull	r2, r3, r3, r2
 80082b6:	095b      	lsrs	r3, r3, #5
 80082b8:	011c      	lsls	r4, r3, #4
 80082ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80082c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80082cc:	4642      	mov	r2, r8
 80082ce:	464b      	mov	r3, r9
 80082d0:	1891      	adds	r1, r2, r2
 80082d2:	61b9      	str	r1, [r7, #24]
 80082d4:	415b      	adcs	r3, r3
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082dc:	4641      	mov	r1, r8
 80082de:	1851      	adds	r1, r2, r1
 80082e0:	6139      	str	r1, [r7, #16]
 80082e2:	4649      	mov	r1, r9
 80082e4:	414b      	adcs	r3, r1
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	f04f 0200 	mov.w	r2, #0
 80082ec:	f04f 0300 	mov.w	r3, #0
 80082f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082f4:	4659      	mov	r1, fp
 80082f6:	00cb      	lsls	r3, r1, #3
 80082f8:	4651      	mov	r1, sl
 80082fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082fe:	4651      	mov	r1, sl
 8008300:	00ca      	lsls	r2, r1, #3
 8008302:	4610      	mov	r0, r2
 8008304:	4619      	mov	r1, r3
 8008306:	4603      	mov	r3, r0
 8008308:	4642      	mov	r2, r8
 800830a:	189b      	adds	r3, r3, r2
 800830c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008310:	464b      	mov	r3, r9
 8008312:	460a      	mov	r2, r1
 8008314:	eb42 0303 	adc.w	r3, r2, r3
 8008318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008326:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008334:	4649      	mov	r1, r9
 8008336:	008b      	lsls	r3, r1, #2
 8008338:	4641      	mov	r1, r8
 800833a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800833e:	4641      	mov	r1, r8
 8008340:	008a      	lsls	r2, r1, #2
 8008342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008346:	f7f8 fccf 	bl	8000ce8 <__aeabi_uldivmod>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	4611      	mov	r1, r2
 8008350:	4b38      	ldr	r3, [pc, #224]	@ (8008434 <UART_SetConfig+0x4e4>)
 8008352:	fba3 2301 	umull	r2, r3, r3, r1
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	2264      	movs	r2, #100	@ 0x64
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	1acb      	subs	r3, r1, r3
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	3332      	adds	r3, #50	@ 0x32
 8008364:	4a33      	ldr	r2, [pc, #204]	@ (8008434 <UART_SetConfig+0x4e4>)
 8008366:	fba2 2303 	umull	r2, r3, r2, r3
 800836a:	095b      	lsrs	r3, r3, #5
 800836c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008370:	441c      	add	r4, r3
 8008372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008376:	2200      	movs	r2, #0
 8008378:	673b      	str	r3, [r7, #112]	@ 0x70
 800837a:	677a      	str	r2, [r7, #116]	@ 0x74
 800837c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008380:	4642      	mov	r2, r8
 8008382:	464b      	mov	r3, r9
 8008384:	1891      	adds	r1, r2, r2
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	415b      	adcs	r3, r3
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008390:	4641      	mov	r1, r8
 8008392:	1851      	adds	r1, r2, r1
 8008394:	6039      	str	r1, [r7, #0]
 8008396:	4649      	mov	r1, r9
 8008398:	414b      	adcs	r3, r1
 800839a:	607b      	str	r3, [r7, #4]
 800839c:	f04f 0200 	mov.w	r2, #0
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083a8:	4659      	mov	r1, fp
 80083aa:	00cb      	lsls	r3, r1, #3
 80083ac:	4651      	mov	r1, sl
 80083ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083b2:	4651      	mov	r1, sl
 80083b4:	00ca      	lsls	r2, r1, #3
 80083b6:	4610      	mov	r0, r2
 80083b8:	4619      	mov	r1, r3
 80083ba:	4603      	mov	r3, r0
 80083bc:	4642      	mov	r2, r8
 80083be:	189b      	adds	r3, r3, r2
 80083c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083c2:	464b      	mov	r3, r9
 80083c4:	460a      	mov	r2, r1
 80083c6:	eb42 0303 	adc.w	r3, r2, r3
 80083ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80083d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80083e4:	4649      	mov	r1, r9
 80083e6:	008b      	lsls	r3, r1, #2
 80083e8:	4641      	mov	r1, r8
 80083ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ee:	4641      	mov	r1, r8
 80083f0:	008a      	lsls	r2, r1, #2
 80083f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80083f6:	f7f8 fc77 	bl	8000ce8 <__aeabi_uldivmod>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <UART_SetConfig+0x4e4>)
 8008400:	fba3 1302 	umull	r1, r3, r3, r2
 8008404:	095b      	lsrs	r3, r3, #5
 8008406:	2164      	movs	r1, #100	@ 0x64
 8008408:	fb01 f303 	mul.w	r3, r1, r3
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	3332      	adds	r3, #50	@ 0x32
 8008412:	4a08      	ldr	r2, [pc, #32]	@ (8008434 <UART_SetConfig+0x4e4>)
 8008414:	fba2 2303 	umull	r2, r3, r2, r3
 8008418:	095b      	lsrs	r3, r3, #5
 800841a:	f003 020f 	and.w	r2, r3, #15
 800841e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4422      	add	r2, r4
 8008426:	609a      	str	r2, [r3, #8]
}
 8008428:	bf00      	nop
 800842a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800842e:	46bd      	mov	sp, r7
 8008430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008434:	51eb851f 	.word	0x51eb851f

08008438 <__NVIC_SetPriority>:
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008448:	2b00      	cmp	r3, #0
 800844a:	db0a      	blt.n	8008462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	b2da      	uxtb	r2, r3
 8008450:	490c      	ldr	r1, [pc, #48]	@ (8008484 <__NVIC_SetPriority+0x4c>)
 8008452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008456:	0112      	lsls	r2, r2, #4
 8008458:	b2d2      	uxtb	r2, r2
 800845a:	440b      	add	r3, r1
 800845c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008460:	e00a      	b.n	8008478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	b2da      	uxtb	r2, r3
 8008466:	4908      	ldr	r1, [pc, #32]	@ (8008488 <__NVIC_SetPriority+0x50>)
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	3b04      	subs	r3, #4
 8008470:	0112      	lsls	r2, r2, #4
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	440b      	add	r3, r1
 8008476:	761a      	strb	r2, [r3, #24]
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	e000e100 	.word	0xe000e100
 8008488:	e000ed00 	.word	0xe000ed00

0800848c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008490:	4b05      	ldr	r3, [pc, #20]	@ (80084a8 <SysTick_Handler+0x1c>)
 8008492:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008494:	f002 fc9e 	bl	800add4 <xTaskGetSchedulerState>
 8008498:	4603      	mov	r3, r0
 800849a:	2b01      	cmp	r3, #1
 800849c:	d001      	beq.n	80084a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800849e:	f003 fd03 	bl	800bea8 <xPortSysTickHandler>
  }
}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	e000e010 	.word	0xe000e010

080084ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80084b0:	2100      	movs	r1, #0
 80084b2:	f06f 0004 	mvn.w	r0, #4
 80084b6:	f7ff ffbf 	bl	8008438 <__NVIC_SetPriority>
#endif
}
 80084ba:	bf00      	nop
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c6:	f3ef 8305 	mrs	r3, IPSR
 80084ca:	603b      	str	r3, [r7, #0]
  return(result);
 80084cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084d2:	f06f 0305 	mvn.w	r3, #5
 80084d6:	607b      	str	r3, [r7, #4]
 80084d8:	e00c      	b.n	80084f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084da:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <osKernelInitialize+0x44>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d105      	bne.n	80084ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084e2:	4b08      	ldr	r3, [pc, #32]	@ (8008504 <osKernelInitialize+0x44>)
 80084e4:	2201      	movs	r2, #1
 80084e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	607b      	str	r3, [r7, #4]
 80084ec:	e002      	b.n	80084f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80084ee:	f04f 33ff 	mov.w	r3, #4294967295
 80084f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084f4:	687b      	ldr	r3, [r7, #4]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	200004a0 	.word	0x200004a0

08008508 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800850e:	f3ef 8305 	mrs	r3, IPSR
 8008512:	603b      	str	r3, [r7, #0]
  return(result);
 8008514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <osKernelStart+0x1a>
    stat = osErrorISR;
 800851a:	f06f 0305 	mvn.w	r3, #5
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	e010      	b.n	8008544 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008522:	4b0b      	ldr	r3, [pc, #44]	@ (8008550 <osKernelStart+0x48>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d109      	bne.n	800853e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800852a:	f7ff ffbf 	bl	80084ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800852e:	4b08      	ldr	r3, [pc, #32]	@ (8008550 <osKernelStart+0x48>)
 8008530:	2202      	movs	r2, #2
 8008532:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008534:	f001 ffda 	bl	800a4ec <vTaskStartScheduler>
      stat = osOK;
 8008538:	2300      	movs	r3, #0
 800853a:	607b      	str	r3, [r7, #4]
 800853c:	e002      	b.n	8008544 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800853e:	f04f 33ff 	mov.w	r3, #4294967295
 8008542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008544:	687b      	ldr	r3, [r7, #4]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	200004a0 	.word	0x200004a0

08008554 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b08e      	sub	sp, #56	@ 0x38
 8008558:	af04      	add	r7, sp, #16
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008560:	2300      	movs	r3, #0
 8008562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008564:	f3ef 8305 	mrs	r3, IPSR
 8008568:	617b      	str	r3, [r7, #20]
  return(result);
 800856a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800856c:	2b00      	cmp	r3, #0
 800856e:	d17e      	bne.n	800866e <osThreadNew+0x11a>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d07b      	beq.n	800866e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008576:	2380      	movs	r3, #128	@ 0x80
 8008578:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800857a:	2318      	movs	r3, #24
 800857c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d045      	beq.n	800861a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <osThreadNew+0x48>
        name = attr->name;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d008      	beq.n	80085c2 <osThreadNew+0x6e>
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2b38      	cmp	r3, #56	@ 0x38
 80085b4:	d805      	bhi.n	80085c2 <osThreadNew+0x6e>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <osThreadNew+0x72>
        return (NULL);
 80085c2:	2300      	movs	r3, #0
 80085c4:	e054      	b.n	8008670 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	089b      	lsrs	r3, r3, #2
 80085d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00e      	beq.n	80085fc <osThreadNew+0xa8>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	2ba7      	cmp	r3, #167	@ 0xa7
 80085e4:	d90a      	bls.n	80085fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d006      	beq.n	80085fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <osThreadNew+0xa8>
        mem = 1;
 80085f6:	2301      	movs	r3, #1
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	e010      	b.n	800861e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10c      	bne.n	800861e <osThreadNew+0xca>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d108      	bne.n	800861e <osThreadNew+0xca>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <osThreadNew+0xca>
          mem = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	e001      	b.n	800861e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d110      	bne.n	8008646 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800862c:	9202      	str	r2, [sp, #8]
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	6a3a      	ldr	r2, [r7, #32]
 8008638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f001 fd62 	bl	800a104 <xTaskCreateStatic>
 8008640:	4603      	mov	r3, r0
 8008642:	613b      	str	r3, [r7, #16]
 8008644:	e013      	b.n	800866e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d110      	bne.n	800866e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	b29a      	uxth	r2, r3
 8008650:	f107 0310 	add.w	r3, r7, #16
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f001 fdb0 	bl	800a1c4 <xTaskCreate>
 8008664:	4603      	mov	r3, r0
 8008666:	2b01      	cmp	r3, #1
 8008668:	d001      	beq.n	800866e <osThreadNew+0x11a>
            hTask = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800866e:	693b      	ldr	r3, [r7, #16]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3728      	adds	r7, #40	@ 0x28
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008680:	f3ef 8305 	mrs	r3, IPSR
 8008684:	60bb      	str	r3, [r7, #8]
  return(result);
 8008686:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <osDelay+0x1c>
    stat = osErrorISR;
 800868c:	f06f 0305 	mvn.w	r3, #5
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e007      	b.n	80086a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 feee 	bl	800a480 <vTaskDelay>
    }
  }

  return (stat);
 80086a4:	68fb      	ldr	r3, [r7, #12]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b088      	sub	sp, #32
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ba:	f3ef 8305 	mrs	r3, IPSR
 80086be:	60bb      	str	r3, [r7, #8]
  return(result);
 80086c0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d174      	bne.n	80087b0 <osMutexNew+0x102>
    if (attr != NULL) {
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	e001      	b.n	80086d8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <osMutexNew+0x3a>
      rmtx = 1U;
 80086e2:	2301      	movs	r3, #1
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	e001      	b.n	80086ec <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d15c      	bne.n	80087b0 <osMutexNew+0x102>
      mem = -1;
 80086f6:	f04f 33ff 	mov.w	r3, #4294967295
 80086fa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d015      	beq.n	800872e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d006      	beq.n	8008718 <osMutexNew+0x6a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	2b4f      	cmp	r3, #79	@ 0x4f
 8008710:	d902      	bls.n	8008718 <osMutexNew+0x6a>
          mem = 1;
 8008712:	2301      	movs	r3, #1
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	e00c      	b.n	8008732 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d108      	bne.n	8008732 <osMutexNew+0x84>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <osMutexNew+0x84>
            mem = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	e001      	b.n	8008732 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d112      	bne.n	800875e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	4619      	mov	r1, r3
 8008744:	2004      	movs	r0, #4
 8008746:	f000 fd70 	bl	800922a <xQueueCreateMutexStatic>
 800874a:	61f8      	str	r0, [r7, #28]
 800874c:	e016      	b.n	800877c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	4619      	mov	r1, r3
 8008754:	2001      	movs	r0, #1
 8008756:	f000 fd68 	bl	800922a <xQueueCreateMutexStatic>
 800875a:	61f8      	str	r0, [r7, #28]
 800875c:	e00e      	b.n	800877c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10b      	bne.n	800877c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d004      	beq.n	8008774 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800876a:	2004      	movs	r0, #4
 800876c:	f000 fd45 	bl	80091fa <xQueueCreateMutex>
 8008770:	61f8      	str	r0, [r7, #28]
 8008772:	e003      	b.n	800877c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008774:	2001      	movs	r0, #1
 8008776:	f000 fd40 	bl	80091fa <xQueueCreateMutex>
 800877a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00c      	beq.n	800879c <osMutexNew+0xee>
        if (attr != NULL) {
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <osMutexNew+0xe2>
          name = attr->name;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	e001      	b.n	8008794 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008794:	68f9      	ldr	r1, [r7, #12]
 8008796:	69f8      	ldr	r0, [r7, #28]
 8008798:	f001 fc2c 	bl	8009ff4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d006      	beq.n	80087b0 <osMutexNew+0x102>
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	f043 0301 	orr.w	r3, r3, #1
 80087ae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80087b0:	69fb      	ldr	r3, [r7, #28]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b086      	sub	sp, #24
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f023 0301 	bic.w	r3, r3, #1
 80087ca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087d8:	f3ef 8305 	mrs	r3, IPSR
 80087dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80087de:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <osMutexAcquire+0x32>
    stat = osErrorISR;
 80087e4:	f06f 0305 	mvn.w	r3, #5
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	e02c      	b.n	8008846 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d103      	bne.n	80087fa <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80087f2:	f06f 0303 	mvn.w	r3, #3
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e025      	b.n	8008846 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d011      	beq.n	8008824 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6938      	ldr	r0, [r7, #16]
 8008804:	f000 fd61 	bl	80092ca <xQueueTakeMutexRecursive>
 8008808:	4603      	mov	r3, r0
 800880a:	2b01      	cmp	r3, #1
 800880c:	d01b      	beq.n	8008846 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008814:	f06f 0301 	mvn.w	r3, #1
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e014      	b.n	8008846 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800881c:	f06f 0302 	mvn.w	r3, #2
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	e010      	b.n	8008846 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6938      	ldr	r0, [r7, #16]
 8008828:	f001 f906 	bl	8009a38 <xQueueSemaphoreTake>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d009      	beq.n	8008846 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008838:	f06f 0301 	mvn.w	r3, #1
 800883c:	617b      	str	r3, [r7, #20]
 800883e:	e002      	b.n	8008846 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008840:	f06f 0302 	mvn.w	r3, #2
 8008844:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008846:	697b      	ldr	r3, [r7, #20]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f023 0301 	bic.w	r3, r3, #1
 800885e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008868:	2300      	movs	r3, #0
 800886a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800886c:	f3ef 8305 	mrs	r3, IPSR
 8008870:	60bb      	str	r3, [r7, #8]
  return(result);
 8008872:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008878:	f06f 0305 	mvn.w	r3, #5
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	e01f      	b.n	80088c0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008886:	f06f 0303 	mvn.w	r3, #3
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e018      	b.n	80088c0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d009      	beq.n	80088a8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008894:	6938      	ldr	r0, [r7, #16]
 8008896:	f000 fce3 	bl	8009260 <xQueueGiveMutexRecursive>
 800889a:	4603      	mov	r3, r0
 800889c:	2b01      	cmp	r3, #1
 800889e:	d00f      	beq.n	80088c0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80088a0:	f06f 0302 	mvn.w	r3, #2
 80088a4:	617b      	str	r3, [r7, #20]
 80088a6:	e00b      	b.n	80088c0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80088a8:	2300      	movs	r3, #0
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	6938      	ldr	r0, [r7, #16]
 80088b0:	f000 fdb0 	bl	8009414 <xQueueGenericSend>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d002      	beq.n	80088c0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80088ba:	f06f 0302 	mvn.w	r3, #2
 80088be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80088c0:	697b      	ldr	r3, [r7, #20]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b08a      	sub	sp, #40	@ 0x28
 80088ce:	af02      	add	r7, sp, #8
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088da:	f3ef 8305 	mrs	r3, IPSR
 80088de:	613b      	str	r3, [r7, #16]
  return(result);
 80088e0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d175      	bne.n	80089d2 <osSemaphoreNew+0x108>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d072      	beq.n	80089d2 <osSemaphoreNew+0x108>
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d86e      	bhi.n	80089d2 <osSemaphoreNew+0x108>
    mem = -1;
 80088f4:	f04f 33ff 	mov.w	r3, #4294967295
 80088f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d015      	beq.n	800892c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d006      	beq.n	8008916 <osSemaphoreNew+0x4c>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b4f      	cmp	r3, #79	@ 0x4f
 800890e:	d902      	bls.n	8008916 <osSemaphoreNew+0x4c>
        mem = 1;
 8008910:	2301      	movs	r3, #1
 8008912:	61bb      	str	r3, [r7, #24]
 8008914:	e00c      	b.n	8008930 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d108      	bne.n	8008930 <osSemaphoreNew+0x66>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d104      	bne.n	8008930 <osSemaphoreNew+0x66>
          mem = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	61bb      	str	r3, [r7, #24]
 800892a:	e001      	b.n	8008930 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d04c      	beq.n	80089d2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d128      	bne.n	8008990 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d10a      	bne.n	800895a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	2203      	movs	r2, #3
 800894a:	9200      	str	r2, [sp, #0]
 800894c:	2200      	movs	r2, #0
 800894e:	2100      	movs	r1, #0
 8008950:	2001      	movs	r0, #1
 8008952:	f000 fb5d 	bl	8009010 <xQueueGenericCreateStatic>
 8008956:	61f8      	str	r0, [r7, #28]
 8008958:	e005      	b.n	8008966 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800895a:	2203      	movs	r2, #3
 800895c:	2100      	movs	r1, #0
 800895e:	2001      	movs	r0, #1
 8008960:	f000 fbd3 	bl	800910a <xQueueGenericCreate>
 8008964:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d022      	beq.n	80089b2 <osSemaphoreNew+0xe8>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d01f      	beq.n	80089b2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008972:	2300      	movs	r3, #0
 8008974:	2200      	movs	r2, #0
 8008976:	2100      	movs	r1, #0
 8008978:	69f8      	ldr	r0, [r7, #28]
 800897a:	f000 fd4b 	bl	8009414 <xQueueGenericSend>
 800897e:	4603      	mov	r3, r0
 8008980:	2b01      	cmp	r3, #1
 8008982:	d016      	beq.n	80089b2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008984:	69f8      	ldr	r0, [r7, #28]
 8008986:	f001 f9e9 	bl	8009d5c <vQueueDelete>
            hSemaphore = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
 800898e:	e010      	b.n	80089b2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d108      	bne.n	80089a8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	461a      	mov	r2, r3
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fcca 	bl	8009338 <xQueueCreateCountingSemaphoreStatic>
 80089a4:	61f8      	str	r0, [r7, #28]
 80089a6:	e004      	b.n	80089b2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80089a8:	68b9      	ldr	r1, [r7, #8]
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 fcfd 	bl	80093aa <xQueueCreateCountingSemaphore>
 80089b0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00c      	beq.n	80089d2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	e001      	b.n	80089ca <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80089ca:	6979      	ldr	r1, [r7, #20]
 80089cc:	69f8      	ldr	r0, [r7, #28]
 80089ce:	f001 fb11 	bl	8009ff4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80089d2:	69fb      	ldr	r3, [r7, #28]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3720      	adds	r7, #32
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80089f4:	f06f 0303 	mvn.w	r3, #3
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	e039      	b.n	8008a70 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089fc:	f3ef 8305 	mrs	r3, IPSR
 8008a00:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a02:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d022      	beq.n	8008a4e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008a0e:	f06f 0303 	mvn.w	r3, #3
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	e02c      	b.n	8008a70 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008a1a:	f107 0308 	add.w	r3, r7, #8
 8008a1e:	461a      	mov	r2, r3
 8008a20:	2100      	movs	r1, #0
 8008a22:	6938      	ldr	r0, [r7, #16]
 8008a24:	f001 f918 	bl	8009c58 <xQueueReceiveFromISR>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d003      	beq.n	8008a36 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008a2e:	f06f 0302 	mvn.w	r3, #2
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e01c      	b.n	8008a70 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d019      	beq.n	8008a70 <osSemaphoreAcquire+0x94>
 8008a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008a7c <osSemaphoreAcquire+0xa0>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	e010      	b.n	8008a70 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6938      	ldr	r0, [r7, #16]
 8008a52:	f000 fff1 	bl	8009a38 <xQueueSemaphoreTake>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d009      	beq.n	8008a70 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008a62:	f06f 0301 	mvn.w	r3, #1
 8008a66:	617b      	str	r3, [r7, #20]
 8008a68:	e002      	b.n	8008a70 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008a6a:	f06f 0302 	mvn.w	r3, #2
 8008a6e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008a70:	697b      	ldr	r3, [r7, #20]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	e000ed04 	.word	0xe000ed04

08008a80 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d103      	bne.n	8008a9e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008a96:	f06f 0303 	mvn.w	r3, #3
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e02c      	b.n	8008af8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a9e:	f3ef 8305 	mrs	r3, IPSR
 8008aa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d01a      	beq.n	8008ae0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008aae:	f107 0308 	add.w	r3, r7, #8
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6938      	ldr	r0, [r7, #16]
 8008ab6:	f000 fe4d 	bl	8009754 <xQueueGiveFromISR>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d003      	beq.n	8008ac8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008ac0:	f06f 0302 	mvn.w	r3, #2
 8008ac4:	617b      	str	r3, [r7, #20]
 8008ac6:	e017      	b.n	8008af8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d014      	beq.n	8008af8 <osSemaphoreRelease+0x78>
 8008ace:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <osSemaphoreRelease+0x84>)
 8008ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	e00b      	b.n	8008af8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6938      	ldr	r0, [r7, #16]
 8008ae8:	f000 fc94 	bl	8009414 <xQueueGenericSend>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d002      	beq.n	8008af8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008af2:	f06f 0302 	mvn.w	r3, #2
 8008af6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008af8:	697b      	ldr	r3, [r7, #20]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08a      	sub	sp, #40	@ 0x28
 8008b0c:	af02      	add	r7, sp, #8
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b18:	f3ef 8305 	mrs	r3, IPSR
 8008b1c:	613b      	str	r3, [r7, #16]
  return(result);
 8008b1e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d15f      	bne.n	8008be4 <osMessageQueueNew+0xdc>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d05c      	beq.n	8008be4 <osMessageQueueNew+0xdc>
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d059      	beq.n	8008be4 <osMessageQueueNew+0xdc>
    mem = -1;
 8008b30:	f04f 33ff 	mov.w	r3, #4294967295
 8008b34:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d029      	beq.n	8008b90 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d012      	beq.n	8008b6a <osMessageQueueNew+0x62>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	2b4f      	cmp	r3, #79	@ 0x4f
 8008b4a:	d90e      	bls.n	8008b6a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	fb01 f303 	mul.w	r3, r1, r3
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d302      	bcc.n	8008b6a <osMessageQueueNew+0x62>
        mem = 1;
 8008b64:	2301      	movs	r3, #1
 8008b66:	61bb      	str	r3, [r7, #24]
 8008b68:	e014      	b.n	8008b94 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d110      	bne.n	8008b94 <osMessageQueueNew+0x8c>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10c      	bne.n	8008b94 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d108      	bne.n	8008b94 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d104      	bne.n	8008b94 <osMessageQueueNew+0x8c>
          mem = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61bb      	str	r3, [r7, #24]
 8008b8e:	e001      	b.n	8008b94 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d10b      	bne.n	8008bb2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691a      	ldr	r2, [r3, #16]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	9100      	str	r1, [sp, #0]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 fa31 	bl	8009010 <xQueueGenericCreateStatic>
 8008bae:	61f8      	str	r0, [r7, #28]
 8008bb0:	e008      	b.n	8008bc4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d105      	bne.n	8008bc4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008bb8:	2200      	movs	r2, #0
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 faa4 	bl	800910a <xQueueGenericCreate>
 8008bc2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00c      	beq.n	8008be4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	617b      	str	r3, [r7, #20]
 8008bd6:	e001      	b.n	8008bdc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008bdc:	6979      	ldr	r1, [r7, #20]
 8008bde:	69f8      	ldr	r0, [r7, #28]
 8008be0:	f001 fa08 	bl	8009ff4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008be4:	69fb      	ldr	r3, [r7, #28]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3720      	adds	r7, #32
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	603b      	str	r3, [r7, #0]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c08:	f3ef 8305 	mrs	r3, IPSR
 8008c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c0e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d028      	beq.n	8008c66 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <osMessageQueuePut+0x36>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <osMessageQueuePut+0x36>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008c26:	f06f 0303 	mvn.w	r3, #3
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	e038      	b.n	8008ca0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008c32:	f107 0210 	add.w	r2, r7, #16
 8008c36:	2300      	movs	r3, #0
 8008c38:	68b9      	ldr	r1, [r7, #8]
 8008c3a:	69b8      	ldr	r0, [r7, #24]
 8008c3c:	f000 fcec 	bl	8009618 <xQueueGenericSendFromISR>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d003      	beq.n	8008c4e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008c46:	f06f 0302 	mvn.w	r3, #2
 8008c4a:	61fb      	str	r3, [r7, #28]
 8008c4c:	e028      	b.n	8008ca0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d025      	beq.n	8008ca0 <osMessageQueuePut+0xb0>
 8008c54:	4b15      	ldr	r3, [pc, #84]	@ (8008cac <osMessageQueuePut+0xbc>)
 8008c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	e01c      	b.n	8008ca0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <osMessageQueuePut+0x82>
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d103      	bne.n	8008c7a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008c72:	f06f 0303 	mvn.w	r3, #3
 8008c76:	61fb      	str	r3, [r7, #28]
 8008c78:	e012      	b.n	8008ca0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	69b8      	ldr	r0, [r7, #24]
 8008c82:	f000 fbc7 	bl	8009414 <xQueueGenericSend>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d009      	beq.n	8008ca0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008c92:	f06f 0301 	mvn.w	r3, #1
 8008c96:	61fb      	str	r3, [r7, #28]
 8008c98:	e002      	b.n	8008ca0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008c9a:	f06f 0302 	mvn.w	r3, #2
 8008c9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008ca0:	69fb      	ldr	r3, [r7, #28]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3720      	adds	r7, #32
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	e000ed04 	.word	0xe000ed04

08008cb0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cc6:	f3ef 8305 	mrs	r3, IPSR
 8008cca:	617b      	str	r3, [r7, #20]
  return(result);
 8008ccc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d028      	beq.n	8008d24 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <osMessageQueueGet+0x34>
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <osMessageQueueGet+0x34>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008ce4:	f06f 0303 	mvn.w	r3, #3
 8008ce8:	61fb      	str	r3, [r7, #28]
 8008cea:	e037      	b.n	8008d5c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008cec:	2300      	movs	r3, #0
 8008cee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008cf0:	f107 0310 	add.w	r3, r7, #16
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	69b8      	ldr	r0, [r7, #24]
 8008cfa:	f000 ffad 	bl	8009c58 <xQueueReceiveFromISR>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d003      	beq.n	8008d0c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008d04:	f06f 0302 	mvn.w	r3, #2
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	e027      	b.n	8008d5c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d024      	beq.n	8008d5c <osMessageQueueGet+0xac>
 8008d12:	4b15      	ldr	r3, [pc, #84]	@ (8008d68 <osMessageQueueGet+0xb8>)
 8008d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	e01b      	b.n	8008d5c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <osMessageQueueGet+0x80>
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d103      	bne.n	8008d38 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008d30:	f06f 0303 	mvn.w	r3, #3
 8008d34:	61fb      	str	r3, [r7, #28]
 8008d36:	e011      	b.n	8008d5c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	69b8      	ldr	r0, [r7, #24]
 8008d3e:	f000 fd99 	bl	8009874 <xQueueReceive>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d009      	beq.n	8008d5c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008d4e:	f06f 0301 	mvn.w	r3, #1
 8008d52:	61fb      	str	r3, [r7, #28]
 8008d54:	e002      	b.n	8008d5c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008d56:	f06f 0302 	mvn.w	r3, #2
 8008d5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008d5c:	69fb      	ldr	r3, [r7, #28]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3720      	adds	r7, #32
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4a07      	ldr	r2, [pc, #28]	@ (8008d98 <vApplicationGetIdleTaskMemory+0x2c>)
 8008d7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	4a06      	ldr	r2, [pc, #24]	@ (8008d9c <vApplicationGetIdleTaskMemory+0x30>)
 8008d82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2280      	movs	r2, #128	@ 0x80
 8008d88:	601a      	str	r2, [r3, #0]
}
 8008d8a:	bf00      	nop
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	200004a4 	.word	0x200004a4
 8008d9c:	2000054c 	.word	0x2000054c

08008da0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4a07      	ldr	r2, [pc, #28]	@ (8008dcc <vApplicationGetTimerTaskMemory+0x2c>)
 8008db0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	4a06      	ldr	r2, [pc, #24]	@ (8008dd0 <vApplicationGetTimerTaskMemory+0x30>)
 8008db6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008dbe:	601a      	str	r2, [r3, #0]
}
 8008dc0:	bf00      	nop
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	2000074c 	.word	0x2000074c
 8008dd0:	200007f4 	.word	0x200007f4

08008dd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f103 0208 	add.w	r2, r3, #8
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f103 0208 	add.w	r2, r3, #8
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f103 0208 	add.w	r2, r3, #8
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e22:	bf00      	nop
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b085      	sub	sp, #20
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	601a      	str	r2, [r3, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d103      	bne.n	8008e96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	e00c      	b.n	8008eb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3308      	adds	r3, #8
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	e002      	b.n	8008ea4 <vListInsert+0x2e>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d2f6      	bcs.n	8008e9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	601a      	str	r2, [r3, #0]
}
 8008edc:	bf00      	nop
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	6892      	ldr	r2, [r2, #8]
 8008efe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6852      	ldr	r2, [r2, #4]
 8008f08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d103      	bne.n	8008f1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	1e5a      	subs	r2, r3, #1
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10b      	bne.n	8008f68 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f68:	f002 ff0e 	bl	800bd88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f74:	68f9      	ldr	r1, [r7, #12]
 8008f76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f78:	fb01 f303 	mul.w	r3, r1, r3
 8008f7c:	441a      	add	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f9e:	fb01 f303 	mul.w	r3, r1, r3
 8008fa2:	441a      	add	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	22ff      	movs	r2, #255	@ 0xff
 8008fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	22ff      	movs	r2, #255	@ 0xff
 8008fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d114      	bne.n	8008fe8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d01a      	beq.n	8008ffc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3310      	adds	r3, #16
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fd2c 	bl	800aa28 <xTaskRemoveFromEventList>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d012      	beq.n	8008ffc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800900c <xQueueGenericReset+0xd0>)
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	e009      	b.n	8008ffc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3310      	adds	r3, #16
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fef1 	bl	8008dd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3324      	adds	r3, #36	@ 0x24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff feec 	bl	8008dd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ffc:	f002 fef6 	bl	800bdec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009000:	2301      	movs	r3, #1
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	e000ed04 	.word	0xe000ed04

08009010 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08e      	sub	sp, #56	@ 0x38
 8009014:	af02      	add	r7, sp, #8
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10b      	bne.n	800903c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	e7fd      	b.n	8009038 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10b      	bne.n	800905a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <xQueueGenericCreateStatic+0x56>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <xQueueGenericCreateStatic+0x5a>
 8009066:	2301      	movs	r3, #1
 8009068:	e000      	b.n	800906c <xQueueGenericCreateStatic+0x5c>
 800906a:	2300      	movs	r3, #0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10b      	bne.n	8009088 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	623b      	str	r3, [r7, #32]
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d102      	bne.n	8009094 <xQueueGenericCreateStatic+0x84>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <xQueueGenericCreateStatic+0x88>
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <xQueueGenericCreateStatic+0x8a>
 8009098:	2300      	movs	r3, #0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	61fb      	str	r3, [r7, #28]
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80090b6:	2350      	movs	r3, #80	@ 0x50
 80090b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b50      	cmp	r3, #80	@ 0x50
 80090be:	d00b      	beq.n	80090d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	61bb      	str	r3, [r7, #24]
}
 80090d2:	bf00      	nop
 80090d4:	bf00      	nop
 80090d6:	e7fd      	b.n	80090d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80090d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80090de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00d      	beq.n	8009100 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80090e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80090f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	68b9      	ldr	r1, [r7, #8]
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 f840 	bl	8009180 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009102:	4618      	mov	r0, r3
 8009104:	3730      	adds	r7, #48	@ 0x30
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800910a:	b580      	push	{r7, lr}
 800910c:	b08a      	sub	sp, #40	@ 0x28
 800910e:	af02      	add	r7, sp, #8
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	4613      	mov	r3, r2
 8009116:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10b      	bne.n	8009136 <xQueueGenericCreate+0x2c>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	613b      	str	r3, [r7, #16]
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	e7fd      	b.n	8009132 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	fb02 f303 	mul.w	r3, r2, r3
 800913e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	3350      	adds	r3, #80	@ 0x50
 8009144:	4618      	mov	r0, r3
 8009146:	f002 ff41 	bl	800bfcc <pvPortMalloc>
 800914a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d011      	beq.n	8009176 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	3350      	adds	r3, #80	@ 0x50
 800915a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009164:	79fa      	ldrb	r2, [r7, #7]
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	4613      	mov	r3, r2
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f805 	bl	8009180 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009176:	69bb      	ldr	r3, [r7, #24]
	}
 8009178:	4618      	mov	r0, r3
 800917a:	3720      	adds	r7, #32
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	601a      	str	r2, [r3, #0]
 800919a:	e002      	b.n	80091a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091ae:	2101      	movs	r1, #1
 80091b0:	69b8      	ldr	r0, [r7, #24]
 80091b2:	f7ff fec3 	bl	8008f3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	78fa      	ldrb	r2, [r7, #3]
 80091ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091be:	bf00      	nop
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00e      	beq.n	80091f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80091e6:	2300      	movs	r3, #0
 80091e8:	2200      	movs	r2, #0
 80091ea:	2100      	movs	r1, #0
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f911 	bl	8009414 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b086      	sub	sp, #24
 80091fe:	af00      	add	r7, sp, #0
 8009200:	4603      	mov	r3, r0
 8009202:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009204:	2301      	movs	r3, #1
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	2300      	movs	r3, #0
 800920a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	461a      	mov	r2, r3
 8009210:	6939      	ldr	r1, [r7, #16]
 8009212:	6978      	ldr	r0, [r7, #20]
 8009214:	f7ff ff79 	bl	800910a <xQueueGenericCreate>
 8009218:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f7ff ffd3 	bl	80091c6 <prvInitialiseMutex>

		return xNewQueue;
 8009220:	68fb      	ldr	r3, [r7, #12]
	}
 8009222:	4618      	mov	r0, r3
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800922a:	b580      	push	{r7, lr}
 800922c:	b088      	sub	sp, #32
 800922e:	af02      	add	r7, sp, #8
 8009230:	4603      	mov	r3, r0
 8009232:	6039      	str	r1, [r7, #0]
 8009234:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009236:	2301      	movs	r3, #1
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	2300      	movs	r3, #0
 800923c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2200      	movs	r2, #0
 8009246:	6939      	ldr	r1, [r7, #16]
 8009248:	6978      	ldr	r0, [r7, #20]
 800924a:	f7ff fee1 	bl	8009010 <xQueueGenericCreateStatic>
 800924e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f7ff ffb8 	bl	80091c6 <prvInitialiseMutex>

		return xNewQueue;
 8009256:	68fb      	ldr	r3, [r7, #12]
	}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10b      	bne.n	800928a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	60fb      	str	r3, [r7, #12]
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	e7fd      	b.n	8009286 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	689c      	ldr	r4, [r3, #8]
 800928e:	f001 fd91 	bl	800adb4 <xTaskGetCurrentTaskHandle>
 8009292:	4603      	mov	r3, r0
 8009294:	429c      	cmp	r4, r3
 8009296:	d111      	bne.n	80092bc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	1e5a      	subs	r2, r3, #1
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80092aa:	2300      	movs	r3, #0
 80092ac:	2200      	movs	r2, #0
 80092ae:	2100      	movs	r1, #0
 80092b0:	6938      	ldr	r0, [r7, #16]
 80092b2:	f000 f8af 	bl	8009414 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80092b6:	2301      	movs	r3, #1
 80092b8:	617b      	str	r3, [r7, #20]
 80092ba:	e001      	b.n	80092c0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80092c0:	697b      	ldr	r3, [r7, #20]
	}
 80092c2:	4618      	mov	r0, r3
 80092c4:	371c      	adds	r7, #28
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd90      	pop	{r4, r7, pc}

080092ca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80092ca:	b590      	push	{r4, r7, lr}
 80092cc:	b087      	sub	sp, #28
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10b      	bne.n	80092f6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	60fb      	str	r3, [r7, #12]
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	689c      	ldr	r4, [r3, #8]
 80092fa:	f001 fd5b 	bl	800adb4 <xTaskGetCurrentTaskHandle>
 80092fe:	4603      	mov	r3, r0
 8009300:	429c      	cmp	r4, r3
 8009302:	d107      	bne.n	8009314 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800930e:	2301      	movs	r3, #1
 8009310:	617b      	str	r3, [r7, #20]
 8009312:	e00c      	b.n	800932e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6938      	ldr	r0, [r7, #16]
 8009318:	f000 fb8e 	bl	8009a38 <xQueueSemaphoreTake>
 800931c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800932e:	697b      	ldr	r3, [r7, #20]
	}
 8009330:	4618      	mov	r0, r3
 8009332:	371c      	adds	r7, #28
 8009334:	46bd      	mov	sp, r7
 8009336:	bd90      	pop	{r4, r7, pc}

08009338 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	@ 0x28
 800933c:	af02      	add	r7, sp, #8
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10b      	bne.n	8009362 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	61bb      	str	r3, [r7, #24]
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	e7fd      	b.n	800935e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	429a      	cmp	r2, r3
 8009368:	d90b      	bls.n	8009382 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	617b      	str	r3, [r7, #20]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009382:	2302      	movs	r3, #2
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	2100      	movs	r1, #0
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff fe3f 	bl	8009010 <xQueueGenericCreateStatic>
 8009392:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80093a0:	69fb      	ldr	r3, [r7, #28]
	}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b086      	sub	sp, #24
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10b      	bne.n	80093d2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	613b      	str	r3, [r7, #16]
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	e7fd      	b.n	80093ce <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d90b      	bls.n	80093f2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	60fb      	str	r3, [r7, #12]
}
 80093ec:	bf00      	nop
 80093ee:	bf00      	nop
 80093f0:	e7fd      	b.n	80093ee <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093f2:	2202      	movs	r2, #2
 80093f4:	2100      	movs	r1, #0
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff fe87 	bl	800910a <xQueueGenericCreate>
 80093fc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800940a:	697b      	ldr	r3, [r7, #20]
	}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08e      	sub	sp, #56	@ 0x38
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009422:	2300      	movs	r3, #0
 8009424:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10b      	bne.n	8009448 <xQueueGenericSend+0x34>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009442:	bf00      	nop
 8009444:	bf00      	nop
 8009446:	e7fd      	b.n	8009444 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d103      	bne.n	8009456 <xQueueGenericSend+0x42>
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <xQueueGenericSend+0x46>
 8009456:	2301      	movs	r3, #1
 8009458:	e000      	b.n	800945c <xQueueGenericSend+0x48>
 800945a:	2300      	movs	r3, #0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10b      	bne.n	8009478 <xQueueGenericSend+0x64>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009472:	bf00      	nop
 8009474:	bf00      	nop
 8009476:	e7fd      	b.n	8009474 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d103      	bne.n	8009486 <xQueueGenericSend+0x72>
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009482:	2b01      	cmp	r3, #1
 8009484:	d101      	bne.n	800948a <xQueueGenericSend+0x76>
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <xQueueGenericSend+0x78>
 800948a:	2300      	movs	r3, #0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10b      	bne.n	80094a8 <xQueueGenericSend+0x94>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	623b      	str	r3, [r7, #32]
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	e7fd      	b.n	80094a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094a8:	f001 fc94 	bl	800add4 <xTaskGetSchedulerState>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d102      	bne.n	80094b8 <xQueueGenericSend+0xa4>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <xQueueGenericSend+0xa8>
 80094b8:	2301      	movs	r3, #1
 80094ba:	e000      	b.n	80094be <xQueueGenericSend+0xaa>
 80094bc:	2300      	movs	r3, #0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10b      	bne.n	80094da <xQueueGenericSend+0xc6>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	61fb      	str	r3, [r7, #28]
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	e7fd      	b.n	80094d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094da:	f002 fc55 	bl	800bd88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d302      	bcc.n	80094f0 <xQueueGenericSend+0xdc>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d129      	bne.n	8009544 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094f6:	f000 fc6d 	bl	8009dd4 <prvCopyDataToQueue>
 80094fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009500:	2b00      	cmp	r3, #0
 8009502:	d010      	beq.n	8009526 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	3324      	adds	r3, #36	@ 0x24
 8009508:	4618      	mov	r0, r3
 800950a:	f001 fa8d 	bl	800aa28 <xTaskRemoveFromEventList>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d013      	beq.n	800953c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009514:	4b3f      	ldr	r3, [pc, #252]	@ (8009614 <xQueueGenericSend+0x200>)
 8009516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	e00a      	b.n	800953c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009528:	2b00      	cmp	r3, #0
 800952a:	d007      	beq.n	800953c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800952c:	4b39      	ldr	r3, [pc, #228]	@ (8009614 <xQueueGenericSend+0x200>)
 800952e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800953c:	f002 fc56 	bl	800bdec <vPortExitCritical>
				return pdPASS;
 8009540:	2301      	movs	r3, #1
 8009542:	e063      	b.n	800960c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d103      	bne.n	8009552 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800954a:	f002 fc4f 	bl	800bdec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800954e:	2300      	movs	r3, #0
 8009550:	e05c      	b.n	800960c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009558:	f107 0314 	add.w	r3, r7, #20
 800955c:	4618      	mov	r0, r3
 800955e:	f001 fac7 	bl	800aaf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009562:	2301      	movs	r3, #1
 8009564:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009566:	f002 fc41 	bl	800bdec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800956a:	f001 f82f 	bl	800a5cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800956e:	f002 fc0b 	bl	800bd88 <vPortEnterCritical>
 8009572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009578:	b25b      	sxtb	r3, r3
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957e:	d103      	bne.n	8009588 <xQueueGenericSend+0x174>
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800958e:	b25b      	sxtb	r3, r3
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d103      	bne.n	800959e <xQueueGenericSend+0x18a>
 8009596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800959e:	f002 fc25 	bl	800bdec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095a2:	1d3a      	adds	r2, r7, #4
 80095a4:	f107 0314 	add.w	r3, r7, #20
 80095a8:	4611      	mov	r1, r2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 fab6 	bl	800ab1c <xTaskCheckForTimeOut>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d124      	bne.n	8009600 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095b8:	f000 fd04 	bl	8009fc4 <prvIsQueueFull>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d018      	beq.n	80095f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c4:	3310      	adds	r3, #16
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f001 f9da 	bl	800a984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095d2:	f000 fc8f 	bl	8009ef4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095d6:	f001 f807 	bl	800a5e8 <xTaskResumeAll>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f47f af7c 	bne.w	80094da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80095e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009614 <xQueueGenericSend+0x200>)
 80095e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	e772      	b.n	80094da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095f6:	f000 fc7d 	bl	8009ef4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095fa:	f000 fff5 	bl	800a5e8 <xTaskResumeAll>
 80095fe:	e76c      	b.n	80094da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009602:	f000 fc77 	bl	8009ef4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009606:	f000 ffef 	bl	800a5e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800960a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800960c:	4618      	mov	r0, r3
 800960e:	3738      	adds	r7, #56	@ 0x38
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	e000ed04 	.word	0xe000ed04

08009618 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b090      	sub	sp, #64	@ 0x40
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800962a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10b      	bne.n	8009648 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009642:	bf00      	nop
 8009644:	bf00      	nop
 8009646:	e7fd      	b.n	8009644 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d103      	bne.n	8009656 <xQueueGenericSendFromISR+0x3e>
 800964e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <xQueueGenericSendFromISR+0x42>
 8009656:	2301      	movs	r3, #1
 8009658:	e000      	b.n	800965c <xQueueGenericSendFromISR+0x44>
 800965a:	2300      	movs	r3, #0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10b      	bne.n	8009678 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009672:	bf00      	nop
 8009674:	bf00      	nop
 8009676:	e7fd      	b.n	8009674 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d103      	bne.n	8009686 <xQueueGenericSendFromISR+0x6e>
 800967e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009682:	2b01      	cmp	r3, #1
 8009684:	d101      	bne.n	800968a <xQueueGenericSendFromISR+0x72>
 8009686:	2301      	movs	r3, #1
 8009688:	e000      	b.n	800968c <xQueueGenericSendFromISR+0x74>
 800968a:	2300      	movs	r3, #0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10b      	bne.n	80096a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	623b      	str	r3, [r7, #32]
}
 80096a2:	bf00      	nop
 80096a4:	bf00      	nop
 80096a6:	e7fd      	b.n	80096a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096a8:	f002 fc4e 	bl	800bf48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096ac:	f3ef 8211 	mrs	r2, BASEPRI
 80096b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	61fa      	str	r2, [r7, #28]
 80096c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <xQueueGenericSendFromISR+0xc2>
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d12f      	bne.n	800973a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	68b9      	ldr	r1, [r7, #8]
 80096ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096f0:	f000 fb70 	bl	8009dd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80096f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fc:	d112      	bne.n	8009724 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	d016      	beq.n	8009734 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	3324      	adds	r3, #36	@ 0x24
 800970a:	4618      	mov	r0, r3
 800970c:	f001 f98c 	bl	800aa28 <xTaskRemoveFromEventList>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00e      	beq.n	8009734 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00b      	beq.n	8009734 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	e007      	b.n	8009734 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009724:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009728:	3301      	adds	r3, #1
 800972a:	b2db      	uxtb	r3, r3
 800972c:	b25a      	sxtb	r2, r3
 800972e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009734:	2301      	movs	r3, #1
 8009736:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009738:	e001      	b.n	800973e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800973a:	2300      	movs	r3, #0
 800973c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800973e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009740:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009748:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800974a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800974c:	4618      	mov	r0, r3
 800974e:	3740      	adds	r7, #64	@ 0x40
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08e      	sub	sp, #56	@ 0x38
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10b      	bne.n	8009780 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	623b      	str	r3, [r7, #32]
}
 800977a:	bf00      	nop
 800977c:	bf00      	nop
 800977e:	e7fd      	b.n	800977c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	61fb      	str	r3, [r7, #28]
}
 800979a:	bf00      	nop
 800979c:	bf00      	nop
 800979e:	e7fd      	b.n	800979c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <xQueueGiveFromISR+0x5c>
 80097a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <xQueueGiveFromISR+0x60>
 80097b0:	2301      	movs	r3, #1
 80097b2:	e000      	b.n	80097b6 <xQueueGiveFromISR+0x62>
 80097b4:	2300      	movs	r3, #0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	61bb      	str	r3, [r7, #24]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097d2:	f002 fbb9 	bl	800bf48 <vPortValidateInterruptPriority>
	__asm volatile
 80097d6:	f3ef 8211 	mrs	r2, BASEPRI
 80097da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	617a      	str	r2, [r7, #20]
 80097ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80097ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097fe:	429a      	cmp	r2, r3
 8009800:	d22b      	bcs.n	800985a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800980c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009812:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009814:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981c:	d112      	bne.n	8009844 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009822:	2b00      	cmp	r3, #0
 8009824:	d016      	beq.n	8009854 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	3324      	adds	r3, #36	@ 0x24
 800982a:	4618      	mov	r0, r3
 800982c:	f001 f8fc 	bl	800aa28 <xTaskRemoveFromEventList>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00e      	beq.n	8009854 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00b      	beq.n	8009854 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2201      	movs	r2, #1
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	e007      	b.n	8009854 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009848:	3301      	adds	r3, #1
 800984a:	b2db      	uxtb	r3, r3
 800984c:	b25a      	sxtb	r2, r3
 800984e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009854:	2301      	movs	r3, #1
 8009856:	637b      	str	r3, [r7, #52]	@ 0x34
 8009858:	e001      	b.n	800985e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800985a:	2300      	movs	r3, #0
 800985c:	637b      	str	r3, [r7, #52]	@ 0x34
 800985e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009860:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f383 8811 	msr	BASEPRI, r3
}
 8009868:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800986a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800986c:	4618      	mov	r0, r3
 800986e:	3738      	adds	r7, #56	@ 0x38
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08c      	sub	sp, #48	@ 0x30
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009880:	2300      	movs	r3, #0
 8009882:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10b      	bne.n	80098a6 <xQueueReceive+0x32>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	623b      	str	r3, [r7, #32]
}
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
 80098a4:	e7fd      	b.n	80098a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d103      	bne.n	80098b4 <xQueueReceive+0x40>
 80098ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <xQueueReceive+0x44>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <xQueueReceive+0x46>
 80098b8:	2300      	movs	r3, #0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10b      	bne.n	80098d6 <xQueueReceive+0x62>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	61fb      	str	r3, [r7, #28]
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098d6:	f001 fa7d 	bl	800add4 <xTaskGetSchedulerState>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <xQueueReceive+0x72>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <xQueueReceive+0x76>
 80098e6:	2301      	movs	r3, #1
 80098e8:	e000      	b.n	80098ec <xQueueReceive+0x78>
 80098ea:	2300      	movs	r3, #0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10b      	bne.n	8009908 <xQueueReceive+0x94>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	61bb      	str	r3, [r7, #24]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009908:	f002 fa3e 	bl	800bd88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009910:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01f      	beq.n	8009958 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800991c:	f000 fac4 	bl	8009ea8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009922:	1e5a      	subs	r2, r3, #1
 8009924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009926:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00f      	beq.n	8009950 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009932:	3310      	adds	r3, #16
 8009934:	4618      	mov	r0, r3
 8009936:	f001 f877 	bl	800aa28 <xTaskRemoveFromEventList>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d007      	beq.n	8009950 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009940:	4b3c      	ldr	r3, [pc, #240]	@ (8009a34 <xQueueReceive+0x1c0>)
 8009942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009950:	f002 fa4c 	bl	800bdec <vPortExitCritical>
				return pdPASS;
 8009954:	2301      	movs	r3, #1
 8009956:	e069      	b.n	8009a2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d103      	bne.n	8009966 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800995e:	f002 fa45 	bl	800bdec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009962:	2300      	movs	r3, #0
 8009964:	e062      	b.n	8009a2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009968:	2b00      	cmp	r3, #0
 800996a:	d106      	bne.n	800997a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800996c:	f107 0310 	add.w	r3, r7, #16
 8009970:	4618      	mov	r0, r3
 8009972:	f001 f8bd 	bl	800aaf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009976:	2301      	movs	r3, #1
 8009978:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800997a:	f002 fa37 	bl	800bdec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800997e:	f000 fe25 	bl	800a5cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009982:	f002 fa01 	bl	800bd88 <vPortEnterCritical>
 8009986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800998c:	b25b      	sxtb	r3, r3
 800998e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009992:	d103      	bne.n	800999c <xQueueReceive+0x128>
 8009994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800999c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099a2:	b25b      	sxtb	r3, r3
 80099a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a8:	d103      	bne.n	80099b2 <xQueueReceive+0x13e>
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099b2:	f002 fa1b 	bl	800bdec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099b6:	1d3a      	adds	r2, r7, #4
 80099b8:	f107 0310 	add.w	r3, r7, #16
 80099bc:	4611      	mov	r1, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f001 f8ac 	bl	800ab1c <xTaskCheckForTimeOut>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d123      	bne.n	8009a12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099cc:	f000 fae4 	bl	8009f98 <prvIsQueueEmpty>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d017      	beq.n	8009a06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	3324      	adds	r3, #36	@ 0x24
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 ffd0 	bl	800a984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099e6:	f000 fa85 	bl	8009ef4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099ea:	f000 fdfd 	bl	800a5e8 <xTaskResumeAll>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d189      	bne.n	8009908 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80099f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009a34 <xQueueReceive+0x1c0>)
 80099f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	e780      	b.n	8009908 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a08:	f000 fa74 	bl	8009ef4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a0c:	f000 fdec 	bl	800a5e8 <xTaskResumeAll>
 8009a10:	e77a      	b.n	8009908 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a14:	f000 fa6e 	bl	8009ef4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a18:	f000 fde6 	bl	800a5e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a1e:	f000 fabb 	bl	8009f98 <prvIsQueueEmpty>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f43f af6f 	beq.w	8009908 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3730      	adds	r7, #48	@ 0x30
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	e000ed04 	.word	0xe000ed04

08009a38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08e      	sub	sp, #56	@ 0x38
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10b      	bne.n	8009a6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	623b      	str	r3, [r7, #32]
}
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	e7fd      	b.n	8009a68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00b      	beq.n	8009a8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	61fb      	str	r3, [r7, #28]
}
 8009a86:	bf00      	nop
 8009a88:	bf00      	nop
 8009a8a:	e7fd      	b.n	8009a88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a8c:	f001 f9a2 	bl	800add4 <xTaskGetSchedulerState>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d102      	bne.n	8009a9c <xQueueSemaphoreTake+0x64>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d101      	bne.n	8009aa0 <xQueueSemaphoreTake+0x68>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e000      	b.n	8009aa2 <xQueueSemaphoreTake+0x6a>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	61bb      	str	r3, [r7, #24]
}
 8009ab8:	bf00      	nop
 8009aba:	bf00      	nop
 8009abc:	e7fd      	b.n	8009aba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009abe:	f002 f963 	bl	800bd88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d024      	beq.n	8009b18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad0:	1e5a      	subs	r2, r3, #1
 8009ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009ade:	f001 faf3 	bl	800b0c8 <pvTaskIncrementMutexHeldCount>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00f      	beq.n	8009b10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af2:	3310      	adds	r3, #16
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 ff97 	bl	800aa28 <xTaskRemoveFromEventList>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d007      	beq.n	8009b10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b00:	4b54      	ldr	r3, [pc, #336]	@ (8009c54 <xQueueSemaphoreTake+0x21c>)
 8009b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b10:	f002 f96c 	bl	800bdec <vPortExitCritical>
				return pdPASS;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e098      	b.n	8009c4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d112      	bne.n	8009b44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00b      	beq.n	8009b3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	617b      	str	r3, [r7, #20]
}
 8009b36:	bf00      	nop
 8009b38:	bf00      	nop
 8009b3a:	e7fd      	b.n	8009b38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b3c:	f002 f956 	bl	800bdec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b40:	2300      	movs	r3, #0
 8009b42:	e082      	b.n	8009c4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d106      	bne.n	8009b58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b4a:	f107 030c 	add.w	r3, r7, #12
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 ffce 	bl	800aaf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b54:	2301      	movs	r3, #1
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b58:	f002 f948 	bl	800bdec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b5c:	f000 fd36 	bl	800a5cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b60:	f002 f912 	bl	800bd88 <vPortEnterCritical>
 8009b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b6a:	b25b      	sxtb	r3, r3
 8009b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b70:	d103      	bne.n	8009b7a <xQueueSemaphoreTake+0x142>
 8009b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b80:	b25b      	sxtb	r3, r3
 8009b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b86:	d103      	bne.n	8009b90 <xQueueSemaphoreTake+0x158>
 8009b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b90:	f002 f92c 	bl	800bdec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b94:	463a      	mov	r2, r7
 8009b96:	f107 030c 	add.w	r3, r7, #12
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 ffbd 	bl	800ab1c <xTaskCheckForTimeOut>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d132      	bne.n	8009c0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009baa:	f000 f9f5 	bl	8009f98 <prvIsQueueEmpty>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d026      	beq.n	8009c02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d109      	bne.n	8009bd0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009bbc:	f002 f8e4 	bl	800bd88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f001 f923 	bl	800ae10 <xTaskPriorityInherit>
 8009bca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009bcc:	f002 f90e 	bl	800bdec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd2:	3324      	adds	r3, #36	@ 0x24
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 fed3 	bl	800a984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009be0:	f000 f988 	bl	8009ef4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009be4:	f000 fd00 	bl	800a5e8 <xTaskResumeAll>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f47f af67 	bne.w	8009abe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009bf0:	4b18      	ldr	r3, [pc, #96]	@ (8009c54 <xQueueSemaphoreTake+0x21c>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	e75d      	b.n	8009abe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c04:	f000 f976 	bl	8009ef4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c08:	f000 fcee 	bl	800a5e8 <xTaskResumeAll>
 8009c0c:	e757      	b.n	8009abe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c10:	f000 f970 	bl	8009ef4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c14:	f000 fce8 	bl	800a5e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c1a:	f000 f9bd 	bl	8009f98 <prvIsQueueEmpty>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f43f af4c 	beq.w	8009abe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00d      	beq.n	8009c48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009c2c:	f002 f8ac 	bl	800bd88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c32:	f000 f8b7 	bl	8009da4 <prvGetDisinheritPriorityAfterTimeout>
 8009c36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f001 f9be 	bl	800afc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c44:	f002 f8d2 	bl	800bdec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3738      	adds	r7, #56	@ 0x38
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08e      	sub	sp, #56	@ 0x38
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10b      	bne.n	8009c86 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	623b      	str	r3, [r7, #32]
}
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	e7fd      	b.n	8009c82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d103      	bne.n	8009c94 <xQueueReceiveFromISR+0x3c>
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <xQueueReceiveFromISR+0x40>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e000      	b.n	8009c9a <xQueueReceiveFromISR+0x42>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10b      	bne.n	8009cb6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	61fb      	str	r3, [r7, #28]
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	e7fd      	b.n	8009cb2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cb6:	f002 f947 	bl	800bf48 <vPortValidateInterruptPriority>
	__asm volatile
 8009cba:	f3ef 8211 	mrs	r2, BASEPRI
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	61ba      	str	r2, [r7, #24]
 8009cd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009cd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d02f      	beq.n	8009d42 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cf0:	f000 f8da 	bl	8009ea8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf6:	1e5a      	subs	r2, r3, #1
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009cfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d04:	d112      	bne.n	8009d2c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d016      	beq.n	8009d3c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d10:	3310      	adds	r3, #16
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 fe88 	bl	800aa28 <xTaskRemoveFromEventList>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00e      	beq.n	8009d3c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00b      	beq.n	8009d3c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	e007      	b.n	8009d3c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d30:	3301      	adds	r3, #1
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	b25a      	sxtb	r2, r3
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d40:	e001      	b.n	8009d46 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f383 8811 	msr	BASEPRI, r3
}
 8009d50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3738      	adds	r7, #56	@ 0x38
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10b      	bne.n	8009d86 <vQueueDelete+0x2a>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	60bb      	str	r3, [r7, #8]
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	e7fd      	b.n	8009d82 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f000 f95e 	bl	800a048 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d102      	bne.n	8009d9c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f002 f9e6 	bl	800c168 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009d9c:	bf00      	nop
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e001      	b.n	8009dc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
	}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10d      	bne.n	8009e0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d14d      	bne.n	8009e96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f001 f86e 	bl	800aee0 <xTaskPriorityDisinherit>
 8009e04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	609a      	str	r2, [r3, #8]
 8009e0c:	e043      	b.n	8009e96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d119      	bne.n	8009e48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6858      	ldr	r0, [r3, #4]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	68b9      	ldr	r1, [r7, #8]
 8009e20:	f003 f929 	bl	800d076 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e2c:	441a      	add	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d32b      	bcc.n	8009e96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	605a      	str	r2, [r3, #4]
 8009e46:	e026      	b.n	8009e96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	68d8      	ldr	r0, [r3, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e50:	461a      	mov	r2, r3
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	f003 f90f 	bl	800d076 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e60:	425b      	negs	r3, r3
 8009e62:	441a      	add	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d207      	bcs.n	8009e84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7c:	425b      	negs	r3, r3
 8009e7e:	441a      	add	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d105      	bne.n	8009e96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009e9e:	697b      	ldr	r3, [r7, #20]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d018      	beq.n	8009eec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec2:	441a      	add	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68da      	ldr	r2, [r3, #12]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d303      	bcc.n	8009edc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68d9      	ldr	r1, [r3, #12]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	6838      	ldr	r0, [r7, #0]
 8009ee8:	f003 f8c5 	bl	800d076 <memcpy>
	}
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009efc:	f001 ff44 	bl	800bd88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f08:	e011      	b.n	8009f2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d012      	beq.n	8009f38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3324      	adds	r3, #36	@ 0x24
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 fd86 	bl	800aa28 <xTaskRemoveFromEventList>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f22:	f000 fe5f 	bl	800abe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dce9      	bgt.n	8009f0a <prvUnlockQueue+0x16>
 8009f36:	e000      	b.n	8009f3a <prvUnlockQueue+0x46>
					break;
 8009f38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	22ff      	movs	r2, #255	@ 0xff
 8009f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009f42:	f001 ff53 	bl	800bdec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f46:	f001 ff1f 	bl	800bd88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f52:	e011      	b.n	8009f78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d012      	beq.n	8009f82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3310      	adds	r3, #16
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 fd61 	bl	800aa28 <xTaskRemoveFromEventList>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f6c:	f000 fe3a 	bl	800abe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	dce9      	bgt.n	8009f54 <prvUnlockQueue+0x60>
 8009f80:	e000      	b.n	8009f84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	22ff      	movs	r2, #255	@ 0xff
 8009f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009f8c:	f001 ff2e 	bl	800bdec <vPortExitCritical>
}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fa0:	f001 fef2 	bl	800bd88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d102      	bne.n	8009fb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009fac:	2301      	movs	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e001      	b.n	8009fb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fb6:	f001 ff19 	bl	800bdec <vPortExitCritical>

	return xReturn;
 8009fba:	68fb      	ldr	r3, [r7, #12]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fcc:	f001 fedc 	bl	800bd88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d102      	bne.n	8009fe2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e001      	b.n	8009fe6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fe6:	f001 ff01 	bl	800bdec <vPortExitCritical>

	return xReturn;
 8009fea:	68fb      	ldr	r3, [r7, #12]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ffe:	2300      	movs	r3, #0
 800a000:	60fb      	str	r3, [r7, #12]
 800a002:	e014      	b.n	800a02e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a004:	4a0f      	ldr	r2, [pc, #60]	@ (800a044 <vQueueAddToRegistry+0x50>)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10b      	bne.n	800a028 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a010:	490c      	ldr	r1, [pc, #48]	@ (800a044 <vQueueAddToRegistry+0x50>)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a01a:	4a0a      	ldr	r2, [pc, #40]	@ (800a044 <vQueueAddToRegistry+0x50>)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	4413      	add	r3, r2
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a026:	e006      	b.n	800a036 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b07      	cmp	r3, #7
 800a032:	d9e7      	bls.n	800a004 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	20000bf4 	.word	0x20000bf4

0800a048 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a050:	2300      	movs	r3, #0
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e016      	b.n	800a084 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a056:	4a10      	ldr	r2, [pc, #64]	@ (800a098 <vQueueUnregisterQueue+0x50>)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	4413      	add	r3, r2
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	429a      	cmp	r2, r3
 800a064:	d10b      	bne.n	800a07e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a066:	4a0c      	ldr	r2, [pc, #48]	@ (800a098 <vQueueUnregisterQueue+0x50>)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2100      	movs	r1, #0
 800a06c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a070:	4a09      	ldr	r2, [pc, #36]	@ (800a098 <vQueueUnregisterQueue+0x50>)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	4413      	add	r3, r2
 800a078:	2200      	movs	r2, #0
 800a07a:	605a      	str	r2, [r3, #4]
				break;
 800a07c:	e006      	b.n	800a08c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3301      	adds	r3, #1
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b07      	cmp	r3, #7
 800a088:	d9e5      	bls.n	800a056 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a08a:	bf00      	nop
 800a08c:	bf00      	nop
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	20000bf4 	.word	0x20000bf4

0800a09c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0ac:	f001 fe6c 	bl	800bd88 <vPortEnterCritical>
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d103      	bne.n	800a0c6 <vQueueWaitForMessageRestricted+0x2a>
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0cc:	b25b      	sxtb	r3, r3
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d2:	d103      	bne.n	800a0dc <vQueueWaitForMessageRestricted+0x40>
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0dc:	f001 fe86 	bl	800bdec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d106      	bne.n	800a0f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	3324      	adds	r3, #36	@ 0x24
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fc6d 	bl	800a9d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a0f6:	6978      	ldr	r0, [r7, #20]
 800a0f8:	f7ff fefc 	bl	8009ef4 <prvUnlockQueue>
	}
 800a0fc:	bf00      	nop
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08e      	sub	sp, #56	@ 0x38
 800a108:	af04      	add	r7, sp, #16
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10b      	bne.n	800a130 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	623b      	str	r3, [r7, #32]
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10b      	bne.n	800a14e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	61fb      	str	r3, [r7, #28]
}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	e7fd      	b.n	800a14a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a14e:	23a8      	movs	r3, #168	@ 0xa8
 800a150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	2ba8      	cmp	r3, #168	@ 0xa8
 800a156:	d00b      	beq.n	800a170 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	61bb      	str	r3, [r7, #24]
}
 800a16a:	bf00      	nop
 800a16c:	bf00      	nop
 800a16e:	e7fd      	b.n	800a16c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a170:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a174:	2b00      	cmp	r3, #0
 800a176:	d01e      	beq.n	800a1b6 <xTaskCreateStatic+0xb2>
 800a178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01b      	beq.n	800a1b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a180:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a186:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18a:	2202      	movs	r2, #2
 800a18c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a190:	2300      	movs	r3, #0
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a196:	9302      	str	r3, [sp, #8]
 800a198:	f107 0314 	add.w	r3, r7, #20
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 f851 	bl	800a250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1b0:	f000 f8f6 	bl	800a3a0 <prvAddNewTaskToReadyList>
 800a1b4:	e001      	b.n	800a1ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1ba:	697b      	ldr	r3, [r7, #20]
	}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3728      	adds	r7, #40	@ 0x28
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08c      	sub	sp, #48	@ 0x30
 800a1c8:	af04      	add	r7, sp, #16
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1d4:	88fb      	ldrh	r3, [r7, #6]
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 fef7 	bl	800bfcc <pvPortMalloc>
 800a1de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00e      	beq.n	800a204 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1e6:	20a8      	movs	r0, #168	@ 0xa8
 800a1e8:	f001 fef0 	bl	800bfcc <pvPortMalloc>
 800a1ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d003      	beq.n	800a1fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a1fa:	e005      	b.n	800a208 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a1fc:	6978      	ldr	r0, [r7, #20]
 800a1fe:	f001 ffb3 	bl	800c168 <vPortFree>
 800a202:	e001      	b.n	800a208 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a204:	2300      	movs	r3, #0
 800a206:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d017      	beq.n	800a23e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a216:	88fa      	ldrh	r2, [r7, #6]
 800a218:	2300      	movs	r3, #0
 800a21a:	9303      	str	r3, [sp, #12]
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	9302      	str	r3, [sp, #8]
 800a220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	68b9      	ldr	r1, [r7, #8]
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f80f 	bl	800a250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a232:	69f8      	ldr	r0, [r7, #28]
 800a234:	f000 f8b4 	bl	800a3a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a238:	2301      	movs	r3, #1
 800a23a:	61bb      	str	r3, [r7, #24]
 800a23c:	e002      	b.n	800a244 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a23e:	f04f 33ff 	mov.w	r3, #4294967295
 800a242:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a244:	69bb      	ldr	r3, [r7, #24]
	}
 800a246:	4618      	mov	r0, r3
 800a248:	3720      	adds	r7, #32
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a260:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	461a      	mov	r2, r3
 800a268:	21a5      	movs	r1, #165	@ 0xa5
 800a26a:	f002 fe2e 	bl	800ceca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a278:	3b01      	subs	r3, #1
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	f023 0307 	bic.w	r3, r3, #7
 800a286:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00b      	beq.n	800a2aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	617b      	str	r3, [r7, #20]
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop
 800a2a8:	e7fd      	b.n	800a2a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01f      	beq.n	800a2f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	61fb      	str	r3, [r7, #28]
 800a2b4:	e012      	b.n	800a2dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	7819      	ldrb	r1, [r3, #0]
 800a2be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	3334      	adds	r3, #52	@ 0x34
 800a2c6:	460a      	mov	r2, r1
 800a2c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d006      	beq.n	800a2e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	61fb      	str	r3, [r7, #28]
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	2b0f      	cmp	r3, #15
 800a2e0:	d9e9      	bls.n	800a2b6 <prvInitialiseNewTask+0x66>
 800a2e2:	e000      	b.n	800a2e6 <prvInitialiseNewTask+0x96>
			{
				break;
 800a2e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a2ee:	e003      	b.n	800a2f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fa:	2b37      	cmp	r3, #55	@ 0x37
 800a2fc:	d901      	bls.n	800a302 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2fe:	2337      	movs	r3, #55	@ 0x37
 800a300:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a306:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a30c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	2200      	movs	r2, #0
 800a312:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a316:	3304      	adds	r3, #4
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fe fd7b 	bl	8008e14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a320:	3318      	adds	r3, #24
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe fd76 	bl	8008e14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a32c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a336:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a33c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	2200      	movs	r2, #0
 800a342:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	3354      	adds	r3, #84	@ 0x54
 800a352:	224c      	movs	r2, #76	@ 0x4c
 800a354:	2100      	movs	r1, #0
 800a356:	4618      	mov	r0, r3
 800a358:	f002 fdb7 	bl	800ceca <memset>
 800a35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35e:	4a0d      	ldr	r2, [pc, #52]	@ (800a394 <prvInitialiseNewTask+0x144>)
 800a360:	659a      	str	r2, [r3, #88]	@ 0x58
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	4a0c      	ldr	r2, [pc, #48]	@ (800a398 <prvInitialiseNewTask+0x148>)
 800a366:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36a:	4a0c      	ldr	r2, [pc, #48]	@ (800a39c <prvInitialiseNewTask+0x14c>)
 800a36c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	68f9      	ldr	r1, [r7, #12]
 800a372:	69b8      	ldr	r0, [r7, #24]
 800a374:	f001 fbd8 	bl	800bb28 <pxPortInitialiseStack>
 800a378:	4602      	mov	r2, r0
 800a37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a388:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a38a:	bf00      	nop
 800a38c:	3720      	adds	r7, #32
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20004e88 	.word	0x20004e88
 800a398:	20004ef0 	.word	0x20004ef0
 800a39c:	20004f58 	.word	0x20004f58

0800a3a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3a8:	f001 fcee 	bl	800bd88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3ac:	4b2d      	ldr	r3, [pc, #180]	@ (800a464 <prvAddNewTaskToReadyList+0xc4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	4a2c      	ldr	r2, [pc, #176]	@ (800a464 <prvAddNewTaskToReadyList+0xc4>)
 800a3b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3b6:	4b2c      	ldr	r3, [pc, #176]	@ (800a468 <prvAddNewTaskToReadyList+0xc8>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d109      	bne.n	800a3d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3be:	4a2a      	ldr	r2, [pc, #168]	@ (800a468 <prvAddNewTaskToReadyList+0xc8>)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3c4:	4b27      	ldr	r3, [pc, #156]	@ (800a464 <prvAddNewTaskToReadyList+0xc4>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d110      	bne.n	800a3ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3cc:	f000 fc2e 	bl	800ac2c <prvInitialiseTaskLists>
 800a3d0:	e00d      	b.n	800a3ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3d2:	4b26      	ldr	r3, [pc, #152]	@ (800a46c <prvAddNewTaskToReadyList+0xcc>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d109      	bne.n	800a3ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3da:	4b23      	ldr	r3, [pc, #140]	@ (800a468 <prvAddNewTaskToReadyList+0xc8>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d802      	bhi.n	800a3ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3e8:	4a1f      	ldr	r2, [pc, #124]	@ (800a468 <prvAddNewTaskToReadyList+0xc8>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3ee:	4b20      	ldr	r3, [pc, #128]	@ (800a470 <prvAddNewTaskToReadyList+0xd0>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	4a1e      	ldr	r2, [pc, #120]	@ (800a470 <prvAddNewTaskToReadyList+0xd0>)
 800a3f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a470 <prvAddNewTaskToReadyList+0xd0>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a404:	4b1b      	ldr	r3, [pc, #108]	@ (800a474 <prvAddNewTaskToReadyList+0xd4>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d903      	bls.n	800a414 <prvAddNewTaskToReadyList+0x74>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a410:	4a18      	ldr	r2, [pc, #96]	@ (800a474 <prvAddNewTaskToReadyList+0xd4>)
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4a15      	ldr	r2, [pc, #84]	@ (800a478 <prvAddNewTaskToReadyList+0xd8>)
 800a422:	441a      	add	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3304      	adds	r3, #4
 800a428:	4619      	mov	r1, r3
 800a42a:	4610      	mov	r0, r2
 800a42c:	f7fe fcff 	bl	8008e2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a430:	f001 fcdc 	bl	800bdec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a434:	4b0d      	ldr	r3, [pc, #52]	@ (800a46c <prvAddNewTaskToReadyList+0xcc>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00e      	beq.n	800a45a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a43c:	4b0a      	ldr	r3, [pc, #40]	@ (800a468 <prvAddNewTaskToReadyList+0xc8>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a446:	429a      	cmp	r2, r3
 800a448:	d207      	bcs.n	800a45a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a44a:	4b0c      	ldr	r3, [pc, #48]	@ (800a47c <prvAddNewTaskToReadyList+0xdc>)
 800a44c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a45a:	bf00      	nop
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20001108 	.word	0x20001108
 800a468:	20000c34 	.word	0x20000c34
 800a46c:	20001114 	.word	0x20001114
 800a470:	20001124 	.word	0x20001124
 800a474:	20001110 	.word	0x20001110
 800a478:	20000c38 	.word	0x20000c38
 800a47c:	e000ed04 	.word	0xe000ed04

0800a480 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a488:	2300      	movs	r3, #0
 800a48a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d018      	beq.n	800a4c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a492:	4b14      	ldr	r3, [pc, #80]	@ (800a4e4 <vTaskDelay+0x64>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00b      	beq.n	800a4b2 <vTaskDelay+0x32>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	60bb      	str	r3, [r7, #8]
}
 800a4ac:	bf00      	nop
 800a4ae:	bf00      	nop
 800a4b0:	e7fd      	b.n	800a4ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4b2:	f000 f88b 	bl	800a5cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 ff87 	bl	800b3cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4be:	f000 f893 	bl	800a5e8 <xTaskResumeAll>
 800a4c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d107      	bne.n	800a4da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a4ca:	4b07      	ldr	r3, [pc, #28]	@ (800a4e8 <vTaskDelay+0x68>)
 800a4cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20001130 	.word	0x20001130
 800a4e8:	e000ed04 	.word	0xe000ed04

0800a4ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08a      	sub	sp, #40	@ 0x28
 800a4f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4fa:	463a      	mov	r2, r7
 800a4fc:	1d39      	adds	r1, r7, #4
 800a4fe:	f107 0308 	add.w	r3, r7, #8
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe fc32 	bl	8008d6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	9202      	str	r2, [sp, #8]
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	2300      	movs	r3, #0
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	2300      	movs	r3, #0
 800a518:	460a      	mov	r2, r1
 800a51a:	4924      	ldr	r1, [pc, #144]	@ (800a5ac <vTaskStartScheduler+0xc0>)
 800a51c:	4824      	ldr	r0, [pc, #144]	@ (800a5b0 <vTaskStartScheduler+0xc4>)
 800a51e:	f7ff fdf1 	bl	800a104 <xTaskCreateStatic>
 800a522:	4603      	mov	r3, r0
 800a524:	4a23      	ldr	r2, [pc, #140]	@ (800a5b4 <vTaskStartScheduler+0xc8>)
 800a526:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a528:	4b22      	ldr	r3, [pc, #136]	@ (800a5b4 <vTaskStartScheduler+0xc8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a530:	2301      	movs	r3, #1
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	e001      	b.n	800a53a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d102      	bne.n	800a546 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a540:	f000 ff98 	bl	800b474 <xTimerCreateTimerTask>
 800a544:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d11b      	bne.n	800a584 <vTaskStartScheduler+0x98>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	613b      	str	r3, [r7, #16]
}
 800a55e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a560:	4b15      	ldr	r3, [pc, #84]	@ (800a5b8 <vTaskStartScheduler+0xcc>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3354      	adds	r3, #84	@ 0x54
 800a566:	4a15      	ldr	r2, [pc, #84]	@ (800a5bc <vTaskStartScheduler+0xd0>)
 800a568:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a56a:	4b15      	ldr	r3, [pc, #84]	@ (800a5c0 <vTaskStartScheduler+0xd4>)
 800a56c:	f04f 32ff 	mov.w	r2, #4294967295
 800a570:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a572:	4b14      	ldr	r3, [pc, #80]	@ (800a5c4 <vTaskStartScheduler+0xd8>)
 800a574:	2201      	movs	r2, #1
 800a576:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a578:	4b13      	ldr	r3, [pc, #76]	@ (800a5c8 <vTaskStartScheduler+0xdc>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a57e:	f001 fb5f 	bl	800bc40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a582:	e00f      	b.n	800a5a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58a:	d10b      	bne.n	800a5a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	60fb      	str	r3, [r7, #12]
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	e7fd      	b.n	800a5a0 <vTaskStartScheduler+0xb4>
}
 800a5a4:	bf00      	nop
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	0800fa28 	.word	0x0800fa28
 800a5b0:	0800abfd 	.word	0x0800abfd
 800a5b4:	2000112c 	.word	0x2000112c
 800a5b8:	20000c34 	.word	0x20000c34
 800a5bc:	2000001c 	.word	0x2000001c
 800a5c0:	20001128 	.word	0x20001128
 800a5c4:	20001114 	.word	0x20001114
 800a5c8:	2000110c 	.word	0x2000110c

0800a5cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5d0:	4b04      	ldr	r3, [pc, #16]	@ (800a5e4 <vTaskSuspendAll+0x18>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	4a03      	ldr	r2, [pc, #12]	@ (800a5e4 <vTaskSuspendAll+0x18>)
 800a5d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5da:	bf00      	nop
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	20001130 	.word	0x20001130

0800a5e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5f6:	4b42      	ldr	r3, [pc, #264]	@ (800a700 <xTaskResumeAll+0x118>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10b      	bne.n	800a616 <xTaskResumeAll+0x2e>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	603b      	str	r3, [r7, #0]
}
 800a610:	bf00      	nop
 800a612:	bf00      	nop
 800a614:	e7fd      	b.n	800a612 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a616:	f001 fbb7 	bl	800bd88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a61a:	4b39      	ldr	r3, [pc, #228]	@ (800a700 <xTaskResumeAll+0x118>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3b01      	subs	r3, #1
 800a620:	4a37      	ldr	r2, [pc, #220]	@ (800a700 <xTaskResumeAll+0x118>)
 800a622:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a624:	4b36      	ldr	r3, [pc, #216]	@ (800a700 <xTaskResumeAll+0x118>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d162      	bne.n	800a6f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a62c:	4b35      	ldr	r3, [pc, #212]	@ (800a704 <xTaskResumeAll+0x11c>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d05e      	beq.n	800a6f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a634:	e02f      	b.n	800a696 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a636:	4b34      	ldr	r3, [pc, #208]	@ (800a708 <xTaskResumeAll+0x120>)
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3318      	adds	r3, #24
 800a642:	4618      	mov	r0, r3
 800a644:	f7fe fc50 	bl	8008ee8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3304      	adds	r3, #4
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fc4b 	bl	8008ee8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a656:	4b2d      	ldr	r3, [pc, #180]	@ (800a70c <xTaskResumeAll+0x124>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d903      	bls.n	800a666 <xTaskResumeAll+0x7e>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a662:	4a2a      	ldr	r2, [pc, #168]	@ (800a70c <xTaskResumeAll+0x124>)
 800a664:	6013      	str	r3, [r2, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66a:	4613      	mov	r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4a27      	ldr	r2, [pc, #156]	@ (800a710 <xTaskResumeAll+0x128>)
 800a674:	441a      	add	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	3304      	adds	r3, #4
 800a67a:	4619      	mov	r1, r3
 800a67c:	4610      	mov	r0, r2
 800a67e:	f7fe fbd6 	bl	8008e2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a686:	4b23      	ldr	r3, [pc, #140]	@ (800a714 <xTaskResumeAll+0x12c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d302      	bcc.n	800a696 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a690:	4b21      	ldr	r3, [pc, #132]	@ (800a718 <xTaskResumeAll+0x130>)
 800a692:	2201      	movs	r2, #1
 800a694:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a696:	4b1c      	ldr	r3, [pc, #112]	@ (800a708 <xTaskResumeAll+0x120>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1cb      	bne.n	800a636 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6a4:	f000 fb66 	bl	800ad74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6a8:	4b1c      	ldr	r3, [pc, #112]	@ (800a71c <xTaskResumeAll+0x134>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d010      	beq.n	800a6d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6b4:	f000 f846 	bl	800a744 <xTaskIncrementTick>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a6be:	4b16      	ldr	r3, [pc, #88]	@ (800a718 <xTaskResumeAll+0x130>)
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1f1      	bne.n	800a6b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a6d0:	4b12      	ldr	r3, [pc, #72]	@ (800a71c <xTaskResumeAll+0x134>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6d6:	4b10      	ldr	r3, [pc, #64]	@ (800a718 <xTaskResumeAll+0x130>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d009      	beq.n	800a6f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a720 <xTaskResumeAll+0x138>)
 800a6e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6f2:	f001 fb7b 	bl	800bdec <vPortExitCritical>

	return xAlreadyYielded;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20001130 	.word	0x20001130
 800a704:	20001108 	.word	0x20001108
 800a708:	200010c8 	.word	0x200010c8
 800a70c:	20001110 	.word	0x20001110
 800a710:	20000c38 	.word	0x20000c38
 800a714:	20000c34 	.word	0x20000c34
 800a718:	2000111c 	.word	0x2000111c
 800a71c:	20001118 	.word	0x20001118
 800a720:	e000ed04 	.word	0xe000ed04

0800a724 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a72a:	4b05      	ldr	r3, [pc, #20]	@ (800a740 <xTaskGetTickCount+0x1c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a730:	687b      	ldr	r3, [r7, #4]
}
 800a732:	4618      	mov	r0, r3
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	2000110c 	.word	0x2000110c

0800a744 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a74a:	2300      	movs	r3, #0
 800a74c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a74e:	4b4f      	ldr	r3, [pc, #316]	@ (800a88c <xTaskIncrementTick+0x148>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	f040 8090 	bne.w	800a878 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a758:	4b4d      	ldr	r3, [pc, #308]	@ (800a890 <xTaskIncrementTick+0x14c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3301      	adds	r3, #1
 800a75e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a760:	4a4b      	ldr	r2, [pc, #300]	@ (800a890 <xTaskIncrementTick+0x14c>)
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d121      	bne.n	800a7b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a76c:	4b49      	ldr	r3, [pc, #292]	@ (800a894 <xTaskIncrementTick+0x150>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00b      	beq.n	800a78e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	603b      	str	r3, [r7, #0]
}
 800a788:	bf00      	nop
 800a78a:	bf00      	nop
 800a78c:	e7fd      	b.n	800a78a <xTaskIncrementTick+0x46>
 800a78e:	4b41      	ldr	r3, [pc, #260]	@ (800a894 <xTaskIncrementTick+0x150>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	60fb      	str	r3, [r7, #12]
 800a794:	4b40      	ldr	r3, [pc, #256]	@ (800a898 <xTaskIncrementTick+0x154>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a3e      	ldr	r2, [pc, #248]	@ (800a894 <xTaskIncrementTick+0x150>)
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	4a3e      	ldr	r2, [pc, #248]	@ (800a898 <xTaskIncrementTick+0x154>)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	4b3e      	ldr	r3, [pc, #248]	@ (800a89c <xTaskIncrementTick+0x158>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	4a3c      	ldr	r2, [pc, #240]	@ (800a89c <xTaskIncrementTick+0x158>)
 800a7aa:	6013      	str	r3, [r2, #0]
 800a7ac:	f000 fae2 	bl	800ad74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7b0:	4b3b      	ldr	r3, [pc, #236]	@ (800a8a0 <xTaskIncrementTick+0x15c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d349      	bcc.n	800a84e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7ba:	4b36      	ldr	r3, [pc, #216]	@ (800a894 <xTaskIncrementTick+0x150>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d104      	bne.n	800a7ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c4:	4b36      	ldr	r3, [pc, #216]	@ (800a8a0 <xTaskIncrementTick+0x15c>)
 800a7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ca:	601a      	str	r2, [r3, #0]
					break;
 800a7cc:	e03f      	b.n	800a84e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ce:	4b31      	ldr	r3, [pc, #196]	@ (800a894 <xTaskIncrementTick+0x150>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d203      	bcs.n	800a7ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7e6:	4a2e      	ldr	r2, [pc, #184]	@ (800a8a0 <xTaskIncrementTick+0x15c>)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7ec:	e02f      	b.n	800a84e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe fb78 	bl	8008ee8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d004      	beq.n	800a80a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	3318      	adds	r3, #24
 800a804:	4618      	mov	r0, r3
 800a806:	f7fe fb6f 	bl	8008ee8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a80e:	4b25      	ldr	r3, [pc, #148]	@ (800a8a4 <xTaskIncrementTick+0x160>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	429a      	cmp	r2, r3
 800a814:	d903      	bls.n	800a81e <xTaskIncrementTick+0xda>
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81a:	4a22      	ldr	r2, [pc, #136]	@ (800a8a4 <xTaskIncrementTick+0x160>)
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4a1f      	ldr	r2, [pc, #124]	@ (800a8a8 <xTaskIncrementTick+0x164>)
 800a82c:	441a      	add	r2, r3
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	3304      	adds	r3, #4
 800a832:	4619      	mov	r1, r3
 800a834:	4610      	mov	r0, r2
 800a836:	f7fe fafa 	bl	8008e2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a83e:	4b1b      	ldr	r3, [pc, #108]	@ (800a8ac <xTaskIncrementTick+0x168>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a844:	429a      	cmp	r2, r3
 800a846:	d3b8      	bcc.n	800a7ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a848:	2301      	movs	r3, #1
 800a84a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a84c:	e7b5      	b.n	800a7ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a84e:	4b17      	ldr	r3, [pc, #92]	@ (800a8ac <xTaskIncrementTick+0x168>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a854:	4914      	ldr	r1, [pc, #80]	@ (800a8a8 <xTaskIncrementTick+0x164>)
 800a856:	4613      	mov	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	440b      	add	r3, r1
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d901      	bls.n	800a86a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a866:	2301      	movs	r3, #1
 800a868:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a86a:	4b11      	ldr	r3, [pc, #68]	@ (800a8b0 <xTaskIncrementTick+0x16c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d007      	beq.n	800a882 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a872:	2301      	movs	r3, #1
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	e004      	b.n	800a882 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a878:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b4 <xTaskIncrementTick+0x170>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3301      	adds	r3, #1
 800a87e:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b4 <xTaskIncrementTick+0x170>)
 800a880:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a882:	697b      	ldr	r3, [r7, #20]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	20001130 	.word	0x20001130
 800a890:	2000110c 	.word	0x2000110c
 800a894:	200010c0 	.word	0x200010c0
 800a898:	200010c4 	.word	0x200010c4
 800a89c:	20001120 	.word	0x20001120
 800a8a0:	20001128 	.word	0x20001128
 800a8a4:	20001110 	.word	0x20001110
 800a8a8:	20000c38 	.word	0x20000c38
 800a8ac:	20000c34 	.word	0x20000c34
 800a8b0:	2000111c 	.word	0x2000111c
 800a8b4:	20001118 	.word	0x20001118

0800a8b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8be:	4b2b      	ldr	r3, [pc, #172]	@ (800a96c <vTaskSwitchContext+0xb4>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a970 <vTaskSwitchContext+0xb8>)
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8cc:	e047      	b.n	800a95e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a8ce:	4b28      	ldr	r3, [pc, #160]	@ (800a970 <vTaskSwitchContext+0xb8>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d4:	4b27      	ldr	r3, [pc, #156]	@ (800a974 <vTaskSwitchContext+0xbc>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]
 800a8da:	e011      	b.n	800a900 <vTaskSwitchContext+0x48>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10b      	bne.n	800a8fa <vTaskSwitchContext+0x42>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	607b      	str	r3, [r7, #4]
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop
 800a8f8:	e7fd      	b.n	800a8f6 <vTaskSwitchContext+0x3e>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	491d      	ldr	r1, [pc, #116]	@ (800a978 <vTaskSwitchContext+0xc0>)
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	440b      	add	r3, r1
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0e3      	beq.n	800a8dc <vTaskSwitchContext+0x24>
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4a16      	ldr	r2, [pc, #88]	@ (800a978 <vTaskSwitchContext+0xc0>)
 800a920:	4413      	add	r3, r2
 800a922:	60bb      	str	r3, [r7, #8]
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	605a      	str	r2, [r3, #4]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	3308      	adds	r3, #8
 800a936:	429a      	cmp	r2, r3
 800a938:	d104      	bne.n	800a944 <vTaskSwitchContext+0x8c>
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	685a      	ldr	r2, [r3, #4]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	605a      	str	r2, [r3, #4]
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	4a0c      	ldr	r2, [pc, #48]	@ (800a97c <vTaskSwitchContext+0xc4>)
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	4a09      	ldr	r2, [pc, #36]	@ (800a974 <vTaskSwitchContext+0xbc>)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a954:	4b09      	ldr	r3, [pc, #36]	@ (800a97c <vTaskSwitchContext+0xc4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3354      	adds	r3, #84	@ 0x54
 800a95a:	4a09      	ldr	r2, [pc, #36]	@ (800a980 <vTaskSwitchContext+0xc8>)
 800a95c:	6013      	str	r3, [r2, #0]
}
 800a95e:	bf00      	nop
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	20001130 	.word	0x20001130
 800a970:	2000111c 	.word	0x2000111c
 800a974:	20001110 	.word	0x20001110
 800a978:	20000c38 	.word	0x20000c38
 800a97c:	20000c34 	.word	0x20000c34
 800a980:	2000001c 	.word	0x2000001c

0800a984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10b      	bne.n	800a9ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	60fb      	str	r3, [r7, #12]
}
 800a9a6:	bf00      	nop
 800a9a8:	bf00      	nop
 800a9aa:	e7fd      	b.n	800a9a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9ac:	4b07      	ldr	r3, [pc, #28]	@ (800a9cc <vTaskPlaceOnEventList+0x48>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3318      	adds	r3, #24
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7fe fa5e 	bl	8008e76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	6838      	ldr	r0, [r7, #0]
 800a9be:	f000 fd05 	bl	800b3cc <prvAddCurrentTaskToDelayedList>
}
 800a9c2:	bf00      	nop
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20000c34 	.word	0x20000c34

0800a9d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10b      	bne.n	800a9fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	617b      	str	r3, [r7, #20]
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop
 800a9f8:	e7fd      	b.n	800a9f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800aa24 <vTaskPlaceOnEventListRestricted+0x54>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3318      	adds	r3, #24
 800aa00:	4619      	mov	r1, r3
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7fe fa13 	bl	8008e2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa0e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa14:	6879      	ldr	r1, [r7, #4]
 800aa16:	68b8      	ldr	r0, [r7, #8]
 800aa18:	f000 fcd8 	bl	800b3cc <prvAddCurrentTaskToDelayedList>
	}
 800aa1c:	bf00      	nop
 800aa1e:	3718      	adds	r7, #24
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	20000c34 	.word	0x20000c34

0800aa28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	60fb      	str	r3, [r7, #12]
}
 800aa50:	bf00      	nop
 800aa52:	bf00      	nop
 800aa54:	e7fd      	b.n	800aa52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3318      	adds	r3, #24
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fa44 	bl	8008ee8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa60:	4b1d      	ldr	r3, [pc, #116]	@ (800aad8 <xTaskRemoveFromEventList+0xb0>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d11d      	bne.n	800aaa4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe fa3b 	bl	8008ee8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa76:	4b19      	ldr	r3, [pc, #100]	@ (800aadc <xTaskRemoveFromEventList+0xb4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d903      	bls.n	800aa86 <xTaskRemoveFromEventList+0x5e>
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa82:	4a16      	ldr	r2, [pc, #88]	@ (800aadc <xTaskRemoveFromEventList+0xb4>)
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4a13      	ldr	r2, [pc, #76]	@ (800aae0 <xTaskRemoveFromEventList+0xb8>)
 800aa94:	441a      	add	r2, r3
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	3304      	adds	r3, #4
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	f7fe f9c6 	bl	8008e2e <vListInsertEnd>
 800aaa2:	e005      	b.n	800aab0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	3318      	adds	r3, #24
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	480e      	ldr	r0, [pc, #56]	@ (800aae4 <xTaskRemoveFromEventList+0xbc>)
 800aaac:	f7fe f9bf 	bl	8008e2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab4:	4b0c      	ldr	r3, [pc, #48]	@ (800aae8 <xTaskRemoveFromEventList+0xc0>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d905      	bls.n	800aaca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aabe:	2301      	movs	r3, #1
 800aac0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aac2:	4b0a      	ldr	r3, [pc, #40]	@ (800aaec <xTaskRemoveFromEventList+0xc4>)
 800aac4:	2201      	movs	r2, #1
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	e001      	b.n	800aace <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aaca:	2300      	movs	r3, #0
 800aacc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aace:	697b      	ldr	r3, [r7, #20]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	20001130 	.word	0x20001130
 800aadc:	20001110 	.word	0x20001110
 800aae0:	20000c38 	.word	0x20000c38
 800aae4:	200010c8 	.word	0x200010c8
 800aae8:	20000c34 	.word	0x20000c34
 800aaec:	2000111c 	.word	0x2000111c

0800aaf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aaf8:	4b06      	ldr	r3, [pc, #24]	@ (800ab14 <vTaskInternalSetTimeOutState+0x24>)
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab00:	4b05      	ldr	r3, [pc, #20]	@ (800ab18 <vTaskInternalSetTimeOutState+0x28>)
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	605a      	str	r2, [r3, #4]
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	20001120 	.word	0x20001120
 800ab18:	2000110c 	.word	0x2000110c

0800ab1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10b      	bne.n	800ab44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	613b      	str	r3, [r7, #16]
}
 800ab3e:	bf00      	nop
 800ab40:	bf00      	nop
 800ab42:	e7fd      	b.n	800ab40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10b      	bne.n	800ab62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	60fb      	str	r3, [r7, #12]
}
 800ab5c:	bf00      	nop
 800ab5e:	bf00      	nop
 800ab60:	e7fd      	b.n	800ab5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ab62:	f001 f911 	bl	800bd88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab66:	4b1d      	ldr	r3, [pc, #116]	@ (800abdc <xTaskCheckForTimeOut+0xc0>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7e:	d102      	bne.n	800ab86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	61fb      	str	r3, [r7, #28]
 800ab84:	e023      	b.n	800abce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	4b15      	ldr	r3, [pc, #84]	@ (800abe0 <xTaskCheckForTimeOut+0xc4>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d007      	beq.n	800aba2 <xTaskCheckForTimeOut+0x86>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d302      	bcc.n	800aba2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	61fb      	str	r3, [r7, #28]
 800aba0:	e015      	b.n	800abce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d20b      	bcs.n	800abc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	1ad2      	subs	r2, r2, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff ff99 	bl	800aaf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abbe:	2300      	movs	r3, #0
 800abc0:	61fb      	str	r3, [r7, #28]
 800abc2:	e004      	b.n	800abce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2200      	movs	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abca:	2301      	movs	r3, #1
 800abcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abce:	f001 f90d 	bl	800bdec <vPortExitCritical>

	return xReturn;
 800abd2:	69fb      	ldr	r3, [r7, #28]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3720      	adds	r7, #32
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	2000110c 	.word	0x2000110c
 800abe0:	20001120 	.word	0x20001120

0800abe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abe4:	b480      	push	{r7}
 800abe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abe8:	4b03      	ldr	r3, [pc, #12]	@ (800abf8 <vTaskMissedYield+0x14>)
 800abea:	2201      	movs	r2, #1
 800abec:	601a      	str	r2, [r3, #0]
}
 800abee:	bf00      	nop
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	2000111c 	.word	0x2000111c

0800abfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac04:	f000 f852 	bl	800acac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac08:	4b06      	ldr	r3, [pc, #24]	@ (800ac24 <prvIdleTask+0x28>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d9f9      	bls.n	800ac04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac10:	4b05      	ldr	r3, [pc, #20]	@ (800ac28 <prvIdleTask+0x2c>)
 800ac12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac20:	e7f0      	b.n	800ac04 <prvIdleTask+0x8>
 800ac22:	bf00      	nop
 800ac24:	20000c38 	.word	0x20000c38
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac32:	2300      	movs	r3, #0
 800ac34:	607b      	str	r3, [r7, #4]
 800ac36:	e00c      	b.n	800ac52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4a12      	ldr	r2, [pc, #72]	@ (800ac8c <prvInitialiseTaskLists+0x60>)
 800ac44:	4413      	add	r3, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe f8c4 	bl	8008dd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	607b      	str	r3, [r7, #4]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b37      	cmp	r3, #55	@ 0x37
 800ac56:	d9ef      	bls.n	800ac38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac58:	480d      	ldr	r0, [pc, #52]	@ (800ac90 <prvInitialiseTaskLists+0x64>)
 800ac5a:	f7fe f8bb 	bl	8008dd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac5e:	480d      	ldr	r0, [pc, #52]	@ (800ac94 <prvInitialiseTaskLists+0x68>)
 800ac60:	f7fe f8b8 	bl	8008dd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac64:	480c      	ldr	r0, [pc, #48]	@ (800ac98 <prvInitialiseTaskLists+0x6c>)
 800ac66:	f7fe f8b5 	bl	8008dd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac6a:	480c      	ldr	r0, [pc, #48]	@ (800ac9c <prvInitialiseTaskLists+0x70>)
 800ac6c:	f7fe f8b2 	bl	8008dd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac70:	480b      	ldr	r0, [pc, #44]	@ (800aca0 <prvInitialiseTaskLists+0x74>)
 800ac72:	f7fe f8af 	bl	8008dd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac76:	4b0b      	ldr	r3, [pc, #44]	@ (800aca4 <prvInitialiseTaskLists+0x78>)
 800ac78:	4a05      	ldr	r2, [pc, #20]	@ (800ac90 <prvInitialiseTaskLists+0x64>)
 800ac7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aca8 <prvInitialiseTaskLists+0x7c>)
 800ac7e:	4a05      	ldr	r2, [pc, #20]	@ (800ac94 <prvInitialiseTaskLists+0x68>)
 800ac80:	601a      	str	r2, [r3, #0]
}
 800ac82:	bf00      	nop
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20000c38 	.word	0x20000c38
 800ac90:	20001098 	.word	0x20001098
 800ac94:	200010ac 	.word	0x200010ac
 800ac98:	200010c8 	.word	0x200010c8
 800ac9c:	200010dc 	.word	0x200010dc
 800aca0:	200010f4 	.word	0x200010f4
 800aca4:	200010c0 	.word	0x200010c0
 800aca8:	200010c4 	.word	0x200010c4

0800acac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acb2:	e019      	b.n	800ace8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acb4:	f001 f868 	bl	800bd88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acb8:	4b10      	ldr	r3, [pc, #64]	@ (800acfc <prvCheckTasksWaitingTermination+0x50>)
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3304      	adds	r3, #4
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe f90f 	bl	8008ee8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acca:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <prvCheckTasksWaitingTermination+0x54>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3b01      	subs	r3, #1
 800acd0:	4a0b      	ldr	r2, [pc, #44]	@ (800ad00 <prvCheckTasksWaitingTermination+0x54>)
 800acd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800acd4:	4b0b      	ldr	r3, [pc, #44]	@ (800ad04 <prvCheckTasksWaitingTermination+0x58>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3b01      	subs	r3, #1
 800acda:	4a0a      	ldr	r2, [pc, #40]	@ (800ad04 <prvCheckTasksWaitingTermination+0x58>)
 800acdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acde:	f001 f885 	bl	800bdec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f810 	bl	800ad08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ace8:	4b06      	ldr	r3, [pc, #24]	@ (800ad04 <prvCheckTasksWaitingTermination+0x58>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1e1      	bne.n	800acb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	200010dc 	.word	0x200010dc
 800ad00:	20001108 	.word	0x20001108
 800ad04:	200010f0 	.word	0x200010f0

0800ad08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3354      	adds	r3, #84	@ 0x54
 800ad14:	4618      	mov	r0, r3
 800ad16:	f002 f8f5 	bl	800cf04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d108      	bne.n	800ad36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f001 fa1d 	bl	800c168 <vPortFree>
				vPortFree( pxTCB );
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f001 fa1a 	bl	800c168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad34:	e019      	b.n	800ad6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d103      	bne.n	800ad48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f001 fa11 	bl	800c168 <vPortFree>
	}
 800ad46:	e010      	b.n	800ad6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d00b      	beq.n	800ad6a <prvDeleteTCB+0x62>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	60fb      	str	r3, [r7, #12]
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop
 800ad68:	e7fd      	b.n	800ad66 <prvDeleteTCB+0x5e>
	}
 800ad6a:	bf00      	nop
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad7a:	4b0c      	ldr	r3, [pc, #48]	@ (800adac <prvResetNextTaskUnblockTime+0x38>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d104      	bne.n	800ad8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad84:	4b0a      	ldr	r3, [pc, #40]	@ (800adb0 <prvResetNextTaskUnblockTime+0x3c>)
 800ad86:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad8c:	e008      	b.n	800ada0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad8e:	4b07      	ldr	r3, [pc, #28]	@ (800adac <prvResetNextTaskUnblockTime+0x38>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	4a04      	ldr	r2, [pc, #16]	@ (800adb0 <prvResetNextTaskUnblockTime+0x3c>)
 800ad9e:	6013      	str	r3, [r2, #0]
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	200010c0 	.word	0x200010c0
 800adb0:	20001128 	.word	0x20001128

0800adb4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800adba:	4b05      	ldr	r3, [pc, #20]	@ (800add0 <xTaskGetCurrentTaskHandle+0x1c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	607b      	str	r3, [r7, #4]

		return xReturn;
 800adc0:	687b      	ldr	r3, [r7, #4]
	}
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	20000c34 	.word	0x20000c34

0800add4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adda:	4b0b      	ldr	r3, [pc, #44]	@ (800ae08 <xTaskGetSchedulerState+0x34>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ade2:	2301      	movs	r3, #1
 800ade4:	607b      	str	r3, [r7, #4]
 800ade6:	e008      	b.n	800adfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade8:	4b08      	ldr	r3, [pc, #32]	@ (800ae0c <xTaskGetSchedulerState+0x38>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d102      	bne.n	800adf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800adf0:	2302      	movs	r3, #2
 800adf2:	607b      	str	r3, [r7, #4]
 800adf4:	e001      	b.n	800adfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800adf6:	2300      	movs	r3, #0
 800adf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800adfa:	687b      	ldr	r3, [r7, #4]
	}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	20001114 	.word	0x20001114
 800ae0c:	20001130 	.word	0x20001130

0800ae10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d051      	beq.n	800aeca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae2a:	4b2a      	ldr	r3, [pc, #168]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d241      	bcs.n	800aeb8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	db06      	blt.n	800ae4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3c:	4b25      	ldr	r3, [pc, #148]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	6959      	ldr	r1, [r3, #20]
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4a1f      	ldr	r2, [pc, #124]	@ (800aed8 <xTaskPriorityInherit+0xc8>)
 800ae5c:	4413      	add	r3, r2
 800ae5e:	4299      	cmp	r1, r3
 800ae60:	d122      	bne.n	800aea8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe f83e 	bl	8008ee8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae6c:	4b19      	ldr	r3, [pc, #100]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae7a:	4b18      	ldr	r3, [pc, #96]	@ (800aedc <xTaskPriorityInherit+0xcc>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d903      	bls.n	800ae8a <xTaskPriorityInherit+0x7a>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae86:	4a15      	ldr	r2, [pc, #84]	@ (800aedc <xTaskPriorityInherit+0xcc>)
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4a10      	ldr	r2, [pc, #64]	@ (800aed8 <xTaskPriorityInherit+0xc8>)
 800ae98:	441a      	add	r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4610      	mov	r0, r2
 800aea2:	f7fd ffc4 	bl	8008e2e <vListInsertEnd>
 800aea6:	e004      	b.n	800aeb2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aea8:	4b0a      	ldr	r3, [pc, #40]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	e008      	b.n	800aeca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aebc:	4b05      	ldr	r3, [pc, #20]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d201      	bcs.n	800aeca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aec6:	2301      	movs	r3, #1
 800aec8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aeca:	68fb      	ldr	r3, [r7, #12]
	}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20000c34 	.word	0x20000c34
 800aed8:	20000c38 	.word	0x20000c38
 800aedc:	20001110 	.word	0x20001110

0800aee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aeec:	2300      	movs	r3, #0
 800aeee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d058      	beq.n	800afa8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aef6:	4b2f      	ldr	r3, [pc, #188]	@ (800afb4 <xTaskPriorityDisinherit+0xd4>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d00b      	beq.n	800af18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	60fb      	str	r3, [r7, #12]
}
 800af12:	bf00      	nop
 800af14:	bf00      	nop
 800af16:	e7fd      	b.n	800af14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10b      	bne.n	800af38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	60bb      	str	r3, [r7, #8]
}
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	e7fd      	b.n	800af34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d02c      	beq.n	800afa8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af52:	2b00      	cmp	r3, #0
 800af54:	d128      	bne.n	800afa8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	3304      	adds	r3, #4
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fd ffc4 	bl	8008ee8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af78:	4b0f      	ldr	r3, [pc, #60]	@ (800afb8 <xTaskPriorityDisinherit+0xd8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d903      	bls.n	800af88 <xTaskPriorityDisinherit+0xa8>
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af84:	4a0c      	ldr	r2, [pc, #48]	@ (800afb8 <xTaskPriorityDisinherit+0xd8>)
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af8c:	4613      	mov	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4a09      	ldr	r2, [pc, #36]	@ (800afbc <xTaskPriorityDisinherit+0xdc>)
 800af96:	441a      	add	r2, r3
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	3304      	adds	r3, #4
 800af9c:	4619      	mov	r1, r3
 800af9e:	4610      	mov	r0, r2
 800afa0:	f7fd ff45 	bl	8008e2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afa8:	697b      	ldr	r3, [r7, #20]
	}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000c34 	.word	0x20000c34
 800afb8:	20001110 	.word	0x20001110
 800afbc:	20000c38 	.word	0x20000c38

0800afc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b088      	sub	sp, #32
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800afce:	2301      	movs	r3, #1
 800afd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d06c      	beq.n	800b0b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10b      	bne.n	800aff8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	60fb      	str	r3, [r7, #12]
}
 800aff2:	bf00      	nop
 800aff4:	bf00      	nop
 800aff6:	e7fd      	b.n	800aff4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	d902      	bls.n	800b008 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	61fb      	str	r3, [r7, #28]
 800b006:	e002      	b.n	800b00e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b00c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	429a      	cmp	r2, r3
 800b016:	d04c      	beq.n	800b0b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d147      	bne.n	800b0b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b022:	4b26      	ldr	r3, [pc, #152]	@ (800b0bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d10b      	bne.n	800b044 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	60bb      	str	r3, [r7, #8]
}
 800b03e:	bf00      	nop
 800b040:	bf00      	nop
 800b042:	e7fd      	b.n	800b040 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b048:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	69fa      	ldr	r2, [r7, #28]
 800b04e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	2b00      	cmp	r3, #0
 800b056:	db04      	blt.n	800b062 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	6959      	ldr	r1, [r3, #20]
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4a13      	ldr	r2, [pc, #76]	@ (800b0c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b072:	4413      	add	r3, r2
 800b074:	4299      	cmp	r1, r3
 800b076:	d11c      	bne.n	800b0b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	3304      	adds	r3, #4
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fd ff33 	bl	8008ee8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b086:	4b0f      	ldr	r3, [pc, #60]	@ (800b0c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d903      	bls.n	800b096 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b092:	4a0c      	ldr	r2, [pc, #48]	@ (800b0c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09a:	4613      	mov	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4a07      	ldr	r2, [pc, #28]	@ (800b0c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b0a4:	441a      	add	r2, r3
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f7fd febe 	bl	8008e2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0b2:	bf00      	nop
 800b0b4:	3720      	adds	r7, #32
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000c34 	.word	0x20000c34
 800b0c0:	20000c38 	.word	0x20000c38
 800b0c4:	20001110 	.word	0x20001110

0800b0c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b0cc:	4b07      	ldr	r3, [pc, #28]	@ (800b0ec <pvTaskIncrementMutexHeldCount+0x24>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d004      	beq.n	800b0de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b0d4:	4b05      	ldr	r3, [pc, #20]	@ (800b0ec <pvTaskIncrementMutexHeldCount+0x24>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0da:	3201      	adds	r2, #1
 800b0dc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b0de:	4b03      	ldr	r3, [pc, #12]	@ (800b0ec <pvTaskIncrementMutexHeldCount+0x24>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
	}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	20000c34 	.word	0x20000c34

0800b0f0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b0fa:	f000 fe45 	bl	800bd88 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b0fe:	4b20      	ldr	r3, [pc, #128]	@ (800b180 <ulTaskNotifyTake+0x90>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d113      	bne.n	800b132 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b10a:	4b1d      	ldr	r3, [pc, #116]	@ (800b180 <ulTaskNotifyTake+0x90>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00b      	beq.n	800b132 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b11a:	2101      	movs	r1, #1
 800b11c:	6838      	ldr	r0, [r7, #0]
 800b11e:	f000 f955 	bl	800b3cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b122:	4b18      	ldr	r3, [pc, #96]	@ (800b184 <ulTaskNotifyTake+0x94>)
 800b124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b132:	f000 fe5b 	bl	800bdec <vPortExitCritical>

		taskENTER_CRITICAL();
 800b136:	f000 fe27 	bl	800bd88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b13a:	4b11      	ldr	r3, [pc, #68]	@ (800b180 <ulTaskNotifyTake+0x90>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b142:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00e      	beq.n	800b168 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d005      	beq.n	800b15c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b150:	4b0b      	ldr	r3, [pc, #44]	@ (800b180 <ulTaskNotifyTake+0x90>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2200      	movs	r2, #0
 800b156:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800b15a:	e005      	b.n	800b168 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b15c:	4b08      	ldr	r3, [pc, #32]	@ (800b180 <ulTaskNotifyTake+0x90>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	3a01      	subs	r2, #1
 800b164:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b168:	4b05      	ldr	r3, [pc, #20]	@ (800b180 <ulTaskNotifyTake+0x90>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b172:	f000 fe3b 	bl	800bdec <vPortExitCritical>

		return ulReturn;
 800b176:	68fb      	ldr	r3, [r7, #12]
	}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20000c34 	.word	0x20000c34
 800b184:	e000ed04 	.word	0xe000ed04

0800b188 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b196:	f000 fdf7 	bl	800bd88 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b19a:	4b29      	ldr	r3, [pc, #164]	@ (800b240 <xTaskNotifyWait+0xb8>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d01c      	beq.n	800b1e2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b1a8:	4b25      	ldr	r3, [pc, #148]	@ (800b240 <xTaskNotifyWait+0xb8>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	43d2      	mvns	r2, r2
 800b1b4:	400a      	ands	r2, r1
 800b1b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b1ba:	4b21      	ldr	r3, [pc, #132]	@ (800b240 <xTaskNotifyWait+0xb8>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00b      	beq.n	800b1e2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	6838      	ldr	r0, [r7, #0]
 800b1ce:	f000 f8fd 	bl	800b3cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b1d2:	4b1c      	ldr	r3, [pc, #112]	@ (800b244 <xTaskNotifyWait+0xbc>)
 800b1d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b1e2:	f000 fe03 	bl	800bdec <vPortExitCritical>

		taskENTER_CRITICAL();
 800b1e6:	f000 fdcf 	bl	800bd88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b1f0:	4b13      	ldr	r3, [pc, #76]	@ (800b240 <xTaskNotifyWait+0xb8>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b1fc:	4b10      	ldr	r3, [pc, #64]	@ (800b240 <xTaskNotifyWait+0xb8>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b02      	cmp	r3, #2
 800b208:	d002      	beq.n	800b210 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b20a:	2300      	movs	r3, #0
 800b20c:	617b      	str	r3, [r7, #20]
 800b20e:	e00a      	b.n	800b226 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b210:	4b0b      	ldr	r3, [pc, #44]	@ (800b240 <xTaskNotifyWait+0xb8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	43d2      	mvns	r2, r2
 800b21c:	400a      	ands	r2, r1
 800b21e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800b222:	2301      	movs	r3, #1
 800b224:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b226:	4b06      	ldr	r3, [pc, #24]	@ (800b240 <xTaskNotifyWait+0xb8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b230:	f000 fddc 	bl	800bdec <vPortExitCritical>

		return xReturn;
 800b234:	697b      	ldr	r3, [r7, #20]
	}
 800b236:	4618      	mov	r0, r3
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20000c34 	.word	0x20000c34
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b08a      	sub	sp, #40	@ 0x28
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	603b      	str	r3, [r7, #0]
 800b254:	4613      	mov	r3, r2
 800b256:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b258:	2301      	movs	r3, #1
 800b25a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10b      	bne.n	800b27a <xTaskGenericNotify+0x32>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	61bb      	str	r3, [r7, #24]
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop
 800b278:	e7fd      	b.n	800b276 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b27e:	f000 fd83 	bl	800bd88 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d004      	beq.n	800b292 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b298:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	2202      	movs	r2, #2
 800b29e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b2a2:	79fb      	ldrb	r3, [r7, #7]
 800b2a4:	2b04      	cmp	r3, #4
 800b2a6:	d82e      	bhi.n	800b306 <xTaskGenericNotify+0xbe>
 800b2a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b0 <xTaskGenericNotify+0x68>)
 800b2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ae:	bf00      	nop
 800b2b0:	0800b32b 	.word	0x0800b32b
 800b2b4:	0800b2c5 	.word	0x0800b2c5
 800b2b8:	0800b2d7 	.word	0x0800b2d7
 800b2bc:	0800b2e7 	.word	0x0800b2e7
 800b2c0:	0800b2f1 	.word	0x0800b2f1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	6a3b      	ldr	r3, [r7, #32]
 800b2d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b2d4:	e02c      	b.n	800b330 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b2e4:	e024      	b.n	800b330 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b2ee:	e01f      	b.n	800b330 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b2f0:	7ffb      	ldrb	r3, [r7, #31]
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d004      	beq.n	800b300 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b2f6:	6a3b      	ldr	r3, [r7, #32]
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b2fe:	e017      	b.n	800b330 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800b300:	2300      	movs	r3, #0
 800b302:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b304:	e014      	b.n	800b330 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b306:	6a3b      	ldr	r3, [r7, #32]
 800b308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b310:	d00d      	beq.n	800b32e <xTaskGenericNotify+0xe6>
	__asm volatile
 800b312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	617b      	str	r3, [r7, #20]
}
 800b324:	bf00      	nop
 800b326:	bf00      	nop
 800b328:	e7fd      	b.n	800b326 <xTaskGenericNotify+0xde>
					break;
 800b32a:	bf00      	nop
 800b32c:	e000      	b.n	800b330 <xTaskGenericNotify+0xe8>

					break;
 800b32e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b330:	7ffb      	ldrb	r3, [r7, #31]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d13b      	bne.n	800b3ae <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	3304      	adds	r3, #4
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fd fdd4 	bl	8008ee8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b344:	4b1d      	ldr	r3, [pc, #116]	@ (800b3bc <xTaskGenericNotify+0x174>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d903      	bls.n	800b354 <xTaskGenericNotify+0x10c>
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	4a1a      	ldr	r2, [pc, #104]	@ (800b3bc <xTaskGenericNotify+0x174>)
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b358:	4613      	mov	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4a17      	ldr	r2, [pc, #92]	@ (800b3c0 <xTaskGenericNotify+0x178>)
 800b362:	441a      	add	r2, r3
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	3304      	adds	r3, #4
 800b368:	4619      	mov	r1, r3
 800b36a:	4610      	mov	r0, r2
 800b36c:	f7fd fd5f 	bl	8008e2e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00b      	beq.n	800b390 <xTaskGenericNotify+0x148>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	613b      	str	r3, [r7, #16]
}
 800b38a:	bf00      	nop
 800b38c:	bf00      	nop
 800b38e:	e7fd      	b.n	800b38c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b394:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c4 <xTaskGenericNotify+0x17c>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d907      	bls.n	800b3ae <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b39e:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c8 <xTaskGenericNotify+0x180>)
 800b3a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b3ae:	f000 fd1d 	bl	800bdec <vPortExitCritical>

		return xReturn;
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3728      	adds	r7, #40	@ 0x28
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	20001110 	.word	0x20001110
 800b3c0:	20000c38 	.word	0x20000c38
 800b3c4:	20000c34 	.word	0x20000c34
 800b3c8:	e000ed04 	.word	0xe000ed04

0800b3cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3d6:	4b21      	ldr	r3, [pc, #132]	@ (800b45c <prvAddCurrentTaskToDelayedList+0x90>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3dc:	4b20      	ldr	r3, [pc, #128]	@ (800b460 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fd fd80 	bl	8008ee8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ee:	d10a      	bne.n	800b406 <prvAddCurrentTaskToDelayedList+0x3a>
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d007      	beq.n	800b406 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b460 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4819      	ldr	r0, [pc, #100]	@ (800b464 <prvAddCurrentTaskToDelayedList+0x98>)
 800b400:	f7fd fd15 	bl	8008e2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b404:	e026      	b.n	800b454 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4413      	add	r3, r2
 800b40c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b40e:	4b14      	ldr	r3, [pc, #80]	@ (800b460 <prvAddCurrentTaskToDelayedList+0x94>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d209      	bcs.n	800b432 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b41e:	4b12      	ldr	r3, [pc, #72]	@ (800b468 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	4b0f      	ldr	r3, [pc, #60]	@ (800b460 <prvAddCurrentTaskToDelayedList+0x94>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3304      	adds	r3, #4
 800b428:	4619      	mov	r1, r3
 800b42a:	4610      	mov	r0, r2
 800b42c:	f7fd fd23 	bl	8008e76 <vListInsert>
}
 800b430:	e010      	b.n	800b454 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b432:	4b0e      	ldr	r3, [pc, #56]	@ (800b46c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	4b0a      	ldr	r3, [pc, #40]	@ (800b460 <prvAddCurrentTaskToDelayedList+0x94>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	f7fd fd19 	bl	8008e76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b444:	4b0a      	ldr	r3, [pc, #40]	@ (800b470 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d202      	bcs.n	800b454 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b44e:	4a08      	ldr	r2, [pc, #32]	@ (800b470 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	6013      	str	r3, [r2, #0]
}
 800b454:	bf00      	nop
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	2000110c 	.word	0x2000110c
 800b460:	20000c34 	.word	0x20000c34
 800b464:	200010f4 	.word	0x200010f4
 800b468:	200010c4 	.word	0x200010c4
 800b46c:	200010c0 	.word	0x200010c0
 800b470:	20001128 	.word	0x20001128

0800b474 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08a      	sub	sp, #40	@ 0x28
 800b478:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b47e:	f000 fb13 	bl	800baa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b482:	4b1d      	ldr	r3, [pc, #116]	@ (800b4f8 <xTimerCreateTimerTask+0x84>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d021      	beq.n	800b4ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b48a:	2300      	movs	r3, #0
 800b48c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b492:	1d3a      	adds	r2, r7, #4
 800b494:	f107 0108 	add.w	r1, r7, #8
 800b498:	f107 030c 	add.w	r3, r7, #12
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fd fc7f 	bl	8008da0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	9202      	str	r2, [sp, #8]
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	460a      	mov	r2, r1
 800b4b4:	4911      	ldr	r1, [pc, #68]	@ (800b4fc <xTimerCreateTimerTask+0x88>)
 800b4b6:	4812      	ldr	r0, [pc, #72]	@ (800b500 <xTimerCreateTimerTask+0x8c>)
 800b4b8:	f7fe fe24 	bl	800a104 <xTaskCreateStatic>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	4a11      	ldr	r2, [pc, #68]	@ (800b504 <xTimerCreateTimerTask+0x90>)
 800b4c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4c2:	4b10      	ldr	r3, [pc, #64]	@ (800b504 <xTimerCreateTimerTask+0x90>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	613b      	str	r3, [r7, #16]
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	e7fd      	b.n	800b4e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4ec:	697b      	ldr	r3, [r7, #20]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20001164 	.word	0x20001164
 800b4fc:	0800fa30 	.word	0x0800fa30
 800b500:	0800b641 	.word	0x0800b641
 800b504:	20001168 	.word	0x20001168

0800b508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08a      	sub	sp, #40	@ 0x28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10b      	bne.n	800b538 <xTimerGenericCommand+0x30>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	623b      	str	r3, [r7, #32]
}
 800b532:	bf00      	nop
 800b534:	bf00      	nop
 800b536:	e7fd      	b.n	800b534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b538:	4b19      	ldr	r3, [pc, #100]	@ (800b5a0 <xTimerGenericCommand+0x98>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d02a      	beq.n	800b596 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2b05      	cmp	r3, #5
 800b550:	dc18      	bgt.n	800b584 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b552:	f7ff fc3f 	bl	800add4 <xTaskGetSchedulerState>
 800b556:	4603      	mov	r3, r0
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d109      	bne.n	800b570 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b55c:	4b10      	ldr	r3, [pc, #64]	@ (800b5a0 <xTimerGenericCommand+0x98>)
 800b55e:	6818      	ldr	r0, [r3, #0]
 800b560:	f107 0110 	add.w	r1, r7, #16
 800b564:	2300      	movs	r3, #0
 800b566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b568:	f7fd ff54 	bl	8009414 <xQueueGenericSend>
 800b56c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b56e:	e012      	b.n	800b596 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b570:	4b0b      	ldr	r3, [pc, #44]	@ (800b5a0 <xTimerGenericCommand+0x98>)
 800b572:	6818      	ldr	r0, [r3, #0]
 800b574:	f107 0110 	add.w	r1, r7, #16
 800b578:	2300      	movs	r3, #0
 800b57a:	2200      	movs	r2, #0
 800b57c:	f7fd ff4a 	bl	8009414 <xQueueGenericSend>
 800b580:	6278      	str	r0, [r7, #36]	@ 0x24
 800b582:	e008      	b.n	800b596 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b584:	4b06      	ldr	r3, [pc, #24]	@ (800b5a0 <xTimerGenericCommand+0x98>)
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	f107 0110 	add.w	r1, r7, #16
 800b58c:	2300      	movs	r3, #0
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	f7fe f842 	bl	8009618 <xQueueGenericSendFromISR>
 800b594:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3728      	adds	r7, #40	@ 0x28
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	20001164 	.word	0x20001164

0800b5a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ae:	4b23      	ldr	r3, [pc, #140]	@ (800b63c <prvProcessExpiredTimer+0x98>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fd fc93 	bl	8008ee8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d023      	beq.n	800b618 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	699a      	ldr	r2, [r3, #24]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	18d1      	adds	r1, r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	6978      	ldr	r0, [r7, #20]
 800b5de:	f000 f8d5 	bl	800b78c <prvInsertTimerInActiveList>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d020      	beq.n	800b62a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6978      	ldr	r0, [r7, #20]
 800b5f4:	f7ff ff88 	bl	800b508 <xTimerGenericCommand>
 800b5f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d114      	bne.n	800b62a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	60fb      	str	r3, [r7, #12]
}
 800b612:	bf00      	nop
 800b614:	bf00      	nop
 800b616:	e7fd      	b.n	800b614 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b61e:	f023 0301 	bic.w	r3, r3, #1
 800b622:	b2da      	uxtb	r2, r3
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	6978      	ldr	r0, [r7, #20]
 800b630:	4798      	blx	r3
}
 800b632:	bf00      	nop
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	2000115c 	.word	0x2000115c

0800b640 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b648:	f107 0308 	add.w	r3, r7, #8
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 f859 	bl	800b704 <prvGetNextExpireTime>
 800b652:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	4619      	mov	r1, r3
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f000 f805 	bl	800b668 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b65e:	f000 f8d7 	bl	800b810 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b662:	bf00      	nop
 800b664:	e7f0      	b.n	800b648 <prvTimerTask+0x8>
	...

0800b668 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b672:	f7fe ffab 	bl	800a5cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b676:	f107 0308 	add.w	r3, r7, #8
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 f866 	bl	800b74c <prvSampleTimeNow>
 800b680:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d130      	bne.n	800b6ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10a      	bne.n	800b6a4 <prvProcessTimerOrBlockTask+0x3c>
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	429a      	cmp	r2, r3
 800b694:	d806      	bhi.n	800b6a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b696:	f7fe ffa7 	bl	800a5e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b69a:	68f9      	ldr	r1, [r7, #12]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff ff81 	bl	800b5a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b6a2:	e024      	b.n	800b6ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d008      	beq.n	800b6bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6aa:	4b13      	ldr	r3, [pc, #76]	@ (800b6f8 <prvProcessTimerOrBlockTask+0x90>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <prvProcessTimerOrBlockTask+0x50>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e000      	b.n	800b6ba <prvProcessTimerOrBlockTask+0x52>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6bc:	4b0f      	ldr	r3, [pc, #60]	@ (800b6fc <prvProcessTimerOrBlockTask+0x94>)
 800b6be:	6818      	ldr	r0, [r3, #0]
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	f7fe fce7 	bl	800a09c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b6ce:	f7fe ff8b 	bl	800a5e8 <xTaskResumeAll>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10a      	bne.n	800b6ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6d8:	4b09      	ldr	r3, [pc, #36]	@ (800b700 <prvProcessTimerOrBlockTask+0x98>)
 800b6da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	f3bf 8f6f 	isb	sy
}
 800b6e8:	e001      	b.n	800b6ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6ea:	f7fe ff7d 	bl	800a5e8 <xTaskResumeAll>
}
 800b6ee:	bf00      	nop
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20001160 	.word	0x20001160
 800b6fc:	20001164 	.word	0x20001164
 800b700:	e000ed04 	.word	0xe000ed04

0800b704 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b70c:	4b0e      	ldr	r3, [pc, #56]	@ (800b748 <prvGetNextExpireTime+0x44>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d101      	bne.n	800b71a <prvGetNextExpireTime+0x16>
 800b716:	2201      	movs	r2, #1
 800b718:	e000      	b.n	800b71c <prvGetNextExpireTime+0x18>
 800b71a:	2200      	movs	r2, #0
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d105      	bne.n	800b734 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b728:	4b07      	ldr	r3, [pc, #28]	@ (800b748 <prvGetNextExpireTime+0x44>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	60fb      	str	r3, [r7, #12]
 800b732:	e001      	b.n	800b738 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b734:	2300      	movs	r3, #0
 800b736:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b738:	68fb      	ldr	r3, [r7, #12]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	2000115c 	.word	0x2000115c

0800b74c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b754:	f7fe ffe6 	bl	800a724 <xTaskGetTickCount>
 800b758:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b75a:	4b0b      	ldr	r3, [pc, #44]	@ (800b788 <prvSampleTimeNow+0x3c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	429a      	cmp	r2, r3
 800b762:	d205      	bcs.n	800b770 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b764:	f000 f93a 	bl	800b9dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	e002      	b.n	800b776 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b776:	4a04      	ldr	r2, [pc, #16]	@ (800b788 <prvSampleTimeNow+0x3c>)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b77c:	68fb      	ldr	r3, [r7, #12]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	2000116c 	.word	0x2000116c

0800b78c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
 800b798:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b79a:	2300      	movs	r3, #0
 800b79c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d812      	bhi.n	800b7d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	1ad2      	subs	r2, r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	699b      	ldr	r3, [r3, #24]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d302      	bcc.n	800b7c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e01b      	b.n	800b7fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b7c6:	4b10      	ldr	r3, [pc, #64]	@ (800b808 <prvInsertTimerInActiveList+0x7c>)
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	4610      	mov	r0, r2
 800b7d2:	f7fd fb50 	bl	8008e76 <vListInsert>
 800b7d6:	e012      	b.n	800b7fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d206      	bcs.n	800b7ee <prvInsertTimerInActiveList+0x62>
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d302      	bcc.n	800b7ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	617b      	str	r3, [r7, #20]
 800b7ec:	e007      	b.n	800b7fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7ee:	4b07      	ldr	r3, [pc, #28]	@ (800b80c <prvInsertTimerInActiveList+0x80>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	f7fd fb3c 	bl	8008e76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7fe:	697b      	ldr	r3, [r7, #20]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	20001160 	.word	0x20001160
 800b80c:	2000115c 	.word	0x2000115c

0800b810 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b08e      	sub	sp, #56	@ 0x38
 800b814:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b816:	e0ce      	b.n	800b9b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	da19      	bge.n	800b852 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b81e:	1d3b      	adds	r3, r7, #4
 800b820:	3304      	adds	r3, #4
 800b822:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10b      	bne.n	800b842 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	61fb      	str	r3, [r7, #28]
}
 800b83c:	bf00      	nop
 800b83e:	bf00      	nop
 800b840:	e7fd      	b.n	800b83e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b848:	6850      	ldr	r0, [r2, #4]
 800b84a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b84c:	6892      	ldr	r2, [r2, #8]
 800b84e:	4611      	mov	r1, r2
 800b850:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f2c0 80ae 	blt.w	800b9b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d004      	beq.n	800b870 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b868:	3304      	adds	r3, #4
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fd fb3c 	bl	8008ee8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b870:	463b      	mov	r3, r7
 800b872:	4618      	mov	r0, r3
 800b874:	f7ff ff6a 	bl	800b74c <prvSampleTimeNow>
 800b878:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b09      	cmp	r3, #9
 800b87e:	f200 8097 	bhi.w	800b9b0 <prvProcessReceivedCommands+0x1a0>
 800b882:	a201      	add	r2, pc, #4	@ (adr r2, 800b888 <prvProcessReceivedCommands+0x78>)
 800b884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b888:	0800b8b1 	.word	0x0800b8b1
 800b88c:	0800b8b1 	.word	0x0800b8b1
 800b890:	0800b8b1 	.word	0x0800b8b1
 800b894:	0800b927 	.word	0x0800b927
 800b898:	0800b93b 	.word	0x0800b93b
 800b89c:	0800b987 	.word	0x0800b987
 800b8a0:	0800b8b1 	.word	0x0800b8b1
 800b8a4:	0800b8b1 	.word	0x0800b8b1
 800b8a8:	0800b927 	.word	0x0800b927
 800b8ac:	0800b93b 	.word	0x0800b93b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8b6:	f043 0301 	orr.w	r3, r3, #1
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	18d1      	adds	r1, r2, r3
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8d0:	f7ff ff5c 	bl	800b78c <prvInsertTimerInActiveList>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d06c      	beq.n	800b9b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8e8:	f003 0304 	and.w	r3, r3, #4
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d061      	beq.n	800b9b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	441a      	add	r2, r3
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	2100      	movs	r1, #0
 800b900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b902:	f7ff fe01 	bl	800b508 <xTimerGenericCommand>
 800b906:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d152      	bne.n	800b9b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	61bb      	str	r3, [r7, #24]
}
 800b920:	bf00      	nop
 800b922:	bf00      	nop
 800b924:	e7fd      	b.n	800b922 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b92c:	f023 0301 	bic.w	r3, r3, #1
 800b930:	b2da      	uxtb	r2, r3
 800b932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b934:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b938:	e03d      	b.n	800b9b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b940:	f043 0301 	orr.w	r3, r3, #1
 800b944:	b2da      	uxtb	r2, r3
 800b946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b948:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b950:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10b      	bne.n	800b972 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	617b      	str	r3, [r7, #20]
}
 800b96c:	bf00      	nop
 800b96e:	bf00      	nop
 800b970:	e7fd      	b.n	800b96e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b974:	699a      	ldr	r2, [r3, #24]
 800b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b978:	18d1      	adds	r1, r2, r3
 800b97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b97e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b980:	f7ff ff04 	bl	800b78c <prvInsertTimerInActiveList>
					break;
 800b984:	e017      	b.n	800b9b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b98c:	f003 0302 	and.w	r3, r3, #2
 800b990:	2b00      	cmp	r3, #0
 800b992:	d103      	bne.n	800b99c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b996:	f000 fbe7 	bl	800c168 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b99a:	e00c      	b.n	800b9b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9a2:	f023 0301 	bic.w	r3, r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b9ae:	e002      	b.n	800b9b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b9b0:	bf00      	nop
 800b9b2:	e000      	b.n	800b9b6 <prvProcessReceivedCommands+0x1a6>
					break;
 800b9b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9b6:	4b08      	ldr	r3, [pc, #32]	@ (800b9d8 <prvProcessReceivedCommands+0x1c8>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	1d39      	adds	r1, r7, #4
 800b9bc:	2200      	movs	r2, #0
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fd ff58 	bl	8009874 <xQueueReceive>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f47f af26 	bne.w	800b818 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b9cc:	bf00      	nop
 800b9ce:	bf00      	nop
 800b9d0:	3730      	adds	r7, #48	@ 0x30
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20001164 	.word	0x20001164

0800b9dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b088      	sub	sp, #32
 800b9e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9e2:	e049      	b.n	800ba78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9e4:	4b2e      	ldr	r3, [pc, #184]	@ (800baa0 <prvSwitchTimerLists+0xc4>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ee:	4b2c      	ldr	r3, [pc, #176]	@ (800baa0 <prvSwitchTimerLists+0xc4>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7fd fa73 	bl	8008ee8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6a1b      	ldr	r3, [r3, #32]
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba10:	f003 0304 	and.w	r3, r3, #4
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d02f      	beq.n	800ba78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	4413      	add	r3, r2
 800ba20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d90e      	bls.n	800ba48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba36:	4b1a      	ldr	r3, [pc, #104]	@ (800baa0 <prvSwitchTimerLists+0xc4>)
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f7fd fa18 	bl	8008e76 <vListInsert>
 800ba46:	e017      	b.n	800ba78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba48:	2300      	movs	r3, #0
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	2100      	movs	r1, #0
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff fd58 	bl	800b508 <xTimerGenericCommand>
 800ba58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10b      	bne.n	800ba78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	603b      	str	r3, [r7, #0]
}
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	e7fd      	b.n	800ba74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba78:	4b09      	ldr	r3, [pc, #36]	@ (800baa0 <prvSwitchTimerLists+0xc4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1b0      	bne.n	800b9e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba82:	4b07      	ldr	r3, [pc, #28]	@ (800baa0 <prvSwitchTimerLists+0xc4>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba88:	4b06      	ldr	r3, [pc, #24]	@ (800baa4 <prvSwitchTimerLists+0xc8>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a04      	ldr	r2, [pc, #16]	@ (800baa0 <prvSwitchTimerLists+0xc4>)
 800ba8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba90:	4a04      	ldr	r2, [pc, #16]	@ (800baa4 <prvSwitchTimerLists+0xc8>)
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	6013      	str	r3, [r2, #0]
}
 800ba96:	bf00      	nop
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	2000115c 	.word	0x2000115c
 800baa4:	20001160 	.word	0x20001160

0800baa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800baae:	f000 f96b 	bl	800bd88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bab2:	4b15      	ldr	r3, [pc, #84]	@ (800bb08 <prvCheckForValidListAndQueue+0x60>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d120      	bne.n	800bafc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800baba:	4814      	ldr	r0, [pc, #80]	@ (800bb0c <prvCheckForValidListAndQueue+0x64>)
 800babc:	f7fd f98a 	bl	8008dd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bac0:	4813      	ldr	r0, [pc, #76]	@ (800bb10 <prvCheckForValidListAndQueue+0x68>)
 800bac2:	f7fd f987 	bl	8008dd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bac6:	4b13      	ldr	r3, [pc, #76]	@ (800bb14 <prvCheckForValidListAndQueue+0x6c>)
 800bac8:	4a10      	ldr	r2, [pc, #64]	@ (800bb0c <prvCheckForValidListAndQueue+0x64>)
 800baca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bacc:	4b12      	ldr	r3, [pc, #72]	@ (800bb18 <prvCheckForValidListAndQueue+0x70>)
 800bace:	4a10      	ldr	r2, [pc, #64]	@ (800bb10 <prvCheckForValidListAndQueue+0x68>)
 800bad0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bad2:	2300      	movs	r3, #0
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	4b11      	ldr	r3, [pc, #68]	@ (800bb1c <prvCheckForValidListAndQueue+0x74>)
 800bad8:	4a11      	ldr	r2, [pc, #68]	@ (800bb20 <prvCheckForValidListAndQueue+0x78>)
 800bada:	2110      	movs	r1, #16
 800badc:	200a      	movs	r0, #10
 800bade:	f7fd fa97 	bl	8009010 <xQueueGenericCreateStatic>
 800bae2:	4603      	mov	r3, r0
 800bae4:	4a08      	ldr	r2, [pc, #32]	@ (800bb08 <prvCheckForValidListAndQueue+0x60>)
 800bae6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bae8:	4b07      	ldr	r3, [pc, #28]	@ (800bb08 <prvCheckForValidListAndQueue+0x60>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800baf0:	4b05      	ldr	r3, [pc, #20]	@ (800bb08 <prvCheckForValidListAndQueue+0x60>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	490b      	ldr	r1, [pc, #44]	@ (800bb24 <prvCheckForValidListAndQueue+0x7c>)
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe fa7c 	bl	8009ff4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bafc:	f000 f976 	bl	800bdec <vPortExitCritical>
}
 800bb00:	bf00      	nop
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20001164 	.word	0x20001164
 800bb0c:	20001134 	.word	0x20001134
 800bb10:	20001148 	.word	0x20001148
 800bb14:	2000115c 	.word	0x2000115c
 800bb18:	20001160 	.word	0x20001160
 800bb1c:	20001210 	.word	0x20001210
 800bb20:	20001170 	.word	0x20001170
 800bb24:	0800fa38 	.word	0x0800fa38

0800bb28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3b04      	subs	r3, #4
 800bb38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bb40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3b04      	subs	r3, #4
 800bb46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f023 0201 	bic.w	r2, r3, #1
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3b04      	subs	r3, #4
 800bb56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb58:	4a0c      	ldr	r2, [pc, #48]	@ (800bb8c <pxPortInitialiseStack+0x64>)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3b14      	subs	r3, #20
 800bb62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3b04      	subs	r3, #4
 800bb6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f06f 0202 	mvn.w	r2, #2
 800bb76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	3b20      	subs	r3, #32
 800bb7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	0800bb91 	.word	0x0800bb91

0800bb90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb9a:	4b13      	ldr	r3, [pc, #76]	@ (800bbe8 <prvTaskExitError+0x58>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba2:	d00b      	beq.n	800bbbc <prvTaskExitError+0x2c>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	60fb      	str	r3, [r7, #12]
}
 800bbb6:	bf00      	nop
 800bbb8:	bf00      	nop
 800bbba:	e7fd      	b.n	800bbb8 <prvTaskExitError+0x28>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	60bb      	str	r3, [r7, #8]
}
 800bbce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbd0:	bf00      	nop
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0fc      	beq.n	800bbd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbd8:	bf00      	nop
 800bbda:	bf00      	nop
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	2000000c 	.word	0x2000000c
 800bbec:	00000000 	.word	0x00000000

0800bbf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbf0:	4b07      	ldr	r3, [pc, #28]	@ (800bc10 <pxCurrentTCBConst2>)
 800bbf2:	6819      	ldr	r1, [r3, #0]
 800bbf4:	6808      	ldr	r0, [r1, #0]
 800bbf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfa:	f380 8809 	msr	PSP, r0
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f04f 0000 	mov.w	r0, #0
 800bc06:	f380 8811 	msr	BASEPRI, r0
 800bc0a:	4770      	bx	lr
 800bc0c:	f3af 8000 	nop.w

0800bc10 <pxCurrentTCBConst2>:
 800bc10:	20000c34 	.word	0x20000c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop

0800bc18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc18:	4808      	ldr	r0, [pc, #32]	@ (800bc3c <prvPortStartFirstTask+0x24>)
 800bc1a:	6800      	ldr	r0, [r0, #0]
 800bc1c:	6800      	ldr	r0, [r0, #0]
 800bc1e:	f380 8808 	msr	MSP, r0
 800bc22:	f04f 0000 	mov.w	r0, #0
 800bc26:	f380 8814 	msr	CONTROL, r0
 800bc2a:	b662      	cpsie	i
 800bc2c:	b661      	cpsie	f
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	df00      	svc	0
 800bc38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc3a:	bf00      	nop
 800bc3c:	e000ed08 	.word	0xe000ed08

0800bc40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc46:	4b47      	ldr	r3, [pc, #284]	@ (800bd64 <xPortStartScheduler+0x124>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a47      	ldr	r2, [pc, #284]	@ (800bd68 <xPortStartScheduler+0x128>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d10b      	bne.n	800bc68 <xPortStartScheduler+0x28>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	613b      	str	r3, [r7, #16]
}
 800bc62:	bf00      	nop
 800bc64:	bf00      	nop
 800bc66:	e7fd      	b.n	800bc64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc68:	4b3e      	ldr	r3, [pc, #248]	@ (800bd64 <xPortStartScheduler+0x124>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a3f      	ldr	r2, [pc, #252]	@ (800bd6c <xPortStartScheduler+0x12c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d10b      	bne.n	800bc8a <xPortStartScheduler+0x4a>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	60fb      	str	r3, [r7, #12]
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop
 800bc88:	e7fd      	b.n	800bc86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc8a:	4b39      	ldr	r3, [pc, #228]	@ (800bd70 <xPortStartScheduler+0x130>)
 800bc8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	22ff      	movs	r2, #255	@ 0xff
 800bc9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bca4:	78fb      	ldrb	r3, [r7, #3]
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bcac:	b2da      	uxtb	r2, r3
 800bcae:	4b31      	ldr	r3, [pc, #196]	@ (800bd74 <xPortStartScheduler+0x134>)
 800bcb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcb2:	4b31      	ldr	r3, [pc, #196]	@ (800bd78 <xPortStartScheduler+0x138>)
 800bcb4:	2207      	movs	r2, #7
 800bcb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcb8:	e009      	b.n	800bcce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bcba:	4b2f      	ldr	r3, [pc, #188]	@ (800bd78 <xPortStartScheduler+0x138>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	4a2d      	ldr	r2, [pc, #180]	@ (800bd78 <xPortStartScheduler+0x138>)
 800bcc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bcc4:	78fb      	ldrb	r3, [r7, #3]
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcce:	78fb      	ldrb	r3, [r7, #3]
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcd6:	2b80      	cmp	r3, #128	@ 0x80
 800bcd8:	d0ef      	beq.n	800bcba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcda:	4b27      	ldr	r3, [pc, #156]	@ (800bd78 <xPortStartScheduler+0x138>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f1c3 0307 	rsb	r3, r3, #7
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	d00b      	beq.n	800bcfe <xPortStartScheduler+0xbe>
	__asm volatile
 800bce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	60bb      	str	r3, [r7, #8]
}
 800bcf8:	bf00      	nop
 800bcfa:	bf00      	nop
 800bcfc:	e7fd      	b.n	800bcfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcfe:	4b1e      	ldr	r3, [pc, #120]	@ (800bd78 <xPortStartScheduler+0x138>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	021b      	lsls	r3, r3, #8
 800bd04:	4a1c      	ldr	r2, [pc, #112]	@ (800bd78 <xPortStartScheduler+0x138>)
 800bd06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd08:	4b1b      	ldr	r3, [pc, #108]	@ (800bd78 <xPortStartScheduler+0x138>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bd10:	4a19      	ldr	r2, [pc, #100]	@ (800bd78 <xPortStartScheduler+0x138>)
 800bd12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd1c:	4b17      	ldr	r3, [pc, #92]	@ (800bd7c <xPortStartScheduler+0x13c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a16      	ldr	r2, [pc, #88]	@ (800bd7c <xPortStartScheduler+0x13c>)
 800bd22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bd26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd28:	4b14      	ldr	r3, [pc, #80]	@ (800bd7c <xPortStartScheduler+0x13c>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a13      	ldr	r2, [pc, #76]	@ (800bd7c <xPortStartScheduler+0x13c>)
 800bd2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bd32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd34:	f000 f8da 	bl	800beec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd38:	4b11      	ldr	r3, [pc, #68]	@ (800bd80 <xPortStartScheduler+0x140>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd3e:	f000 f8f9 	bl	800bf34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd42:	4b10      	ldr	r3, [pc, #64]	@ (800bd84 <xPortStartScheduler+0x144>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a0f      	ldr	r2, [pc, #60]	@ (800bd84 <xPortStartScheduler+0x144>)
 800bd48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bd4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd4e:	f7ff ff63 	bl	800bc18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd52:	f7fe fdb1 	bl	800a8b8 <vTaskSwitchContext>
	prvTaskExitError();
 800bd56:	f7ff ff1b 	bl	800bb90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	e000ed00 	.word	0xe000ed00
 800bd68:	410fc271 	.word	0x410fc271
 800bd6c:	410fc270 	.word	0x410fc270
 800bd70:	e000e400 	.word	0xe000e400
 800bd74:	20001260 	.word	0x20001260
 800bd78:	20001264 	.word	0x20001264
 800bd7c:	e000ed20 	.word	0xe000ed20
 800bd80:	2000000c 	.word	0x2000000c
 800bd84:	e000ef34 	.word	0xe000ef34

0800bd88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	607b      	str	r3, [r7, #4]
}
 800bda0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bda2:	4b10      	ldr	r3, [pc, #64]	@ (800bde4 <vPortEnterCritical+0x5c>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	3301      	adds	r3, #1
 800bda8:	4a0e      	ldr	r2, [pc, #56]	@ (800bde4 <vPortEnterCritical+0x5c>)
 800bdaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bdac:	4b0d      	ldr	r3, [pc, #52]	@ (800bde4 <vPortEnterCritical+0x5c>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d110      	bne.n	800bdd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bde8 <vPortEnterCritical+0x60>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00b      	beq.n	800bdd6 <vPortEnterCritical+0x4e>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	603b      	str	r3, [r7, #0]
}
 800bdd0:	bf00      	nop
 800bdd2:	bf00      	nop
 800bdd4:	e7fd      	b.n	800bdd2 <vPortEnterCritical+0x4a>
	}
}
 800bdd6:	bf00      	nop
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	2000000c 	.word	0x2000000c
 800bde8:	e000ed04 	.word	0xe000ed04

0800bdec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdf2:	4b12      	ldr	r3, [pc, #72]	@ (800be3c <vPortExitCritical+0x50>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10b      	bne.n	800be12 <vPortExitCritical+0x26>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	607b      	str	r3, [r7, #4]
}
 800be0c:	bf00      	nop
 800be0e:	bf00      	nop
 800be10:	e7fd      	b.n	800be0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be12:	4b0a      	ldr	r3, [pc, #40]	@ (800be3c <vPortExitCritical+0x50>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3b01      	subs	r3, #1
 800be18:	4a08      	ldr	r2, [pc, #32]	@ (800be3c <vPortExitCritical+0x50>)
 800be1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be1c:	4b07      	ldr	r3, [pc, #28]	@ (800be3c <vPortExitCritical+0x50>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d105      	bne.n	800be30 <vPortExitCritical+0x44>
 800be24:	2300      	movs	r3, #0
 800be26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	f383 8811 	msr	BASEPRI, r3
}
 800be2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be30:	bf00      	nop
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	2000000c 	.word	0x2000000c

0800be40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be40:	f3ef 8009 	mrs	r0, PSP
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	4b15      	ldr	r3, [pc, #84]	@ (800bea0 <pxCurrentTCBConst>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	f01e 0f10 	tst.w	lr, #16
 800be50:	bf08      	it	eq
 800be52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5a:	6010      	str	r0, [r2, #0]
 800be5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800be64:	f380 8811 	msr	BASEPRI, r0
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f7fe fd22 	bl	800a8b8 <vTaskSwitchContext>
 800be74:	f04f 0000 	mov.w	r0, #0
 800be78:	f380 8811 	msr	BASEPRI, r0
 800be7c:	bc09      	pop	{r0, r3}
 800be7e:	6819      	ldr	r1, [r3, #0]
 800be80:	6808      	ldr	r0, [r1, #0]
 800be82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be86:	f01e 0f10 	tst.w	lr, #16
 800be8a:	bf08      	it	eq
 800be8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be90:	f380 8809 	msr	PSP, r0
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	f3af 8000 	nop.w

0800bea0 <pxCurrentTCBConst>:
 800bea0:	20000c34 	.word	0x20000c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop

0800bea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	607b      	str	r3, [r7, #4]
}
 800bec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bec2:	f7fe fc3f 	bl	800a744 <xTaskIncrementTick>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d003      	beq.n	800bed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800becc:	4b06      	ldr	r3, [pc, #24]	@ (800bee8 <xPortSysTickHandler+0x40>)
 800bece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	2300      	movs	r3, #0
 800bed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	f383 8811 	msr	BASEPRI, r3
}
 800bede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800beec:	b480      	push	{r7}
 800beee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bef0:	4b0b      	ldr	r3, [pc, #44]	@ (800bf20 <vPortSetupTimerInterrupt+0x34>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bef6:	4b0b      	ldr	r3, [pc, #44]	@ (800bf24 <vPortSetupTimerInterrupt+0x38>)
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800befc:	4b0a      	ldr	r3, [pc, #40]	@ (800bf28 <vPortSetupTimerInterrupt+0x3c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a0a      	ldr	r2, [pc, #40]	@ (800bf2c <vPortSetupTimerInterrupt+0x40>)
 800bf02:	fba2 2303 	umull	r2, r3, r2, r3
 800bf06:	099b      	lsrs	r3, r3, #6
 800bf08:	4a09      	ldr	r2, [pc, #36]	@ (800bf30 <vPortSetupTimerInterrupt+0x44>)
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf0e:	4b04      	ldr	r3, [pc, #16]	@ (800bf20 <vPortSetupTimerInterrupt+0x34>)
 800bf10:	2207      	movs	r2, #7
 800bf12:	601a      	str	r2, [r3, #0]
}
 800bf14:	bf00      	nop
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	e000e010 	.word	0xe000e010
 800bf24:	e000e018 	.word	0xe000e018
 800bf28:	20000000 	.word	0x20000000
 800bf2c:	10624dd3 	.word	0x10624dd3
 800bf30:	e000e014 	.word	0xe000e014

0800bf34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bf44 <vPortEnableVFP+0x10>
 800bf38:	6801      	ldr	r1, [r0, #0]
 800bf3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bf3e:	6001      	str	r1, [r0, #0]
 800bf40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf42:	bf00      	nop
 800bf44:	e000ed88 	.word	0xe000ed88

0800bf48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf4e:	f3ef 8305 	mrs	r3, IPSR
 800bf52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b0f      	cmp	r3, #15
 800bf58:	d915      	bls.n	800bf86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf5a:	4a18      	ldr	r2, [pc, #96]	@ (800bfbc <vPortValidateInterruptPriority+0x74>)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf64:	4b16      	ldr	r3, [pc, #88]	@ (800bfc0 <vPortValidateInterruptPriority+0x78>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	7afa      	ldrb	r2, [r7, #11]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d20b      	bcs.n	800bf86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bf6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	607b      	str	r3, [r7, #4]
}
 800bf80:	bf00      	nop
 800bf82:	bf00      	nop
 800bf84:	e7fd      	b.n	800bf82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf86:	4b0f      	ldr	r3, [pc, #60]	@ (800bfc4 <vPortValidateInterruptPriority+0x7c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bf8e:	4b0e      	ldr	r3, [pc, #56]	@ (800bfc8 <vPortValidateInterruptPriority+0x80>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d90b      	bls.n	800bfae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	603b      	str	r3, [r7, #0]
}
 800bfa8:	bf00      	nop
 800bfaa:	bf00      	nop
 800bfac:	e7fd      	b.n	800bfaa <vPortValidateInterruptPriority+0x62>
	}
 800bfae:	bf00      	nop
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	e000e3f0 	.word	0xe000e3f0
 800bfc0:	20001260 	.word	0x20001260
 800bfc4:	e000ed0c 	.word	0xe000ed0c
 800bfc8:	20001264 	.word	0x20001264

0800bfcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08a      	sub	sp, #40	@ 0x28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfd8:	f7fe faf8 	bl	800a5cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfdc:	4b5c      	ldr	r3, [pc, #368]	@ (800c150 <pvPortMalloc+0x184>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d101      	bne.n	800bfe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bfe4:	f000 f924 	bl	800c230 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfe8:	4b5a      	ldr	r3, [pc, #360]	@ (800c154 <pvPortMalloc+0x188>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4013      	ands	r3, r2
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f040 8095 	bne.w	800c120 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d01e      	beq.n	800c03a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bffc:	2208      	movs	r2, #8
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4413      	add	r3, r2
 800c002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f003 0307 	and.w	r3, r3, #7
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d015      	beq.n	800c03a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f023 0307 	bic.w	r3, r3, #7
 800c014:	3308      	adds	r3, #8
 800c016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f003 0307 	and.w	r3, r3, #7
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00b      	beq.n	800c03a <pvPortMalloc+0x6e>
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	617b      	str	r3, [r7, #20]
}
 800c034:	bf00      	nop
 800c036:	bf00      	nop
 800c038:	e7fd      	b.n	800c036 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d06f      	beq.n	800c120 <pvPortMalloc+0x154>
 800c040:	4b45      	ldr	r3, [pc, #276]	@ (800c158 <pvPortMalloc+0x18c>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	429a      	cmp	r2, r3
 800c048:	d86a      	bhi.n	800c120 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c04a:	4b44      	ldr	r3, [pc, #272]	@ (800c15c <pvPortMalloc+0x190>)
 800c04c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c04e:	4b43      	ldr	r3, [pc, #268]	@ (800c15c <pvPortMalloc+0x190>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c054:	e004      	b.n	800c060 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	429a      	cmp	r2, r3
 800c068:	d903      	bls.n	800c072 <pvPortMalloc+0xa6>
 800c06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1f1      	bne.n	800c056 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c072:	4b37      	ldr	r3, [pc, #220]	@ (800c150 <pvPortMalloc+0x184>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c078:	429a      	cmp	r2, r3
 800c07a:	d051      	beq.n	800c120 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c07c:	6a3b      	ldr	r3, [r7, #32]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2208      	movs	r2, #8
 800c082:	4413      	add	r3, r2
 800c084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c090:	685a      	ldr	r2, [r3, #4]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	1ad2      	subs	r2, r2, r3
 800c096:	2308      	movs	r3, #8
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d920      	bls.n	800c0e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c09e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	f003 0307 	and.w	r3, r3, #7
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00b      	beq.n	800c0c8 <pvPortMalloc+0xfc>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	613b      	str	r3, [r7, #16]
}
 800c0c2:	bf00      	nop
 800c0c4:	bf00      	nop
 800c0c6:	e7fd      	b.n	800c0c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	1ad2      	subs	r2, r2, r3
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0da:	69b8      	ldr	r0, [r7, #24]
 800c0dc:	f000 f90a 	bl	800c2f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c158 <pvPortMalloc+0x18c>)
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	4a1b      	ldr	r2, [pc, #108]	@ (800c158 <pvPortMalloc+0x18c>)
 800c0ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c158 <pvPortMalloc+0x18c>)
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c160 <pvPortMalloc+0x194>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d203      	bcs.n	800c102 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0fa:	4b17      	ldr	r3, [pc, #92]	@ (800c158 <pvPortMalloc+0x18c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a18      	ldr	r2, [pc, #96]	@ (800c160 <pvPortMalloc+0x194>)
 800c100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	4b13      	ldr	r3, [pc, #76]	@ (800c154 <pvPortMalloc+0x188>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	431a      	orrs	r2, r3
 800c10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	2200      	movs	r2, #0
 800c114:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c116:	4b13      	ldr	r3, [pc, #76]	@ (800c164 <pvPortMalloc+0x198>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3301      	adds	r3, #1
 800c11c:	4a11      	ldr	r2, [pc, #68]	@ (800c164 <pvPortMalloc+0x198>)
 800c11e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c120:	f7fe fa62 	bl	800a5e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00b      	beq.n	800c146 <pvPortMalloc+0x17a>
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	60fb      	str	r3, [r7, #12]
}
 800c140:	bf00      	nop
 800c142:	bf00      	nop
 800c144:	e7fd      	b.n	800c142 <pvPortMalloc+0x176>
	return pvReturn;
 800c146:	69fb      	ldr	r3, [r7, #28]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3728      	adds	r7, #40	@ 0x28
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20004e70 	.word	0x20004e70
 800c154:	20004e84 	.word	0x20004e84
 800c158:	20004e74 	.word	0x20004e74
 800c15c:	20004e68 	.word	0x20004e68
 800c160:	20004e78 	.word	0x20004e78
 800c164:	20004e7c 	.word	0x20004e7c

0800c168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d04f      	beq.n	800c21a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c17a:	2308      	movs	r3, #8
 800c17c:	425b      	negs	r3, r3
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	4413      	add	r3, r2
 800c182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	4b25      	ldr	r3, [pc, #148]	@ (800c224 <vPortFree+0xbc>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4013      	ands	r3, r2
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10b      	bne.n	800c1ae <vPortFree+0x46>
	__asm volatile
 800c196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	60fb      	str	r3, [r7, #12]
}
 800c1a8:	bf00      	nop
 800c1aa:	bf00      	nop
 800c1ac:	e7fd      	b.n	800c1aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00b      	beq.n	800c1ce <vPortFree+0x66>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ba:	f383 8811 	msr	BASEPRI, r3
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	60bb      	str	r3, [r7, #8]
}
 800c1c8:	bf00      	nop
 800c1ca:	bf00      	nop
 800c1cc:	e7fd      	b.n	800c1ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	4b14      	ldr	r3, [pc, #80]	@ (800c224 <vPortFree+0xbc>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d01e      	beq.n	800c21a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d11a      	bne.n	800c21a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c224 <vPortFree+0xbc>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	43db      	mvns	r3, r3
 800c1ee:	401a      	ands	r2, r3
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1f4:	f7fe f9ea 	bl	800a5cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	685a      	ldr	r2, [r3, #4]
 800c1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c228 <vPortFree+0xc0>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4413      	add	r3, r2
 800c202:	4a09      	ldr	r2, [pc, #36]	@ (800c228 <vPortFree+0xc0>)
 800c204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c206:	6938      	ldr	r0, [r7, #16]
 800c208:	f000 f874 	bl	800c2f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c20c:	4b07      	ldr	r3, [pc, #28]	@ (800c22c <vPortFree+0xc4>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	3301      	adds	r3, #1
 800c212:	4a06      	ldr	r2, [pc, #24]	@ (800c22c <vPortFree+0xc4>)
 800c214:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c216:	f7fe f9e7 	bl	800a5e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c21a:	bf00      	nop
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	20004e84 	.word	0x20004e84
 800c228:	20004e74 	.word	0x20004e74
 800c22c:	20004e80 	.word	0x20004e80

0800c230 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c236:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c23a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c23c:	4b27      	ldr	r3, [pc, #156]	@ (800c2dc <prvHeapInit+0xac>)
 800c23e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f003 0307 	and.w	r3, r3, #7
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00c      	beq.n	800c264 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3307      	adds	r3, #7
 800c24e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f023 0307 	bic.w	r3, r3, #7
 800c256:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	1ad3      	subs	r3, r2, r3
 800c25e:	4a1f      	ldr	r2, [pc, #124]	@ (800c2dc <prvHeapInit+0xac>)
 800c260:	4413      	add	r3, r2
 800c262:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c268:	4a1d      	ldr	r2, [pc, #116]	@ (800c2e0 <prvHeapInit+0xb0>)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c26e:	4b1c      	ldr	r3, [pc, #112]	@ (800c2e0 <prvHeapInit+0xb0>)
 800c270:	2200      	movs	r2, #0
 800c272:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	4413      	add	r3, r2
 800c27a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c27c:	2208      	movs	r2, #8
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	1a9b      	subs	r3, r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f023 0307 	bic.w	r3, r3, #7
 800c28a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4a15      	ldr	r2, [pc, #84]	@ (800c2e4 <prvHeapInit+0xb4>)
 800c290:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c292:	4b14      	ldr	r3, [pc, #80]	@ (800c2e4 <prvHeapInit+0xb4>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2200      	movs	r2, #0
 800c298:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c29a:	4b12      	ldr	r3, [pc, #72]	@ (800c2e4 <prvHeapInit+0xb4>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	1ad2      	subs	r2, r2, r3
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c2e4 <prvHeapInit+0xb4>)
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	4a0a      	ldr	r2, [pc, #40]	@ (800c2e8 <prvHeapInit+0xb8>)
 800c2be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	4a09      	ldr	r2, [pc, #36]	@ (800c2ec <prvHeapInit+0xbc>)
 800c2c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2c8:	4b09      	ldr	r3, [pc, #36]	@ (800c2f0 <prvHeapInit+0xc0>)
 800c2ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c2ce:	601a      	str	r2, [r3, #0]
}
 800c2d0:	bf00      	nop
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	20001268 	.word	0x20001268
 800c2e0:	20004e68 	.word	0x20004e68
 800c2e4:	20004e70 	.word	0x20004e70
 800c2e8:	20004e78 	.word	0x20004e78
 800c2ec:	20004e74 	.word	0x20004e74
 800c2f0:	20004e84 	.word	0x20004e84

0800c2f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2fc:	4b28      	ldr	r3, [pc, #160]	@ (800c3a0 <prvInsertBlockIntoFreeList+0xac>)
 800c2fe:	60fb      	str	r3, [r7, #12]
 800c300:	e002      	b.n	800c308 <prvInsertBlockIntoFreeList+0x14>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d8f7      	bhi.n	800c302 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	4413      	add	r3, r2
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d108      	bne.n	800c336 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	441a      	add	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	441a      	add	r2, r3
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d118      	bne.n	800c37c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	4b15      	ldr	r3, [pc, #84]	@ (800c3a4 <prvInsertBlockIntoFreeList+0xb0>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d00d      	beq.n	800c372 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	441a      	add	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	e008      	b.n	800c384 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c372:	4b0c      	ldr	r3, [pc, #48]	@ (800c3a4 <prvInsertBlockIntoFreeList+0xb0>)
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	601a      	str	r2, [r3, #0]
 800c37a:	e003      	b.n	800c384 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d002      	beq.n	800c392 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c392:	bf00      	nop
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	20004e68 	.word	0x20004e68
 800c3a4:	20004e70 	.word	0x20004e70

0800c3a8 <__cvt>:
 800c3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ac:	ec57 6b10 	vmov	r6, r7, d0
 800c3b0:	2f00      	cmp	r7, #0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	463b      	mov	r3, r7
 800c3b8:	bfbb      	ittet	lt
 800c3ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c3be:	461f      	movlt	r7, r3
 800c3c0:	2300      	movge	r3, #0
 800c3c2:	232d      	movlt	r3, #45	@ 0x2d
 800c3c4:	700b      	strb	r3, [r1, #0]
 800c3c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c3cc:	4691      	mov	r9, r2
 800c3ce:	f023 0820 	bic.w	r8, r3, #32
 800c3d2:	bfbc      	itt	lt
 800c3d4:	4632      	movlt	r2, r6
 800c3d6:	4616      	movlt	r6, r2
 800c3d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c3dc:	d005      	beq.n	800c3ea <__cvt+0x42>
 800c3de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c3e2:	d100      	bne.n	800c3e6 <__cvt+0x3e>
 800c3e4:	3401      	adds	r4, #1
 800c3e6:	2102      	movs	r1, #2
 800c3e8:	e000      	b.n	800c3ec <__cvt+0x44>
 800c3ea:	2103      	movs	r1, #3
 800c3ec:	ab03      	add	r3, sp, #12
 800c3ee:	9301      	str	r3, [sp, #4]
 800c3f0:	ab02      	add	r3, sp, #8
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	ec47 6b10 	vmov	d0, r6, r7
 800c3f8:	4653      	mov	r3, sl
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	f000 fed4 	bl	800d1a8 <_dtoa_r>
 800c400:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c404:	4605      	mov	r5, r0
 800c406:	d119      	bne.n	800c43c <__cvt+0x94>
 800c408:	f019 0f01 	tst.w	r9, #1
 800c40c:	d00e      	beq.n	800c42c <__cvt+0x84>
 800c40e:	eb00 0904 	add.w	r9, r0, r4
 800c412:	2200      	movs	r2, #0
 800c414:	2300      	movs	r3, #0
 800c416:	4630      	mov	r0, r6
 800c418:	4639      	mov	r1, r7
 800c41a:	f7f4 fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800c41e:	b108      	cbz	r0, 800c424 <__cvt+0x7c>
 800c420:	f8cd 900c 	str.w	r9, [sp, #12]
 800c424:	2230      	movs	r2, #48	@ 0x30
 800c426:	9b03      	ldr	r3, [sp, #12]
 800c428:	454b      	cmp	r3, r9
 800c42a:	d31e      	bcc.n	800c46a <__cvt+0xc2>
 800c42c:	9b03      	ldr	r3, [sp, #12]
 800c42e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c430:	1b5b      	subs	r3, r3, r5
 800c432:	4628      	mov	r0, r5
 800c434:	6013      	str	r3, [r2, #0]
 800c436:	b004      	add	sp, #16
 800c438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c440:	eb00 0904 	add.w	r9, r0, r4
 800c444:	d1e5      	bne.n	800c412 <__cvt+0x6a>
 800c446:	7803      	ldrb	r3, [r0, #0]
 800c448:	2b30      	cmp	r3, #48	@ 0x30
 800c44a:	d10a      	bne.n	800c462 <__cvt+0xba>
 800c44c:	2200      	movs	r2, #0
 800c44e:	2300      	movs	r3, #0
 800c450:	4630      	mov	r0, r6
 800c452:	4639      	mov	r1, r7
 800c454:	f7f4 fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 800c458:	b918      	cbnz	r0, 800c462 <__cvt+0xba>
 800c45a:	f1c4 0401 	rsb	r4, r4, #1
 800c45e:	f8ca 4000 	str.w	r4, [sl]
 800c462:	f8da 3000 	ldr.w	r3, [sl]
 800c466:	4499      	add	r9, r3
 800c468:	e7d3      	b.n	800c412 <__cvt+0x6a>
 800c46a:	1c59      	adds	r1, r3, #1
 800c46c:	9103      	str	r1, [sp, #12]
 800c46e:	701a      	strb	r2, [r3, #0]
 800c470:	e7d9      	b.n	800c426 <__cvt+0x7e>

0800c472 <__exponent>:
 800c472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c474:	2900      	cmp	r1, #0
 800c476:	bfba      	itte	lt
 800c478:	4249      	neglt	r1, r1
 800c47a:	232d      	movlt	r3, #45	@ 0x2d
 800c47c:	232b      	movge	r3, #43	@ 0x2b
 800c47e:	2909      	cmp	r1, #9
 800c480:	7002      	strb	r2, [r0, #0]
 800c482:	7043      	strb	r3, [r0, #1]
 800c484:	dd29      	ble.n	800c4da <__exponent+0x68>
 800c486:	f10d 0307 	add.w	r3, sp, #7
 800c48a:	461d      	mov	r5, r3
 800c48c:	270a      	movs	r7, #10
 800c48e:	461a      	mov	r2, r3
 800c490:	fbb1 f6f7 	udiv	r6, r1, r7
 800c494:	fb07 1416 	mls	r4, r7, r6, r1
 800c498:	3430      	adds	r4, #48	@ 0x30
 800c49a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c49e:	460c      	mov	r4, r1
 800c4a0:	2c63      	cmp	r4, #99	@ 0x63
 800c4a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	dcf1      	bgt.n	800c48e <__exponent+0x1c>
 800c4aa:	3130      	adds	r1, #48	@ 0x30
 800c4ac:	1e94      	subs	r4, r2, #2
 800c4ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c4b2:	1c41      	adds	r1, r0, #1
 800c4b4:	4623      	mov	r3, r4
 800c4b6:	42ab      	cmp	r3, r5
 800c4b8:	d30a      	bcc.n	800c4d0 <__exponent+0x5e>
 800c4ba:	f10d 0309 	add.w	r3, sp, #9
 800c4be:	1a9b      	subs	r3, r3, r2
 800c4c0:	42ac      	cmp	r4, r5
 800c4c2:	bf88      	it	hi
 800c4c4:	2300      	movhi	r3, #0
 800c4c6:	3302      	adds	r3, #2
 800c4c8:	4403      	add	r3, r0
 800c4ca:	1a18      	subs	r0, r3, r0
 800c4cc:	b003      	add	sp, #12
 800c4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c4d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c4d8:	e7ed      	b.n	800c4b6 <__exponent+0x44>
 800c4da:	2330      	movs	r3, #48	@ 0x30
 800c4dc:	3130      	adds	r1, #48	@ 0x30
 800c4de:	7083      	strb	r3, [r0, #2]
 800c4e0:	70c1      	strb	r1, [r0, #3]
 800c4e2:	1d03      	adds	r3, r0, #4
 800c4e4:	e7f1      	b.n	800c4ca <__exponent+0x58>
	...

0800c4e8 <_printf_float>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	b08d      	sub	sp, #52	@ 0x34
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c4f4:	4616      	mov	r6, r2
 800c4f6:	461f      	mov	r7, r3
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	f000 fcef 	bl	800cedc <_localeconv_r>
 800c4fe:	6803      	ldr	r3, [r0, #0]
 800c500:	9304      	str	r3, [sp, #16]
 800c502:	4618      	mov	r0, r3
 800c504:	f7f3 feb4 	bl	8000270 <strlen>
 800c508:	2300      	movs	r3, #0
 800c50a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c50c:	f8d8 3000 	ldr.w	r3, [r8]
 800c510:	9005      	str	r0, [sp, #20]
 800c512:	3307      	adds	r3, #7
 800c514:	f023 0307 	bic.w	r3, r3, #7
 800c518:	f103 0208 	add.w	r2, r3, #8
 800c51c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c520:	f8d4 b000 	ldr.w	fp, [r4]
 800c524:	f8c8 2000 	str.w	r2, [r8]
 800c528:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c52c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c530:	9307      	str	r3, [sp, #28]
 800c532:	f8cd 8018 	str.w	r8, [sp, #24]
 800c536:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c53a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c53e:	4b9c      	ldr	r3, [pc, #624]	@ (800c7b0 <_printf_float+0x2c8>)
 800c540:	f04f 32ff 	mov.w	r2, #4294967295
 800c544:	f7f4 faf2 	bl	8000b2c <__aeabi_dcmpun>
 800c548:	bb70      	cbnz	r0, 800c5a8 <_printf_float+0xc0>
 800c54a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c54e:	4b98      	ldr	r3, [pc, #608]	@ (800c7b0 <_printf_float+0x2c8>)
 800c550:	f04f 32ff 	mov.w	r2, #4294967295
 800c554:	f7f4 facc 	bl	8000af0 <__aeabi_dcmple>
 800c558:	bb30      	cbnz	r0, 800c5a8 <_printf_float+0xc0>
 800c55a:	2200      	movs	r2, #0
 800c55c:	2300      	movs	r3, #0
 800c55e:	4640      	mov	r0, r8
 800c560:	4649      	mov	r1, r9
 800c562:	f7f4 fabb 	bl	8000adc <__aeabi_dcmplt>
 800c566:	b110      	cbz	r0, 800c56e <_printf_float+0x86>
 800c568:	232d      	movs	r3, #45	@ 0x2d
 800c56a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c56e:	4a91      	ldr	r2, [pc, #580]	@ (800c7b4 <_printf_float+0x2cc>)
 800c570:	4b91      	ldr	r3, [pc, #580]	@ (800c7b8 <_printf_float+0x2d0>)
 800c572:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c576:	bf94      	ite	ls
 800c578:	4690      	movls	r8, r2
 800c57a:	4698      	movhi	r8, r3
 800c57c:	2303      	movs	r3, #3
 800c57e:	6123      	str	r3, [r4, #16]
 800c580:	f02b 0304 	bic.w	r3, fp, #4
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	f04f 0900 	mov.w	r9, #0
 800c58a:	9700      	str	r7, [sp, #0]
 800c58c:	4633      	mov	r3, r6
 800c58e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c590:	4621      	mov	r1, r4
 800c592:	4628      	mov	r0, r5
 800c594:	f000 f9d2 	bl	800c93c <_printf_common>
 800c598:	3001      	adds	r0, #1
 800c59a:	f040 808d 	bne.w	800c6b8 <_printf_float+0x1d0>
 800c59e:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a2:	b00d      	add	sp, #52	@ 0x34
 800c5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a8:	4642      	mov	r2, r8
 800c5aa:	464b      	mov	r3, r9
 800c5ac:	4640      	mov	r0, r8
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	f7f4 fabc 	bl	8000b2c <__aeabi_dcmpun>
 800c5b4:	b140      	cbz	r0, 800c5c8 <_printf_float+0xe0>
 800c5b6:	464b      	mov	r3, r9
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	bfbc      	itt	lt
 800c5bc:	232d      	movlt	r3, #45	@ 0x2d
 800c5be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c5c2:	4a7e      	ldr	r2, [pc, #504]	@ (800c7bc <_printf_float+0x2d4>)
 800c5c4:	4b7e      	ldr	r3, [pc, #504]	@ (800c7c0 <_printf_float+0x2d8>)
 800c5c6:	e7d4      	b.n	800c572 <_printf_float+0x8a>
 800c5c8:	6863      	ldr	r3, [r4, #4]
 800c5ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c5ce:	9206      	str	r2, [sp, #24]
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	d13b      	bne.n	800c64c <_printf_float+0x164>
 800c5d4:	2306      	movs	r3, #6
 800c5d6:	6063      	str	r3, [r4, #4]
 800c5d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c5dc:	2300      	movs	r3, #0
 800c5de:	6022      	str	r2, [r4, #0]
 800c5e0:	9303      	str	r3, [sp, #12]
 800c5e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c5e8:	ab09      	add	r3, sp, #36	@ 0x24
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	6861      	ldr	r1, [r4, #4]
 800c5ee:	ec49 8b10 	vmov	d0, r8, r9
 800c5f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f7ff fed6 	bl	800c3a8 <__cvt>
 800c5fc:	9b06      	ldr	r3, [sp, #24]
 800c5fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c600:	2b47      	cmp	r3, #71	@ 0x47
 800c602:	4680      	mov	r8, r0
 800c604:	d129      	bne.n	800c65a <_printf_float+0x172>
 800c606:	1cc8      	adds	r0, r1, #3
 800c608:	db02      	blt.n	800c610 <_printf_float+0x128>
 800c60a:	6863      	ldr	r3, [r4, #4]
 800c60c:	4299      	cmp	r1, r3
 800c60e:	dd41      	ble.n	800c694 <_printf_float+0x1ac>
 800c610:	f1aa 0a02 	sub.w	sl, sl, #2
 800c614:	fa5f fa8a 	uxtb.w	sl, sl
 800c618:	3901      	subs	r1, #1
 800c61a:	4652      	mov	r2, sl
 800c61c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c620:	9109      	str	r1, [sp, #36]	@ 0x24
 800c622:	f7ff ff26 	bl	800c472 <__exponent>
 800c626:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c628:	1813      	adds	r3, r2, r0
 800c62a:	2a01      	cmp	r2, #1
 800c62c:	4681      	mov	r9, r0
 800c62e:	6123      	str	r3, [r4, #16]
 800c630:	dc02      	bgt.n	800c638 <_printf_float+0x150>
 800c632:	6822      	ldr	r2, [r4, #0]
 800c634:	07d2      	lsls	r2, r2, #31
 800c636:	d501      	bpl.n	800c63c <_printf_float+0x154>
 800c638:	3301      	adds	r3, #1
 800c63a:	6123      	str	r3, [r4, #16]
 800c63c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c640:	2b00      	cmp	r3, #0
 800c642:	d0a2      	beq.n	800c58a <_printf_float+0xa2>
 800c644:	232d      	movs	r3, #45	@ 0x2d
 800c646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c64a:	e79e      	b.n	800c58a <_printf_float+0xa2>
 800c64c:	9a06      	ldr	r2, [sp, #24]
 800c64e:	2a47      	cmp	r2, #71	@ 0x47
 800c650:	d1c2      	bne.n	800c5d8 <_printf_float+0xf0>
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1c0      	bne.n	800c5d8 <_printf_float+0xf0>
 800c656:	2301      	movs	r3, #1
 800c658:	e7bd      	b.n	800c5d6 <_printf_float+0xee>
 800c65a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c65e:	d9db      	bls.n	800c618 <_printf_float+0x130>
 800c660:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c664:	d118      	bne.n	800c698 <_printf_float+0x1b0>
 800c666:	2900      	cmp	r1, #0
 800c668:	6863      	ldr	r3, [r4, #4]
 800c66a:	dd0b      	ble.n	800c684 <_printf_float+0x19c>
 800c66c:	6121      	str	r1, [r4, #16]
 800c66e:	b913      	cbnz	r3, 800c676 <_printf_float+0x18e>
 800c670:	6822      	ldr	r2, [r4, #0]
 800c672:	07d0      	lsls	r0, r2, #31
 800c674:	d502      	bpl.n	800c67c <_printf_float+0x194>
 800c676:	3301      	adds	r3, #1
 800c678:	440b      	add	r3, r1
 800c67a:	6123      	str	r3, [r4, #16]
 800c67c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c67e:	f04f 0900 	mov.w	r9, #0
 800c682:	e7db      	b.n	800c63c <_printf_float+0x154>
 800c684:	b913      	cbnz	r3, 800c68c <_printf_float+0x1a4>
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	07d2      	lsls	r2, r2, #31
 800c68a:	d501      	bpl.n	800c690 <_printf_float+0x1a8>
 800c68c:	3302      	adds	r3, #2
 800c68e:	e7f4      	b.n	800c67a <_printf_float+0x192>
 800c690:	2301      	movs	r3, #1
 800c692:	e7f2      	b.n	800c67a <_printf_float+0x192>
 800c694:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c69a:	4299      	cmp	r1, r3
 800c69c:	db05      	blt.n	800c6aa <_printf_float+0x1c2>
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	6121      	str	r1, [r4, #16]
 800c6a2:	07d8      	lsls	r0, r3, #31
 800c6a4:	d5ea      	bpl.n	800c67c <_printf_float+0x194>
 800c6a6:	1c4b      	adds	r3, r1, #1
 800c6a8:	e7e7      	b.n	800c67a <_printf_float+0x192>
 800c6aa:	2900      	cmp	r1, #0
 800c6ac:	bfd4      	ite	le
 800c6ae:	f1c1 0202 	rsble	r2, r1, #2
 800c6b2:	2201      	movgt	r2, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	e7e0      	b.n	800c67a <_printf_float+0x192>
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	055a      	lsls	r2, r3, #21
 800c6bc:	d407      	bmi.n	800c6ce <_printf_float+0x1e6>
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	4642      	mov	r2, r8
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	47b8      	blx	r7
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d12b      	bne.n	800c724 <_printf_float+0x23c>
 800c6cc:	e767      	b.n	800c59e <_printf_float+0xb6>
 800c6ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c6d2:	f240 80dd 	bls.w	800c890 <_printf_float+0x3a8>
 800c6d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c6da:	2200      	movs	r2, #0
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f7f4 f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d033      	beq.n	800c74e <_printf_float+0x266>
 800c6e6:	4a37      	ldr	r2, [pc, #220]	@ (800c7c4 <_printf_float+0x2dc>)
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	47b8      	blx	r7
 800c6f0:	3001      	adds	r0, #1
 800c6f2:	f43f af54 	beq.w	800c59e <_printf_float+0xb6>
 800c6f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c6fa:	4543      	cmp	r3, r8
 800c6fc:	db02      	blt.n	800c704 <_printf_float+0x21c>
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	07d8      	lsls	r0, r3, #31
 800c702:	d50f      	bpl.n	800c724 <_printf_float+0x23c>
 800c704:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c708:	4631      	mov	r1, r6
 800c70a:	4628      	mov	r0, r5
 800c70c:	47b8      	blx	r7
 800c70e:	3001      	adds	r0, #1
 800c710:	f43f af45 	beq.w	800c59e <_printf_float+0xb6>
 800c714:	f04f 0900 	mov.w	r9, #0
 800c718:	f108 38ff 	add.w	r8, r8, #4294967295
 800c71c:	f104 0a1a 	add.w	sl, r4, #26
 800c720:	45c8      	cmp	r8, r9
 800c722:	dc09      	bgt.n	800c738 <_printf_float+0x250>
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	079b      	lsls	r3, r3, #30
 800c728:	f100 8103 	bmi.w	800c932 <_printf_float+0x44a>
 800c72c:	68e0      	ldr	r0, [r4, #12]
 800c72e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c730:	4298      	cmp	r0, r3
 800c732:	bfb8      	it	lt
 800c734:	4618      	movlt	r0, r3
 800c736:	e734      	b.n	800c5a2 <_printf_float+0xba>
 800c738:	2301      	movs	r3, #1
 800c73a:	4652      	mov	r2, sl
 800c73c:	4631      	mov	r1, r6
 800c73e:	4628      	mov	r0, r5
 800c740:	47b8      	blx	r7
 800c742:	3001      	adds	r0, #1
 800c744:	f43f af2b 	beq.w	800c59e <_printf_float+0xb6>
 800c748:	f109 0901 	add.w	r9, r9, #1
 800c74c:	e7e8      	b.n	800c720 <_printf_float+0x238>
 800c74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c750:	2b00      	cmp	r3, #0
 800c752:	dc39      	bgt.n	800c7c8 <_printf_float+0x2e0>
 800c754:	4a1b      	ldr	r2, [pc, #108]	@ (800c7c4 <_printf_float+0x2dc>)
 800c756:	2301      	movs	r3, #1
 800c758:	4631      	mov	r1, r6
 800c75a:	4628      	mov	r0, r5
 800c75c:	47b8      	blx	r7
 800c75e:	3001      	adds	r0, #1
 800c760:	f43f af1d 	beq.w	800c59e <_printf_float+0xb6>
 800c764:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c768:	ea59 0303 	orrs.w	r3, r9, r3
 800c76c:	d102      	bne.n	800c774 <_printf_float+0x28c>
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	07d9      	lsls	r1, r3, #31
 800c772:	d5d7      	bpl.n	800c724 <_printf_float+0x23c>
 800c774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c778:	4631      	mov	r1, r6
 800c77a:	4628      	mov	r0, r5
 800c77c:	47b8      	blx	r7
 800c77e:	3001      	adds	r0, #1
 800c780:	f43f af0d 	beq.w	800c59e <_printf_float+0xb6>
 800c784:	f04f 0a00 	mov.w	sl, #0
 800c788:	f104 0b1a 	add.w	fp, r4, #26
 800c78c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c78e:	425b      	negs	r3, r3
 800c790:	4553      	cmp	r3, sl
 800c792:	dc01      	bgt.n	800c798 <_printf_float+0x2b0>
 800c794:	464b      	mov	r3, r9
 800c796:	e793      	b.n	800c6c0 <_printf_float+0x1d8>
 800c798:	2301      	movs	r3, #1
 800c79a:	465a      	mov	r2, fp
 800c79c:	4631      	mov	r1, r6
 800c79e:	4628      	mov	r0, r5
 800c7a0:	47b8      	blx	r7
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	f43f aefb 	beq.w	800c59e <_printf_float+0xb6>
 800c7a8:	f10a 0a01 	add.w	sl, sl, #1
 800c7ac:	e7ee      	b.n	800c78c <_printf_float+0x2a4>
 800c7ae:	bf00      	nop
 800c7b0:	7fefffff 	.word	0x7fefffff
 800c7b4:	0800fbf4 	.word	0x0800fbf4
 800c7b8:	0800fbf8 	.word	0x0800fbf8
 800c7bc:	0800fbfc 	.word	0x0800fbfc
 800c7c0:	0800fc00 	.word	0x0800fc00
 800c7c4:	0800fc04 	.word	0x0800fc04
 800c7c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c7ce:	4553      	cmp	r3, sl
 800c7d0:	bfa8      	it	ge
 800c7d2:	4653      	movge	r3, sl
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	4699      	mov	r9, r3
 800c7d8:	dc36      	bgt.n	800c848 <_printf_float+0x360>
 800c7da:	f04f 0b00 	mov.w	fp, #0
 800c7de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7e2:	f104 021a 	add.w	r2, r4, #26
 800c7e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7e8:	9306      	str	r3, [sp, #24]
 800c7ea:	eba3 0309 	sub.w	r3, r3, r9
 800c7ee:	455b      	cmp	r3, fp
 800c7f0:	dc31      	bgt.n	800c856 <_printf_float+0x36e>
 800c7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f4:	459a      	cmp	sl, r3
 800c7f6:	dc3a      	bgt.n	800c86e <_printf_float+0x386>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	07da      	lsls	r2, r3, #31
 800c7fc:	d437      	bmi.n	800c86e <_printf_float+0x386>
 800c7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c800:	ebaa 0903 	sub.w	r9, sl, r3
 800c804:	9b06      	ldr	r3, [sp, #24]
 800c806:	ebaa 0303 	sub.w	r3, sl, r3
 800c80a:	4599      	cmp	r9, r3
 800c80c:	bfa8      	it	ge
 800c80e:	4699      	movge	r9, r3
 800c810:	f1b9 0f00 	cmp.w	r9, #0
 800c814:	dc33      	bgt.n	800c87e <_printf_float+0x396>
 800c816:	f04f 0800 	mov.w	r8, #0
 800c81a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c81e:	f104 0b1a 	add.w	fp, r4, #26
 800c822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c824:	ebaa 0303 	sub.w	r3, sl, r3
 800c828:	eba3 0309 	sub.w	r3, r3, r9
 800c82c:	4543      	cmp	r3, r8
 800c82e:	f77f af79 	ble.w	800c724 <_printf_float+0x23c>
 800c832:	2301      	movs	r3, #1
 800c834:	465a      	mov	r2, fp
 800c836:	4631      	mov	r1, r6
 800c838:	4628      	mov	r0, r5
 800c83a:	47b8      	blx	r7
 800c83c:	3001      	adds	r0, #1
 800c83e:	f43f aeae 	beq.w	800c59e <_printf_float+0xb6>
 800c842:	f108 0801 	add.w	r8, r8, #1
 800c846:	e7ec      	b.n	800c822 <_printf_float+0x33a>
 800c848:	4642      	mov	r2, r8
 800c84a:	4631      	mov	r1, r6
 800c84c:	4628      	mov	r0, r5
 800c84e:	47b8      	blx	r7
 800c850:	3001      	adds	r0, #1
 800c852:	d1c2      	bne.n	800c7da <_printf_float+0x2f2>
 800c854:	e6a3      	b.n	800c59e <_printf_float+0xb6>
 800c856:	2301      	movs	r3, #1
 800c858:	4631      	mov	r1, r6
 800c85a:	4628      	mov	r0, r5
 800c85c:	9206      	str	r2, [sp, #24]
 800c85e:	47b8      	blx	r7
 800c860:	3001      	adds	r0, #1
 800c862:	f43f ae9c 	beq.w	800c59e <_printf_float+0xb6>
 800c866:	9a06      	ldr	r2, [sp, #24]
 800c868:	f10b 0b01 	add.w	fp, fp, #1
 800c86c:	e7bb      	b.n	800c7e6 <_printf_float+0x2fe>
 800c86e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c872:	4631      	mov	r1, r6
 800c874:	4628      	mov	r0, r5
 800c876:	47b8      	blx	r7
 800c878:	3001      	adds	r0, #1
 800c87a:	d1c0      	bne.n	800c7fe <_printf_float+0x316>
 800c87c:	e68f      	b.n	800c59e <_printf_float+0xb6>
 800c87e:	9a06      	ldr	r2, [sp, #24]
 800c880:	464b      	mov	r3, r9
 800c882:	4442      	add	r2, r8
 800c884:	4631      	mov	r1, r6
 800c886:	4628      	mov	r0, r5
 800c888:	47b8      	blx	r7
 800c88a:	3001      	adds	r0, #1
 800c88c:	d1c3      	bne.n	800c816 <_printf_float+0x32e>
 800c88e:	e686      	b.n	800c59e <_printf_float+0xb6>
 800c890:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c894:	f1ba 0f01 	cmp.w	sl, #1
 800c898:	dc01      	bgt.n	800c89e <_printf_float+0x3b6>
 800c89a:	07db      	lsls	r3, r3, #31
 800c89c:	d536      	bpl.n	800c90c <_printf_float+0x424>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	4642      	mov	r2, r8
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	47b8      	blx	r7
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	f43f ae78 	beq.w	800c59e <_printf_float+0xb6>
 800c8ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8b2:	4631      	mov	r1, r6
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	47b8      	blx	r7
 800c8b8:	3001      	adds	r0, #1
 800c8ba:	f43f ae70 	beq.w	800c59e <_printf_float+0xb6>
 800c8be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8ca:	f7f4 f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8ce:	b9c0      	cbnz	r0, 800c902 <_printf_float+0x41a>
 800c8d0:	4653      	mov	r3, sl
 800c8d2:	f108 0201 	add.w	r2, r8, #1
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b8      	blx	r7
 800c8dc:	3001      	adds	r0, #1
 800c8de:	d10c      	bne.n	800c8fa <_printf_float+0x412>
 800c8e0:	e65d      	b.n	800c59e <_printf_float+0xb6>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	465a      	mov	r2, fp
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	47b8      	blx	r7
 800c8ec:	3001      	adds	r0, #1
 800c8ee:	f43f ae56 	beq.w	800c59e <_printf_float+0xb6>
 800c8f2:	f108 0801 	add.w	r8, r8, #1
 800c8f6:	45d0      	cmp	r8, sl
 800c8f8:	dbf3      	blt.n	800c8e2 <_printf_float+0x3fa>
 800c8fa:	464b      	mov	r3, r9
 800c8fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c900:	e6df      	b.n	800c6c2 <_printf_float+0x1da>
 800c902:	f04f 0800 	mov.w	r8, #0
 800c906:	f104 0b1a 	add.w	fp, r4, #26
 800c90a:	e7f4      	b.n	800c8f6 <_printf_float+0x40e>
 800c90c:	2301      	movs	r3, #1
 800c90e:	4642      	mov	r2, r8
 800c910:	e7e1      	b.n	800c8d6 <_printf_float+0x3ee>
 800c912:	2301      	movs	r3, #1
 800c914:	464a      	mov	r2, r9
 800c916:	4631      	mov	r1, r6
 800c918:	4628      	mov	r0, r5
 800c91a:	47b8      	blx	r7
 800c91c:	3001      	adds	r0, #1
 800c91e:	f43f ae3e 	beq.w	800c59e <_printf_float+0xb6>
 800c922:	f108 0801 	add.w	r8, r8, #1
 800c926:	68e3      	ldr	r3, [r4, #12]
 800c928:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c92a:	1a5b      	subs	r3, r3, r1
 800c92c:	4543      	cmp	r3, r8
 800c92e:	dcf0      	bgt.n	800c912 <_printf_float+0x42a>
 800c930:	e6fc      	b.n	800c72c <_printf_float+0x244>
 800c932:	f04f 0800 	mov.w	r8, #0
 800c936:	f104 0919 	add.w	r9, r4, #25
 800c93a:	e7f4      	b.n	800c926 <_printf_float+0x43e>

0800c93c <_printf_common>:
 800c93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c940:	4616      	mov	r6, r2
 800c942:	4698      	mov	r8, r3
 800c944:	688a      	ldr	r2, [r1, #8]
 800c946:	690b      	ldr	r3, [r1, #16]
 800c948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c94c:	4293      	cmp	r3, r2
 800c94e:	bfb8      	it	lt
 800c950:	4613      	movlt	r3, r2
 800c952:	6033      	str	r3, [r6, #0]
 800c954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c958:	4607      	mov	r7, r0
 800c95a:	460c      	mov	r4, r1
 800c95c:	b10a      	cbz	r2, 800c962 <_printf_common+0x26>
 800c95e:	3301      	adds	r3, #1
 800c960:	6033      	str	r3, [r6, #0]
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	0699      	lsls	r1, r3, #26
 800c966:	bf42      	ittt	mi
 800c968:	6833      	ldrmi	r3, [r6, #0]
 800c96a:	3302      	addmi	r3, #2
 800c96c:	6033      	strmi	r3, [r6, #0]
 800c96e:	6825      	ldr	r5, [r4, #0]
 800c970:	f015 0506 	ands.w	r5, r5, #6
 800c974:	d106      	bne.n	800c984 <_printf_common+0x48>
 800c976:	f104 0a19 	add.w	sl, r4, #25
 800c97a:	68e3      	ldr	r3, [r4, #12]
 800c97c:	6832      	ldr	r2, [r6, #0]
 800c97e:	1a9b      	subs	r3, r3, r2
 800c980:	42ab      	cmp	r3, r5
 800c982:	dc26      	bgt.n	800c9d2 <_printf_common+0x96>
 800c984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c988:	6822      	ldr	r2, [r4, #0]
 800c98a:	3b00      	subs	r3, #0
 800c98c:	bf18      	it	ne
 800c98e:	2301      	movne	r3, #1
 800c990:	0692      	lsls	r2, r2, #26
 800c992:	d42b      	bmi.n	800c9ec <_printf_common+0xb0>
 800c994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c998:	4641      	mov	r1, r8
 800c99a:	4638      	mov	r0, r7
 800c99c:	47c8      	blx	r9
 800c99e:	3001      	adds	r0, #1
 800c9a0:	d01e      	beq.n	800c9e0 <_printf_common+0xa4>
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	6922      	ldr	r2, [r4, #16]
 800c9a6:	f003 0306 	and.w	r3, r3, #6
 800c9aa:	2b04      	cmp	r3, #4
 800c9ac:	bf02      	ittt	eq
 800c9ae:	68e5      	ldreq	r5, [r4, #12]
 800c9b0:	6833      	ldreq	r3, [r6, #0]
 800c9b2:	1aed      	subeq	r5, r5, r3
 800c9b4:	68a3      	ldr	r3, [r4, #8]
 800c9b6:	bf0c      	ite	eq
 800c9b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9bc:	2500      	movne	r5, #0
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	bfc4      	itt	gt
 800c9c2:	1a9b      	subgt	r3, r3, r2
 800c9c4:	18ed      	addgt	r5, r5, r3
 800c9c6:	2600      	movs	r6, #0
 800c9c8:	341a      	adds	r4, #26
 800c9ca:	42b5      	cmp	r5, r6
 800c9cc:	d11a      	bne.n	800ca04 <_printf_common+0xc8>
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	e008      	b.n	800c9e4 <_printf_common+0xa8>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	4652      	mov	r2, sl
 800c9d6:	4641      	mov	r1, r8
 800c9d8:	4638      	mov	r0, r7
 800c9da:	47c8      	blx	r9
 800c9dc:	3001      	adds	r0, #1
 800c9de:	d103      	bne.n	800c9e8 <_printf_common+0xac>
 800c9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e8:	3501      	adds	r5, #1
 800c9ea:	e7c6      	b.n	800c97a <_printf_common+0x3e>
 800c9ec:	18e1      	adds	r1, r4, r3
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	2030      	movs	r0, #48	@ 0x30
 800c9f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9f6:	4422      	add	r2, r4
 800c9f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca00:	3302      	adds	r3, #2
 800ca02:	e7c7      	b.n	800c994 <_printf_common+0x58>
 800ca04:	2301      	movs	r3, #1
 800ca06:	4622      	mov	r2, r4
 800ca08:	4641      	mov	r1, r8
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	47c8      	blx	r9
 800ca0e:	3001      	adds	r0, #1
 800ca10:	d0e6      	beq.n	800c9e0 <_printf_common+0xa4>
 800ca12:	3601      	adds	r6, #1
 800ca14:	e7d9      	b.n	800c9ca <_printf_common+0x8e>
	...

0800ca18 <_printf_i>:
 800ca18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca1c:	7e0f      	ldrb	r7, [r1, #24]
 800ca1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca20:	2f78      	cmp	r7, #120	@ 0x78
 800ca22:	4691      	mov	r9, r2
 800ca24:	4680      	mov	r8, r0
 800ca26:	460c      	mov	r4, r1
 800ca28:	469a      	mov	sl, r3
 800ca2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca2e:	d807      	bhi.n	800ca40 <_printf_i+0x28>
 800ca30:	2f62      	cmp	r7, #98	@ 0x62
 800ca32:	d80a      	bhi.n	800ca4a <_printf_i+0x32>
 800ca34:	2f00      	cmp	r7, #0
 800ca36:	f000 80d2 	beq.w	800cbde <_printf_i+0x1c6>
 800ca3a:	2f58      	cmp	r7, #88	@ 0x58
 800ca3c:	f000 80b9 	beq.w	800cbb2 <_printf_i+0x19a>
 800ca40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca48:	e03a      	b.n	800cac0 <_printf_i+0xa8>
 800ca4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca4e:	2b15      	cmp	r3, #21
 800ca50:	d8f6      	bhi.n	800ca40 <_printf_i+0x28>
 800ca52:	a101      	add	r1, pc, #4	@ (adr r1, 800ca58 <_printf_i+0x40>)
 800ca54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca58:	0800cab1 	.word	0x0800cab1
 800ca5c:	0800cac5 	.word	0x0800cac5
 800ca60:	0800ca41 	.word	0x0800ca41
 800ca64:	0800ca41 	.word	0x0800ca41
 800ca68:	0800ca41 	.word	0x0800ca41
 800ca6c:	0800ca41 	.word	0x0800ca41
 800ca70:	0800cac5 	.word	0x0800cac5
 800ca74:	0800ca41 	.word	0x0800ca41
 800ca78:	0800ca41 	.word	0x0800ca41
 800ca7c:	0800ca41 	.word	0x0800ca41
 800ca80:	0800ca41 	.word	0x0800ca41
 800ca84:	0800cbc5 	.word	0x0800cbc5
 800ca88:	0800caef 	.word	0x0800caef
 800ca8c:	0800cb7f 	.word	0x0800cb7f
 800ca90:	0800ca41 	.word	0x0800ca41
 800ca94:	0800ca41 	.word	0x0800ca41
 800ca98:	0800cbe7 	.word	0x0800cbe7
 800ca9c:	0800ca41 	.word	0x0800ca41
 800caa0:	0800caef 	.word	0x0800caef
 800caa4:	0800ca41 	.word	0x0800ca41
 800caa8:	0800ca41 	.word	0x0800ca41
 800caac:	0800cb87 	.word	0x0800cb87
 800cab0:	6833      	ldr	r3, [r6, #0]
 800cab2:	1d1a      	adds	r2, r3, #4
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	6032      	str	r2, [r6, #0]
 800cab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cabc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cac0:	2301      	movs	r3, #1
 800cac2:	e09d      	b.n	800cc00 <_printf_i+0x1e8>
 800cac4:	6833      	ldr	r3, [r6, #0]
 800cac6:	6820      	ldr	r0, [r4, #0]
 800cac8:	1d19      	adds	r1, r3, #4
 800caca:	6031      	str	r1, [r6, #0]
 800cacc:	0606      	lsls	r6, r0, #24
 800cace:	d501      	bpl.n	800cad4 <_printf_i+0xbc>
 800cad0:	681d      	ldr	r5, [r3, #0]
 800cad2:	e003      	b.n	800cadc <_printf_i+0xc4>
 800cad4:	0645      	lsls	r5, r0, #25
 800cad6:	d5fb      	bpl.n	800cad0 <_printf_i+0xb8>
 800cad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cadc:	2d00      	cmp	r5, #0
 800cade:	da03      	bge.n	800cae8 <_printf_i+0xd0>
 800cae0:	232d      	movs	r3, #45	@ 0x2d
 800cae2:	426d      	negs	r5, r5
 800cae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cae8:	4859      	ldr	r0, [pc, #356]	@ (800cc50 <_printf_i+0x238>)
 800caea:	230a      	movs	r3, #10
 800caec:	e011      	b.n	800cb12 <_printf_i+0xfa>
 800caee:	6821      	ldr	r1, [r4, #0]
 800caf0:	6833      	ldr	r3, [r6, #0]
 800caf2:	0608      	lsls	r0, r1, #24
 800caf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800caf8:	d402      	bmi.n	800cb00 <_printf_i+0xe8>
 800cafa:	0649      	lsls	r1, r1, #25
 800cafc:	bf48      	it	mi
 800cafe:	b2ad      	uxthmi	r5, r5
 800cb00:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb02:	4853      	ldr	r0, [pc, #332]	@ (800cc50 <_printf_i+0x238>)
 800cb04:	6033      	str	r3, [r6, #0]
 800cb06:	bf14      	ite	ne
 800cb08:	230a      	movne	r3, #10
 800cb0a:	2308      	moveq	r3, #8
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb12:	6866      	ldr	r6, [r4, #4]
 800cb14:	60a6      	str	r6, [r4, #8]
 800cb16:	2e00      	cmp	r6, #0
 800cb18:	bfa2      	ittt	ge
 800cb1a:	6821      	ldrge	r1, [r4, #0]
 800cb1c:	f021 0104 	bicge.w	r1, r1, #4
 800cb20:	6021      	strge	r1, [r4, #0]
 800cb22:	b90d      	cbnz	r5, 800cb28 <_printf_i+0x110>
 800cb24:	2e00      	cmp	r6, #0
 800cb26:	d04b      	beq.n	800cbc0 <_printf_i+0x1a8>
 800cb28:	4616      	mov	r6, r2
 800cb2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb2e:	fb03 5711 	mls	r7, r3, r1, r5
 800cb32:	5dc7      	ldrb	r7, [r0, r7]
 800cb34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb38:	462f      	mov	r7, r5
 800cb3a:	42bb      	cmp	r3, r7
 800cb3c:	460d      	mov	r5, r1
 800cb3e:	d9f4      	bls.n	800cb2a <_printf_i+0x112>
 800cb40:	2b08      	cmp	r3, #8
 800cb42:	d10b      	bne.n	800cb5c <_printf_i+0x144>
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	07df      	lsls	r7, r3, #31
 800cb48:	d508      	bpl.n	800cb5c <_printf_i+0x144>
 800cb4a:	6923      	ldr	r3, [r4, #16]
 800cb4c:	6861      	ldr	r1, [r4, #4]
 800cb4e:	4299      	cmp	r1, r3
 800cb50:	bfde      	ittt	le
 800cb52:	2330      	movle	r3, #48	@ 0x30
 800cb54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb5c:	1b92      	subs	r2, r2, r6
 800cb5e:	6122      	str	r2, [r4, #16]
 800cb60:	f8cd a000 	str.w	sl, [sp]
 800cb64:	464b      	mov	r3, r9
 800cb66:	aa03      	add	r2, sp, #12
 800cb68:	4621      	mov	r1, r4
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	f7ff fee6 	bl	800c93c <_printf_common>
 800cb70:	3001      	adds	r0, #1
 800cb72:	d14a      	bne.n	800cc0a <_printf_i+0x1f2>
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295
 800cb78:	b004      	add	sp, #16
 800cb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	f043 0320 	orr.w	r3, r3, #32
 800cb84:	6023      	str	r3, [r4, #0]
 800cb86:	4833      	ldr	r0, [pc, #204]	@ (800cc54 <_printf_i+0x23c>)
 800cb88:	2778      	movs	r7, #120	@ 0x78
 800cb8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	6831      	ldr	r1, [r6, #0]
 800cb92:	061f      	lsls	r7, r3, #24
 800cb94:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb98:	d402      	bmi.n	800cba0 <_printf_i+0x188>
 800cb9a:	065f      	lsls	r7, r3, #25
 800cb9c:	bf48      	it	mi
 800cb9e:	b2ad      	uxthmi	r5, r5
 800cba0:	6031      	str	r1, [r6, #0]
 800cba2:	07d9      	lsls	r1, r3, #31
 800cba4:	bf44      	itt	mi
 800cba6:	f043 0320 	orrmi.w	r3, r3, #32
 800cbaa:	6023      	strmi	r3, [r4, #0]
 800cbac:	b11d      	cbz	r5, 800cbb6 <_printf_i+0x19e>
 800cbae:	2310      	movs	r3, #16
 800cbb0:	e7ac      	b.n	800cb0c <_printf_i+0xf4>
 800cbb2:	4827      	ldr	r0, [pc, #156]	@ (800cc50 <_printf_i+0x238>)
 800cbb4:	e7e9      	b.n	800cb8a <_printf_i+0x172>
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	f023 0320 	bic.w	r3, r3, #32
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	e7f6      	b.n	800cbae <_printf_i+0x196>
 800cbc0:	4616      	mov	r6, r2
 800cbc2:	e7bd      	b.n	800cb40 <_printf_i+0x128>
 800cbc4:	6833      	ldr	r3, [r6, #0]
 800cbc6:	6825      	ldr	r5, [r4, #0]
 800cbc8:	6961      	ldr	r1, [r4, #20]
 800cbca:	1d18      	adds	r0, r3, #4
 800cbcc:	6030      	str	r0, [r6, #0]
 800cbce:	062e      	lsls	r6, r5, #24
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	d501      	bpl.n	800cbd8 <_printf_i+0x1c0>
 800cbd4:	6019      	str	r1, [r3, #0]
 800cbd6:	e002      	b.n	800cbde <_printf_i+0x1c6>
 800cbd8:	0668      	lsls	r0, r5, #25
 800cbda:	d5fb      	bpl.n	800cbd4 <_printf_i+0x1bc>
 800cbdc:	8019      	strh	r1, [r3, #0]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	6123      	str	r3, [r4, #16]
 800cbe2:	4616      	mov	r6, r2
 800cbe4:	e7bc      	b.n	800cb60 <_printf_i+0x148>
 800cbe6:	6833      	ldr	r3, [r6, #0]
 800cbe8:	1d1a      	adds	r2, r3, #4
 800cbea:	6032      	str	r2, [r6, #0]
 800cbec:	681e      	ldr	r6, [r3, #0]
 800cbee:	6862      	ldr	r2, [r4, #4]
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f7f3 faec 	bl	80001d0 <memchr>
 800cbf8:	b108      	cbz	r0, 800cbfe <_printf_i+0x1e6>
 800cbfa:	1b80      	subs	r0, r0, r6
 800cbfc:	6060      	str	r0, [r4, #4]
 800cbfe:	6863      	ldr	r3, [r4, #4]
 800cc00:	6123      	str	r3, [r4, #16]
 800cc02:	2300      	movs	r3, #0
 800cc04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc08:	e7aa      	b.n	800cb60 <_printf_i+0x148>
 800cc0a:	6923      	ldr	r3, [r4, #16]
 800cc0c:	4632      	mov	r2, r6
 800cc0e:	4649      	mov	r1, r9
 800cc10:	4640      	mov	r0, r8
 800cc12:	47d0      	blx	sl
 800cc14:	3001      	adds	r0, #1
 800cc16:	d0ad      	beq.n	800cb74 <_printf_i+0x15c>
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	079b      	lsls	r3, r3, #30
 800cc1c:	d413      	bmi.n	800cc46 <_printf_i+0x22e>
 800cc1e:	68e0      	ldr	r0, [r4, #12]
 800cc20:	9b03      	ldr	r3, [sp, #12]
 800cc22:	4298      	cmp	r0, r3
 800cc24:	bfb8      	it	lt
 800cc26:	4618      	movlt	r0, r3
 800cc28:	e7a6      	b.n	800cb78 <_printf_i+0x160>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	4632      	mov	r2, r6
 800cc2e:	4649      	mov	r1, r9
 800cc30:	4640      	mov	r0, r8
 800cc32:	47d0      	blx	sl
 800cc34:	3001      	adds	r0, #1
 800cc36:	d09d      	beq.n	800cb74 <_printf_i+0x15c>
 800cc38:	3501      	adds	r5, #1
 800cc3a:	68e3      	ldr	r3, [r4, #12]
 800cc3c:	9903      	ldr	r1, [sp, #12]
 800cc3e:	1a5b      	subs	r3, r3, r1
 800cc40:	42ab      	cmp	r3, r5
 800cc42:	dcf2      	bgt.n	800cc2a <_printf_i+0x212>
 800cc44:	e7eb      	b.n	800cc1e <_printf_i+0x206>
 800cc46:	2500      	movs	r5, #0
 800cc48:	f104 0619 	add.w	r6, r4, #25
 800cc4c:	e7f5      	b.n	800cc3a <_printf_i+0x222>
 800cc4e:	bf00      	nop
 800cc50:	0800fc06 	.word	0x0800fc06
 800cc54:	0800fc17 	.word	0x0800fc17

0800cc58 <std>:
 800cc58:	2300      	movs	r3, #0
 800cc5a:	b510      	push	{r4, lr}
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc66:	6083      	str	r3, [r0, #8]
 800cc68:	8181      	strh	r1, [r0, #12]
 800cc6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc6c:	81c2      	strh	r2, [r0, #14]
 800cc6e:	6183      	str	r3, [r0, #24]
 800cc70:	4619      	mov	r1, r3
 800cc72:	2208      	movs	r2, #8
 800cc74:	305c      	adds	r0, #92	@ 0x5c
 800cc76:	f000 f928 	bl	800ceca <memset>
 800cc7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb0 <std+0x58>)
 800cc7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb4 <std+0x5c>)
 800cc80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc82:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb8 <std+0x60>)
 800cc84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc86:	4b0d      	ldr	r3, [pc, #52]	@ (800ccbc <std+0x64>)
 800cc88:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc8a:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc0 <std+0x68>)
 800cc8c:	6224      	str	r4, [r4, #32]
 800cc8e:	429c      	cmp	r4, r3
 800cc90:	d006      	beq.n	800cca0 <std+0x48>
 800cc92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc96:	4294      	cmp	r4, r2
 800cc98:	d002      	beq.n	800cca0 <std+0x48>
 800cc9a:	33d0      	adds	r3, #208	@ 0xd0
 800cc9c:	429c      	cmp	r4, r3
 800cc9e:	d105      	bne.n	800ccac <std+0x54>
 800cca0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cca8:	f000 b9e2 	b.w	800d070 <__retarget_lock_init_recursive>
 800ccac:	bd10      	pop	{r4, pc}
 800ccae:	bf00      	nop
 800ccb0:	0800ce45 	.word	0x0800ce45
 800ccb4:	0800ce67 	.word	0x0800ce67
 800ccb8:	0800ce9f 	.word	0x0800ce9f
 800ccbc:	0800cec3 	.word	0x0800cec3
 800ccc0:	20004e88 	.word	0x20004e88

0800ccc4 <stdio_exit_handler>:
 800ccc4:	4a02      	ldr	r2, [pc, #8]	@ (800ccd0 <stdio_exit_handler+0xc>)
 800ccc6:	4903      	ldr	r1, [pc, #12]	@ (800ccd4 <stdio_exit_handler+0x10>)
 800ccc8:	4803      	ldr	r0, [pc, #12]	@ (800ccd8 <stdio_exit_handler+0x14>)
 800ccca:	f000 b869 	b.w	800cda0 <_fwalk_sglue>
 800ccce:	bf00      	nop
 800ccd0:	20000010 	.word	0x20000010
 800ccd4:	0800e9ed 	.word	0x0800e9ed
 800ccd8:	20000020 	.word	0x20000020

0800ccdc <cleanup_stdio>:
 800ccdc:	6841      	ldr	r1, [r0, #4]
 800ccde:	4b0c      	ldr	r3, [pc, #48]	@ (800cd10 <cleanup_stdio+0x34>)
 800cce0:	4299      	cmp	r1, r3
 800cce2:	b510      	push	{r4, lr}
 800cce4:	4604      	mov	r4, r0
 800cce6:	d001      	beq.n	800ccec <cleanup_stdio+0x10>
 800cce8:	f001 fe80 	bl	800e9ec <_fflush_r>
 800ccec:	68a1      	ldr	r1, [r4, #8]
 800ccee:	4b09      	ldr	r3, [pc, #36]	@ (800cd14 <cleanup_stdio+0x38>)
 800ccf0:	4299      	cmp	r1, r3
 800ccf2:	d002      	beq.n	800ccfa <cleanup_stdio+0x1e>
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f001 fe79 	bl	800e9ec <_fflush_r>
 800ccfa:	68e1      	ldr	r1, [r4, #12]
 800ccfc:	4b06      	ldr	r3, [pc, #24]	@ (800cd18 <cleanup_stdio+0x3c>)
 800ccfe:	4299      	cmp	r1, r3
 800cd00:	d004      	beq.n	800cd0c <cleanup_stdio+0x30>
 800cd02:	4620      	mov	r0, r4
 800cd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd08:	f001 be70 	b.w	800e9ec <_fflush_r>
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	bf00      	nop
 800cd10:	20004e88 	.word	0x20004e88
 800cd14:	20004ef0 	.word	0x20004ef0
 800cd18:	20004f58 	.word	0x20004f58

0800cd1c <global_stdio_init.part.0>:
 800cd1c:	b510      	push	{r4, lr}
 800cd1e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd4c <global_stdio_init.part.0+0x30>)
 800cd20:	4c0b      	ldr	r4, [pc, #44]	@ (800cd50 <global_stdio_init.part.0+0x34>)
 800cd22:	4a0c      	ldr	r2, [pc, #48]	@ (800cd54 <global_stdio_init.part.0+0x38>)
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	4620      	mov	r0, r4
 800cd28:	2200      	movs	r2, #0
 800cd2a:	2104      	movs	r1, #4
 800cd2c:	f7ff ff94 	bl	800cc58 <std>
 800cd30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd34:	2201      	movs	r2, #1
 800cd36:	2109      	movs	r1, #9
 800cd38:	f7ff ff8e 	bl	800cc58 <std>
 800cd3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd40:	2202      	movs	r2, #2
 800cd42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd46:	2112      	movs	r1, #18
 800cd48:	f7ff bf86 	b.w	800cc58 <std>
 800cd4c:	20004fc0 	.word	0x20004fc0
 800cd50:	20004e88 	.word	0x20004e88
 800cd54:	0800ccc5 	.word	0x0800ccc5

0800cd58 <__sfp_lock_acquire>:
 800cd58:	4801      	ldr	r0, [pc, #4]	@ (800cd60 <__sfp_lock_acquire+0x8>)
 800cd5a:	f000 b98a 	b.w	800d072 <__retarget_lock_acquire_recursive>
 800cd5e:	bf00      	nop
 800cd60:	20004fc9 	.word	0x20004fc9

0800cd64 <__sfp_lock_release>:
 800cd64:	4801      	ldr	r0, [pc, #4]	@ (800cd6c <__sfp_lock_release+0x8>)
 800cd66:	f000 b985 	b.w	800d074 <__retarget_lock_release_recursive>
 800cd6a:	bf00      	nop
 800cd6c:	20004fc9 	.word	0x20004fc9

0800cd70 <__sinit>:
 800cd70:	b510      	push	{r4, lr}
 800cd72:	4604      	mov	r4, r0
 800cd74:	f7ff fff0 	bl	800cd58 <__sfp_lock_acquire>
 800cd78:	6a23      	ldr	r3, [r4, #32]
 800cd7a:	b11b      	cbz	r3, 800cd84 <__sinit+0x14>
 800cd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd80:	f7ff bff0 	b.w	800cd64 <__sfp_lock_release>
 800cd84:	4b04      	ldr	r3, [pc, #16]	@ (800cd98 <__sinit+0x28>)
 800cd86:	6223      	str	r3, [r4, #32]
 800cd88:	4b04      	ldr	r3, [pc, #16]	@ (800cd9c <__sinit+0x2c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d1f5      	bne.n	800cd7c <__sinit+0xc>
 800cd90:	f7ff ffc4 	bl	800cd1c <global_stdio_init.part.0>
 800cd94:	e7f2      	b.n	800cd7c <__sinit+0xc>
 800cd96:	bf00      	nop
 800cd98:	0800ccdd 	.word	0x0800ccdd
 800cd9c:	20004fc0 	.word	0x20004fc0

0800cda0 <_fwalk_sglue>:
 800cda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cda4:	4607      	mov	r7, r0
 800cda6:	4688      	mov	r8, r1
 800cda8:	4614      	mov	r4, r2
 800cdaa:	2600      	movs	r6, #0
 800cdac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdb0:	f1b9 0901 	subs.w	r9, r9, #1
 800cdb4:	d505      	bpl.n	800cdc2 <_fwalk_sglue+0x22>
 800cdb6:	6824      	ldr	r4, [r4, #0]
 800cdb8:	2c00      	cmp	r4, #0
 800cdba:	d1f7      	bne.n	800cdac <_fwalk_sglue+0xc>
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc2:	89ab      	ldrh	r3, [r5, #12]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d907      	bls.n	800cdd8 <_fwalk_sglue+0x38>
 800cdc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	d003      	beq.n	800cdd8 <_fwalk_sglue+0x38>
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	47c0      	blx	r8
 800cdd6:	4306      	orrs	r6, r0
 800cdd8:	3568      	adds	r5, #104	@ 0x68
 800cdda:	e7e9      	b.n	800cdb0 <_fwalk_sglue+0x10>

0800cddc <sniprintf>:
 800cddc:	b40c      	push	{r2, r3}
 800cdde:	b530      	push	{r4, r5, lr}
 800cde0:	4b17      	ldr	r3, [pc, #92]	@ (800ce40 <sniprintf+0x64>)
 800cde2:	1e0c      	subs	r4, r1, #0
 800cde4:	681d      	ldr	r5, [r3, #0]
 800cde6:	b09d      	sub	sp, #116	@ 0x74
 800cde8:	da08      	bge.n	800cdfc <sniprintf+0x20>
 800cdea:	238b      	movs	r3, #139	@ 0x8b
 800cdec:	602b      	str	r3, [r5, #0]
 800cdee:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf2:	b01d      	add	sp, #116	@ 0x74
 800cdf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdf8:	b002      	add	sp, #8
 800cdfa:	4770      	bx	lr
 800cdfc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ce00:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ce04:	bf14      	ite	ne
 800ce06:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce0a:	4623      	moveq	r3, r4
 800ce0c:	9304      	str	r3, [sp, #16]
 800ce0e:	9307      	str	r3, [sp, #28]
 800ce10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce14:	9002      	str	r0, [sp, #8]
 800ce16:	9006      	str	r0, [sp, #24]
 800ce18:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ce1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ce1e:	ab21      	add	r3, sp, #132	@ 0x84
 800ce20:	a902      	add	r1, sp, #8
 800ce22:	4628      	mov	r0, r5
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	f001 fc61 	bl	800e6ec <_svfiprintf_r>
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	bfbc      	itt	lt
 800ce2e:	238b      	movlt	r3, #139	@ 0x8b
 800ce30:	602b      	strlt	r3, [r5, #0]
 800ce32:	2c00      	cmp	r4, #0
 800ce34:	d0dd      	beq.n	800cdf2 <sniprintf+0x16>
 800ce36:	9b02      	ldr	r3, [sp, #8]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	701a      	strb	r2, [r3, #0]
 800ce3c:	e7d9      	b.n	800cdf2 <sniprintf+0x16>
 800ce3e:	bf00      	nop
 800ce40:	2000001c 	.word	0x2000001c

0800ce44 <__sread>:
 800ce44:	b510      	push	{r4, lr}
 800ce46:	460c      	mov	r4, r1
 800ce48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4c:	f000 f8c2 	bl	800cfd4 <_read_r>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	bfab      	itete	ge
 800ce54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce56:	89a3      	ldrhlt	r3, [r4, #12]
 800ce58:	181b      	addge	r3, r3, r0
 800ce5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce5e:	bfac      	ite	ge
 800ce60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce62:	81a3      	strhlt	r3, [r4, #12]
 800ce64:	bd10      	pop	{r4, pc}

0800ce66 <__swrite>:
 800ce66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6a:	461f      	mov	r7, r3
 800ce6c:	898b      	ldrh	r3, [r1, #12]
 800ce6e:	05db      	lsls	r3, r3, #23
 800ce70:	4605      	mov	r5, r0
 800ce72:	460c      	mov	r4, r1
 800ce74:	4616      	mov	r6, r2
 800ce76:	d505      	bpl.n	800ce84 <__swrite+0x1e>
 800ce78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f000 f896 	bl	800cfb0 <_lseek_r>
 800ce84:	89a3      	ldrh	r3, [r4, #12]
 800ce86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce8e:	81a3      	strh	r3, [r4, #12]
 800ce90:	4632      	mov	r2, r6
 800ce92:	463b      	mov	r3, r7
 800ce94:	4628      	mov	r0, r5
 800ce96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9a:	f000 b8ad 	b.w	800cff8 <_write_r>

0800ce9e <__sseek>:
 800ce9e:	b510      	push	{r4, lr}
 800cea0:	460c      	mov	r4, r1
 800cea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea6:	f000 f883 	bl	800cfb0 <_lseek_r>
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	bf15      	itete	ne
 800ceb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ceb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ceb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ceba:	81a3      	strheq	r3, [r4, #12]
 800cebc:	bf18      	it	ne
 800cebe:	81a3      	strhne	r3, [r4, #12]
 800cec0:	bd10      	pop	{r4, pc}

0800cec2 <__sclose>:
 800cec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec6:	f000 b80d 	b.w	800cee4 <_close_r>

0800ceca <memset>:
 800ceca:	4402      	add	r2, r0
 800cecc:	4603      	mov	r3, r0
 800cece:	4293      	cmp	r3, r2
 800ced0:	d100      	bne.n	800ced4 <memset+0xa>
 800ced2:	4770      	bx	lr
 800ced4:	f803 1b01 	strb.w	r1, [r3], #1
 800ced8:	e7f9      	b.n	800cece <memset+0x4>
	...

0800cedc <_localeconv_r>:
 800cedc:	4800      	ldr	r0, [pc, #0]	@ (800cee0 <_localeconv_r+0x4>)
 800cede:	4770      	bx	lr
 800cee0:	2000015c 	.word	0x2000015c

0800cee4 <_close_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	4d06      	ldr	r5, [pc, #24]	@ (800cf00 <_close_r+0x1c>)
 800cee8:	2300      	movs	r3, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	602b      	str	r3, [r5, #0]
 800cef0:	f7f6 f97c 	bl	80031ec <_close>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_close_r+0x1a>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_close_r+0x1a>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	20004fc4 	.word	0x20004fc4

0800cf04 <_reclaim_reent>:
 800cf04:	4b29      	ldr	r3, [pc, #164]	@ (800cfac <_reclaim_reent+0xa8>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4283      	cmp	r3, r0
 800cf0a:	b570      	push	{r4, r5, r6, lr}
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	d04b      	beq.n	800cfa8 <_reclaim_reent+0xa4>
 800cf10:	69c3      	ldr	r3, [r0, #28]
 800cf12:	b1ab      	cbz	r3, 800cf40 <_reclaim_reent+0x3c>
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	b16b      	cbz	r3, 800cf34 <_reclaim_reent+0x30>
 800cf18:	2500      	movs	r5, #0
 800cf1a:	69e3      	ldr	r3, [r4, #28]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	5959      	ldr	r1, [r3, r5]
 800cf20:	2900      	cmp	r1, #0
 800cf22:	d13b      	bne.n	800cf9c <_reclaim_reent+0x98>
 800cf24:	3504      	adds	r5, #4
 800cf26:	2d80      	cmp	r5, #128	@ 0x80
 800cf28:	d1f7      	bne.n	800cf1a <_reclaim_reent+0x16>
 800cf2a:	69e3      	ldr	r3, [r4, #28]
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	68d9      	ldr	r1, [r3, #12]
 800cf30:	f000 fefe 	bl	800dd30 <_free_r>
 800cf34:	69e3      	ldr	r3, [r4, #28]
 800cf36:	6819      	ldr	r1, [r3, #0]
 800cf38:	b111      	cbz	r1, 800cf40 <_reclaim_reent+0x3c>
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f000 fef8 	bl	800dd30 <_free_r>
 800cf40:	6961      	ldr	r1, [r4, #20]
 800cf42:	b111      	cbz	r1, 800cf4a <_reclaim_reent+0x46>
 800cf44:	4620      	mov	r0, r4
 800cf46:	f000 fef3 	bl	800dd30 <_free_r>
 800cf4a:	69e1      	ldr	r1, [r4, #28]
 800cf4c:	b111      	cbz	r1, 800cf54 <_reclaim_reent+0x50>
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f000 feee 	bl	800dd30 <_free_r>
 800cf54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cf56:	b111      	cbz	r1, 800cf5e <_reclaim_reent+0x5a>
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f000 fee9 	bl	800dd30 <_free_r>
 800cf5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf60:	b111      	cbz	r1, 800cf68 <_reclaim_reent+0x64>
 800cf62:	4620      	mov	r0, r4
 800cf64:	f000 fee4 	bl	800dd30 <_free_r>
 800cf68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cf6a:	b111      	cbz	r1, 800cf72 <_reclaim_reent+0x6e>
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f000 fedf 	bl	800dd30 <_free_r>
 800cf72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cf74:	b111      	cbz	r1, 800cf7c <_reclaim_reent+0x78>
 800cf76:	4620      	mov	r0, r4
 800cf78:	f000 feda 	bl	800dd30 <_free_r>
 800cf7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cf7e:	b111      	cbz	r1, 800cf86 <_reclaim_reent+0x82>
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 fed5 	bl	800dd30 <_free_r>
 800cf86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cf88:	b111      	cbz	r1, 800cf90 <_reclaim_reent+0x8c>
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 fed0 	bl	800dd30 <_free_r>
 800cf90:	6a23      	ldr	r3, [r4, #32]
 800cf92:	b14b      	cbz	r3, 800cfa8 <_reclaim_reent+0xa4>
 800cf94:	4620      	mov	r0, r4
 800cf96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf9a:	4718      	bx	r3
 800cf9c:	680e      	ldr	r6, [r1, #0]
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f000 fec6 	bl	800dd30 <_free_r>
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	e7bb      	b.n	800cf20 <_reclaim_reent+0x1c>
 800cfa8:	bd70      	pop	{r4, r5, r6, pc}
 800cfaa:	bf00      	nop
 800cfac:	2000001c 	.word	0x2000001c

0800cfb0 <_lseek_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d07      	ldr	r5, [pc, #28]	@ (800cfd0 <_lseek_r+0x20>)
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	4608      	mov	r0, r1
 800cfb8:	4611      	mov	r1, r2
 800cfba:	2200      	movs	r2, #0
 800cfbc:	602a      	str	r2, [r5, #0]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f7f6 f93b 	bl	800323a <_lseek>
 800cfc4:	1c43      	adds	r3, r0, #1
 800cfc6:	d102      	bne.n	800cfce <_lseek_r+0x1e>
 800cfc8:	682b      	ldr	r3, [r5, #0]
 800cfca:	b103      	cbz	r3, 800cfce <_lseek_r+0x1e>
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	bd38      	pop	{r3, r4, r5, pc}
 800cfd0:	20004fc4 	.word	0x20004fc4

0800cfd4 <_read_r>:
 800cfd4:	b538      	push	{r3, r4, r5, lr}
 800cfd6:	4d07      	ldr	r5, [pc, #28]	@ (800cff4 <_read_r+0x20>)
 800cfd8:	4604      	mov	r4, r0
 800cfda:	4608      	mov	r0, r1
 800cfdc:	4611      	mov	r1, r2
 800cfde:	2200      	movs	r2, #0
 800cfe0:	602a      	str	r2, [r5, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	f7f6 f8c9 	bl	800317a <_read>
 800cfe8:	1c43      	adds	r3, r0, #1
 800cfea:	d102      	bne.n	800cff2 <_read_r+0x1e>
 800cfec:	682b      	ldr	r3, [r5, #0]
 800cfee:	b103      	cbz	r3, 800cff2 <_read_r+0x1e>
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	bd38      	pop	{r3, r4, r5, pc}
 800cff4:	20004fc4 	.word	0x20004fc4

0800cff8 <_write_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4d07      	ldr	r5, [pc, #28]	@ (800d018 <_write_r+0x20>)
 800cffc:	4604      	mov	r4, r0
 800cffe:	4608      	mov	r0, r1
 800d000:	4611      	mov	r1, r2
 800d002:	2200      	movs	r2, #0
 800d004:	602a      	str	r2, [r5, #0]
 800d006:	461a      	mov	r2, r3
 800d008:	f7f6 f8d4 	bl	80031b4 <_write>
 800d00c:	1c43      	adds	r3, r0, #1
 800d00e:	d102      	bne.n	800d016 <_write_r+0x1e>
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	b103      	cbz	r3, 800d016 <_write_r+0x1e>
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	bd38      	pop	{r3, r4, r5, pc}
 800d018:	20004fc4 	.word	0x20004fc4

0800d01c <__errno>:
 800d01c:	4b01      	ldr	r3, [pc, #4]	@ (800d024 <__errno+0x8>)
 800d01e:	6818      	ldr	r0, [r3, #0]
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	2000001c 	.word	0x2000001c

0800d028 <__libc_init_array>:
 800d028:	b570      	push	{r4, r5, r6, lr}
 800d02a:	4d0d      	ldr	r5, [pc, #52]	@ (800d060 <__libc_init_array+0x38>)
 800d02c:	4c0d      	ldr	r4, [pc, #52]	@ (800d064 <__libc_init_array+0x3c>)
 800d02e:	1b64      	subs	r4, r4, r5
 800d030:	10a4      	asrs	r4, r4, #2
 800d032:	2600      	movs	r6, #0
 800d034:	42a6      	cmp	r6, r4
 800d036:	d109      	bne.n	800d04c <__libc_init_array+0x24>
 800d038:	4d0b      	ldr	r5, [pc, #44]	@ (800d068 <__libc_init_array+0x40>)
 800d03a:	4c0c      	ldr	r4, [pc, #48]	@ (800d06c <__libc_init_array+0x44>)
 800d03c:	f002 fc30 	bl	800f8a0 <_init>
 800d040:	1b64      	subs	r4, r4, r5
 800d042:	10a4      	asrs	r4, r4, #2
 800d044:	2600      	movs	r6, #0
 800d046:	42a6      	cmp	r6, r4
 800d048:	d105      	bne.n	800d056 <__libc_init_array+0x2e>
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d050:	4798      	blx	r3
 800d052:	3601      	adds	r6, #1
 800d054:	e7ee      	b.n	800d034 <__libc_init_array+0xc>
 800d056:	f855 3b04 	ldr.w	r3, [r5], #4
 800d05a:	4798      	blx	r3
 800d05c:	3601      	adds	r6, #1
 800d05e:	e7f2      	b.n	800d046 <__libc_init_array+0x1e>
 800d060:	0800ff88 	.word	0x0800ff88
 800d064:	0800ff88 	.word	0x0800ff88
 800d068:	0800ff88 	.word	0x0800ff88
 800d06c:	0800ff8c 	.word	0x0800ff8c

0800d070 <__retarget_lock_init_recursive>:
 800d070:	4770      	bx	lr

0800d072 <__retarget_lock_acquire_recursive>:
 800d072:	4770      	bx	lr

0800d074 <__retarget_lock_release_recursive>:
 800d074:	4770      	bx	lr

0800d076 <memcpy>:
 800d076:	440a      	add	r2, r1
 800d078:	4291      	cmp	r1, r2
 800d07a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d07e:	d100      	bne.n	800d082 <memcpy+0xc>
 800d080:	4770      	bx	lr
 800d082:	b510      	push	{r4, lr}
 800d084:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d08c:	4291      	cmp	r1, r2
 800d08e:	d1f9      	bne.n	800d084 <memcpy+0xe>
 800d090:	bd10      	pop	{r4, pc}

0800d092 <quorem>:
 800d092:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d096:	6903      	ldr	r3, [r0, #16]
 800d098:	690c      	ldr	r4, [r1, #16]
 800d09a:	42a3      	cmp	r3, r4
 800d09c:	4607      	mov	r7, r0
 800d09e:	db7e      	blt.n	800d19e <quorem+0x10c>
 800d0a0:	3c01      	subs	r4, #1
 800d0a2:	f101 0814 	add.w	r8, r1, #20
 800d0a6:	00a3      	lsls	r3, r4, #2
 800d0a8:	f100 0514 	add.w	r5, r0, #20
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0b2:	9301      	str	r3, [sp, #4]
 800d0b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0c8:	d32e      	bcc.n	800d128 <quorem+0x96>
 800d0ca:	f04f 0a00 	mov.w	sl, #0
 800d0ce:	46c4      	mov	ip, r8
 800d0d0:	46ae      	mov	lr, r5
 800d0d2:	46d3      	mov	fp, sl
 800d0d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0d8:	b298      	uxth	r0, r3
 800d0da:	fb06 a000 	mla	r0, r6, r0, sl
 800d0de:	0c02      	lsrs	r2, r0, #16
 800d0e0:	0c1b      	lsrs	r3, r3, #16
 800d0e2:	fb06 2303 	mla	r3, r6, r3, r2
 800d0e6:	f8de 2000 	ldr.w	r2, [lr]
 800d0ea:	b280      	uxth	r0, r0
 800d0ec:	b292      	uxth	r2, r2
 800d0ee:	1a12      	subs	r2, r2, r0
 800d0f0:	445a      	add	r2, fp
 800d0f2:	f8de 0000 	ldr.w	r0, [lr]
 800d0f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d100:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d104:	b292      	uxth	r2, r2
 800d106:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d10a:	45e1      	cmp	r9, ip
 800d10c:	f84e 2b04 	str.w	r2, [lr], #4
 800d110:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d114:	d2de      	bcs.n	800d0d4 <quorem+0x42>
 800d116:	9b00      	ldr	r3, [sp, #0]
 800d118:	58eb      	ldr	r3, [r5, r3]
 800d11a:	b92b      	cbnz	r3, 800d128 <quorem+0x96>
 800d11c:	9b01      	ldr	r3, [sp, #4]
 800d11e:	3b04      	subs	r3, #4
 800d120:	429d      	cmp	r5, r3
 800d122:	461a      	mov	r2, r3
 800d124:	d32f      	bcc.n	800d186 <quorem+0xf4>
 800d126:	613c      	str	r4, [r7, #16]
 800d128:	4638      	mov	r0, r7
 800d12a:	f001 f97b 	bl	800e424 <__mcmp>
 800d12e:	2800      	cmp	r0, #0
 800d130:	db25      	blt.n	800d17e <quorem+0xec>
 800d132:	4629      	mov	r1, r5
 800d134:	2000      	movs	r0, #0
 800d136:	f858 2b04 	ldr.w	r2, [r8], #4
 800d13a:	f8d1 c000 	ldr.w	ip, [r1]
 800d13e:	fa1f fe82 	uxth.w	lr, r2
 800d142:	fa1f f38c 	uxth.w	r3, ip
 800d146:	eba3 030e 	sub.w	r3, r3, lr
 800d14a:	4403      	add	r3, r0
 800d14c:	0c12      	lsrs	r2, r2, #16
 800d14e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d152:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d156:	b29b      	uxth	r3, r3
 800d158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d15c:	45c1      	cmp	r9, r8
 800d15e:	f841 3b04 	str.w	r3, [r1], #4
 800d162:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d166:	d2e6      	bcs.n	800d136 <quorem+0xa4>
 800d168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d16c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d170:	b922      	cbnz	r2, 800d17c <quorem+0xea>
 800d172:	3b04      	subs	r3, #4
 800d174:	429d      	cmp	r5, r3
 800d176:	461a      	mov	r2, r3
 800d178:	d30b      	bcc.n	800d192 <quorem+0x100>
 800d17a:	613c      	str	r4, [r7, #16]
 800d17c:	3601      	adds	r6, #1
 800d17e:	4630      	mov	r0, r6
 800d180:	b003      	add	sp, #12
 800d182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d186:	6812      	ldr	r2, [r2, #0]
 800d188:	3b04      	subs	r3, #4
 800d18a:	2a00      	cmp	r2, #0
 800d18c:	d1cb      	bne.n	800d126 <quorem+0x94>
 800d18e:	3c01      	subs	r4, #1
 800d190:	e7c6      	b.n	800d120 <quorem+0x8e>
 800d192:	6812      	ldr	r2, [r2, #0]
 800d194:	3b04      	subs	r3, #4
 800d196:	2a00      	cmp	r2, #0
 800d198:	d1ef      	bne.n	800d17a <quorem+0xe8>
 800d19a:	3c01      	subs	r4, #1
 800d19c:	e7ea      	b.n	800d174 <quorem+0xe2>
 800d19e:	2000      	movs	r0, #0
 800d1a0:	e7ee      	b.n	800d180 <quorem+0xee>
 800d1a2:	0000      	movs	r0, r0
 800d1a4:	0000      	movs	r0, r0
	...

0800d1a8 <_dtoa_r>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	69c7      	ldr	r7, [r0, #28]
 800d1ae:	b099      	sub	sp, #100	@ 0x64
 800d1b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d1b4:	ec55 4b10 	vmov	r4, r5, d0
 800d1b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d1ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800d1bc:	4683      	mov	fp, r0
 800d1be:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1c2:	b97f      	cbnz	r7, 800d1e4 <_dtoa_r+0x3c>
 800d1c4:	2010      	movs	r0, #16
 800d1c6:	f000 fdfd 	bl	800ddc4 <malloc>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800d1d0:	b920      	cbnz	r0, 800d1dc <_dtoa_r+0x34>
 800d1d2:	4ba7      	ldr	r3, [pc, #668]	@ (800d470 <_dtoa_r+0x2c8>)
 800d1d4:	21ef      	movs	r1, #239	@ 0xef
 800d1d6:	48a7      	ldr	r0, [pc, #668]	@ (800d474 <_dtoa_r+0x2cc>)
 800d1d8:	f001 fc5a 	bl	800ea90 <__assert_func>
 800d1dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d1e0:	6007      	str	r7, [r0, #0]
 800d1e2:	60c7      	str	r7, [r0, #12]
 800d1e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1e8:	6819      	ldr	r1, [r3, #0]
 800d1ea:	b159      	cbz	r1, 800d204 <_dtoa_r+0x5c>
 800d1ec:	685a      	ldr	r2, [r3, #4]
 800d1ee:	604a      	str	r2, [r1, #4]
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	4093      	lsls	r3, r2
 800d1f4:	608b      	str	r3, [r1, #8]
 800d1f6:	4658      	mov	r0, fp
 800d1f8:	f000 feda 	bl	800dfb0 <_Bfree>
 800d1fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d200:	2200      	movs	r2, #0
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	1e2b      	subs	r3, r5, #0
 800d206:	bfb9      	ittee	lt
 800d208:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d20c:	9303      	strlt	r3, [sp, #12]
 800d20e:	2300      	movge	r3, #0
 800d210:	6033      	strge	r3, [r6, #0]
 800d212:	9f03      	ldr	r7, [sp, #12]
 800d214:	4b98      	ldr	r3, [pc, #608]	@ (800d478 <_dtoa_r+0x2d0>)
 800d216:	bfbc      	itt	lt
 800d218:	2201      	movlt	r2, #1
 800d21a:	6032      	strlt	r2, [r6, #0]
 800d21c:	43bb      	bics	r3, r7
 800d21e:	d112      	bne.n	800d246 <_dtoa_r+0x9e>
 800d220:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d222:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d22c:	4323      	orrs	r3, r4
 800d22e:	f000 854d 	beq.w	800dccc <_dtoa_r+0xb24>
 800d232:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d234:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d48c <_dtoa_r+0x2e4>
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f000 854f 	beq.w	800dcdc <_dtoa_r+0xb34>
 800d23e:	f10a 0303 	add.w	r3, sl, #3
 800d242:	f000 bd49 	b.w	800dcd8 <_dtoa_r+0xb30>
 800d246:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d24a:	2200      	movs	r2, #0
 800d24c:	ec51 0b17 	vmov	r0, r1, d7
 800d250:	2300      	movs	r3, #0
 800d252:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d256:	f7f3 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800d25a:	4680      	mov	r8, r0
 800d25c:	b158      	cbz	r0, 800d276 <_dtoa_r+0xce>
 800d25e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d260:	2301      	movs	r3, #1
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d266:	b113      	cbz	r3, 800d26e <_dtoa_r+0xc6>
 800d268:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d26a:	4b84      	ldr	r3, [pc, #528]	@ (800d47c <_dtoa_r+0x2d4>)
 800d26c:	6013      	str	r3, [r2, #0]
 800d26e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d490 <_dtoa_r+0x2e8>
 800d272:	f000 bd33 	b.w	800dcdc <_dtoa_r+0xb34>
 800d276:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d27a:	aa16      	add	r2, sp, #88	@ 0x58
 800d27c:	a917      	add	r1, sp, #92	@ 0x5c
 800d27e:	4658      	mov	r0, fp
 800d280:	f001 f980 	bl	800e584 <__d2b>
 800d284:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d288:	4681      	mov	r9, r0
 800d28a:	2e00      	cmp	r6, #0
 800d28c:	d077      	beq.n	800d37e <_dtoa_r+0x1d6>
 800d28e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d290:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d29c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d2a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d2a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	4b74      	ldr	r3, [pc, #464]	@ (800d480 <_dtoa_r+0x2d8>)
 800d2ae:	f7f2 ffeb 	bl	8000288 <__aeabi_dsub>
 800d2b2:	a369      	add	r3, pc, #420	@ (adr r3, 800d458 <_dtoa_r+0x2b0>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	f7f3 f99e 	bl	80005f8 <__aeabi_dmul>
 800d2bc:	a368      	add	r3, pc, #416	@ (adr r3, 800d460 <_dtoa_r+0x2b8>)
 800d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c2:	f7f2 ffe3 	bl	800028c <__adddf3>
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	460d      	mov	r5, r1
 800d2cc:	f7f3 f92a 	bl	8000524 <__aeabi_i2d>
 800d2d0:	a365      	add	r3, pc, #404	@ (adr r3, 800d468 <_dtoa_r+0x2c0>)
 800d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d6:	f7f3 f98f 	bl	80005f8 <__aeabi_dmul>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	4620      	mov	r0, r4
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	f7f2 ffd3 	bl	800028c <__adddf3>
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	460d      	mov	r5, r1
 800d2ea:	f7f3 fc35 	bl	8000b58 <__aeabi_d2iz>
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	4607      	mov	r7, r0
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	f7f3 fbf0 	bl	8000adc <__aeabi_dcmplt>
 800d2fc:	b140      	cbz	r0, 800d310 <_dtoa_r+0x168>
 800d2fe:	4638      	mov	r0, r7
 800d300:	f7f3 f910 	bl	8000524 <__aeabi_i2d>
 800d304:	4622      	mov	r2, r4
 800d306:	462b      	mov	r3, r5
 800d308:	f7f3 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800d30c:	b900      	cbnz	r0, 800d310 <_dtoa_r+0x168>
 800d30e:	3f01      	subs	r7, #1
 800d310:	2f16      	cmp	r7, #22
 800d312:	d851      	bhi.n	800d3b8 <_dtoa_r+0x210>
 800d314:	4b5b      	ldr	r3, [pc, #364]	@ (800d484 <_dtoa_r+0x2dc>)
 800d316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d322:	f7f3 fbdb 	bl	8000adc <__aeabi_dcmplt>
 800d326:	2800      	cmp	r0, #0
 800d328:	d048      	beq.n	800d3bc <_dtoa_r+0x214>
 800d32a:	3f01      	subs	r7, #1
 800d32c:	2300      	movs	r3, #0
 800d32e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d330:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d332:	1b9b      	subs	r3, r3, r6
 800d334:	1e5a      	subs	r2, r3, #1
 800d336:	bf44      	itt	mi
 800d338:	f1c3 0801 	rsbmi	r8, r3, #1
 800d33c:	2300      	movmi	r3, #0
 800d33e:	9208      	str	r2, [sp, #32]
 800d340:	bf54      	ite	pl
 800d342:	f04f 0800 	movpl.w	r8, #0
 800d346:	9308      	strmi	r3, [sp, #32]
 800d348:	2f00      	cmp	r7, #0
 800d34a:	db39      	blt.n	800d3c0 <_dtoa_r+0x218>
 800d34c:	9b08      	ldr	r3, [sp, #32]
 800d34e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d350:	443b      	add	r3, r7
 800d352:	9308      	str	r3, [sp, #32]
 800d354:	2300      	movs	r3, #0
 800d356:	930a      	str	r3, [sp, #40]	@ 0x28
 800d358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d35a:	2b09      	cmp	r3, #9
 800d35c:	d864      	bhi.n	800d428 <_dtoa_r+0x280>
 800d35e:	2b05      	cmp	r3, #5
 800d360:	bfc4      	itt	gt
 800d362:	3b04      	subgt	r3, #4
 800d364:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d368:	f1a3 0302 	sub.w	r3, r3, #2
 800d36c:	bfcc      	ite	gt
 800d36e:	2400      	movgt	r4, #0
 800d370:	2401      	movle	r4, #1
 800d372:	2b03      	cmp	r3, #3
 800d374:	d863      	bhi.n	800d43e <_dtoa_r+0x296>
 800d376:	e8df f003 	tbb	[pc, r3]
 800d37a:	372a      	.short	0x372a
 800d37c:	5535      	.short	0x5535
 800d37e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d382:	441e      	add	r6, r3
 800d384:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d388:	2b20      	cmp	r3, #32
 800d38a:	bfc1      	itttt	gt
 800d38c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d390:	409f      	lslgt	r7, r3
 800d392:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d396:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d39a:	bfd6      	itet	le
 800d39c:	f1c3 0320 	rsble	r3, r3, #32
 800d3a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d3a4:	fa04 f003 	lslle.w	r0, r4, r3
 800d3a8:	f7f3 f8ac 	bl	8000504 <__aeabi_ui2d>
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d3b2:	3e01      	subs	r6, #1
 800d3b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d3b6:	e777      	b.n	800d2a8 <_dtoa_r+0x100>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e7b8      	b.n	800d32e <_dtoa_r+0x186>
 800d3bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d3be:	e7b7      	b.n	800d330 <_dtoa_r+0x188>
 800d3c0:	427b      	negs	r3, r7
 800d3c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	eba8 0807 	sub.w	r8, r8, r7
 800d3ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3cc:	e7c4      	b.n	800d358 <_dtoa_r+0x1b0>
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	dc35      	bgt.n	800d444 <_dtoa_r+0x29c>
 800d3d8:	2301      	movs	r3, #1
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	9307      	str	r3, [sp, #28]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3e2:	e00b      	b.n	800d3fc <_dtoa_r+0x254>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e7f3      	b.n	800d3d0 <_dtoa_r+0x228>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3ee:	18fb      	adds	r3, r7, r3
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	9307      	str	r3, [sp, #28]
 800d3f8:	bfb8      	it	lt
 800d3fa:	2301      	movlt	r3, #1
 800d3fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d400:	2100      	movs	r1, #0
 800d402:	2204      	movs	r2, #4
 800d404:	f102 0514 	add.w	r5, r2, #20
 800d408:	429d      	cmp	r5, r3
 800d40a:	d91f      	bls.n	800d44c <_dtoa_r+0x2a4>
 800d40c:	6041      	str	r1, [r0, #4]
 800d40e:	4658      	mov	r0, fp
 800d410:	f000 fd8e 	bl	800df30 <_Balloc>
 800d414:	4682      	mov	sl, r0
 800d416:	2800      	cmp	r0, #0
 800d418:	d13c      	bne.n	800d494 <_dtoa_r+0x2ec>
 800d41a:	4b1b      	ldr	r3, [pc, #108]	@ (800d488 <_dtoa_r+0x2e0>)
 800d41c:	4602      	mov	r2, r0
 800d41e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d422:	e6d8      	b.n	800d1d6 <_dtoa_r+0x2e>
 800d424:	2301      	movs	r3, #1
 800d426:	e7e0      	b.n	800d3ea <_dtoa_r+0x242>
 800d428:	2401      	movs	r4, #1
 800d42a:	2300      	movs	r3, #0
 800d42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d42e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d430:	f04f 33ff 	mov.w	r3, #4294967295
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	9307      	str	r3, [sp, #28]
 800d438:	2200      	movs	r2, #0
 800d43a:	2312      	movs	r3, #18
 800d43c:	e7d0      	b.n	800d3e0 <_dtoa_r+0x238>
 800d43e:	2301      	movs	r3, #1
 800d440:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d442:	e7f5      	b.n	800d430 <_dtoa_r+0x288>
 800d444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	9307      	str	r3, [sp, #28]
 800d44a:	e7d7      	b.n	800d3fc <_dtoa_r+0x254>
 800d44c:	3101      	adds	r1, #1
 800d44e:	0052      	lsls	r2, r2, #1
 800d450:	e7d8      	b.n	800d404 <_dtoa_r+0x25c>
 800d452:	bf00      	nop
 800d454:	f3af 8000 	nop.w
 800d458:	636f4361 	.word	0x636f4361
 800d45c:	3fd287a7 	.word	0x3fd287a7
 800d460:	8b60c8b3 	.word	0x8b60c8b3
 800d464:	3fc68a28 	.word	0x3fc68a28
 800d468:	509f79fb 	.word	0x509f79fb
 800d46c:	3fd34413 	.word	0x3fd34413
 800d470:	0800fc35 	.word	0x0800fc35
 800d474:	0800fc4c 	.word	0x0800fc4c
 800d478:	7ff00000 	.word	0x7ff00000
 800d47c:	0800fc05 	.word	0x0800fc05
 800d480:	3ff80000 	.word	0x3ff80000
 800d484:	0800fd48 	.word	0x0800fd48
 800d488:	0800fca4 	.word	0x0800fca4
 800d48c:	0800fc31 	.word	0x0800fc31
 800d490:	0800fc04 	.word	0x0800fc04
 800d494:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d498:	6018      	str	r0, [r3, #0]
 800d49a:	9b07      	ldr	r3, [sp, #28]
 800d49c:	2b0e      	cmp	r3, #14
 800d49e:	f200 80a4 	bhi.w	800d5ea <_dtoa_r+0x442>
 800d4a2:	2c00      	cmp	r4, #0
 800d4a4:	f000 80a1 	beq.w	800d5ea <_dtoa_r+0x442>
 800d4a8:	2f00      	cmp	r7, #0
 800d4aa:	dd33      	ble.n	800d514 <_dtoa_r+0x36c>
 800d4ac:	4bad      	ldr	r3, [pc, #692]	@ (800d764 <_dtoa_r+0x5bc>)
 800d4ae:	f007 020f 	and.w	r2, r7, #15
 800d4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4b6:	ed93 7b00 	vldr	d7, [r3]
 800d4ba:	05f8      	lsls	r0, r7, #23
 800d4bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d4c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d4c4:	d516      	bpl.n	800d4f4 <_dtoa_r+0x34c>
 800d4c6:	4ba8      	ldr	r3, [pc, #672]	@ (800d768 <_dtoa_r+0x5c0>)
 800d4c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4d0:	f7f3 f9bc 	bl	800084c <__aeabi_ddiv>
 800d4d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4d8:	f004 040f 	and.w	r4, r4, #15
 800d4dc:	2603      	movs	r6, #3
 800d4de:	4da2      	ldr	r5, [pc, #648]	@ (800d768 <_dtoa_r+0x5c0>)
 800d4e0:	b954      	cbnz	r4, 800d4f8 <_dtoa_r+0x350>
 800d4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ea:	f7f3 f9af 	bl	800084c <__aeabi_ddiv>
 800d4ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4f2:	e028      	b.n	800d546 <_dtoa_r+0x39e>
 800d4f4:	2602      	movs	r6, #2
 800d4f6:	e7f2      	b.n	800d4de <_dtoa_r+0x336>
 800d4f8:	07e1      	lsls	r1, r4, #31
 800d4fa:	d508      	bpl.n	800d50e <_dtoa_r+0x366>
 800d4fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d500:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d504:	f7f3 f878 	bl	80005f8 <__aeabi_dmul>
 800d508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d50c:	3601      	adds	r6, #1
 800d50e:	1064      	asrs	r4, r4, #1
 800d510:	3508      	adds	r5, #8
 800d512:	e7e5      	b.n	800d4e0 <_dtoa_r+0x338>
 800d514:	f000 80d2 	beq.w	800d6bc <_dtoa_r+0x514>
 800d518:	427c      	negs	r4, r7
 800d51a:	4b92      	ldr	r3, [pc, #584]	@ (800d764 <_dtoa_r+0x5bc>)
 800d51c:	4d92      	ldr	r5, [pc, #584]	@ (800d768 <_dtoa_r+0x5c0>)
 800d51e:	f004 020f 	and.w	r2, r4, #15
 800d522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d52e:	f7f3 f863 	bl	80005f8 <__aeabi_dmul>
 800d532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d536:	1124      	asrs	r4, r4, #4
 800d538:	2300      	movs	r3, #0
 800d53a:	2602      	movs	r6, #2
 800d53c:	2c00      	cmp	r4, #0
 800d53e:	f040 80b2 	bne.w	800d6a6 <_dtoa_r+0x4fe>
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1d3      	bne.n	800d4ee <_dtoa_r+0x346>
 800d546:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d548:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f000 80b7 	beq.w	800d6c0 <_dtoa_r+0x518>
 800d552:	4b86      	ldr	r3, [pc, #536]	@ (800d76c <_dtoa_r+0x5c4>)
 800d554:	2200      	movs	r2, #0
 800d556:	4620      	mov	r0, r4
 800d558:	4629      	mov	r1, r5
 800d55a:	f7f3 fabf 	bl	8000adc <__aeabi_dcmplt>
 800d55e:	2800      	cmp	r0, #0
 800d560:	f000 80ae 	beq.w	800d6c0 <_dtoa_r+0x518>
 800d564:	9b07      	ldr	r3, [sp, #28]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 80aa 	beq.w	800d6c0 <_dtoa_r+0x518>
 800d56c:	9b00      	ldr	r3, [sp, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	dd37      	ble.n	800d5e2 <_dtoa_r+0x43a>
 800d572:	1e7b      	subs	r3, r7, #1
 800d574:	9304      	str	r3, [sp, #16]
 800d576:	4620      	mov	r0, r4
 800d578:	4b7d      	ldr	r3, [pc, #500]	@ (800d770 <_dtoa_r+0x5c8>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	4629      	mov	r1, r5
 800d57e:	f7f3 f83b 	bl	80005f8 <__aeabi_dmul>
 800d582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d586:	9c00      	ldr	r4, [sp, #0]
 800d588:	3601      	adds	r6, #1
 800d58a:	4630      	mov	r0, r6
 800d58c:	f7f2 ffca 	bl	8000524 <__aeabi_i2d>
 800d590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d594:	f7f3 f830 	bl	80005f8 <__aeabi_dmul>
 800d598:	4b76      	ldr	r3, [pc, #472]	@ (800d774 <_dtoa_r+0x5cc>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	f7f2 fe76 	bl	800028c <__adddf3>
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d5a6:	2c00      	cmp	r4, #0
 800d5a8:	f040 808d 	bne.w	800d6c6 <_dtoa_r+0x51e>
 800d5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5b0:	4b71      	ldr	r3, [pc, #452]	@ (800d778 <_dtoa_r+0x5d0>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f7f2 fe68 	bl	8000288 <__aeabi_dsub>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5c0:	462a      	mov	r2, r5
 800d5c2:	4633      	mov	r3, r6
 800d5c4:	f7f3 faa8 	bl	8000b18 <__aeabi_dcmpgt>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	f040 828b 	bne.w	800dae4 <_dtoa_r+0x93c>
 800d5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5d2:	462a      	mov	r2, r5
 800d5d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d5d8:	f7f3 fa80 	bl	8000adc <__aeabi_dcmplt>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	f040 8128 	bne.w	800d832 <_dtoa_r+0x68a>
 800d5e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d5e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d5ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f2c0 815a 	blt.w	800d8a6 <_dtoa_r+0x6fe>
 800d5f2:	2f0e      	cmp	r7, #14
 800d5f4:	f300 8157 	bgt.w	800d8a6 <_dtoa_r+0x6fe>
 800d5f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d764 <_dtoa_r+0x5bc>)
 800d5fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5fe:	ed93 7b00 	vldr	d7, [r3]
 800d602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d604:	2b00      	cmp	r3, #0
 800d606:	ed8d 7b00 	vstr	d7, [sp]
 800d60a:	da03      	bge.n	800d614 <_dtoa_r+0x46c>
 800d60c:	9b07      	ldr	r3, [sp, #28]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f340 8101 	ble.w	800d816 <_dtoa_r+0x66e>
 800d614:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d618:	4656      	mov	r6, sl
 800d61a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d61e:	4620      	mov	r0, r4
 800d620:	4629      	mov	r1, r5
 800d622:	f7f3 f913 	bl	800084c <__aeabi_ddiv>
 800d626:	f7f3 fa97 	bl	8000b58 <__aeabi_d2iz>
 800d62a:	4680      	mov	r8, r0
 800d62c:	f7f2 ff7a 	bl	8000524 <__aeabi_i2d>
 800d630:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d634:	f7f2 ffe0 	bl	80005f8 <__aeabi_dmul>
 800d638:	4602      	mov	r2, r0
 800d63a:	460b      	mov	r3, r1
 800d63c:	4620      	mov	r0, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d644:	f7f2 fe20 	bl	8000288 <__aeabi_dsub>
 800d648:	f806 4b01 	strb.w	r4, [r6], #1
 800d64c:	9d07      	ldr	r5, [sp, #28]
 800d64e:	eba6 040a 	sub.w	r4, r6, sl
 800d652:	42a5      	cmp	r5, r4
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	f040 8117 	bne.w	800d88a <_dtoa_r+0x6e2>
 800d65c:	f7f2 fe16 	bl	800028c <__adddf3>
 800d660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d664:	4604      	mov	r4, r0
 800d666:	460d      	mov	r5, r1
 800d668:	f7f3 fa56 	bl	8000b18 <__aeabi_dcmpgt>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	f040 80f9 	bne.w	800d864 <_dtoa_r+0x6bc>
 800d672:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d676:	4620      	mov	r0, r4
 800d678:	4629      	mov	r1, r5
 800d67a:	f7f3 fa25 	bl	8000ac8 <__aeabi_dcmpeq>
 800d67e:	b118      	cbz	r0, 800d688 <_dtoa_r+0x4e0>
 800d680:	f018 0f01 	tst.w	r8, #1
 800d684:	f040 80ee 	bne.w	800d864 <_dtoa_r+0x6bc>
 800d688:	4649      	mov	r1, r9
 800d68a:	4658      	mov	r0, fp
 800d68c:	f000 fc90 	bl	800dfb0 <_Bfree>
 800d690:	2300      	movs	r3, #0
 800d692:	7033      	strb	r3, [r6, #0]
 800d694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d696:	3701      	adds	r7, #1
 800d698:	601f      	str	r7, [r3, #0]
 800d69a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f000 831d 	beq.w	800dcdc <_dtoa_r+0xb34>
 800d6a2:	601e      	str	r6, [r3, #0]
 800d6a4:	e31a      	b.n	800dcdc <_dtoa_r+0xb34>
 800d6a6:	07e2      	lsls	r2, r4, #31
 800d6a8:	d505      	bpl.n	800d6b6 <_dtoa_r+0x50e>
 800d6aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6ae:	f7f2 ffa3 	bl	80005f8 <__aeabi_dmul>
 800d6b2:	3601      	adds	r6, #1
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	1064      	asrs	r4, r4, #1
 800d6b8:	3508      	adds	r5, #8
 800d6ba:	e73f      	b.n	800d53c <_dtoa_r+0x394>
 800d6bc:	2602      	movs	r6, #2
 800d6be:	e742      	b.n	800d546 <_dtoa_r+0x39e>
 800d6c0:	9c07      	ldr	r4, [sp, #28]
 800d6c2:	9704      	str	r7, [sp, #16]
 800d6c4:	e761      	b.n	800d58a <_dtoa_r+0x3e2>
 800d6c6:	4b27      	ldr	r3, [pc, #156]	@ (800d764 <_dtoa_r+0x5bc>)
 800d6c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6d2:	4454      	add	r4, sl
 800d6d4:	2900      	cmp	r1, #0
 800d6d6:	d053      	beq.n	800d780 <_dtoa_r+0x5d8>
 800d6d8:	4928      	ldr	r1, [pc, #160]	@ (800d77c <_dtoa_r+0x5d4>)
 800d6da:	2000      	movs	r0, #0
 800d6dc:	f7f3 f8b6 	bl	800084c <__aeabi_ddiv>
 800d6e0:	4633      	mov	r3, r6
 800d6e2:	462a      	mov	r2, r5
 800d6e4:	f7f2 fdd0 	bl	8000288 <__aeabi_dsub>
 800d6e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6ec:	4656      	mov	r6, sl
 800d6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6f2:	f7f3 fa31 	bl	8000b58 <__aeabi_d2iz>
 800d6f6:	4605      	mov	r5, r0
 800d6f8:	f7f2 ff14 	bl	8000524 <__aeabi_i2d>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d704:	f7f2 fdc0 	bl	8000288 <__aeabi_dsub>
 800d708:	3530      	adds	r5, #48	@ 0x30
 800d70a:	4602      	mov	r2, r0
 800d70c:	460b      	mov	r3, r1
 800d70e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d712:	f806 5b01 	strb.w	r5, [r6], #1
 800d716:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d71a:	f7f3 f9df 	bl	8000adc <__aeabi_dcmplt>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d171      	bne.n	800d806 <_dtoa_r+0x65e>
 800d722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d726:	4911      	ldr	r1, [pc, #68]	@ (800d76c <_dtoa_r+0x5c4>)
 800d728:	2000      	movs	r0, #0
 800d72a:	f7f2 fdad 	bl	8000288 <__aeabi_dsub>
 800d72e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d732:	f7f3 f9d3 	bl	8000adc <__aeabi_dcmplt>
 800d736:	2800      	cmp	r0, #0
 800d738:	f040 8095 	bne.w	800d866 <_dtoa_r+0x6be>
 800d73c:	42a6      	cmp	r6, r4
 800d73e:	f43f af50 	beq.w	800d5e2 <_dtoa_r+0x43a>
 800d742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d746:	4b0a      	ldr	r3, [pc, #40]	@ (800d770 <_dtoa_r+0x5c8>)
 800d748:	2200      	movs	r2, #0
 800d74a:	f7f2 ff55 	bl	80005f8 <__aeabi_dmul>
 800d74e:	4b08      	ldr	r3, [pc, #32]	@ (800d770 <_dtoa_r+0x5c8>)
 800d750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d754:	2200      	movs	r2, #0
 800d756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d75a:	f7f2 ff4d 	bl	80005f8 <__aeabi_dmul>
 800d75e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d762:	e7c4      	b.n	800d6ee <_dtoa_r+0x546>
 800d764:	0800fd48 	.word	0x0800fd48
 800d768:	0800fd20 	.word	0x0800fd20
 800d76c:	3ff00000 	.word	0x3ff00000
 800d770:	40240000 	.word	0x40240000
 800d774:	401c0000 	.word	0x401c0000
 800d778:	40140000 	.word	0x40140000
 800d77c:	3fe00000 	.word	0x3fe00000
 800d780:	4631      	mov	r1, r6
 800d782:	4628      	mov	r0, r5
 800d784:	f7f2 ff38 	bl	80005f8 <__aeabi_dmul>
 800d788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d78c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d78e:	4656      	mov	r6, sl
 800d790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d794:	f7f3 f9e0 	bl	8000b58 <__aeabi_d2iz>
 800d798:	4605      	mov	r5, r0
 800d79a:	f7f2 fec3 	bl	8000524 <__aeabi_i2d>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7a6:	f7f2 fd6f 	bl	8000288 <__aeabi_dsub>
 800d7aa:	3530      	adds	r5, #48	@ 0x30
 800d7ac:	f806 5b01 	strb.w	r5, [r6], #1
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	42a6      	cmp	r6, r4
 800d7b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7ba:	f04f 0200 	mov.w	r2, #0
 800d7be:	d124      	bne.n	800d80a <_dtoa_r+0x662>
 800d7c0:	4bac      	ldr	r3, [pc, #688]	@ (800da74 <_dtoa_r+0x8cc>)
 800d7c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7c6:	f7f2 fd61 	bl	800028c <__adddf3>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7d2:	f7f3 f9a1 	bl	8000b18 <__aeabi_dcmpgt>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d145      	bne.n	800d866 <_dtoa_r+0x6be>
 800d7da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7de:	49a5      	ldr	r1, [pc, #660]	@ (800da74 <_dtoa_r+0x8cc>)
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	f7f2 fd51 	bl	8000288 <__aeabi_dsub>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ee:	f7f3 f975 	bl	8000adc <__aeabi_dcmplt>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	f43f aef5 	beq.w	800d5e2 <_dtoa_r+0x43a>
 800d7f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d7fa:	1e73      	subs	r3, r6, #1
 800d7fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d7fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d802:	2b30      	cmp	r3, #48	@ 0x30
 800d804:	d0f8      	beq.n	800d7f8 <_dtoa_r+0x650>
 800d806:	9f04      	ldr	r7, [sp, #16]
 800d808:	e73e      	b.n	800d688 <_dtoa_r+0x4e0>
 800d80a:	4b9b      	ldr	r3, [pc, #620]	@ (800da78 <_dtoa_r+0x8d0>)
 800d80c:	f7f2 fef4 	bl	80005f8 <__aeabi_dmul>
 800d810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d814:	e7bc      	b.n	800d790 <_dtoa_r+0x5e8>
 800d816:	d10c      	bne.n	800d832 <_dtoa_r+0x68a>
 800d818:	4b98      	ldr	r3, [pc, #608]	@ (800da7c <_dtoa_r+0x8d4>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d820:	f7f2 feea 	bl	80005f8 <__aeabi_dmul>
 800d824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d828:	f7f3 f96c 	bl	8000b04 <__aeabi_dcmpge>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	f000 8157 	beq.w	800dae0 <_dtoa_r+0x938>
 800d832:	2400      	movs	r4, #0
 800d834:	4625      	mov	r5, r4
 800d836:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d838:	43db      	mvns	r3, r3
 800d83a:	9304      	str	r3, [sp, #16]
 800d83c:	4656      	mov	r6, sl
 800d83e:	2700      	movs	r7, #0
 800d840:	4621      	mov	r1, r4
 800d842:	4658      	mov	r0, fp
 800d844:	f000 fbb4 	bl	800dfb0 <_Bfree>
 800d848:	2d00      	cmp	r5, #0
 800d84a:	d0dc      	beq.n	800d806 <_dtoa_r+0x65e>
 800d84c:	b12f      	cbz	r7, 800d85a <_dtoa_r+0x6b2>
 800d84e:	42af      	cmp	r7, r5
 800d850:	d003      	beq.n	800d85a <_dtoa_r+0x6b2>
 800d852:	4639      	mov	r1, r7
 800d854:	4658      	mov	r0, fp
 800d856:	f000 fbab 	bl	800dfb0 <_Bfree>
 800d85a:	4629      	mov	r1, r5
 800d85c:	4658      	mov	r0, fp
 800d85e:	f000 fba7 	bl	800dfb0 <_Bfree>
 800d862:	e7d0      	b.n	800d806 <_dtoa_r+0x65e>
 800d864:	9704      	str	r7, [sp, #16]
 800d866:	4633      	mov	r3, r6
 800d868:	461e      	mov	r6, r3
 800d86a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d86e:	2a39      	cmp	r2, #57	@ 0x39
 800d870:	d107      	bne.n	800d882 <_dtoa_r+0x6da>
 800d872:	459a      	cmp	sl, r3
 800d874:	d1f8      	bne.n	800d868 <_dtoa_r+0x6c0>
 800d876:	9a04      	ldr	r2, [sp, #16]
 800d878:	3201      	adds	r2, #1
 800d87a:	9204      	str	r2, [sp, #16]
 800d87c:	2230      	movs	r2, #48	@ 0x30
 800d87e:	f88a 2000 	strb.w	r2, [sl]
 800d882:	781a      	ldrb	r2, [r3, #0]
 800d884:	3201      	adds	r2, #1
 800d886:	701a      	strb	r2, [r3, #0]
 800d888:	e7bd      	b.n	800d806 <_dtoa_r+0x65e>
 800d88a:	4b7b      	ldr	r3, [pc, #492]	@ (800da78 <_dtoa_r+0x8d0>)
 800d88c:	2200      	movs	r2, #0
 800d88e:	f7f2 feb3 	bl	80005f8 <__aeabi_dmul>
 800d892:	2200      	movs	r2, #0
 800d894:	2300      	movs	r3, #0
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	f7f3 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	f43f aebb 	beq.w	800d61a <_dtoa_r+0x472>
 800d8a4:	e6f0      	b.n	800d688 <_dtoa_r+0x4e0>
 800d8a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d8a8:	2a00      	cmp	r2, #0
 800d8aa:	f000 80db 	beq.w	800da64 <_dtoa_r+0x8bc>
 800d8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8b0:	2a01      	cmp	r2, #1
 800d8b2:	f300 80bf 	bgt.w	800da34 <_dtoa_r+0x88c>
 800d8b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d8b8:	2a00      	cmp	r2, #0
 800d8ba:	f000 80b7 	beq.w	800da2c <_dtoa_r+0x884>
 800d8be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d8c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d8c4:	4646      	mov	r6, r8
 800d8c6:	9a08      	ldr	r2, [sp, #32]
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	441a      	add	r2, r3
 800d8cc:	4658      	mov	r0, fp
 800d8ce:	4498      	add	r8, r3
 800d8d0:	9208      	str	r2, [sp, #32]
 800d8d2:	f000 fc21 	bl	800e118 <__i2b>
 800d8d6:	4605      	mov	r5, r0
 800d8d8:	b15e      	cbz	r6, 800d8f2 <_dtoa_r+0x74a>
 800d8da:	9b08      	ldr	r3, [sp, #32]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	dd08      	ble.n	800d8f2 <_dtoa_r+0x74a>
 800d8e0:	42b3      	cmp	r3, r6
 800d8e2:	9a08      	ldr	r2, [sp, #32]
 800d8e4:	bfa8      	it	ge
 800d8e6:	4633      	movge	r3, r6
 800d8e8:	eba8 0803 	sub.w	r8, r8, r3
 800d8ec:	1af6      	subs	r6, r6, r3
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	9308      	str	r3, [sp, #32]
 800d8f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8f4:	b1f3      	cbz	r3, 800d934 <_dtoa_r+0x78c>
 800d8f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 80b7 	beq.w	800da6c <_dtoa_r+0x8c4>
 800d8fe:	b18c      	cbz	r4, 800d924 <_dtoa_r+0x77c>
 800d900:	4629      	mov	r1, r5
 800d902:	4622      	mov	r2, r4
 800d904:	4658      	mov	r0, fp
 800d906:	f000 fcc7 	bl	800e298 <__pow5mult>
 800d90a:	464a      	mov	r2, r9
 800d90c:	4601      	mov	r1, r0
 800d90e:	4605      	mov	r5, r0
 800d910:	4658      	mov	r0, fp
 800d912:	f000 fc17 	bl	800e144 <__multiply>
 800d916:	4649      	mov	r1, r9
 800d918:	9004      	str	r0, [sp, #16]
 800d91a:	4658      	mov	r0, fp
 800d91c:	f000 fb48 	bl	800dfb0 <_Bfree>
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	4699      	mov	r9, r3
 800d924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d926:	1b1a      	subs	r2, r3, r4
 800d928:	d004      	beq.n	800d934 <_dtoa_r+0x78c>
 800d92a:	4649      	mov	r1, r9
 800d92c:	4658      	mov	r0, fp
 800d92e:	f000 fcb3 	bl	800e298 <__pow5mult>
 800d932:	4681      	mov	r9, r0
 800d934:	2101      	movs	r1, #1
 800d936:	4658      	mov	r0, fp
 800d938:	f000 fbee 	bl	800e118 <__i2b>
 800d93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d93e:	4604      	mov	r4, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 81cf 	beq.w	800dce4 <_dtoa_r+0xb3c>
 800d946:	461a      	mov	r2, r3
 800d948:	4601      	mov	r1, r0
 800d94a:	4658      	mov	r0, fp
 800d94c:	f000 fca4 	bl	800e298 <__pow5mult>
 800d950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d952:	2b01      	cmp	r3, #1
 800d954:	4604      	mov	r4, r0
 800d956:	f300 8095 	bgt.w	800da84 <_dtoa_r+0x8dc>
 800d95a:	9b02      	ldr	r3, [sp, #8]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f040 8087 	bne.w	800da70 <_dtoa_r+0x8c8>
 800d962:	9b03      	ldr	r3, [sp, #12]
 800d964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f040 8089 	bne.w	800da80 <_dtoa_r+0x8d8>
 800d96e:	9b03      	ldr	r3, [sp, #12]
 800d970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d974:	0d1b      	lsrs	r3, r3, #20
 800d976:	051b      	lsls	r3, r3, #20
 800d978:	b12b      	cbz	r3, 800d986 <_dtoa_r+0x7de>
 800d97a:	9b08      	ldr	r3, [sp, #32]
 800d97c:	3301      	adds	r3, #1
 800d97e:	9308      	str	r3, [sp, #32]
 800d980:	f108 0801 	add.w	r8, r8, #1
 800d984:	2301      	movs	r3, #1
 800d986:	930a      	str	r3, [sp, #40]	@ 0x28
 800d988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f000 81b0 	beq.w	800dcf0 <_dtoa_r+0xb48>
 800d990:	6923      	ldr	r3, [r4, #16]
 800d992:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d996:	6918      	ldr	r0, [r3, #16]
 800d998:	f000 fb72 	bl	800e080 <__hi0bits>
 800d99c:	f1c0 0020 	rsb	r0, r0, #32
 800d9a0:	9b08      	ldr	r3, [sp, #32]
 800d9a2:	4418      	add	r0, r3
 800d9a4:	f010 001f 	ands.w	r0, r0, #31
 800d9a8:	d077      	beq.n	800da9a <_dtoa_r+0x8f2>
 800d9aa:	f1c0 0320 	rsb	r3, r0, #32
 800d9ae:	2b04      	cmp	r3, #4
 800d9b0:	dd6b      	ble.n	800da8a <_dtoa_r+0x8e2>
 800d9b2:	9b08      	ldr	r3, [sp, #32]
 800d9b4:	f1c0 001c 	rsb	r0, r0, #28
 800d9b8:	4403      	add	r3, r0
 800d9ba:	4480      	add	r8, r0
 800d9bc:	4406      	add	r6, r0
 800d9be:	9308      	str	r3, [sp, #32]
 800d9c0:	f1b8 0f00 	cmp.w	r8, #0
 800d9c4:	dd05      	ble.n	800d9d2 <_dtoa_r+0x82a>
 800d9c6:	4649      	mov	r1, r9
 800d9c8:	4642      	mov	r2, r8
 800d9ca:	4658      	mov	r0, fp
 800d9cc:	f000 fcbe 	bl	800e34c <__lshift>
 800d9d0:	4681      	mov	r9, r0
 800d9d2:	9b08      	ldr	r3, [sp, #32]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	dd05      	ble.n	800d9e4 <_dtoa_r+0x83c>
 800d9d8:	4621      	mov	r1, r4
 800d9da:	461a      	mov	r2, r3
 800d9dc:	4658      	mov	r0, fp
 800d9de:	f000 fcb5 	bl	800e34c <__lshift>
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d059      	beq.n	800da9e <_dtoa_r+0x8f6>
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	4648      	mov	r0, r9
 800d9ee:	f000 fd19 	bl	800e424 <__mcmp>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	da53      	bge.n	800da9e <_dtoa_r+0x8f6>
 800d9f6:	1e7b      	subs	r3, r7, #1
 800d9f8:	9304      	str	r3, [sp, #16]
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	220a      	movs	r2, #10
 800da00:	4658      	mov	r0, fp
 800da02:	f000 faf7 	bl	800dff4 <__multadd>
 800da06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da08:	4681      	mov	r9, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 8172 	beq.w	800dcf4 <_dtoa_r+0xb4c>
 800da10:	2300      	movs	r3, #0
 800da12:	4629      	mov	r1, r5
 800da14:	220a      	movs	r2, #10
 800da16:	4658      	mov	r0, fp
 800da18:	f000 faec 	bl	800dff4 <__multadd>
 800da1c:	9b00      	ldr	r3, [sp, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	4605      	mov	r5, r0
 800da22:	dc67      	bgt.n	800daf4 <_dtoa_r+0x94c>
 800da24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da26:	2b02      	cmp	r3, #2
 800da28:	dc41      	bgt.n	800daae <_dtoa_r+0x906>
 800da2a:	e063      	b.n	800daf4 <_dtoa_r+0x94c>
 800da2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800da2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800da32:	e746      	b.n	800d8c2 <_dtoa_r+0x71a>
 800da34:	9b07      	ldr	r3, [sp, #28]
 800da36:	1e5c      	subs	r4, r3, #1
 800da38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	bfbf      	itttt	lt
 800da3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800da40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800da42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800da44:	1ae3      	sublt	r3, r4, r3
 800da46:	bfb4      	ite	lt
 800da48:	18d2      	addlt	r2, r2, r3
 800da4a:	1b1c      	subge	r4, r3, r4
 800da4c:	9b07      	ldr	r3, [sp, #28]
 800da4e:	bfbc      	itt	lt
 800da50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800da52:	2400      	movlt	r4, #0
 800da54:	2b00      	cmp	r3, #0
 800da56:	bfb5      	itete	lt
 800da58:	eba8 0603 	sublt.w	r6, r8, r3
 800da5c:	9b07      	ldrge	r3, [sp, #28]
 800da5e:	2300      	movlt	r3, #0
 800da60:	4646      	movge	r6, r8
 800da62:	e730      	b.n	800d8c6 <_dtoa_r+0x71e>
 800da64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800da68:	4646      	mov	r6, r8
 800da6a:	e735      	b.n	800d8d8 <_dtoa_r+0x730>
 800da6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da6e:	e75c      	b.n	800d92a <_dtoa_r+0x782>
 800da70:	2300      	movs	r3, #0
 800da72:	e788      	b.n	800d986 <_dtoa_r+0x7de>
 800da74:	3fe00000 	.word	0x3fe00000
 800da78:	40240000 	.word	0x40240000
 800da7c:	40140000 	.word	0x40140000
 800da80:	9b02      	ldr	r3, [sp, #8]
 800da82:	e780      	b.n	800d986 <_dtoa_r+0x7de>
 800da84:	2300      	movs	r3, #0
 800da86:	930a      	str	r3, [sp, #40]	@ 0x28
 800da88:	e782      	b.n	800d990 <_dtoa_r+0x7e8>
 800da8a:	d099      	beq.n	800d9c0 <_dtoa_r+0x818>
 800da8c:	9a08      	ldr	r2, [sp, #32]
 800da8e:	331c      	adds	r3, #28
 800da90:	441a      	add	r2, r3
 800da92:	4498      	add	r8, r3
 800da94:	441e      	add	r6, r3
 800da96:	9208      	str	r2, [sp, #32]
 800da98:	e792      	b.n	800d9c0 <_dtoa_r+0x818>
 800da9a:	4603      	mov	r3, r0
 800da9c:	e7f6      	b.n	800da8c <_dtoa_r+0x8e4>
 800da9e:	9b07      	ldr	r3, [sp, #28]
 800daa0:	9704      	str	r7, [sp, #16]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	dc20      	bgt.n	800dae8 <_dtoa_r+0x940>
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daaa:	2b02      	cmp	r3, #2
 800daac:	dd1e      	ble.n	800daec <_dtoa_r+0x944>
 800daae:	9b00      	ldr	r3, [sp, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f47f aec0 	bne.w	800d836 <_dtoa_r+0x68e>
 800dab6:	4621      	mov	r1, r4
 800dab8:	2205      	movs	r2, #5
 800daba:	4658      	mov	r0, fp
 800dabc:	f000 fa9a 	bl	800dff4 <__multadd>
 800dac0:	4601      	mov	r1, r0
 800dac2:	4604      	mov	r4, r0
 800dac4:	4648      	mov	r0, r9
 800dac6:	f000 fcad 	bl	800e424 <__mcmp>
 800daca:	2800      	cmp	r0, #0
 800dacc:	f77f aeb3 	ble.w	800d836 <_dtoa_r+0x68e>
 800dad0:	4656      	mov	r6, sl
 800dad2:	2331      	movs	r3, #49	@ 0x31
 800dad4:	f806 3b01 	strb.w	r3, [r6], #1
 800dad8:	9b04      	ldr	r3, [sp, #16]
 800dada:	3301      	adds	r3, #1
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	e6ae      	b.n	800d83e <_dtoa_r+0x696>
 800dae0:	9c07      	ldr	r4, [sp, #28]
 800dae2:	9704      	str	r7, [sp, #16]
 800dae4:	4625      	mov	r5, r4
 800dae6:	e7f3      	b.n	800dad0 <_dtoa_r+0x928>
 800dae8:	9b07      	ldr	r3, [sp, #28]
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f000 8104 	beq.w	800dcfc <_dtoa_r+0xb54>
 800daf4:	2e00      	cmp	r6, #0
 800daf6:	dd05      	ble.n	800db04 <_dtoa_r+0x95c>
 800daf8:	4629      	mov	r1, r5
 800dafa:	4632      	mov	r2, r6
 800dafc:	4658      	mov	r0, fp
 800dafe:	f000 fc25 	bl	800e34c <__lshift>
 800db02:	4605      	mov	r5, r0
 800db04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db06:	2b00      	cmp	r3, #0
 800db08:	d05a      	beq.n	800dbc0 <_dtoa_r+0xa18>
 800db0a:	6869      	ldr	r1, [r5, #4]
 800db0c:	4658      	mov	r0, fp
 800db0e:	f000 fa0f 	bl	800df30 <_Balloc>
 800db12:	4606      	mov	r6, r0
 800db14:	b928      	cbnz	r0, 800db22 <_dtoa_r+0x97a>
 800db16:	4b84      	ldr	r3, [pc, #528]	@ (800dd28 <_dtoa_r+0xb80>)
 800db18:	4602      	mov	r2, r0
 800db1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db1e:	f7ff bb5a 	b.w	800d1d6 <_dtoa_r+0x2e>
 800db22:	692a      	ldr	r2, [r5, #16]
 800db24:	3202      	adds	r2, #2
 800db26:	0092      	lsls	r2, r2, #2
 800db28:	f105 010c 	add.w	r1, r5, #12
 800db2c:	300c      	adds	r0, #12
 800db2e:	f7ff faa2 	bl	800d076 <memcpy>
 800db32:	2201      	movs	r2, #1
 800db34:	4631      	mov	r1, r6
 800db36:	4658      	mov	r0, fp
 800db38:	f000 fc08 	bl	800e34c <__lshift>
 800db3c:	f10a 0301 	add.w	r3, sl, #1
 800db40:	9307      	str	r3, [sp, #28]
 800db42:	9b00      	ldr	r3, [sp, #0]
 800db44:	4453      	add	r3, sl
 800db46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db48:	9b02      	ldr	r3, [sp, #8]
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	462f      	mov	r7, r5
 800db50:	930a      	str	r3, [sp, #40]	@ 0x28
 800db52:	4605      	mov	r5, r0
 800db54:	9b07      	ldr	r3, [sp, #28]
 800db56:	4621      	mov	r1, r4
 800db58:	3b01      	subs	r3, #1
 800db5a:	4648      	mov	r0, r9
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	f7ff fa98 	bl	800d092 <quorem>
 800db62:	4639      	mov	r1, r7
 800db64:	9002      	str	r0, [sp, #8]
 800db66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800db6a:	4648      	mov	r0, r9
 800db6c:	f000 fc5a 	bl	800e424 <__mcmp>
 800db70:	462a      	mov	r2, r5
 800db72:	9008      	str	r0, [sp, #32]
 800db74:	4621      	mov	r1, r4
 800db76:	4658      	mov	r0, fp
 800db78:	f000 fc70 	bl	800e45c <__mdiff>
 800db7c:	68c2      	ldr	r2, [r0, #12]
 800db7e:	4606      	mov	r6, r0
 800db80:	bb02      	cbnz	r2, 800dbc4 <_dtoa_r+0xa1c>
 800db82:	4601      	mov	r1, r0
 800db84:	4648      	mov	r0, r9
 800db86:	f000 fc4d 	bl	800e424 <__mcmp>
 800db8a:	4602      	mov	r2, r0
 800db8c:	4631      	mov	r1, r6
 800db8e:	4658      	mov	r0, fp
 800db90:	920e      	str	r2, [sp, #56]	@ 0x38
 800db92:	f000 fa0d 	bl	800dfb0 <_Bfree>
 800db96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db9a:	9e07      	ldr	r6, [sp, #28]
 800db9c:	ea43 0102 	orr.w	r1, r3, r2
 800dba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba2:	4319      	orrs	r1, r3
 800dba4:	d110      	bne.n	800dbc8 <_dtoa_r+0xa20>
 800dba6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbaa:	d029      	beq.n	800dc00 <_dtoa_r+0xa58>
 800dbac:	9b08      	ldr	r3, [sp, #32]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	dd02      	ble.n	800dbb8 <_dtoa_r+0xa10>
 800dbb2:	9b02      	ldr	r3, [sp, #8]
 800dbb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dbb8:	9b00      	ldr	r3, [sp, #0]
 800dbba:	f883 8000 	strb.w	r8, [r3]
 800dbbe:	e63f      	b.n	800d840 <_dtoa_r+0x698>
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	e7bb      	b.n	800db3c <_dtoa_r+0x994>
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	e7e1      	b.n	800db8c <_dtoa_r+0x9e4>
 800dbc8:	9b08      	ldr	r3, [sp, #32]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	db04      	blt.n	800dbd8 <_dtoa_r+0xa30>
 800dbce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbd0:	430b      	orrs	r3, r1
 800dbd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dbd4:	430b      	orrs	r3, r1
 800dbd6:	d120      	bne.n	800dc1a <_dtoa_r+0xa72>
 800dbd8:	2a00      	cmp	r2, #0
 800dbda:	dded      	ble.n	800dbb8 <_dtoa_r+0xa10>
 800dbdc:	4649      	mov	r1, r9
 800dbde:	2201      	movs	r2, #1
 800dbe0:	4658      	mov	r0, fp
 800dbe2:	f000 fbb3 	bl	800e34c <__lshift>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4681      	mov	r9, r0
 800dbea:	f000 fc1b 	bl	800e424 <__mcmp>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	dc03      	bgt.n	800dbfa <_dtoa_r+0xa52>
 800dbf2:	d1e1      	bne.n	800dbb8 <_dtoa_r+0xa10>
 800dbf4:	f018 0f01 	tst.w	r8, #1
 800dbf8:	d0de      	beq.n	800dbb8 <_dtoa_r+0xa10>
 800dbfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbfe:	d1d8      	bne.n	800dbb2 <_dtoa_r+0xa0a>
 800dc00:	9a00      	ldr	r2, [sp, #0]
 800dc02:	2339      	movs	r3, #57	@ 0x39
 800dc04:	7013      	strb	r3, [r2, #0]
 800dc06:	4633      	mov	r3, r6
 800dc08:	461e      	mov	r6, r3
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc10:	2a39      	cmp	r2, #57	@ 0x39
 800dc12:	d052      	beq.n	800dcba <_dtoa_r+0xb12>
 800dc14:	3201      	adds	r2, #1
 800dc16:	701a      	strb	r2, [r3, #0]
 800dc18:	e612      	b.n	800d840 <_dtoa_r+0x698>
 800dc1a:	2a00      	cmp	r2, #0
 800dc1c:	dd07      	ble.n	800dc2e <_dtoa_r+0xa86>
 800dc1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc22:	d0ed      	beq.n	800dc00 <_dtoa_r+0xa58>
 800dc24:	9a00      	ldr	r2, [sp, #0]
 800dc26:	f108 0301 	add.w	r3, r8, #1
 800dc2a:	7013      	strb	r3, [r2, #0]
 800dc2c:	e608      	b.n	800d840 <_dtoa_r+0x698>
 800dc2e:	9b07      	ldr	r3, [sp, #28]
 800dc30:	9a07      	ldr	r2, [sp, #28]
 800dc32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dc36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d028      	beq.n	800dc8e <_dtoa_r+0xae6>
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	2300      	movs	r3, #0
 800dc40:	220a      	movs	r2, #10
 800dc42:	4658      	mov	r0, fp
 800dc44:	f000 f9d6 	bl	800dff4 <__multadd>
 800dc48:	42af      	cmp	r7, r5
 800dc4a:	4681      	mov	r9, r0
 800dc4c:	f04f 0300 	mov.w	r3, #0
 800dc50:	f04f 020a 	mov.w	r2, #10
 800dc54:	4639      	mov	r1, r7
 800dc56:	4658      	mov	r0, fp
 800dc58:	d107      	bne.n	800dc6a <_dtoa_r+0xac2>
 800dc5a:	f000 f9cb 	bl	800dff4 <__multadd>
 800dc5e:	4607      	mov	r7, r0
 800dc60:	4605      	mov	r5, r0
 800dc62:	9b07      	ldr	r3, [sp, #28]
 800dc64:	3301      	adds	r3, #1
 800dc66:	9307      	str	r3, [sp, #28]
 800dc68:	e774      	b.n	800db54 <_dtoa_r+0x9ac>
 800dc6a:	f000 f9c3 	bl	800dff4 <__multadd>
 800dc6e:	4629      	mov	r1, r5
 800dc70:	4607      	mov	r7, r0
 800dc72:	2300      	movs	r3, #0
 800dc74:	220a      	movs	r2, #10
 800dc76:	4658      	mov	r0, fp
 800dc78:	f000 f9bc 	bl	800dff4 <__multadd>
 800dc7c:	4605      	mov	r5, r0
 800dc7e:	e7f0      	b.n	800dc62 <_dtoa_r+0xaba>
 800dc80:	9b00      	ldr	r3, [sp, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	bfcc      	ite	gt
 800dc86:	461e      	movgt	r6, r3
 800dc88:	2601      	movle	r6, #1
 800dc8a:	4456      	add	r6, sl
 800dc8c:	2700      	movs	r7, #0
 800dc8e:	4649      	mov	r1, r9
 800dc90:	2201      	movs	r2, #1
 800dc92:	4658      	mov	r0, fp
 800dc94:	f000 fb5a 	bl	800e34c <__lshift>
 800dc98:	4621      	mov	r1, r4
 800dc9a:	4681      	mov	r9, r0
 800dc9c:	f000 fbc2 	bl	800e424 <__mcmp>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	dcb0      	bgt.n	800dc06 <_dtoa_r+0xa5e>
 800dca4:	d102      	bne.n	800dcac <_dtoa_r+0xb04>
 800dca6:	f018 0f01 	tst.w	r8, #1
 800dcaa:	d1ac      	bne.n	800dc06 <_dtoa_r+0xa5e>
 800dcac:	4633      	mov	r3, r6
 800dcae:	461e      	mov	r6, r3
 800dcb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcb4:	2a30      	cmp	r2, #48	@ 0x30
 800dcb6:	d0fa      	beq.n	800dcae <_dtoa_r+0xb06>
 800dcb8:	e5c2      	b.n	800d840 <_dtoa_r+0x698>
 800dcba:	459a      	cmp	sl, r3
 800dcbc:	d1a4      	bne.n	800dc08 <_dtoa_r+0xa60>
 800dcbe:	9b04      	ldr	r3, [sp, #16]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	9304      	str	r3, [sp, #16]
 800dcc4:	2331      	movs	r3, #49	@ 0x31
 800dcc6:	f88a 3000 	strb.w	r3, [sl]
 800dcca:	e5b9      	b.n	800d840 <_dtoa_r+0x698>
 800dccc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dd2c <_dtoa_r+0xb84>
 800dcd2:	b11b      	cbz	r3, 800dcdc <_dtoa_r+0xb34>
 800dcd4:	f10a 0308 	add.w	r3, sl, #8
 800dcd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dcda:	6013      	str	r3, [r2, #0]
 800dcdc:	4650      	mov	r0, sl
 800dcde:	b019      	add	sp, #100	@ 0x64
 800dce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	f77f ae37 	ble.w	800d95a <_dtoa_r+0x7b2>
 800dcec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcee:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcf0:	2001      	movs	r0, #1
 800dcf2:	e655      	b.n	800d9a0 <_dtoa_r+0x7f8>
 800dcf4:	9b00      	ldr	r3, [sp, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f77f aed6 	ble.w	800daa8 <_dtoa_r+0x900>
 800dcfc:	4656      	mov	r6, sl
 800dcfe:	4621      	mov	r1, r4
 800dd00:	4648      	mov	r0, r9
 800dd02:	f7ff f9c6 	bl	800d092 <quorem>
 800dd06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd0a:	f806 8b01 	strb.w	r8, [r6], #1
 800dd0e:	9b00      	ldr	r3, [sp, #0]
 800dd10:	eba6 020a 	sub.w	r2, r6, sl
 800dd14:	4293      	cmp	r3, r2
 800dd16:	ddb3      	ble.n	800dc80 <_dtoa_r+0xad8>
 800dd18:	4649      	mov	r1, r9
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	220a      	movs	r2, #10
 800dd1e:	4658      	mov	r0, fp
 800dd20:	f000 f968 	bl	800dff4 <__multadd>
 800dd24:	4681      	mov	r9, r0
 800dd26:	e7ea      	b.n	800dcfe <_dtoa_r+0xb56>
 800dd28:	0800fca4 	.word	0x0800fca4
 800dd2c:	0800fc28 	.word	0x0800fc28

0800dd30 <_free_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4605      	mov	r5, r0
 800dd34:	2900      	cmp	r1, #0
 800dd36:	d041      	beq.n	800ddbc <_free_r+0x8c>
 800dd38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd3c:	1f0c      	subs	r4, r1, #4
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	bfb8      	it	lt
 800dd42:	18e4      	addlt	r4, r4, r3
 800dd44:	f000 f8e8 	bl	800df18 <__malloc_lock>
 800dd48:	4a1d      	ldr	r2, [pc, #116]	@ (800ddc0 <_free_r+0x90>)
 800dd4a:	6813      	ldr	r3, [r2, #0]
 800dd4c:	b933      	cbnz	r3, 800dd5c <_free_r+0x2c>
 800dd4e:	6063      	str	r3, [r4, #4]
 800dd50:	6014      	str	r4, [r2, #0]
 800dd52:	4628      	mov	r0, r5
 800dd54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd58:	f000 b8e4 	b.w	800df24 <__malloc_unlock>
 800dd5c:	42a3      	cmp	r3, r4
 800dd5e:	d908      	bls.n	800dd72 <_free_r+0x42>
 800dd60:	6820      	ldr	r0, [r4, #0]
 800dd62:	1821      	adds	r1, r4, r0
 800dd64:	428b      	cmp	r3, r1
 800dd66:	bf01      	itttt	eq
 800dd68:	6819      	ldreq	r1, [r3, #0]
 800dd6a:	685b      	ldreq	r3, [r3, #4]
 800dd6c:	1809      	addeq	r1, r1, r0
 800dd6e:	6021      	streq	r1, [r4, #0]
 800dd70:	e7ed      	b.n	800dd4e <_free_r+0x1e>
 800dd72:	461a      	mov	r2, r3
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	b10b      	cbz	r3, 800dd7c <_free_r+0x4c>
 800dd78:	42a3      	cmp	r3, r4
 800dd7a:	d9fa      	bls.n	800dd72 <_free_r+0x42>
 800dd7c:	6811      	ldr	r1, [r2, #0]
 800dd7e:	1850      	adds	r0, r2, r1
 800dd80:	42a0      	cmp	r0, r4
 800dd82:	d10b      	bne.n	800dd9c <_free_r+0x6c>
 800dd84:	6820      	ldr	r0, [r4, #0]
 800dd86:	4401      	add	r1, r0
 800dd88:	1850      	adds	r0, r2, r1
 800dd8a:	4283      	cmp	r3, r0
 800dd8c:	6011      	str	r1, [r2, #0]
 800dd8e:	d1e0      	bne.n	800dd52 <_free_r+0x22>
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	6053      	str	r3, [r2, #4]
 800dd96:	4408      	add	r0, r1
 800dd98:	6010      	str	r0, [r2, #0]
 800dd9a:	e7da      	b.n	800dd52 <_free_r+0x22>
 800dd9c:	d902      	bls.n	800dda4 <_free_r+0x74>
 800dd9e:	230c      	movs	r3, #12
 800dda0:	602b      	str	r3, [r5, #0]
 800dda2:	e7d6      	b.n	800dd52 <_free_r+0x22>
 800dda4:	6820      	ldr	r0, [r4, #0]
 800dda6:	1821      	adds	r1, r4, r0
 800dda8:	428b      	cmp	r3, r1
 800ddaa:	bf04      	itt	eq
 800ddac:	6819      	ldreq	r1, [r3, #0]
 800ddae:	685b      	ldreq	r3, [r3, #4]
 800ddb0:	6063      	str	r3, [r4, #4]
 800ddb2:	bf04      	itt	eq
 800ddb4:	1809      	addeq	r1, r1, r0
 800ddb6:	6021      	streq	r1, [r4, #0]
 800ddb8:	6054      	str	r4, [r2, #4]
 800ddba:	e7ca      	b.n	800dd52 <_free_r+0x22>
 800ddbc:	bd38      	pop	{r3, r4, r5, pc}
 800ddbe:	bf00      	nop
 800ddc0:	20004fd0 	.word	0x20004fd0

0800ddc4 <malloc>:
 800ddc4:	4b02      	ldr	r3, [pc, #8]	@ (800ddd0 <malloc+0xc>)
 800ddc6:	4601      	mov	r1, r0
 800ddc8:	6818      	ldr	r0, [r3, #0]
 800ddca:	f000 b825 	b.w	800de18 <_malloc_r>
 800ddce:	bf00      	nop
 800ddd0:	2000001c 	.word	0x2000001c

0800ddd4 <sbrk_aligned>:
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	4e0f      	ldr	r6, [pc, #60]	@ (800de14 <sbrk_aligned+0x40>)
 800ddd8:	460c      	mov	r4, r1
 800ddda:	6831      	ldr	r1, [r6, #0]
 800dddc:	4605      	mov	r5, r0
 800ddde:	b911      	cbnz	r1, 800dde6 <sbrk_aligned+0x12>
 800dde0:	f000 fe46 	bl	800ea70 <_sbrk_r>
 800dde4:	6030      	str	r0, [r6, #0]
 800dde6:	4621      	mov	r1, r4
 800dde8:	4628      	mov	r0, r5
 800ddea:	f000 fe41 	bl	800ea70 <_sbrk_r>
 800ddee:	1c43      	adds	r3, r0, #1
 800ddf0:	d103      	bne.n	800ddfa <sbrk_aligned+0x26>
 800ddf2:	f04f 34ff 	mov.w	r4, #4294967295
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	bd70      	pop	{r4, r5, r6, pc}
 800ddfa:	1cc4      	adds	r4, r0, #3
 800ddfc:	f024 0403 	bic.w	r4, r4, #3
 800de00:	42a0      	cmp	r0, r4
 800de02:	d0f8      	beq.n	800ddf6 <sbrk_aligned+0x22>
 800de04:	1a21      	subs	r1, r4, r0
 800de06:	4628      	mov	r0, r5
 800de08:	f000 fe32 	bl	800ea70 <_sbrk_r>
 800de0c:	3001      	adds	r0, #1
 800de0e:	d1f2      	bne.n	800ddf6 <sbrk_aligned+0x22>
 800de10:	e7ef      	b.n	800ddf2 <sbrk_aligned+0x1e>
 800de12:	bf00      	nop
 800de14:	20004fcc 	.word	0x20004fcc

0800de18 <_malloc_r>:
 800de18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de1c:	1ccd      	adds	r5, r1, #3
 800de1e:	f025 0503 	bic.w	r5, r5, #3
 800de22:	3508      	adds	r5, #8
 800de24:	2d0c      	cmp	r5, #12
 800de26:	bf38      	it	cc
 800de28:	250c      	movcc	r5, #12
 800de2a:	2d00      	cmp	r5, #0
 800de2c:	4606      	mov	r6, r0
 800de2e:	db01      	blt.n	800de34 <_malloc_r+0x1c>
 800de30:	42a9      	cmp	r1, r5
 800de32:	d904      	bls.n	800de3e <_malloc_r+0x26>
 800de34:	230c      	movs	r3, #12
 800de36:	6033      	str	r3, [r6, #0]
 800de38:	2000      	movs	r0, #0
 800de3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df14 <_malloc_r+0xfc>
 800de42:	f000 f869 	bl	800df18 <__malloc_lock>
 800de46:	f8d8 3000 	ldr.w	r3, [r8]
 800de4a:	461c      	mov	r4, r3
 800de4c:	bb44      	cbnz	r4, 800dea0 <_malloc_r+0x88>
 800de4e:	4629      	mov	r1, r5
 800de50:	4630      	mov	r0, r6
 800de52:	f7ff ffbf 	bl	800ddd4 <sbrk_aligned>
 800de56:	1c43      	adds	r3, r0, #1
 800de58:	4604      	mov	r4, r0
 800de5a:	d158      	bne.n	800df0e <_malloc_r+0xf6>
 800de5c:	f8d8 4000 	ldr.w	r4, [r8]
 800de60:	4627      	mov	r7, r4
 800de62:	2f00      	cmp	r7, #0
 800de64:	d143      	bne.n	800deee <_malloc_r+0xd6>
 800de66:	2c00      	cmp	r4, #0
 800de68:	d04b      	beq.n	800df02 <_malloc_r+0xea>
 800de6a:	6823      	ldr	r3, [r4, #0]
 800de6c:	4639      	mov	r1, r7
 800de6e:	4630      	mov	r0, r6
 800de70:	eb04 0903 	add.w	r9, r4, r3
 800de74:	f000 fdfc 	bl	800ea70 <_sbrk_r>
 800de78:	4581      	cmp	r9, r0
 800de7a:	d142      	bne.n	800df02 <_malloc_r+0xea>
 800de7c:	6821      	ldr	r1, [r4, #0]
 800de7e:	1a6d      	subs	r5, r5, r1
 800de80:	4629      	mov	r1, r5
 800de82:	4630      	mov	r0, r6
 800de84:	f7ff ffa6 	bl	800ddd4 <sbrk_aligned>
 800de88:	3001      	adds	r0, #1
 800de8a:	d03a      	beq.n	800df02 <_malloc_r+0xea>
 800de8c:	6823      	ldr	r3, [r4, #0]
 800de8e:	442b      	add	r3, r5
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	f8d8 3000 	ldr.w	r3, [r8]
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	bb62      	cbnz	r2, 800def4 <_malloc_r+0xdc>
 800de9a:	f8c8 7000 	str.w	r7, [r8]
 800de9e:	e00f      	b.n	800dec0 <_malloc_r+0xa8>
 800dea0:	6822      	ldr	r2, [r4, #0]
 800dea2:	1b52      	subs	r2, r2, r5
 800dea4:	d420      	bmi.n	800dee8 <_malloc_r+0xd0>
 800dea6:	2a0b      	cmp	r2, #11
 800dea8:	d917      	bls.n	800deda <_malloc_r+0xc2>
 800deaa:	1961      	adds	r1, r4, r5
 800deac:	42a3      	cmp	r3, r4
 800deae:	6025      	str	r5, [r4, #0]
 800deb0:	bf18      	it	ne
 800deb2:	6059      	strne	r1, [r3, #4]
 800deb4:	6863      	ldr	r3, [r4, #4]
 800deb6:	bf08      	it	eq
 800deb8:	f8c8 1000 	streq.w	r1, [r8]
 800debc:	5162      	str	r2, [r4, r5]
 800debe:	604b      	str	r3, [r1, #4]
 800dec0:	4630      	mov	r0, r6
 800dec2:	f000 f82f 	bl	800df24 <__malloc_unlock>
 800dec6:	f104 000b 	add.w	r0, r4, #11
 800deca:	1d23      	adds	r3, r4, #4
 800decc:	f020 0007 	bic.w	r0, r0, #7
 800ded0:	1ac2      	subs	r2, r0, r3
 800ded2:	bf1c      	itt	ne
 800ded4:	1a1b      	subne	r3, r3, r0
 800ded6:	50a3      	strne	r3, [r4, r2]
 800ded8:	e7af      	b.n	800de3a <_malloc_r+0x22>
 800deda:	6862      	ldr	r2, [r4, #4]
 800dedc:	42a3      	cmp	r3, r4
 800dede:	bf0c      	ite	eq
 800dee0:	f8c8 2000 	streq.w	r2, [r8]
 800dee4:	605a      	strne	r2, [r3, #4]
 800dee6:	e7eb      	b.n	800dec0 <_malloc_r+0xa8>
 800dee8:	4623      	mov	r3, r4
 800deea:	6864      	ldr	r4, [r4, #4]
 800deec:	e7ae      	b.n	800de4c <_malloc_r+0x34>
 800deee:	463c      	mov	r4, r7
 800def0:	687f      	ldr	r7, [r7, #4]
 800def2:	e7b6      	b.n	800de62 <_malloc_r+0x4a>
 800def4:	461a      	mov	r2, r3
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	42a3      	cmp	r3, r4
 800defa:	d1fb      	bne.n	800def4 <_malloc_r+0xdc>
 800defc:	2300      	movs	r3, #0
 800defe:	6053      	str	r3, [r2, #4]
 800df00:	e7de      	b.n	800dec0 <_malloc_r+0xa8>
 800df02:	230c      	movs	r3, #12
 800df04:	6033      	str	r3, [r6, #0]
 800df06:	4630      	mov	r0, r6
 800df08:	f000 f80c 	bl	800df24 <__malloc_unlock>
 800df0c:	e794      	b.n	800de38 <_malloc_r+0x20>
 800df0e:	6005      	str	r5, [r0, #0]
 800df10:	e7d6      	b.n	800dec0 <_malloc_r+0xa8>
 800df12:	bf00      	nop
 800df14:	20004fd0 	.word	0x20004fd0

0800df18 <__malloc_lock>:
 800df18:	4801      	ldr	r0, [pc, #4]	@ (800df20 <__malloc_lock+0x8>)
 800df1a:	f7ff b8aa 	b.w	800d072 <__retarget_lock_acquire_recursive>
 800df1e:	bf00      	nop
 800df20:	20004fc8 	.word	0x20004fc8

0800df24 <__malloc_unlock>:
 800df24:	4801      	ldr	r0, [pc, #4]	@ (800df2c <__malloc_unlock+0x8>)
 800df26:	f7ff b8a5 	b.w	800d074 <__retarget_lock_release_recursive>
 800df2a:	bf00      	nop
 800df2c:	20004fc8 	.word	0x20004fc8

0800df30 <_Balloc>:
 800df30:	b570      	push	{r4, r5, r6, lr}
 800df32:	69c6      	ldr	r6, [r0, #28]
 800df34:	4604      	mov	r4, r0
 800df36:	460d      	mov	r5, r1
 800df38:	b976      	cbnz	r6, 800df58 <_Balloc+0x28>
 800df3a:	2010      	movs	r0, #16
 800df3c:	f7ff ff42 	bl	800ddc4 <malloc>
 800df40:	4602      	mov	r2, r0
 800df42:	61e0      	str	r0, [r4, #28]
 800df44:	b920      	cbnz	r0, 800df50 <_Balloc+0x20>
 800df46:	4b18      	ldr	r3, [pc, #96]	@ (800dfa8 <_Balloc+0x78>)
 800df48:	4818      	ldr	r0, [pc, #96]	@ (800dfac <_Balloc+0x7c>)
 800df4a:	216b      	movs	r1, #107	@ 0x6b
 800df4c:	f000 fda0 	bl	800ea90 <__assert_func>
 800df50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df54:	6006      	str	r6, [r0, #0]
 800df56:	60c6      	str	r6, [r0, #12]
 800df58:	69e6      	ldr	r6, [r4, #28]
 800df5a:	68f3      	ldr	r3, [r6, #12]
 800df5c:	b183      	cbz	r3, 800df80 <_Balloc+0x50>
 800df5e:	69e3      	ldr	r3, [r4, #28]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df66:	b9b8      	cbnz	r0, 800df98 <_Balloc+0x68>
 800df68:	2101      	movs	r1, #1
 800df6a:	fa01 f605 	lsl.w	r6, r1, r5
 800df6e:	1d72      	adds	r2, r6, #5
 800df70:	0092      	lsls	r2, r2, #2
 800df72:	4620      	mov	r0, r4
 800df74:	f000 fdaa 	bl	800eacc <_calloc_r>
 800df78:	b160      	cbz	r0, 800df94 <_Balloc+0x64>
 800df7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df7e:	e00e      	b.n	800df9e <_Balloc+0x6e>
 800df80:	2221      	movs	r2, #33	@ 0x21
 800df82:	2104      	movs	r1, #4
 800df84:	4620      	mov	r0, r4
 800df86:	f000 fda1 	bl	800eacc <_calloc_r>
 800df8a:	69e3      	ldr	r3, [r4, #28]
 800df8c:	60f0      	str	r0, [r6, #12]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1e4      	bne.n	800df5e <_Balloc+0x2e>
 800df94:	2000      	movs	r0, #0
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	6802      	ldr	r2, [r0, #0]
 800df9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfa4:	e7f7      	b.n	800df96 <_Balloc+0x66>
 800dfa6:	bf00      	nop
 800dfa8:	0800fc35 	.word	0x0800fc35
 800dfac:	0800fcb5 	.word	0x0800fcb5

0800dfb0 <_Bfree>:
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	69c6      	ldr	r6, [r0, #28]
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	b976      	cbnz	r6, 800dfd8 <_Bfree+0x28>
 800dfba:	2010      	movs	r0, #16
 800dfbc:	f7ff ff02 	bl	800ddc4 <malloc>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	61e8      	str	r0, [r5, #28]
 800dfc4:	b920      	cbnz	r0, 800dfd0 <_Bfree+0x20>
 800dfc6:	4b09      	ldr	r3, [pc, #36]	@ (800dfec <_Bfree+0x3c>)
 800dfc8:	4809      	ldr	r0, [pc, #36]	@ (800dff0 <_Bfree+0x40>)
 800dfca:	218f      	movs	r1, #143	@ 0x8f
 800dfcc:	f000 fd60 	bl	800ea90 <__assert_func>
 800dfd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfd4:	6006      	str	r6, [r0, #0]
 800dfd6:	60c6      	str	r6, [r0, #12]
 800dfd8:	b13c      	cbz	r4, 800dfea <_Bfree+0x3a>
 800dfda:	69eb      	ldr	r3, [r5, #28]
 800dfdc:	6862      	ldr	r2, [r4, #4]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfe4:	6021      	str	r1, [r4, #0]
 800dfe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dfea:	bd70      	pop	{r4, r5, r6, pc}
 800dfec:	0800fc35 	.word	0x0800fc35
 800dff0:	0800fcb5 	.word	0x0800fcb5

0800dff4 <__multadd>:
 800dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff8:	690d      	ldr	r5, [r1, #16]
 800dffa:	4607      	mov	r7, r0
 800dffc:	460c      	mov	r4, r1
 800dffe:	461e      	mov	r6, r3
 800e000:	f101 0c14 	add.w	ip, r1, #20
 800e004:	2000      	movs	r0, #0
 800e006:	f8dc 3000 	ldr.w	r3, [ip]
 800e00a:	b299      	uxth	r1, r3
 800e00c:	fb02 6101 	mla	r1, r2, r1, r6
 800e010:	0c1e      	lsrs	r6, r3, #16
 800e012:	0c0b      	lsrs	r3, r1, #16
 800e014:	fb02 3306 	mla	r3, r2, r6, r3
 800e018:	b289      	uxth	r1, r1
 800e01a:	3001      	adds	r0, #1
 800e01c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e020:	4285      	cmp	r5, r0
 800e022:	f84c 1b04 	str.w	r1, [ip], #4
 800e026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e02a:	dcec      	bgt.n	800e006 <__multadd+0x12>
 800e02c:	b30e      	cbz	r6, 800e072 <__multadd+0x7e>
 800e02e:	68a3      	ldr	r3, [r4, #8]
 800e030:	42ab      	cmp	r3, r5
 800e032:	dc19      	bgt.n	800e068 <__multadd+0x74>
 800e034:	6861      	ldr	r1, [r4, #4]
 800e036:	4638      	mov	r0, r7
 800e038:	3101      	adds	r1, #1
 800e03a:	f7ff ff79 	bl	800df30 <_Balloc>
 800e03e:	4680      	mov	r8, r0
 800e040:	b928      	cbnz	r0, 800e04e <__multadd+0x5a>
 800e042:	4602      	mov	r2, r0
 800e044:	4b0c      	ldr	r3, [pc, #48]	@ (800e078 <__multadd+0x84>)
 800e046:	480d      	ldr	r0, [pc, #52]	@ (800e07c <__multadd+0x88>)
 800e048:	21ba      	movs	r1, #186	@ 0xba
 800e04a:	f000 fd21 	bl	800ea90 <__assert_func>
 800e04e:	6922      	ldr	r2, [r4, #16]
 800e050:	3202      	adds	r2, #2
 800e052:	f104 010c 	add.w	r1, r4, #12
 800e056:	0092      	lsls	r2, r2, #2
 800e058:	300c      	adds	r0, #12
 800e05a:	f7ff f80c 	bl	800d076 <memcpy>
 800e05e:	4621      	mov	r1, r4
 800e060:	4638      	mov	r0, r7
 800e062:	f7ff ffa5 	bl	800dfb0 <_Bfree>
 800e066:	4644      	mov	r4, r8
 800e068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e06c:	3501      	adds	r5, #1
 800e06e:	615e      	str	r6, [r3, #20]
 800e070:	6125      	str	r5, [r4, #16]
 800e072:	4620      	mov	r0, r4
 800e074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e078:	0800fca4 	.word	0x0800fca4
 800e07c:	0800fcb5 	.word	0x0800fcb5

0800e080 <__hi0bits>:
 800e080:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e084:	4603      	mov	r3, r0
 800e086:	bf36      	itet	cc
 800e088:	0403      	lslcc	r3, r0, #16
 800e08a:	2000      	movcs	r0, #0
 800e08c:	2010      	movcc	r0, #16
 800e08e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e092:	bf3c      	itt	cc
 800e094:	021b      	lslcc	r3, r3, #8
 800e096:	3008      	addcc	r0, #8
 800e098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e09c:	bf3c      	itt	cc
 800e09e:	011b      	lslcc	r3, r3, #4
 800e0a0:	3004      	addcc	r0, #4
 800e0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0a6:	bf3c      	itt	cc
 800e0a8:	009b      	lslcc	r3, r3, #2
 800e0aa:	3002      	addcc	r0, #2
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	db05      	blt.n	800e0bc <__hi0bits+0x3c>
 800e0b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e0b4:	f100 0001 	add.w	r0, r0, #1
 800e0b8:	bf08      	it	eq
 800e0ba:	2020      	moveq	r0, #32
 800e0bc:	4770      	bx	lr

0800e0be <__lo0bits>:
 800e0be:	6803      	ldr	r3, [r0, #0]
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	f013 0007 	ands.w	r0, r3, #7
 800e0c6:	d00b      	beq.n	800e0e0 <__lo0bits+0x22>
 800e0c8:	07d9      	lsls	r1, r3, #31
 800e0ca:	d421      	bmi.n	800e110 <__lo0bits+0x52>
 800e0cc:	0798      	lsls	r0, r3, #30
 800e0ce:	bf49      	itett	mi
 800e0d0:	085b      	lsrmi	r3, r3, #1
 800e0d2:	089b      	lsrpl	r3, r3, #2
 800e0d4:	2001      	movmi	r0, #1
 800e0d6:	6013      	strmi	r3, [r2, #0]
 800e0d8:	bf5c      	itt	pl
 800e0da:	6013      	strpl	r3, [r2, #0]
 800e0dc:	2002      	movpl	r0, #2
 800e0de:	4770      	bx	lr
 800e0e0:	b299      	uxth	r1, r3
 800e0e2:	b909      	cbnz	r1, 800e0e8 <__lo0bits+0x2a>
 800e0e4:	0c1b      	lsrs	r3, r3, #16
 800e0e6:	2010      	movs	r0, #16
 800e0e8:	b2d9      	uxtb	r1, r3
 800e0ea:	b909      	cbnz	r1, 800e0f0 <__lo0bits+0x32>
 800e0ec:	3008      	adds	r0, #8
 800e0ee:	0a1b      	lsrs	r3, r3, #8
 800e0f0:	0719      	lsls	r1, r3, #28
 800e0f2:	bf04      	itt	eq
 800e0f4:	091b      	lsreq	r3, r3, #4
 800e0f6:	3004      	addeq	r0, #4
 800e0f8:	0799      	lsls	r1, r3, #30
 800e0fa:	bf04      	itt	eq
 800e0fc:	089b      	lsreq	r3, r3, #2
 800e0fe:	3002      	addeq	r0, #2
 800e100:	07d9      	lsls	r1, r3, #31
 800e102:	d403      	bmi.n	800e10c <__lo0bits+0x4e>
 800e104:	085b      	lsrs	r3, r3, #1
 800e106:	f100 0001 	add.w	r0, r0, #1
 800e10a:	d003      	beq.n	800e114 <__lo0bits+0x56>
 800e10c:	6013      	str	r3, [r2, #0]
 800e10e:	4770      	bx	lr
 800e110:	2000      	movs	r0, #0
 800e112:	4770      	bx	lr
 800e114:	2020      	movs	r0, #32
 800e116:	4770      	bx	lr

0800e118 <__i2b>:
 800e118:	b510      	push	{r4, lr}
 800e11a:	460c      	mov	r4, r1
 800e11c:	2101      	movs	r1, #1
 800e11e:	f7ff ff07 	bl	800df30 <_Balloc>
 800e122:	4602      	mov	r2, r0
 800e124:	b928      	cbnz	r0, 800e132 <__i2b+0x1a>
 800e126:	4b05      	ldr	r3, [pc, #20]	@ (800e13c <__i2b+0x24>)
 800e128:	4805      	ldr	r0, [pc, #20]	@ (800e140 <__i2b+0x28>)
 800e12a:	f240 1145 	movw	r1, #325	@ 0x145
 800e12e:	f000 fcaf 	bl	800ea90 <__assert_func>
 800e132:	2301      	movs	r3, #1
 800e134:	6144      	str	r4, [r0, #20]
 800e136:	6103      	str	r3, [r0, #16]
 800e138:	bd10      	pop	{r4, pc}
 800e13a:	bf00      	nop
 800e13c:	0800fca4 	.word	0x0800fca4
 800e140:	0800fcb5 	.word	0x0800fcb5

0800e144 <__multiply>:
 800e144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e148:	4614      	mov	r4, r2
 800e14a:	690a      	ldr	r2, [r1, #16]
 800e14c:	6923      	ldr	r3, [r4, #16]
 800e14e:	429a      	cmp	r2, r3
 800e150:	bfa8      	it	ge
 800e152:	4623      	movge	r3, r4
 800e154:	460f      	mov	r7, r1
 800e156:	bfa4      	itt	ge
 800e158:	460c      	movge	r4, r1
 800e15a:	461f      	movge	r7, r3
 800e15c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e160:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e164:	68a3      	ldr	r3, [r4, #8]
 800e166:	6861      	ldr	r1, [r4, #4]
 800e168:	eb0a 0609 	add.w	r6, sl, r9
 800e16c:	42b3      	cmp	r3, r6
 800e16e:	b085      	sub	sp, #20
 800e170:	bfb8      	it	lt
 800e172:	3101      	addlt	r1, #1
 800e174:	f7ff fedc 	bl	800df30 <_Balloc>
 800e178:	b930      	cbnz	r0, 800e188 <__multiply+0x44>
 800e17a:	4602      	mov	r2, r0
 800e17c:	4b44      	ldr	r3, [pc, #272]	@ (800e290 <__multiply+0x14c>)
 800e17e:	4845      	ldr	r0, [pc, #276]	@ (800e294 <__multiply+0x150>)
 800e180:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e184:	f000 fc84 	bl	800ea90 <__assert_func>
 800e188:	f100 0514 	add.w	r5, r0, #20
 800e18c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e190:	462b      	mov	r3, r5
 800e192:	2200      	movs	r2, #0
 800e194:	4543      	cmp	r3, r8
 800e196:	d321      	bcc.n	800e1dc <__multiply+0x98>
 800e198:	f107 0114 	add.w	r1, r7, #20
 800e19c:	f104 0214 	add.w	r2, r4, #20
 800e1a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e1a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e1a8:	9302      	str	r3, [sp, #8]
 800e1aa:	1b13      	subs	r3, r2, r4
 800e1ac:	3b15      	subs	r3, #21
 800e1ae:	f023 0303 	bic.w	r3, r3, #3
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	f104 0715 	add.w	r7, r4, #21
 800e1b8:	42ba      	cmp	r2, r7
 800e1ba:	bf38      	it	cc
 800e1bc:	2304      	movcc	r3, #4
 800e1be:	9301      	str	r3, [sp, #4]
 800e1c0:	9b02      	ldr	r3, [sp, #8]
 800e1c2:	9103      	str	r1, [sp, #12]
 800e1c4:	428b      	cmp	r3, r1
 800e1c6:	d80c      	bhi.n	800e1e2 <__multiply+0x9e>
 800e1c8:	2e00      	cmp	r6, #0
 800e1ca:	dd03      	ble.n	800e1d4 <__multiply+0x90>
 800e1cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d05b      	beq.n	800e28c <__multiply+0x148>
 800e1d4:	6106      	str	r6, [r0, #16]
 800e1d6:	b005      	add	sp, #20
 800e1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1dc:	f843 2b04 	str.w	r2, [r3], #4
 800e1e0:	e7d8      	b.n	800e194 <__multiply+0x50>
 800e1e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e1e6:	f1ba 0f00 	cmp.w	sl, #0
 800e1ea:	d024      	beq.n	800e236 <__multiply+0xf2>
 800e1ec:	f104 0e14 	add.w	lr, r4, #20
 800e1f0:	46a9      	mov	r9, r5
 800e1f2:	f04f 0c00 	mov.w	ip, #0
 800e1f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e1fa:	f8d9 3000 	ldr.w	r3, [r9]
 800e1fe:	fa1f fb87 	uxth.w	fp, r7
 800e202:	b29b      	uxth	r3, r3
 800e204:	fb0a 330b 	mla	r3, sl, fp, r3
 800e208:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e20c:	f8d9 7000 	ldr.w	r7, [r9]
 800e210:	4463      	add	r3, ip
 800e212:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e216:	fb0a c70b 	mla	r7, sl, fp, ip
 800e21a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e21e:	b29b      	uxth	r3, r3
 800e220:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e224:	4572      	cmp	r2, lr
 800e226:	f849 3b04 	str.w	r3, [r9], #4
 800e22a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e22e:	d8e2      	bhi.n	800e1f6 <__multiply+0xb2>
 800e230:	9b01      	ldr	r3, [sp, #4]
 800e232:	f845 c003 	str.w	ip, [r5, r3]
 800e236:	9b03      	ldr	r3, [sp, #12]
 800e238:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e23c:	3104      	adds	r1, #4
 800e23e:	f1b9 0f00 	cmp.w	r9, #0
 800e242:	d021      	beq.n	800e288 <__multiply+0x144>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	f104 0c14 	add.w	ip, r4, #20
 800e24a:	46ae      	mov	lr, r5
 800e24c:	f04f 0a00 	mov.w	sl, #0
 800e250:	f8bc b000 	ldrh.w	fp, [ip]
 800e254:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e258:	fb09 770b 	mla	r7, r9, fp, r7
 800e25c:	4457      	add	r7, sl
 800e25e:	b29b      	uxth	r3, r3
 800e260:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e264:	f84e 3b04 	str.w	r3, [lr], #4
 800e268:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e26c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e270:	f8be 3000 	ldrh.w	r3, [lr]
 800e274:	fb09 330a 	mla	r3, r9, sl, r3
 800e278:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e27c:	4562      	cmp	r2, ip
 800e27e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e282:	d8e5      	bhi.n	800e250 <__multiply+0x10c>
 800e284:	9f01      	ldr	r7, [sp, #4]
 800e286:	51eb      	str	r3, [r5, r7]
 800e288:	3504      	adds	r5, #4
 800e28a:	e799      	b.n	800e1c0 <__multiply+0x7c>
 800e28c:	3e01      	subs	r6, #1
 800e28e:	e79b      	b.n	800e1c8 <__multiply+0x84>
 800e290:	0800fca4 	.word	0x0800fca4
 800e294:	0800fcb5 	.word	0x0800fcb5

0800e298 <__pow5mult>:
 800e298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e29c:	4615      	mov	r5, r2
 800e29e:	f012 0203 	ands.w	r2, r2, #3
 800e2a2:	4607      	mov	r7, r0
 800e2a4:	460e      	mov	r6, r1
 800e2a6:	d007      	beq.n	800e2b8 <__pow5mult+0x20>
 800e2a8:	4c25      	ldr	r4, [pc, #148]	@ (800e340 <__pow5mult+0xa8>)
 800e2aa:	3a01      	subs	r2, #1
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2b2:	f7ff fe9f 	bl	800dff4 <__multadd>
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	10ad      	asrs	r5, r5, #2
 800e2ba:	d03d      	beq.n	800e338 <__pow5mult+0xa0>
 800e2bc:	69fc      	ldr	r4, [r7, #28]
 800e2be:	b97c      	cbnz	r4, 800e2e0 <__pow5mult+0x48>
 800e2c0:	2010      	movs	r0, #16
 800e2c2:	f7ff fd7f 	bl	800ddc4 <malloc>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	61f8      	str	r0, [r7, #28]
 800e2ca:	b928      	cbnz	r0, 800e2d8 <__pow5mult+0x40>
 800e2cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e344 <__pow5mult+0xac>)
 800e2ce:	481e      	ldr	r0, [pc, #120]	@ (800e348 <__pow5mult+0xb0>)
 800e2d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2d4:	f000 fbdc 	bl	800ea90 <__assert_func>
 800e2d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2dc:	6004      	str	r4, [r0, #0]
 800e2de:	60c4      	str	r4, [r0, #12]
 800e2e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e2e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2e8:	b94c      	cbnz	r4, 800e2fe <__pow5mult+0x66>
 800e2ea:	f240 2171 	movw	r1, #625	@ 0x271
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	f7ff ff12 	bl	800e118 <__i2b>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	6003      	str	r3, [r0, #0]
 800e2fe:	f04f 0900 	mov.w	r9, #0
 800e302:	07eb      	lsls	r3, r5, #31
 800e304:	d50a      	bpl.n	800e31c <__pow5mult+0x84>
 800e306:	4631      	mov	r1, r6
 800e308:	4622      	mov	r2, r4
 800e30a:	4638      	mov	r0, r7
 800e30c:	f7ff ff1a 	bl	800e144 <__multiply>
 800e310:	4631      	mov	r1, r6
 800e312:	4680      	mov	r8, r0
 800e314:	4638      	mov	r0, r7
 800e316:	f7ff fe4b 	bl	800dfb0 <_Bfree>
 800e31a:	4646      	mov	r6, r8
 800e31c:	106d      	asrs	r5, r5, #1
 800e31e:	d00b      	beq.n	800e338 <__pow5mult+0xa0>
 800e320:	6820      	ldr	r0, [r4, #0]
 800e322:	b938      	cbnz	r0, 800e334 <__pow5mult+0x9c>
 800e324:	4622      	mov	r2, r4
 800e326:	4621      	mov	r1, r4
 800e328:	4638      	mov	r0, r7
 800e32a:	f7ff ff0b 	bl	800e144 <__multiply>
 800e32e:	6020      	str	r0, [r4, #0]
 800e330:	f8c0 9000 	str.w	r9, [r0]
 800e334:	4604      	mov	r4, r0
 800e336:	e7e4      	b.n	800e302 <__pow5mult+0x6a>
 800e338:	4630      	mov	r0, r6
 800e33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e33e:	bf00      	nop
 800e340:	0800fd10 	.word	0x0800fd10
 800e344:	0800fc35 	.word	0x0800fc35
 800e348:	0800fcb5 	.word	0x0800fcb5

0800e34c <__lshift>:
 800e34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e350:	460c      	mov	r4, r1
 800e352:	6849      	ldr	r1, [r1, #4]
 800e354:	6923      	ldr	r3, [r4, #16]
 800e356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e35a:	68a3      	ldr	r3, [r4, #8]
 800e35c:	4607      	mov	r7, r0
 800e35e:	4691      	mov	r9, r2
 800e360:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e364:	f108 0601 	add.w	r6, r8, #1
 800e368:	42b3      	cmp	r3, r6
 800e36a:	db0b      	blt.n	800e384 <__lshift+0x38>
 800e36c:	4638      	mov	r0, r7
 800e36e:	f7ff fddf 	bl	800df30 <_Balloc>
 800e372:	4605      	mov	r5, r0
 800e374:	b948      	cbnz	r0, 800e38a <__lshift+0x3e>
 800e376:	4602      	mov	r2, r0
 800e378:	4b28      	ldr	r3, [pc, #160]	@ (800e41c <__lshift+0xd0>)
 800e37a:	4829      	ldr	r0, [pc, #164]	@ (800e420 <__lshift+0xd4>)
 800e37c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e380:	f000 fb86 	bl	800ea90 <__assert_func>
 800e384:	3101      	adds	r1, #1
 800e386:	005b      	lsls	r3, r3, #1
 800e388:	e7ee      	b.n	800e368 <__lshift+0x1c>
 800e38a:	2300      	movs	r3, #0
 800e38c:	f100 0114 	add.w	r1, r0, #20
 800e390:	f100 0210 	add.w	r2, r0, #16
 800e394:	4618      	mov	r0, r3
 800e396:	4553      	cmp	r3, sl
 800e398:	db33      	blt.n	800e402 <__lshift+0xb6>
 800e39a:	6920      	ldr	r0, [r4, #16]
 800e39c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3a0:	f104 0314 	add.w	r3, r4, #20
 800e3a4:	f019 091f 	ands.w	r9, r9, #31
 800e3a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3b0:	d02b      	beq.n	800e40a <__lshift+0xbe>
 800e3b2:	f1c9 0e20 	rsb	lr, r9, #32
 800e3b6:	468a      	mov	sl, r1
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	6818      	ldr	r0, [r3, #0]
 800e3bc:	fa00 f009 	lsl.w	r0, r0, r9
 800e3c0:	4310      	orrs	r0, r2
 800e3c2:	f84a 0b04 	str.w	r0, [sl], #4
 800e3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ca:	459c      	cmp	ip, r3
 800e3cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3d0:	d8f3      	bhi.n	800e3ba <__lshift+0x6e>
 800e3d2:	ebac 0304 	sub.w	r3, ip, r4
 800e3d6:	3b15      	subs	r3, #21
 800e3d8:	f023 0303 	bic.w	r3, r3, #3
 800e3dc:	3304      	adds	r3, #4
 800e3de:	f104 0015 	add.w	r0, r4, #21
 800e3e2:	4584      	cmp	ip, r0
 800e3e4:	bf38      	it	cc
 800e3e6:	2304      	movcc	r3, #4
 800e3e8:	50ca      	str	r2, [r1, r3]
 800e3ea:	b10a      	cbz	r2, 800e3f0 <__lshift+0xa4>
 800e3ec:	f108 0602 	add.w	r6, r8, #2
 800e3f0:	3e01      	subs	r6, #1
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	612e      	str	r6, [r5, #16]
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	f7ff fdda 	bl	800dfb0 <_Bfree>
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e402:	f842 0f04 	str.w	r0, [r2, #4]!
 800e406:	3301      	adds	r3, #1
 800e408:	e7c5      	b.n	800e396 <__lshift+0x4a>
 800e40a:	3904      	subs	r1, #4
 800e40c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e410:	f841 2f04 	str.w	r2, [r1, #4]!
 800e414:	459c      	cmp	ip, r3
 800e416:	d8f9      	bhi.n	800e40c <__lshift+0xc0>
 800e418:	e7ea      	b.n	800e3f0 <__lshift+0xa4>
 800e41a:	bf00      	nop
 800e41c:	0800fca4 	.word	0x0800fca4
 800e420:	0800fcb5 	.word	0x0800fcb5

0800e424 <__mcmp>:
 800e424:	690a      	ldr	r2, [r1, #16]
 800e426:	4603      	mov	r3, r0
 800e428:	6900      	ldr	r0, [r0, #16]
 800e42a:	1a80      	subs	r0, r0, r2
 800e42c:	b530      	push	{r4, r5, lr}
 800e42e:	d10e      	bne.n	800e44e <__mcmp+0x2a>
 800e430:	3314      	adds	r3, #20
 800e432:	3114      	adds	r1, #20
 800e434:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e438:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e43c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e440:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e444:	4295      	cmp	r5, r2
 800e446:	d003      	beq.n	800e450 <__mcmp+0x2c>
 800e448:	d205      	bcs.n	800e456 <__mcmp+0x32>
 800e44a:	f04f 30ff 	mov.w	r0, #4294967295
 800e44e:	bd30      	pop	{r4, r5, pc}
 800e450:	42a3      	cmp	r3, r4
 800e452:	d3f3      	bcc.n	800e43c <__mcmp+0x18>
 800e454:	e7fb      	b.n	800e44e <__mcmp+0x2a>
 800e456:	2001      	movs	r0, #1
 800e458:	e7f9      	b.n	800e44e <__mcmp+0x2a>
	...

0800e45c <__mdiff>:
 800e45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e460:	4689      	mov	r9, r1
 800e462:	4606      	mov	r6, r0
 800e464:	4611      	mov	r1, r2
 800e466:	4648      	mov	r0, r9
 800e468:	4614      	mov	r4, r2
 800e46a:	f7ff ffdb 	bl	800e424 <__mcmp>
 800e46e:	1e05      	subs	r5, r0, #0
 800e470:	d112      	bne.n	800e498 <__mdiff+0x3c>
 800e472:	4629      	mov	r1, r5
 800e474:	4630      	mov	r0, r6
 800e476:	f7ff fd5b 	bl	800df30 <_Balloc>
 800e47a:	4602      	mov	r2, r0
 800e47c:	b928      	cbnz	r0, 800e48a <__mdiff+0x2e>
 800e47e:	4b3f      	ldr	r3, [pc, #252]	@ (800e57c <__mdiff+0x120>)
 800e480:	f240 2137 	movw	r1, #567	@ 0x237
 800e484:	483e      	ldr	r0, [pc, #248]	@ (800e580 <__mdiff+0x124>)
 800e486:	f000 fb03 	bl	800ea90 <__assert_func>
 800e48a:	2301      	movs	r3, #1
 800e48c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e490:	4610      	mov	r0, r2
 800e492:	b003      	add	sp, #12
 800e494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e498:	bfbc      	itt	lt
 800e49a:	464b      	movlt	r3, r9
 800e49c:	46a1      	movlt	r9, r4
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e4a4:	bfba      	itte	lt
 800e4a6:	461c      	movlt	r4, r3
 800e4a8:	2501      	movlt	r5, #1
 800e4aa:	2500      	movge	r5, #0
 800e4ac:	f7ff fd40 	bl	800df30 <_Balloc>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	b918      	cbnz	r0, 800e4bc <__mdiff+0x60>
 800e4b4:	4b31      	ldr	r3, [pc, #196]	@ (800e57c <__mdiff+0x120>)
 800e4b6:	f240 2145 	movw	r1, #581	@ 0x245
 800e4ba:	e7e3      	b.n	800e484 <__mdiff+0x28>
 800e4bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e4c0:	6926      	ldr	r6, [r4, #16]
 800e4c2:	60c5      	str	r5, [r0, #12]
 800e4c4:	f109 0310 	add.w	r3, r9, #16
 800e4c8:	f109 0514 	add.w	r5, r9, #20
 800e4cc:	f104 0e14 	add.w	lr, r4, #20
 800e4d0:	f100 0b14 	add.w	fp, r0, #20
 800e4d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e4d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e4dc:	9301      	str	r3, [sp, #4]
 800e4de:	46d9      	mov	r9, fp
 800e4e0:	f04f 0c00 	mov.w	ip, #0
 800e4e4:	9b01      	ldr	r3, [sp, #4]
 800e4e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e4ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	fa1f f38a 	uxth.w	r3, sl
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	b283      	uxth	r3, r0
 800e4f8:	1acb      	subs	r3, r1, r3
 800e4fa:	0c00      	lsrs	r0, r0, #16
 800e4fc:	4463      	add	r3, ip
 800e4fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e502:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e506:	b29b      	uxth	r3, r3
 800e508:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e50c:	4576      	cmp	r6, lr
 800e50e:	f849 3b04 	str.w	r3, [r9], #4
 800e512:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e516:	d8e5      	bhi.n	800e4e4 <__mdiff+0x88>
 800e518:	1b33      	subs	r3, r6, r4
 800e51a:	3b15      	subs	r3, #21
 800e51c:	f023 0303 	bic.w	r3, r3, #3
 800e520:	3415      	adds	r4, #21
 800e522:	3304      	adds	r3, #4
 800e524:	42a6      	cmp	r6, r4
 800e526:	bf38      	it	cc
 800e528:	2304      	movcc	r3, #4
 800e52a:	441d      	add	r5, r3
 800e52c:	445b      	add	r3, fp
 800e52e:	461e      	mov	r6, r3
 800e530:	462c      	mov	r4, r5
 800e532:	4544      	cmp	r4, r8
 800e534:	d30e      	bcc.n	800e554 <__mdiff+0xf8>
 800e536:	f108 0103 	add.w	r1, r8, #3
 800e53a:	1b49      	subs	r1, r1, r5
 800e53c:	f021 0103 	bic.w	r1, r1, #3
 800e540:	3d03      	subs	r5, #3
 800e542:	45a8      	cmp	r8, r5
 800e544:	bf38      	it	cc
 800e546:	2100      	movcc	r1, #0
 800e548:	440b      	add	r3, r1
 800e54a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e54e:	b191      	cbz	r1, 800e576 <__mdiff+0x11a>
 800e550:	6117      	str	r7, [r2, #16]
 800e552:	e79d      	b.n	800e490 <__mdiff+0x34>
 800e554:	f854 1b04 	ldr.w	r1, [r4], #4
 800e558:	46e6      	mov	lr, ip
 800e55a:	0c08      	lsrs	r0, r1, #16
 800e55c:	fa1c fc81 	uxtah	ip, ip, r1
 800e560:	4471      	add	r1, lr
 800e562:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e566:	b289      	uxth	r1, r1
 800e568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e56c:	f846 1b04 	str.w	r1, [r6], #4
 800e570:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e574:	e7dd      	b.n	800e532 <__mdiff+0xd6>
 800e576:	3f01      	subs	r7, #1
 800e578:	e7e7      	b.n	800e54a <__mdiff+0xee>
 800e57a:	bf00      	nop
 800e57c:	0800fca4 	.word	0x0800fca4
 800e580:	0800fcb5 	.word	0x0800fcb5

0800e584 <__d2b>:
 800e584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e588:	460f      	mov	r7, r1
 800e58a:	2101      	movs	r1, #1
 800e58c:	ec59 8b10 	vmov	r8, r9, d0
 800e590:	4616      	mov	r6, r2
 800e592:	f7ff fccd 	bl	800df30 <_Balloc>
 800e596:	4604      	mov	r4, r0
 800e598:	b930      	cbnz	r0, 800e5a8 <__d2b+0x24>
 800e59a:	4602      	mov	r2, r0
 800e59c:	4b23      	ldr	r3, [pc, #140]	@ (800e62c <__d2b+0xa8>)
 800e59e:	4824      	ldr	r0, [pc, #144]	@ (800e630 <__d2b+0xac>)
 800e5a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e5a4:	f000 fa74 	bl	800ea90 <__assert_func>
 800e5a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5b0:	b10d      	cbz	r5, 800e5b6 <__d2b+0x32>
 800e5b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5b6:	9301      	str	r3, [sp, #4]
 800e5b8:	f1b8 0300 	subs.w	r3, r8, #0
 800e5bc:	d023      	beq.n	800e606 <__d2b+0x82>
 800e5be:	4668      	mov	r0, sp
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	f7ff fd7c 	bl	800e0be <__lo0bits>
 800e5c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5ca:	b1d0      	cbz	r0, 800e602 <__d2b+0x7e>
 800e5cc:	f1c0 0320 	rsb	r3, r0, #32
 800e5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800e5d4:	430b      	orrs	r3, r1
 800e5d6:	40c2      	lsrs	r2, r0
 800e5d8:	6163      	str	r3, [r4, #20]
 800e5da:	9201      	str	r2, [sp, #4]
 800e5dc:	9b01      	ldr	r3, [sp, #4]
 800e5de:	61a3      	str	r3, [r4, #24]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	bf0c      	ite	eq
 800e5e4:	2201      	moveq	r2, #1
 800e5e6:	2202      	movne	r2, #2
 800e5e8:	6122      	str	r2, [r4, #16]
 800e5ea:	b1a5      	cbz	r5, 800e616 <__d2b+0x92>
 800e5ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e5f0:	4405      	add	r5, r0
 800e5f2:	603d      	str	r5, [r7, #0]
 800e5f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e5f8:	6030      	str	r0, [r6, #0]
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	b003      	add	sp, #12
 800e5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e602:	6161      	str	r1, [r4, #20]
 800e604:	e7ea      	b.n	800e5dc <__d2b+0x58>
 800e606:	a801      	add	r0, sp, #4
 800e608:	f7ff fd59 	bl	800e0be <__lo0bits>
 800e60c:	9b01      	ldr	r3, [sp, #4]
 800e60e:	6163      	str	r3, [r4, #20]
 800e610:	3020      	adds	r0, #32
 800e612:	2201      	movs	r2, #1
 800e614:	e7e8      	b.n	800e5e8 <__d2b+0x64>
 800e616:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e61a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e61e:	6038      	str	r0, [r7, #0]
 800e620:	6918      	ldr	r0, [r3, #16]
 800e622:	f7ff fd2d 	bl	800e080 <__hi0bits>
 800e626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e62a:	e7e5      	b.n	800e5f8 <__d2b+0x74>
 800e62c:	0800fca4 	.word	0x0800fca4
 800e630:	0800fcb5 	.word	0x0800fcb5

0800e634 <__ssputs_r>:
 800e634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e638:	688e      	ldr	r6, [r1, #8]
 800e63a:	461f      	mov	r7, r3
 800e63c:	42be      	cmp	r6, r7
 800e63e:	680b      	ldr	r3, [r1, #0]
 800e640:	4682      	mov	sl, r0
 800e642:	460c      	mov	r4, r1
 800e644:	4690      	mov	r8, r2
 800e646:	d82d      	bhi.n	800e6a4 <__ssputs_r+0x70>
 800e648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e64c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e650:	d026      	beq.n	800e6a0 <__ssputs_r+0x6c>
 800e652:	6965      	ldr	r5, [r4, #20]
 800e654:	6909      	ldr	r1, [r1, #16]
 800e656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e65a:	eba3 0901 	sub.w	r9, r3, r1
 800e65e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e662:	1c7b      	adds	r3, r7, #1
 800e664:	444b      	add	r3, r9
 800e666:	106d      	asrs	r5, r5, #1
 800e668:	429d      	cmp	r5, r3
 800e66a:	bf38      	it	cc
 800e66c:	461d      	movcc	r5, r3
 800e66e:	0553      	lsls	r3, r2, #21
 800e670:	d527      	bpl.n	800e6c2 <__ssputs_r+0x8e>
 800e672:	4629      	mov	r1, r5
 800e674:	f7ff fbd0 	bl	800de18 <_malloc_r>
 800e678:	4606      	mov	r6, r0
 800e67a:	b360      	cbz	r0, 800e6d6 <__ssputs_r+0xa2>
 800e67c:	6921      	ldr	r1, [r4, #16]
 800e67e:	464a      	mov	r2, r9
 800e680:	f7fe fcf9 	bl	800d076 <memcpy>
 800e684:	89a3      	ldrh	r3, [r4, #12]
 800e686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e68a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e68e:	81a3      	strh	r3, [r4, #12]
 800e690:	6126      	str	r6, [r4, #16]
 800e692:	6165      	str	r5, [r4, #20]
 800e694:	444e      	add	r6, r9
 800e696:	eba5 0509 	sub.w	r5, r5, r9
 800e69a:	6026      	str	r6, [r4, #0]
 800e69c:	60a5      	str	r5, [r4, #8]
 800e69e:	463e      	mov	r6, r7
 800e6a0:	42be      	cmp	r6, r7
 800e6a2:	d900      	bls.n	800e6a6 <__ssputs_r+0x72>
 800e6a4:	463e      	mov	r6, r7
 800e6a6:	6820      	ldr	r0, [r4, #0]
 800e6a8:	4632      	mov	r2, r6
 800e6aa:	4641      	mov	r1, r8
 800e6ac:	f000 f9c6 	bl	800ea3c <memmove>
 800e6b0:	68a3      	ldr	r3, [r4, #8]
 800e6b2:	1b9b      	subs	r3, r3, r6
 800e6b4:	60a3      	str	r3, [r4, #8]
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	4433      	add	r3, r6
 800e6ba:	6023      	str	r3, [r4, #0]
 800e6bc:	2000      	movs	r0, #0
 800e6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c2:	462a      	mov	r2, r5
 800e6c4:	f000 fa28 	bl	800eb18 <_realloc_r>
 800e6c8:	4606      	mov	r6, r0
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	d1e0      	bne.n	800e690 <__ssputs_r+0x5c>
 800e6ce:	6921      	ldr	r1, [r4, #16]
 800e6d0:	4650      	mov	r0, sl
 800e6d2:	f7ff fb2d 	bl	800dd30 <_free_r>
 800e6d6:	230c      	movs	r3, #12
 800e6d8:	f8ca 3000 	str.w	r3, [sl]
 800e6dc:	89a3      	ldrh	r3, [r4, #12]
 800e6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6e2:	81a3      	strh	r3, [r4, #12]
 800e6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e8:	e7e9      	b.n	800e6be <__ssputs_r+0x8a>
	...

0800e6ec <_svfiprintf_r>:
 800e6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f0:	4698      	mov	r8, r3
 800e6f2:	898b      	ldrh	r3, [r1, #12]
 800e6f4:	061b      	lsls	r3, r3, #24
 800e6f6:	b09d      	sub	sp, #116	@ 0x74
 800e6f8:	4607      	mov	r7, r0
 800e6fa:	460d      	mov	r5, r1
 800e6fc:	4614      	mov	r4, r2
 800e6fe:	d510      	bpl.n	800e722 <_svfiprintf_r+0x36>
 800e700:	690b      	ldr	r3, [r1, #16]
 800e702:	b973      	cbnz	r3, 800e722 <_svfiprintf_r+0x36>
 800e704:	2140      	movs	r1, #64	@ 0x40
 800e706:	f7ff fb87 	bl	800de18 <_malloc_r>
 800e70a:	6028      	str	r0, [r5, #0]
 800e70c:	6128      	str	r0, [r5, #16]
 800e70e:	b930      	cbnz	r0, 800e71e <_svfiprintf_r+0x32>
 800e710:	230c      	movs	r3, #12
 800e712:	603b      	str	r3, [r7, #0]
 800e714:	f04f 30ff 	mov.w	r0, #4294967295
 800e718:	b01d      	add	sp, #116	@ 0x74
 800e71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e71e:	2340      	movs	r3, #64	@ 0x40
 800e720:	616b      	str	r3, [r5, #20]
 800e722:	2300      	movs	r3, #0
 800e724:	9309      	str	r3, [sp, #36]	@ 0x24
 800e726:	2320      	movs	r3, #32
 800e728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e72c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e730:	2330      	movs	r3, #48	@ 0x30
 800e732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8d0 <_svfiprintf_r+0x1e4>
 800e736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e73a:	f04f 0901 	mov.w	r9, #1
 800e73e:	4623      	mov	r3, r4
 800e740:	469a      	mov	sl, r3
 800e742:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e746:	b10a      	cbz	r2, 800e74c <_svfiprintf_r+0x60>
 800e748:	2a25      	cmp	r2, #37	@ 0x25
 800e74a:	d1f9      	bne.n	800e740 <_svfiprintf_r+0x54>
 800e74c:	ebba 0b04 	subs.w	fp, sl, r4
 800e750:	d00b      	beq.n	800e76a <_svfiprintf_r+0x7e>
 800e752:	465b      	mov	r3, fp
 800e754:	4622      	mov	r2, r4
 800e756:	4629      	mov	r1, r5
 800e758:	4638      	mov	r0, r7
 800e75a:	f7ff ff6b 	bl	800e634 <__ssputs_r>
 800e75e:	3001      	adds	r0, #1
 800e760:	f000 80a7 	beq.w	800e8b2 <_svfiprintf_r+0x1c6>
 800e764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e766:	445a      	add	r2, fp
 800e768:	9209      	str	r2, [sp, #36]	@ 0x24
 800e76a:	f89a 3000 	ldrb.w	r3, [sl]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 809f 	beq.w	800e8b2 <_svfiprintf_r+0x1c6>
 800e774:	2300      	movs	r3, #0
 800e776:	f04f 32ff 	mov.w	r2, #4294967295
 800e77a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e77e:	f10a 0a01 	add.w	sl, sl, #1
 800e782:	9304      	str	r3, [sp, #16]
 800e784:	9307      	str	r3, [sp, #28]
 800e786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e78a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e78c:	4654      	mov	r4, sl
 800e78e:	2205      	movs	r2, #5
 800e790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e794:	484e      	ldr	r0, [pc, #312]	@ (800e8d0 <_svfiprintf_r+0x1e4>)
 800e796:	f7f1 fd1b 	bl	80001d0 <memchr>
 800e79a:	9a04      	ldr	r2, [sp, #16]
 800e79c:	b9d8      	cbnz	r0, 800e7d6 <_svfiprintf_r+0xea>
 800e79e:	06d0      	lsls	r0, r2, #27
 800e7a0:	bf44      	itt	mi
 800e7a2:	2320      	movmi	r3, #32
 800e7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7a8:	0711      	lsls	r1, r2, #28
 800e7aa:	bf44      	itt	mi
 800e7ac:	232b      	movmi	r3, #43	@ 0x2b
 800e7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7b8:	d015      	beq.n	800e7e6 <_svfiprintf_r+0xfa>
 800e7ba:	9a07      	ldr	r2, [sp, #28]
 800e7bc:	4654      	mov	r4, sl
 800e7be:	2000      	movs	r0, #0
 800e7c0:	f04f 0c0a 	mov.w	ip, #10
 800e7c4:	4621      	mov	r1, r4
 800e7c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7ca:	3b30      	subs	r3, #48	@ 0x30
 800e7cc:	2b09      	cmp	r3, #9
 800e7ce:	d94b      	bls.n	800e868 <_svfiprintf_r+0x17c>
 800e7d0:	b1b0      	cbz	r0, 800e800 <_svfiprintf_r+0x114>
 800e7d2:	9207      	str	r2, [sp, #28]
 800e7d4:	e014      	b.n	800e800 <_svfiprintf_r+0x114>
 800e7d6:	eba0 0308 	sub.w	r3, r0, r8
 800e7da:	fa09 f303 	lsl.w	r3, r9, r3
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	9304      	str	r3, [sp, #16]
 800e7e2:	46a2      	mov	sl, r4
 800e7e4:	e7d2      	b.n	800e78c <_svfiprintf_r+0xa0>
 800e7e6:	9b03      	ldr	r3, [sp, #12]
 800e7e8:	1d19      	adds	r1, r3, #4
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	9103      	str	r1, [sp, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	bfbb      	ittet	lt
 800e7f2:	425b      	neglt	r3, r3
 800e7f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e7f8:	9307      	strge	r3, [sp, #28]
 800e7fa:	9307      	strlt	r3, [sp, #28]
 800e7fc:	bfb8      	it	lt
 800e7fe:	9204      	strlt	r2, [sp, #16]
 800e800:	7823      	ldrb	r3, [r4, #0]
 800e802:	2b2e      	cmp	r3, #46	@ 0x2e
 800e804:	d10a      	bne.n	800e81c <_svfiprintf_r+0x130>
 800e806:	7863      	ldrb	r3, [r4, #1]
 800e808:	2b2a      	cmp	r3, #42	@ 0x2a
 800e80a:	d132      	bne.n	800e872 <_svfiprintf_r+0x186>
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	1d1a      	adds	r2, r3, #4
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	9203      	str	r2, [sp, #12]
 800e814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e818:	3402      	adds	r4, #2
 800e81a:	9305      	str	r3, [sp, #20]
 800e81c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8e0 <_svfiprintf_r+0x1f4>
 800e820:	7821      	ldrb	r1, [r4, #0]
 800e822:	2203      	movs	r2, #3
 800e824:	4650      	mov	r0, sl
 800e826:	f7f1 fcd3 	bl	80001d0 <memchr>
 800e82a:	b138      	cbz	r0, 800e83c <_svfiprintf_r+0x150>
 800e82c:	9b04      	ldr	r3, [sp, #16]
 800e82e:	eba0 000a 	sub.w	r0, r0, sl
 800e832:	2240      	movs	r2, #64	@ 0x40
 800e834:	4082      	lsls	r2, r0
 800e836:	4313      	orrs	r3, r2
 800e838:	3401      	adds	r4, #1
 800e83a:	9304      	str	r3, [sp, #16]
 800e83c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e840:	4824      	ldr	r0, [pc, #144]	@ (800e8d4 <_svfiprintf_r+0x1e8>)
 800e842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e846:	2206      	movs	r2, #6
 800e848:	f7f1 fcc2 	bl	80001d0 <memchr>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d036      	beq.n	800e8be <_svfiprintf_r+0x1d2>
 800e850:	4b21      	ldr	r3, [pc, #132]	@ (800e8d8 <_svfiprintf_r+0x1ec>)
 800e852:	bb1b      	cbnz	r3, 800e89c <_svfiprintf_r+0x1b0>
 800e854:	9b03      	ldr	r3, [sp, #12]
 800e856:	3307      	adds	r3, #7
 800e858:	f023 0307 	bic.w	r3, r3, #7
 800e85c:	3308      	adds	r3, #8
 800e85e:	9303      	str	r3, [sp, #12]
 800e860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e862:	4433      	add	r3, r6
 800e864:	9309      	str	r3, [sp, #36]	@ 0x24
 800e866:	e76a      	b.n	800e73e <_svfiprintf_r+0x52>
 800e868:	fb0c 3202 	mla	r2, ip, r2, r3
 800e86c:	460c      	mov	r4, r1
 800e86e:	2001      	movs	r0, #1
 800e870:	e7a8      	b.n	800e7c4 <_svfiprintf_r+0xd8>
 800e872:	2300      	movs	r3, #0
 800e874:	3401      	adds	r4, #1
 800e876:	9305      	str	r3, [sp, #20]
 800e878:	4619      	mov	r1, r3
 800e87a:	f04f 0c0a 	mov.w	ip, #10
 800e87e:	4620      	mov	r0, r4
 800e880:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e884:	3a30      	subs	r2, #48	@ 0x30
 800e886:	2a09      	cmp	r2, #9
 800e888:	d903      	bls.n	800e892 <_svfiprintf_r+0x1a6>
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d0c6      	beq.n	800e81c <_svfiprintf_r+0x130>
 800e88e:	9105      	str	r1, [sp, #20]
 800e890:	e7c4      	b.n	800e81c <_svfiprintf_r+0x130>
 800e892:	fb0c 2101 	mla	r1, ip, r1, r2
 800e896:	4604      	mov	r4, r0
 800e898:	2301      	movs	r3, #1
 800e89a:	e7f0      	b.n	800e87e <_svfiprintf_r+0x192>
 800e89c:	ab03      	add	r3, sp, #12
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	462a      	mov	r2, r5
 800e8a2:	4b0e      	ldr	r3, [pc, #56]	@ (800e8dc <_svfiprintf_r+0x1f0>)
 800e8a4:	a904      	add	r1, sp, #16
 800e8a6:	4638      	mov	r0, r7
 800e8a8:	f7fd fe1e 	bl	800c4e8 <_printf_float>
 800e8ac:	1c42      	adds	r2, r0, #1
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	d1d6      	bne.n	800e860 <_svfiprintf_r+0x174>
 800e8b2:	89ab      	ldrh	r3, [r5, #12]
 800e8b4:	065b      	lsls	r3, r3, #25
 800e8b6:	f53f af2d 	bmi.w	800e714 <_svfiprintf_r+0x28>
 800e8ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8bc:	e72c      	b.n	800e718 <_svfiprintf_r+0x2c>
 800e8be:	ab03      	add	r3, sp, #12
 800e8c0:	9300      	str	r3, [sp, #0]
 800e8c2:	462a      	mov	r2, r5
 800e8c4:	4b05      	ldr	r3, [pc, #20]	@ (800e8dc <_svfiprintf_r+0x1f0>)
 800e8c6:	a904      	add	r1, sp, #16
 800e8c8:	4638      	mov	r0, r7
 800e8ca:	f7fe f8a5 	bl	800ca18 <_printf_i>
 800e8ce:	e7ed      	b.n	800e8ac <_svfiprintf_r+0x1c0>
 800e8d0:	0800fe10 	.word	0x0800fe10
 800e8d4:	0800fe1a 	.word	0x0800fe1a
 800e8d8:	0800c4e9 	.word	0x0800c4e9
 800e8dc:	0800e635 	.word	0x0800e635
 800e8e0:	0800fe16 	.word	0x0800fe16

0800e8e4 <__sflush_r>:
 800e8e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ec:	0716      	lsls	r6, r2, #28
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	460c      	mov	r4, r1
 800e8f2:	d454      	bmi.n	800e99e <__sflush_r+0xba>
 800e8f4:	684b      	ldr	r3, [r1, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	dc02      	bgt.n	800e900 <__sflush_r+0x1c>
 800e8fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dd48      	ble.n	800e992 <__sflush_r+0xae>
 800e900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e902:	2e00      	cmp	r6, #0
 800e904:	d045      	beq.n	800e992 <__sflush_r+0xae>
 800e906:	2300      	movs	r3, #0
 800e908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e90c:	682f      	ldr	r7, [r5, #0]
 800e90e:	6a21      	ldr	r1, [r4, #32]
 800e910:	602b      	str	r3, [r5, #0]
 800e912:	d030      	beq.n	800e976 <__sflush_r+0x92>
 800e914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e916:	89a3      	ldrh	r3, [r4, #12]
 800e918:	0759      	lsls	r1, r3, #29
 800e91a:	d505      	bpl.n	800e928 <__sflush_r+0x44>
 800e91c:	6863      	ldr	r3, [r4, #4]
 800e91e:	1ad2      	subs	r2, r2, r3
 800e920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e922:	b10b      	cbz	r3, 800e928 <__sflush_r+0x44>
 800e924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e926:	1ad2      	subs	r2, r2, r3
 800e928:	2300      	movs	r3, #0
 800e92a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e92c:	6a21      	ldr	r1, [r4, #32]
 800e92e:	4628      	mov	r0, r5
 800e930:	47b0      	blx	r6
 800e932:	1c43      	adds	r3, r0, #1
 800e934:	89a3      	ldrh	r3, [r4, #12]
 800e936:	d106      	bne.n	800e946 <__sflush_r+0x62>
 800e938:	6829      	ldr	r1, [r5, #0]
 800e93a:	291d      	cmp	r1, #29
 800e93c:	d82b      	bhi.n	800e996 <__sflush_r+0xb2>
 800e93e:	4a2a      	ldr	r2, [pc, #168]	@ (800e9e8 <__sflush_r+0x104>)
 800e940:	410a      	asrs	r2, r1
 800e942:	07d6      	lsls	r6, r2, #31
 800e944:	d427      	bmi.n	800e996 <__sflush_r+0xb2>
 800e946:	2200      	movs	r2, #0
 800e948:	6062      	str	r2, [r4, #4]
 800e94a:	04d9      	lsls	r1, r3, #19
 800e94c:	6922      	ldr	r2, [r4, #16]
 800e94e:	6022      	str	r2, [r4, #0]
 800e950:	d504      	bpl.n	800e95c <__sflush_r+0x78>
 800e952:	1c42      	adds	r2, r0, #1
 800e954:	d101      	bne.n	800e95a <__sflush_r+0x76>
 800e956:	682b      	ldr	r3, [r5, #0]
 800e958:	b903      	cbnz	r3, 800e95c <__sflush_r+0x78>
 800e95a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e95c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e95e:	602f      	str	r7, [r5, #0]
 800e960:	b1b9      	cbz	r1, 800e992 <__sflush_r+0xae>
 800e962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e966:	4299      	cmp	r1, r3
 800e968:	d002      	beq.n	800e970 <__sflush_r+0x8c>
 800e96a:	4628      	mov	r0, r5
 800e96c:	f7ff f9e0 	bl	800dd30 <_free_r>
 800e970:	2300      	movs	r3, #0
 800e972:	6363      	str	r3, [r4, #52]	@ 0x34
 800e974:	e00d      	b.n	800e992 <__sflush_r+0xae>
 800e976:	2301      	movs	r3, #1
 800e978:	4628      	mov	r0, r5
 800e97a:	47b0      	blx	r6
 800e97c:	4602      	mov	r2, r0
 800e97e:	1c50      	adds	r0, r2, #1
 800e980:	d1c9      	bne.n	800e916 <__sflush_r+0x32>
 800e982:	682b      	ldr	r3, [r5, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d0c6      	beq.n	800e916 <__sflush_r+0x32>
 800e988:	2b1d      	cmp	r3, #29
 800e98a:	d001      	beq.n	800e990 <__sflush_r+0xac>
 800e98c:	2b16      	cmp	r3, #22
 800e98e:	d11e      	bne.n	800e9ce <__sflush_r+0xea>
 800e990:	602f      	str	r7, [r5, #0]
 800e992:	2000      	movs	r0, #0
 800e994:	e022      	b.n	800e9dc <__sflush_r+0xf8>
 800e996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e99a:	b21b      	sxth	r3, r3
 800e99c:	e01b      	b.n	800e9d6 <__sflush_r+0xf2>
 800e99e:	690f      	ldr	r7, [r1, #16]
 800e9a0:	2f00      	cmp	r7, #0
 800e9a2:	d0f6      	beq.n	800e992 <__sflush_r+0xae>
 800e9a4:	0793      	lsls	r3, r2, #30
 800e9a6:	680e      	ldr	r6, [r1, #0]
 800e9a8:	bf08      	it	eq
 800e9aa:	694b      	ldreq	r3, [r1, #20]
 800e9ac:	600f      	str	r7, [r1, #0]
 800e9ae:	bf18      	it	ne
 800e9b0:	2300      	movne	r3, #0
 800e9b2:	eba6 0807 	sub.w	r8, r6, r7
 800e9b6:	608b      	str	r3, [r1, #8]
 800e9b8:	f1b8 0f00 	cmp.w	r8, #0
 800e9bc:	dde9      	ble.n	800e992 <__sflush_r+0xae>
 800e9be:	6a21      	ldr	r1, [r4, #32]
 800e9c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e9c2:	4643      	mov	r3, r8
 800e9c4:	463a      	mov	r2, r7
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	47b0      	blx	r6
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	dc08      	bgt.n	800e9e0 <__sflush_r+0xfc>
 800e9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9d6:	81a3      	strh	r3, [r4, #12]
 800e9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9e0:	4407      	add	r7, r0
 800e9e2:	eba8 0800 	sub.w	r8, r8, r0
 800e9e6:	e7e7      	b.n	800e9b8 <__sflush_r+0xd4>
 800e9e8:	dfbffffe 	.word	0xdfbffffe

0800e9ec <_fflush_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	690b      	ldr	r3, [r1, #16]
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	460c      	mov	r4, r1
 800e9f4:	b913      	cbnz	r3, 800e9fc <_fflush_r+0x10>
 800e9f6:	2500      	movs	r5, #0
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	b118      	cbz	r0, 800ea06 <_fflush_r+0x1a>
 800e9fe:	6a03      	ldr	r3, [r0, #32]
 800ea00:	b90b      	cbnz	r3, 800ea06 <_fflush_r+0x1a>
 800ea02:	f7fe f9b5 	bl	800cd70 <__sinit>
 800ea06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d0f3      	beq.n	800e9f6 <_fflush_r+0xa>
 800ea0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ea10:	07d0      	lsls	r0, r2, #31
 800ea12:	d404      	bmi.n	800ea1e <_fflush_r+0x32>
 800ea14:	0599      	lsls	r1, r3, #22
 800ea16:	d402      	bmi.n	800ea1e <_fflush_r+0x32>
 800ea18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea1a:	f7fe fb2a 	bl	800d072 <__retarget_lock_acquire_recursive>
 800ea1e:	4628      	mov	r0, r5
 800ea20:	4621      	mov	r1, r4
 800ea22:	f7ff ff5f 	bl	800e8e4 <__sflush_r>
 800ea26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea28:	07da      	lsls	r2, r3, #31
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	d4e4      	bmi.n	800e9f8 <_fflush_r+0xc>
 800ea2e:	89a3      	ldrh	r3, [r4, #12]
 800ea30:	059b      	lsls	r3, r3, #22
 800ea32:	d4e1      	bmi.n	800e9f8 <_fflush_r+0xc>
 800ea34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea36:	f7fe fb1d 	bl	800d074 <__retarget_lock_release_recursive>
 800ea3a:	e7dd      	b.n	800e9f8 <_fflush_r+0xc>

0800ea3c <memmove>:
 800ea3c:	4288      	cmp	r0, r1
 800ea3e:	b510      	push	{r4, lr}
 800ea40:	eb01 0402 	add.w	r4, r1, r2
 800ea44:	d902      	bls.n	800ea4c <memmove+0x10>
 800ea46:	4284      	cmp	r4, r0
 800ea48:	4623      	mov	r3, r4
 800ea4a:	d807      	bhi.n	800ea5c <memmove+0x20>
 800ea4c:	1e43      	subs	r3, r0, #1
 800ea4e:	42a1      	cmp	r1, r4
 800ea50:	d008      	beq.n	800ea64 <memmove+0x28>
 800ea52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea5a:	e7f8      	b.n	800ea4e <memmove+0x12>
 800ea5c:	4402      	add	r2, r0
 800ea5e:	4601      	mov	r1, r0
 800ea60:	428a      	cmp	r2, r1
 800ea62:	d100      	bne.n	800ea66 <memmove+0x2a>
 800ea64:	bd10      	pop	{r4, pc}
 800ea66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea6e:	e7f7      	b.n	800ea60 <memmove+0x24>

0800ea70 <_sbrk_r>:
 800ea70:	b538      	push	{r3, r4, r5, lr}
 800ea72:	4d06      	ldr	r5, [pc, #24]	@ (800ea8c <_sbrk_r+0x1c>)
 800ea74:	2300      	movs	r3, #0
 800ea76:	4604      	mov	r4, r0
 800ea78:	4608      	mov	r0, r1
 800ea7a:	602b      	str	r3, [r5, #0]
 800ea7c:	f7f4 fbea 	bl	8003254 <_sbrk>
 800ea80:	1c43      	adds	r3, r0, #1
 800ea82:	d102      	bne.n	800ea8a <_sbrk_r+0x1a>
 800ea84:	682b      	ldr	r3, [r5, #0]
 800ea86:	b103      	cbz	r3, 800ea8a <_sbrk_r+0x1a>
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	bd38      	pop	{r3, r4, r5, pc}
 800ea8c:	20004fc4 	.word	0x20004fc4

0800ea90 <__assert_func>:
 800ea90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea92:	4614      	mov	r4, r2
 800ea94:	461a      	mov	r2, r3
 800ea96:	4b09      	ldr	r3, [pc, #36]	@ (800eabc <__assert_func+0x2c>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	68d8      	ldr	r0, [r3, #12]
 800ea9e:	b954      	cbnz	r4, 800eab6 <__assert_func+0x26>
 800eaa0:	4b07      	ldr	r3, [pc, #28]	@ (800eac0 <__assert_func+0x30>)
 800eaa2:	461c      	mov	r4, r3
 800eaa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eaa8:	9100      	str	r1, [sp, #0]
 800eaaa:	462b      	mov	r3, r5
 800eaac:	4905      	ldr	r1, [pc, #20]	@ (800eac4 <__assert_func+0x34>)
 800eaae:	f000 f86f 	bl	800eb90 <fiprintf>
 800eab2:	f000 f87f 	bl	800ebb4 <abort>
 800eab6:	4b04      	ldr	r3, [pc, #16]	@ (800eac8 <__assert_func+0x38>)
 800eab8:	e7f4      	b.n	800eaa4 <__assert_func+0x14>
 800eaba:	bf00      	nop
 800eabc:	2000001c 	.word	0x2000001c
 800eac0:	0800fe66 	.word	0x0800fe66
 800eac4:	0800fe38 	.word	0x0800fe38
 800eac8:	0800fe2b 	.word	0x0800fe2b

0800eacc <_calloc_r>:
 800eacc:	b570      	push	{r4, r5, r6, lr}
 800eace:	fba1 5402 	umull	r5, r4, r1, r2
 800ead2:	b93c      	cbnz	r4, 800eae4 <_calloc_r+0x18>
 800ead4:	4629      	mov	r1, r5
 800ead6:	f7ff f99f 	bl	800de18 <_malloc_r>
 800eada:	4606      	mov	r6, r0
 800eadc:	b928      	cbnz	r0, 800eaea <_calloc_r+0x1e>
 800eade:	2600      	movs	r6, #0
 800eae0:	4630      	mov	r0, r6
 800eae2:	bd70      	pop	{r4, r5, r6, pc}
 800eae4:	220c      	movs	r2, #12
 800eae6:	6002      	str	r2, [r0, #0]
 800eae8:	e7f9      	b.n	800eade <_calloc_r+0x12>
 800eaea:	462a      	mov	r2, r5
 800eaec:	4621      	mov	r1, r4
 800eaee:	f7fe f9ec 	bl	800ceca <memset>
 800eaf2:	e7f5      	b.n	800eae0 <_calloc_r+0x14>

0800eaf4 <__ascii_mbtowc>:
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	b901      	cbnz	r1, 800eafa <__ascii_mbtowc+0x6>
 800eaf8:	a901      	add	r1, sp, #4
 800eafa:	b142      	cbz	r2, 800eb0e <__ascii_mbtowc+0x1a>
 800eafc:	b14b      	cbz	r3, 800eb12 <__ascii_mbtowc+0x1e>
 800eafe:	7813      	ldrb	r3, [r2, #0]
 800eb00:	600b      	str	r3, [r1, #0]
 800eb02:	7812      	ldrb	r2, [r2, #0]
 800eb04:	1e10      	subs	r0, r2, #0
 800eb06:	bf18      	it	ne
 800eb08:	2001      	movne	r0, #1
 800eb0a:	b002      	add	sp, #8
 800eb0c:	4770      	bx	lr
 800eb0e:	4610      	mov	r0, r2
 800eb10:	e7fb      	b.n	800eb0a <__ascii_mbtowc+0x16>
 800eb12:	f06f 0001 	mvn.w	r0, #1
 800eb16:	e7f8      	b.n	800eb0a <__ascii_mbtowc+0x16>

0800eb18 <_realloc_r>:
 800eb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1c:	4680      	mov	r8, r0
 800eb1e:	4615      	mov	r5, r2
 800eb20:	460c      	mov	r4, r1
 800eb22:	b921      	cbnz	r1, 800eb2e <_realloc_r+0x16>
 800eb24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb28:	4611      	mov	r1, r2
 800eb2a:	f7ff b975 	b.w	800de18 <_malloc_r>
 800eb2e:	b92a      	cbnz	r2, 800eb3c <_realloc_r+0x24>
 800eb30:	f7ff f8fe 	bl	800dd30 <_free_r>
 800eb34:	2400      	movs	r4, #0
 800eb36:	4620      	mov	r0, r4
 800eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3c:	f000 f841 	bl	800ebc2 <_malloc_usable_size_r>
 800eb40:	4285      	cmp	r5, r0
 800eb42:	4606      	mov	r6, r0
 800eb44:	d802      	bhi.n	800eb4c <_realloc_r+0x34>
 800eb46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eb4a:	d8f4      	bhi.n	800eb36 <_realloc_r+0x1e>
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	4640      	mov	r0, r8
 800eb50:	f7ff f962 	bl	800de18 <_malloc_r>
 800eb54:	4607      	mov	r7, r0
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d0ec      	beq.n	800eb34 <_realloc_r+0x1c>
 800eb5a:	42b5      	cmp	r5, r6
 800eb5c:	462a      	mov	r2, r5
 800eb5e:	4621      	mov	r1, r4
 800eb60:	bf28      	it	cs
 800eb62:	4632      	movcs	r2, r6
 800eb64:	f7fe fa87 	bl	800d076 <memcpy>
 800eb68:	4621      	mov	r1, r4
 800eb6a:	4640      	mov	r0, r8
 800eb6c:	f7ff f8e0 	bl	800dd30 <_free_r>
 800eb70:	463c      	mov	r4, r7
 800eb72:	e7e0      	b.n	800eb36 <_realloc_r+0x1e>

0800eb74 <__ascii_wctomb>:
 800eb74:	4603      	mov	r3, r0
 800eb76:	4608      	mov	r0, r1
 800eb78:	b141      	cbz	r1, 800eb8c <__ascii_wctomb+0x18>
 800eb7a:	2aff      	cmp	r2, #255	@ 0xff
 800eb7c:	d904      	bls.n	800eb88 <__ascii_wctomb+0x14>
 800eb7e:	228a      	movs	r2, #138	@ 0x8a
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	f04f 30ff 	mov.w	r0, #4294967295
 800eb86:	4770      	bx	lr
 800eb88:	700a      	strb	r2, [r1, #0]
 800eb8a:	2001      	movs	r0, #1
 800eb8c:	4770      	bx	lr
	...

0800eb90 <fiprintf>:
 800eb90:	b40e      	push	{r1, r2, r3}
 800eb92:	b503      	push	{r0, r1, lr}
 800eb94:	4601      	mov	r1, r0
 800eb96:	ab03      	add	r3, sp, #12
 800eb98:	4805      	ldr	r0, [pc, #20]	@ (800ebb0 <fiprintf+0x20>)
 800eb9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb9e:	6800      	ldr	r0, [r0, #0]
 800eba0:	9301      	str	r3, [sp, #4]
 800eba2:	f000 f83f 	bl	800ec24 <_vfiprintf_r>
 800eba6:	b002      	add	sp, #8
 800eba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebac:	b003      	add	sp, #12
 800ebae:	4770      	bx	lr
 800ebb0:	2000001c 	.word	0x2000001c

0800ebb4 <abort>:
 800ebb4:	b508      	push	{r3, lr}
 800ebb6:	2006      	movs	r0, #6
 800ebb8:	f000 fa08 	bl	800efcc <raise>
 800ebbc:	2001      	movs	r0, #1
 800ebbe:	f7f4 fad1 	bl	8003164 <_exit>

0800ebc2 <_malloc_usable_size_r>:
 800ebc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebc6:	1f18      	subs	r0, r3, #4
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	bfbc      	itt	lt
 800ebcc:	580b      	ldrlt	r3, [r1, r0]
 800ebce:	18c0      	addlt	r0, r0, r3
 800ebd0:	4770      	bx	lr

0800ebd2 <__sfputc_r>:
 800ebd2:	6893      	ldr	r3, [r2, #8]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	b410      	push	{r4}
 800ebda:	6093      	str	r3, [r2, #8]
 800ebdc:	da08      	bge.n	800ebf0 <__sfputc_r+0x1e>
 800ebde:	6994      	ldr	r4, [r2, #24]
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	db01      	blt.n	800ebe8 <__sfputc_r+0x16>
 800ebe4:	290a      	cmp	r1, #10
 800ebe6:	d103      	bne.n	800ebf0 <__sfputc_r+0x1e>
 800ebe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebec:	f000 b932 	b.w	800ee54 <__swbuf_r>
 800ebf0:	6813      	ldr	r3, [r2, #0]
 800ebf2:	1c58      	adds	r0, r3, #1
 800ebf4:	6010      	str	r0, [r2, #0]
 800ebf6:	7019      	strb	r1, [r3, #0]
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <__sfputs_r>:
 800ec00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec02:	4606      	mov	r6, r0
 800ec04:	460f      	mov	r7, r1
 800ec06:	4614      	mov	r4, r2
 800ec08:	18d5      	adds	r5, r2, r3
 800ec0a:	42ac      	cmp	r4, r5
 800ec0c:	d101      	bne.n	800ec12 <__sfputs_r+0x12>
 800ec0e:	2000      	movs	r0, #0
 800ec10:	e007      	b.n	800ec22 <__sfputs_r+0x22>
 800ec12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec16:	463a      	mov	r2, r7
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f7ff ffda 	bl	800ebd2 <__sfputc_r>
 800ec1e:	1c43      	adds	r3, r0, #1
 800ec20:	d1f3      	bne.n	800ec0a <__sfputs_r+0xa>
 800ec22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec24 <_vfiprintf_r>:
 800ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	460d      	mov	r5, r1
 800ec2a:	b09d      	sub	sp, #116	@ 0x74
 800ec2c:	4614      	mov	r4, r2
 800ec2e:	4698      	mov	r8, r3
 800ec30:	4606      	mov	r6, r0
 800ec32:	b118      	cbz	r0, 800ec3c <_vfiprintf_r+0x18>
 800ec34:	6a03      	ldr	r3, [r0, #32]
 800ec36:	b90b      	cbnz	r3, 800ec3c <_vfiprintf_r+0x18>
 800ec38:	f7fe f89a 	bl	800cd70 <__sinit>
 800ec3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec3e:	07d9      	lsls	r1, r3, #31
 800ec40:	d405      	bmi.n	800ec4e <_vfiprintf_r+0x2a>
 800ec42:	89ab      	ldrh	r3, [r5, #12]
 800ec44:	059a      	lsls	r2, r3, #22
 800ec46:	d402      	bmi.n	800ec4e <_vfiprintf_r+0x2a>
 800ec48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec4a:	f7fe fa12 	bl	800d072 <__retarget_lock_acquire_recursive>
 800ec4e:	89ab      	ldrh	r3, [r5, #12]
 800ec50:	071b      	lsls	r3, r3, #28
 800ec52:	d501      	bpl.n	800ec58 <_vfiprintf_r+0x34>
 800ec54:	692b      	ldr	r3, [r5, #16]
 800ec56:	b99b      	cbnz	r3, 800ec80 <_vfiprintf_r+0x5c>
 800ec58:	4629      	mov	r1, r5
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	f000 f938 	bl	800eed0 <__swsetup_r>
 800ec60:	b170      	cbz	r0, 800ec80 <_vfiprintf_r+0x5c>
 800ec62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec64:	07dc      	lsls	r4, r3, #31
 800ec66:	d504      	bpl.n	800ec72 <_vfiprintf_r+0x4e>
 800ec68:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6c:	b01d      	add	sp, #116	@ 0x74
 800ec6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec72:	89ab      	ldrh	r3, [r5, #12]
 800ec74:	0598      	lsls	r0, r3, #22
 800ec76:	d4f7      	bmi.n	800ec68 <_vfiprintf_r+0x44>
 800ec78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec7a:	f7fe f9fb 	bl	800d074 <__retarget_lock_release_recursive>
 800ec7e:	e7f3      	b.n	800ec68 <_vfiprintf_r+0x44>
 800ec80:	2300      	movs	r3, #0
 800ec82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec84:	2320      	movs	r3, #32
 800ec86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec8e:	2330      	movs	r3, #48	@ 0x30
 800ec90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee40 <_vfiprintf_r+0x21c>
 800ec94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec98:	f04f 0901 	mov.w	r9, #1
 800ec9c:	4623      	mov	r3, r4
 800ec9e:	469a      	mov	sl, r3
 800eca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eca4:	b10a      	cbz	r2, 800ecaa <_vfiprintf_r+0x86>
 800eca6:	2a25      	cmp	r2, #37	@ 0x25
 800eca8:	d1f9      	bne.n	800ec9e <_vfiprintf_r+0x7a>
 800ecaa:	ebba 0b04 	subs.w	fp, sl, r4
 800ecae:	d00b      	beq.n	800ecc8 <_vfiprintf_r+0xa4>
 800ecb0:	465b      	mov	r3, fp
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f7ff ffa2 	bl	800ec00 <__sfputs_r>
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	f000 80a7 	beq.w	800ee10 <_vfiprintf_r+0x1ec>
 800ecc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecc4:	445a      	add	r2, fp
 800ecc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecc8:	f89a 3000 	ldrb.w	r3, [sl]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	f000 809f 	beq.w	800ee10 <_vfiprintf_r+0x1ec>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecdc:	f10a 0a01 	add.w	sl, sl, #1
 800ece0:	9304      	str	r3, [sp, #16]
 800ece2:	9307      	str	r3, [sp, #28]
 800ece4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ece8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecea:	4654      	mov	r4, sl
 800ecec:	2205      	movs	r2, #5
 800ecee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecf2:	4853      	ldr	r0, [pc, #332]	@ (800ee40 <_vfiprintf_r+0x21c>)
 800ecf4:	f7f1 fa6c 	bl	80001d0 <memchr>
 800ecf8:	9a04      	ldr	r2, [sp, #16]
 800ecfa:	b9d8      	cbnz	r0, 800ed34 <_vfiprintf_r+0x110>
 800ecfc:	06d1      	lsls	r1, r2, #27
 800ecfe:	bf44      	itt	mi
 800ed00:	2320      	movmi	r3, #32
 800ed02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed06:	0713      	lsls	r3, r2, #28
 800ed08:	bf44      	itt	mi
 800ed0a:	232b      	movmi	r3, #43	@ 0x2b
 800ed0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed10:	f89a 3000 	ldrb.w	r3, [sl]
 800ed14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed16:	d015      	beq.n	800ed44 <_vfiprintf_r+0x120>
 800ed18:	9a07      	ldr	r2, [sp, #28]
 800ed1a:	4654      	mov	r4, sl
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	f04f 0c0a 	mov.w	ip, #10
 800ed22:	4621      	mov	r1, r4
 800ed24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed28:	3b30      	subs	r3, #48	@ 0x30
 800ed2a:	2b09      	cmp	r3, #9
 800ed2c:	d94b      	bls.n	800edc6 <_vfiprintf_r+0x1a2>
 800ed2e:	b1b0      	cbz	r0, 800ed5e <_vfiprintf_r+0x13a>
 800ed30:	9207      	str	r2, [sp, #28]
 800ed32:	e014      	b.n	800ed5e <_vfiprintf_r+0x13a>
 800ed34:	eba0 0308 	sub.w	r3, r0, r8
 800ed38:	fa09 f303 	lsl.w	r3, r9, r3
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	9304      	str	r3, [sp, #16]
 800ed40:	46a2      	mov	sl, r4
 800ed42:	e7d2      	b.n	800ecea <_vfiprintf_r+0xc6>
 800ed44:	9b03      	ldr	r3, [sp, #12]
 800ed46:	1d19      	adds	r1, r3, #4
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	9103      	str	r1, [sp, #12]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	bfbb      	ittet	lt
 800ed50:	425b      	neglt	r3, r3
 800ed52:	f042 0202 	orrlt.w	r2, r2, #2
 800ed56:	9307      	strge	r3, [sp, #28]
 800ed58:	9307      	strlt	r3, [sp, #28]
 800ed5a:	bfb8      	it	lt
 800ed5c:	9204      	strlt	r2, [sp, #16]
 800ed5e:	7823      	ldrb	r3, [r4, #0]
 800ed60:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed62:	d10a      	bne.n	800ed7a <_vfiprintf_r+0x156>
 800ed64:	7863      	ldrb	r3, [r4, #1]
 800ed66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed68:	d132      	bne.n	800edd0 <_vfiprintf_r+0x1ac>
 800ed6a:	9b03      	ldr	r3, [sp, #12]
 800ed6c:	1d1a      	adds	r2, r3, #4
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	9203      	str	r2, [sp, #12]
 800ed72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed76:	3402      	adds	r4, #2
 800ed78:	9305      	str	r3, [sp, #20]
 800ed7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee50 <_vfiprintf_r+0x22c>
 800ed7e:	7821      	ldrb	r1, [r4, #0]
 800ed80:	2203      	movs	r2, #3
 800ed82:	4650      	mov	r0, sl
 800ed84:	f7f1 fa24 	bl	80001d0 <memchr>
 800ed88:	b138      	cbz	r0, 800ed9a <_vfiprintf_r+0x176>
 800ed8a:	9b04      	ldr	r3, [sp, #16]
 800ed8c:	eba0 000a 	sub.w	r0, r0, sl
 800ed90:	2240      	movs	r2, #64	@ 0x40
 800ed92:	4082      	lsls	r2, r0
 800ed94:	4313      	orrs	r3, r2
 800ed96:	3401      	adds	r4, #1
 800ed98:	9304      	str	r3, [sp, #16]
 800ed9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed9e:	4829      	ldr	r0, [pc, #164]	@ (800ee44 <_vfiprintf_r+0x220>)
 800eda0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eda4:	2206      	movs	r2, #6
 800eda6:	f7f1 fa13 	bl	80001d0 <memchr>
 800edaa:	2800      	cmp	r0, #0
 800edac:	d03f      	beq.n	800ee2e <_vfiprintf_r+0x20a>
 800edae:	4b26      	ldr	r3, [pc, #152]	@ (800ee48 <_vfiprintf_r+0x224>)
 800edb0:	bb1b      	cbnz	r3, 800edfa <_vfiprintf_r+0x1d6>
 800edb2:	9b03      	ldr	r3, [sp, #12]
 800edb4:	3307      	adds	r3, #7
 800edb6:	f023 0307 	bic.w	r3, r3, #7
 800edba:	3308      	adds	r3, #8
 800edbc:	9303      	str	r3, [sp, #12]
 800edbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edc0:	443b      	add	r3, r7
 800edc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800edc4:	e76a      	b.n	800ec9c <_vfiprintf_r+0x78>
 800edc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800edca:	460c      	mov	r4, r1
 800edcc:	2001      	movs	r0, #1
 800edce:	e7a8      	b.n	800ed22 <_vfiprintf_r+0xfe>
 800edd0:	2300      	movs	r3, #0
 800edd2:	3401      	adds	r4, #1
 800edd4:	9305      	str	r3, [sp, #20]
 800edd6:	4619      	mov	r1, r3
 800edd8:	f04f 0c0a 	mov.w	ip, #10
 800eddc:	4620      	mov	r0, r4
 800edde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ede2:	3a30      	subs	r2, #48	@ 0x30
 800ede4:	2a09      	cmp	r2, #9
 800ede6:	d903      	bls.n	800edf0 <_vfiprintf_r+0x1cc>
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d0c6      	beq.n	800ed7a <_vfiprintf_r+0x156>
 800edec:	9105      	str	r1, [sp, #20]
 800edee:	e7c4      	b.n	800ed7a <_vfiprintf_r+0x156>
 800edf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800edf4:	4604      	mov	r4, r0
 800edf6:	2301      	movs	r3, #1
 800edf8:	e7f0      	b.n	800eddc <_vfiprintf_r+0x1b8>
 800edfa:	ab03      	add	r3, sp, #12
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	462a      	mov	r2, r5
 800ee00:	4b12      	ldr	r3, [pc, #72]	@ (800ee4c <_vfiprintf_r+0x228>)
 800ee02:	a904      	add	r1, sp, #16
 800ee04:	4630      	mov	r0, r6
 800ee06:	f7fd fb6f 	bl	800c4e8 <_printf_float>
 800ee0a:	4607      	mov	r7, r0
 800ee0c:	1c78      	adds	r0, r7, #1
 800ee0e:	d1d6      	bne.n	800edbe <_vfiprintf_r+0x19a>
 800ee10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee12:	07d9      	lsls	r1, r3, #31
 800ee14:	d405      	bmi.n	800ee22 <_vfiprintf_r+0x1fe>
 800ee16:	89ab      	ldrh	r3, [r5, #12]
 800ee18:	059a      	lsls	r2, r3, #22
 800ee1a:	d402      	bmi.n	800ee22 <_vfiprintf_r+0x1fe>
 800ee1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee1e:	f7fe f929 	bl	800d074 <__retarget_lock_release_recursive>
 800ee22:	89ab      	ldrh	r3, [r5, #12]
 800ee24:	065b      	lsls	r3, r3, #25
 800ee26:	f53f af1f 	bmi.w	800ec68 <_vfiprintf_r+0x44>
 800ee2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee2c:	e71e      	b.n	800ec6c <_vfiprintf_r+0x48>
 800ee2e:	ab03      	add	r3, sp, #12
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	462a      	mov	r2, r5
 800ee34:	4b05      	ldr	r3, [pc, #20]	@ (800ee4c <_vfiprintf_r+0x228>)
 800ee36:	a904      	add	r1, sp, #16
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f7fd fded 	bl	800ca18 <_printf_i>
 800ee3e:	e7e4      	b.n	800ee0a <_vfiprintf_r+0x1e6>
 800ee40:	0800fe10 	.word	0x0800fe10
 800ee44:	0800fe1a 	.word	0x0800fe1a
 800ee48:	0800c4e9 	.word	0x0800c4e9
 800ee4c:	0800ec01 	.word	0x0800ec01
 800ee50:	0800fe16 	.word	0x0800fe16

0800ee54 <__swbuf_r>:
 800ee54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee56:	460e      	mov	r6, r1
 800ee58:	4614      	mov	r4, r2
 800ee5a:	4605      	mov	r5, r0
 800ee5c:	b118      	cbz	r0, 800ee66 <__swbuf_r+0x12>
 800ee5e:	6a03      	ldr	r3, [r0, #32]
 800ee60:	b90b      	cbnz	r3, 800ee66 <__swbuf_r+0x12>
 800ee62:	f7fd ff85 	bl	800cd70 <__sinit>
 800ee66:	69a3      	ldr	r3, [r4, #24]
 800ee68:	60a3      	str	r3, [r4, #8]
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	071a      	lsls	r2, r3, #28
 800ee6e:	d501      	bpl.n	800ee74 <__swbuf_r+0x20>
 800ee70:	6923      	ldr	r3, [r4, #16]
 800ee72:	b943      	cbnz	r3, 800ee86 <__swbuf_r+0x32>
 800ee74:	4621      	mov	r1, r4
 800ee76:	4628      	mov	r0, r5
 800ee78:	f000 f82a 	bl	800eed0 <__swsetup_r>
 800ee7c:	b118      	cbz	r0, 800ee86 <__swbuf_r+0x32>
 800ee7e:	f04f 37ff 	mov.w	r7, #4294967295
 800ee82:	4638      	mov	r0, r7
 800ee84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee86:	6823      	ldr	r3, [r4, #0]
 800ee88:	6922      	ldr	r2, [r4, #16]
 800ee8a:	1a98      	subs	r0, r3, r2
 800ee8c:	6963      	ldr	r3, [r4, #20]
 800ee8e:	b2f6      	uxtb	r6, r6
 800ee90:	4283      	cmp	r3, r0
 800ee92:	4637      	mov	r7, r6
 800ee94:	dc05      	bgt.n	800eea2 <__swbuf_r+0x4e>
 800ee96:	4621      	mov	r1, r4
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f7ff fda7 	bl	800e9ec <_fflush_r>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d1ed      	bne.n	800ee7e <__swbuf_r+0x2a>
 800eea2:	68a3      	ldr	r3, [r4, #8]
 800eea4:	3b01      	subs	r3, #1
 800eea6:	60a3      	str	r3, [r4, #8]
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	1c5a      	adds	r2, r3, #1
 800eeac:	6022      	str	r2, [r4, #0]
 800eeae:	701e      	strb	r6, [r3, #0]
 800eeb0:	6962      	ldr	r2, [r4, #20]
 800eeb2:	1c43      	adds	r3, r0, #1
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d004      	beq.n	800eec2 <__swbuf_r+0x6e>
 800eeb8:	89a3      	ldrh	r3, [r4, #12]
 800eeba:	07db      	lsls	r3, r3, #31
 800eebc:	d5e1      	bpl.n	800ee82 <__swbuf_r+0x2e>
 800eebe:	2e0a      	cmp	r6, #10
 800eec0:	d1df      	bne.n	800ee82 <__swbuf_r+0x2e>
 800eec2:	4621      	mov	r1, r4
 800eec4:	4628      	mov	r0, r5
 800eec6:	f7ff fd91 	bl	800e9ec <_fflush_r>
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d0d9      	beq.n	800ee82 <__swbuf_r+0x2e>
 800eece:	e7d6      	b.n	800ee7e <__swbuf_r+0x2a>

0800eed0 <__swsetup_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4b29      	ldr	r3, [pc, #164]	@ (800ef78 <__swsetup_r+0xa8>)
 800eed4:	4605      	mov	r5, r0
 800eed6:	6818      	ldr	r0, [r3, #0]
 800eed8:	460c      	mov	r4, r1
 800eeda:	b118      	cbz	r0, 800eee4 <__swsetup_r+0x14>
 800eedc:	6a03      	ldr	r3, [r0, #32]
 800eede:	b90b      	cbnz	r3, 800eee4 <__swsetup_r+0x14>
 800eee0:	f7fd ff46 	bl	800cd70 <__sinit>
 800eee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee8:	0719      	lsls	r1, r3, #28
 800eeea:	d422      	bmi.n	800ef32 <__swsetup_r+0x62>
 800eeec:	06da      	lsls	r2, r3, #27
 800eeee:	d407      	bmi.n	800ef00 <__swsetup_r+0x30>
 800eef0:	2209      	movs	r2, #9
 800eef2:	602a      	str	r2, [r5, #0]
 800eef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eef8:	81a3      	strh	r3, [r4, #12]
 800eefa:	f04f 30ff 	mov.w	r0, #4294967295
 800eefe:	e033      	b.n	800ef68 <__swsetup_r+0x98>
 800ef00:	0758      	lsls	r0, r3, #29
 800ef02:	d512      	bpl.n	800ef2a <__swsetup_r+0x5a>
 800ef04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef06:	b141      	cbz	r1, 800ef1a <__swsetup_r+0x4a>
 800ef08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef0c:	4299      	cmp	r1, r3
 800ef0e:	d002      	beq.n	800ef16 <__swsetup_r+0x46>
 800ef10:	4628      	mov	r0, r5
 800ef12:	f7fe ff0d 	bl	800dd30 <_free_r>
 800ef16:	2300      	movs	r3, #0
 800ef18:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef1a:	89a3      	ldrh	r3, [r4, #12]
 800ef1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef20:	81a3      	strh	r3, [r4, #12]
 800ef22:	2300      	movs	r3, #0
 800ef24:	6063      	str	r3, [r4, #4]
 800ef26:	6923      	ldr	r3, [r4, #16]
 800ef28:	6023      	str	r3, [r4, #0]
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f043 0308 	orr.w	r3, r3, #8
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	6923      	ldr	r3, [r4, #16]
 800ef34:	b94b      	cbnz	r3, 800ef4a <__swsetup_r+0x7a>
 800ef36:	89a3      	ldrh	r3, [r4, #12]
 800ef38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef40:	d003      	beq.n	800ef4a <__swsetup_r+0x7a>
 800ef42:	4621      	mov	r1, r4
 800ef44:	4628      	mov	r0, r5
 800ef46:	f000 f883 	bl	800f050 <__smakebuf_r>
 800ef4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef4e:	f013 0201 	ands.w	r2, r3, #1
 800ef52:	d00a      	beq.n	800ef6a <__swsetup_r+0x9a>
 800ef54:	2200      	movs	r2, #0
 800ef56:	60a2      	str	r2, [r4, #8]
 800ef58:	6962      	ldr	r2, [r4, #20]
 800ef5a:	4252      	negs	r2, r2
 800ef5c:	61a2      	str	r2, [r4, #24]
 800ef5e:	6922      	ldr	r2, [r4, #16]
 800ef60:	b942      	cbnz	r2, 800ef74 <__swsetup_r+0xa4>
 800ef62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef66:	d1c5      	bne.n	800eef4 <__swsetup_r+0x24>
 800ef68:	bd38      	pop	{r3, r4, r5, pc}
 800ef6a:	0799      	lsls	r1, r3, #30
 800ef6c:	bf58      	it	pl
 800ef6e:	6962      	ldrpl	r2, [r4, #20]
 800ef70:	60a2      	str	r2, [r4, #8]
 800ef72:	e7f4      	b.n	800ef5e <__swsetup_r+0x8e>
 800ef74:	2000      	movs	r0, #0
 800ef76:	e7f7      	b.n	800ef68 <__swsetup_r+0x98>
 800ef78:	2000001c 	.word	0x2000001c

0800ef7c <_raise_r>:
 800ef7c:	291f      	cmp	r1, #31
 800ef7e:	b538      	push	{r3, r4, r5, lr}
 800ef80:	4605      	mov	r5, r0
 800ef82:	460c      	mov	r4, r1
 800ef84:	d904      	bls.n	800ef90 <_raise_r+0x14>
 800ef86:	2316      	movs	r3, #22
 800ef88:	6003      	str	r3, [r0, #0]
 800ef8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef92:	b112      	cbz	r2, 800ef9a <_raise_r+0x1e>
 800ef94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef98:	b94b      	cbnz	r3, 800efae <_raise_r+0x32>
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	f000 f830 	bl	800f000 <_getpid_r>
 800efa0:	4622      	mov	r2, r4
 800efa2:	4601      	mov	r1, r0
 800efa4:	4628      	mov	r0, r5
 800efa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efaa:	f000 b817 	b.w	800efdc <_kill_r>
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d00a      	beq.n	800efc8 <_raise_r+0x4c>
 800efb2:	1c59      	adds	r1, r3, #1
 800efb4:	d103      	bne.n	800efbe <_raise_r+0x42>
 800efb6:	2316      	movs	r3, #22
 800efb8:	6003      	str	r3, [r0, #0]
 800efba:	2001      	movs	r0, #1
 800efbc:	e7e7      	b.n	800ef8e <_raise_r+0x12>
 800efbe:	2100      	movs	r1, #0
 800efc0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efc4:	4620      	mov	r0, r4
 800efc6:	4798      	blx	r3
 800efc8:	2000      	movs	r0, #0
 800efca:	e7e0      	b.n	800ef8e <_raise_r+0x12>

0800efcc <raise>:
 800efcc:	4b02      	ldr	r3, [pc, #8]	@ (800efd8 <raise+0xc>)
 800efce:	4601      	mov	r1, r0
 800efd0:	6818      	ldr	r0, [r3, #0]
 800efd2:	f7ff bfd3 	b.w	800ef7c <_raise_r>
 800efd6:	bf00      	nop
 800efd8:	2000001c 	.word	0x2000001c

0800efdc <_kill_r>:
 800efdc:	b538      	push	{r3, r4, r5, lr}
 800efde:	4d07      	ldr	r5, [pc, #28]	@ (800effc <_kill_r+0x20>)
 800efe0:	2300      	movs	r3, #0
 800efe2:	4604      	mov	r4, r0
 800efe4:	4608      	mov	r0, r1
 800efe6:	4611      	mov	r1, r2
 800efe8:	602b      	str	r3, [r5, #0]
 800efea:	f7f4 f8ab 	bl	8003144 <_kill>
 800efee:	1c43      	adds	r3, r0, #1
 800eff0:	d102      	bne.n	800eff8 <_kill_r+0x1c>
 800eff2:	682b      	ldr	r3, [r5, #0]
 800eff4:	b103      	cbz	r3, 800eff8 <_kill_r+0x1c>
 800eff6:	6023      	str	r3, [r4, #0]
 800eff8:	bd38      	pop	{r3, r4, r5, pc}
 800effa:	bf00      	nop
 800effc:	20004fc4 	.word	0x20004fc4

0800f000 <_getpid_r>:
 800f000:	f7f4 b898 	b.w	8003134 <_getpid>

0800f004 <__swhatbuf_r>:
 800f004:	b570      	push	{r4, r5, r6, lr}
 800f006:	460c      	mov	r4, r1
 800f008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f00c:	2900      	cmp	r1, #0
 800f00e:	b096      	sub	sp, #88	@ 0x58
 800f010:	4615      	mov	r5, r2
 800f012:	461e      	mov	r6, r3
 800f014:	da0d      	bge.n	800f032 <__swhatbuf_r+0x2e>
 800f016:	89a3      	ldrh	r3, [r4, #12]
 800f018:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f01c:	f04f 0100 	mov.w	r1, #0
 800f020:	bf14      	ite	ne
 800f022:	2340      	movne	r3, #64	@ 0x40
 800f024:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f028:	2000      	movs	r0, #0
 800f02a:	6031      	str	r1, [r6, #0]
 800f02c:	602b      	str	r3, [r5, #0]
 800f02e:	b016      	add	sp, #88	@ 0x58
 800f030:	bd70      	pop	{r4, r5, r6, pc}
 800f032:	466a      	mov	r2, sp
 800f034:	f000 f848 	bl	800f0c8 <_fstat_r>
 800f038:	2800      	cmp	r0, #0
 800f03a:	dbec      	blt.n	800f016 <__swhatbuf_r+0x12>
 800f03c:	9901      	ldr	r1, [sp, #4]
 800f03e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f042:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f046:	4259      	negs	r1, r3
 800f048:	4159      	adcs	r1, r3
 800f04a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f04e:	e7eb      	b.n	800f028 <__swhatbuf_r+0x24>

0800f050 <__smakebuf_r>:
 800f050:	898b      	ldrh	r3, [r1, #12]
 800f052:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f054:	079d      	lsls	r5, r3, #30
 800f056:	4606      	mov	r6, r0
 800f058:	460c      	mov	r4, r1
 800f05a:	d507      	bpl.n	800f06c <__smakebuf_r+0x1c>
 800f05c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	6123      	str	r3, [r4, #16]
 800f064:	2301      	movs	r3, #1
 800f066:	6163      	str	r3, [r4, #20]
 800f068:	b003      	add	sp, #12
 800f06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f06c:	ab01      	add	r3, sp, #4
 800f06e:	466a      	mov	r2, sp
 800f070:	f7ff ffc8 	bl	800f004 <__swhatbuf_r>
 800f074:	9f00      	ldr	r7, [sp, #0]
 800f076:	4605      	mov	r5, r0
 800f078:	4639      	mov	r1, r7
 800f07a:	4630      	mov	r0, r6
 800f07c:	f7fe fecc 	bl	800de18 <_malloc_r>
 800f080:	b948      	cbnz	r0, 800f096 <__smakebuf_r+0x46>
 800f082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f086:	059a      	lsls	r2, r3, #22
 800f088:	d4ee      	bmi.n	800f068 <__smakebuf_r+0x18>
 800f08a:	f023 0303 	bic.w	r3, r3, #3
 800f08e:	f043 0302 	orr.w	r3, r3, #2
 800f092:	81a3      	strh	r3, [r4, #12]
 800f094:	e7e2      	b.n	800f05c <__smakebuf_r+0xc>
 800f096:	89a3      	ldrh	r3, [r4, #12]
 800f098:	6020      	str	r0, [r4, #0]
 800f09a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f09e:	81a3      	strh	r3, [r4, #12]
 800f0a0:	9b01      	ldr	r3, [sp, #4]
 800f0a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0a6:	b15b      	cbz	r3, 800f0c0 <__smakebuf_r+0x70>
 800f0a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f000 f81d 	bl	800f0ec <_isatty_r>
 800f0b2:	b128      	cbz	r0, 800f0c0 <__smakebuf_r+0x70>
 800f0b4:	89a3      	ldrh	r3, [r4, #12]
 800f0b6:	f023 0303 	bic.w	r3, r3, #3
 800f0ba:	f043 0301 	orr.w	r3, r3, #1
 800f0be:	81a3      	strh	r3, [r4, #12]
 800f0c0:	89a3      	ldrh	r3, [r4, #12]
 800f0c2:	431d      	orrs	r5, r3
 800f0c4:	81a5      	strh	r5, [r4, #12]
 800f0c6:	e7cf      	b.n	800f068 <__smakebuf_r+0x18>

0800f0c8 <_fstat_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	4d07      	ldr	r5, [pc, #28]	@ (800f0e8 <_fstat_r+0x20>)
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	4608      	mov	r0, r1
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	602b      	str	r3, [r5, #0]
 800f0d6:	f7f4 f895 	bl	8003204 <_fstat>
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	d102      	bne.n	800f0e4 <_fstat_r+0x1c>
 800f0de:	682b      	ldr	r3, [r5, #0]
 800f0e0:	b103      	cbz	r3, 800f0e4 <_fstat_r+0x1c>
 800f0e2:	6023      	str	r3, [r4, #0]
 800f0e4:	bd38      	pop	{r3, r4, r5, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20004fc4 	.word	0x20004fc4

0800f0ec <_isatty_r>:
 800f0ec:	b538      	push	{r3, r4, r5, lr}
 800f0ee:	4d06      	ldr	r5, [pc, #24]	@ (800f108 <_isatty_r+0x1c>)
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	4608      	mov	r0, r1
 800f0f6:	602b      	str	r3, [r5, #0]
 800f0f8:	f7f4 f894 	bl	8003224 <_isatty>
 800f0fc:	1c43      	adds	r3, r0, #1
 800f0fe:	d102      	bne.n	800f106 <_isatty_r+0x1a>
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	b103      	cbz	r3, 800f106 <_isatty_r+0x1a>
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	bd38      	pop	{r3, r4, r5, pc}
 800f108:	20004fc4 	.word	0x20004fc4

0800f10c <powf>:
 800f10c:	b508      	push	{r3, lr}
 800f10e:	ed2d 8b04 	vpush	{d8-d9}
 800f112:	eeb0 8a60 	vmov.f32	s16, s1
 800f116:	eeb0 9a40 	vmov.f32	s18, s0
 800f11a:	f000 f859 	bl	800f1d0 <__ieee754_powf>
 800f11e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f126:	eef0 8a40 	vmov.f32	s17, s0
 800f12a:	d63e      	bvs.n	800f1aa <powf+0x9e>
 800f12c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f134:	d112      	bne.n	800f15c <powf+0x50>
 800f136:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13e:	d039      	beq.n	800f1b4 <powf+0xa8>
 800f140:	eeb0 0a48 	vmov.f32	s0, s16
 800f144:	f000 f839 	bl	800f1ba <finitef>
 800f148:	b378      	cbz	r0, 800f1aa <powf+0x9e>
 800f14a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f152:	d52a      	bpl.n	800f1aa <powf+0x9e>
 800f154:	f7fd ff62 	bl	800d01c <__errno>
 800f158:	2322      	movs	r3, #34	@ 0x22
 800f15a:	e014      	b.n	800f186 <powf+0x7a>
 800f15c:	f000 f82d 	bl	800f1ba <finitef>
 800f160:	b998      	cbnz	r0, 800f18a <powf+0x7e>
 800f162:	eeb0 0a49 	vmov.f32	s0, s18
 800f166:	f000 f828 	bl	800f1ba <finitef>
 800f16a:	b170      	cbz	r0, 800f18a <powf+0x7e>
 800f16c:	eeb0 0a48 	vmov.f32	s0, s16
 800f170:	f000 f823 	bl	800f1ba <finitef>
 800f174:	b148      	cbz	r0, 800f18a <powf+0x7e>
 800f176:	eef4 8a68 	vcmp.f32	s17, s17
 800f17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f17e:	d7e9      	bvc.n	800f154 <powf+0x48>
 800f180:	f7fd ff4c 	bl	800d01c <__errno>
 800f184:	2321      	movs	r3, #33	@ 0x21
 800f186:	6003      	str	r3, [r0, #0]
 800f188:	e00f      	b.n	800f1aa <powf+0x9e>
 800f18a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f192:	d10a      	bne.n	800f1aa <powf+0x9e>
 800f194:	eeb0 0a49 	vmov.f32	s0, s18
 800f198:	f000 f80f 	bl	800f1ba <finitef>
 800f19c:	b128      	cbz	r0, 800f1aa <powf+0x9e>
 800f19e:	eeb0 0a48 	vmov.f32	s0, s16
 800f1a2:	f000 f80a 	bl	800f1ba <finitef>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d1d4      	bne.n	800f154 <powf+0x48>
 800f1aa:	eeb0 0a68 	vmov.f32	s0, s17
 800f1ae:	ecbd 8b04 	vpop	{d8-d9}
 800f1b2:	bd08      	pop	{r3, pc}
 800f1b4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f1b8:	e7f7      	b.n	800f1aa <powf+0x9e>

0800f1ba <finitef>:
 800f1ba:	ee10 3a10 	vmov	r3, s0
 800f1be:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f1c2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f1c6:	bfac      	ite	ge
 800f1c8:	2000      	movge	r0, #0
 800f1ca:	2001      	movlt	r0, #1
 800f1cc:	4770      	bx	lr
	...

0800f1d0 <__ieee754_powf>:
 800f1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d4:	ee10 4a90 	vmov	r4, s1
 800f1d8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f1dc:	ed2d 8b02 	vpush	{d8}
 800f1e0:	ee10 6a10 	vmov	r6, s0
 800f1e4:	eeb0 8a40 	vmov.f32	s16, s0
 800f1e8:	eef0 8a60 	vmov.f32	s17, s1
 800f1ec:	d10c      	bne.n	800f208 <__ieee754_powf+0x38>
 800f1ee:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f1f2:	0076      	lsls	r6, r6, #1
 800f1f4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f1f8:	f240 829c 	bls.w	800f734 <__ieee754_powf+0x564>
 800f1fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f200:	ecbd 8b02 	vpop	{d8}
 800f204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f208:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f20c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f210:	d802      	bhi.n	800f218 <__ieee754_powf+0x48>
 800f212:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f216:	d908      	bls.n	800f22a <__ieee754_powf+0x5a>
 800f218:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f21c:	d1ee      	bne.n	800f1fc <__ieee754_powf+0x2c>
 800f21e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f222:	0064      	lsls	r4, r4, #1
 800f224:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f228:	e7e6      	b.n	800f1f8 <__ieee754_powf+0x28>
 800f22a:	2e00      	cmp	r6, #0
 800f22c:	da1e      	bge.n	800f26c <__ieee754_powf+0x9c>
 800f22e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f232:	d22b      	bcs.n	800f28c <__ieee754_powf+0xbc>
 800f234:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f238:	d332      	bcc.n	800f2a0 <__ieee754_powf+0xd0>
 800f23a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f23e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f242:	fa49 f503 	asr.w	r5, r9, r3
 800f246:	fa05 f303 	lsl.w	r3, r5, r3
 800f24a:	454b      	cmp	r3, r9
 800f24c:	d126      	bne.n	800f29c <__ieee754_powf+0xcc>
 800f24e:	f005 0501 	and.w	r5, r5, #1
 800f252:	f1c5 0502 	rsb	r5, r5, #2
 800f256:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f25a:	d122      	bne.n	800f2a2 <__ieee754_powf+0xd2>
 800f25c:	2c00      	cmp	r4, #0
 800f25e:	f280 826f 	bge.w	800f740 <__ieee754_powf+0x570>
 800f262:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f266:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f26a:	e7c9      	b.n	800f200 <__ieee754_powf+0x30>
 800f26c:	2500      	movs	r5, #0
 800f26e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f272:	d1f0      	bne.n	800f256 <__ieee754_powf+0x86>
 800f274:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f278:	f000 825c 	beq.w	800f734 <__ieee754_powf+0x564>
 800f27c:	d908      	bls.n	800f290 <__ieee754_powf+0xc0>
 800f27e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800f5e0 <__ieee754_powf+0x410>
 800f282:	2c00      	cmp	r4, #0
 800f284:	bfa8      	it	ge
 800f286:	eeb0 0a68 	vmovge.f32	s0, s17
 800f28a:	e7b9      	b.n	800f200 <__ieee754_powf+0x30>
 800f28c:	2502      	movs	r5, #2
 800f28e:	e7ee      	b.n	800f26e <__ieee754_powf+0x9e>
 800f290:	2c00      	cmp	r4, #0
 800f292:	f280 8252 	bge.w	800f73a <__ieee754_powf+0x56a>
 800f296:	eeb1 0a68 	vneg.f32	s0, s17
 800f29a:	e7b1      	b.n	800f200 <__ieee754_powf+0x30>
 800f29c:	2500      	movs	r5, #0
 800f29e:	e7da      	b.n	800f256 <__ieee754_powf+0x86>
 800f2a0:	2500      	movs	r5, #0
 800f2a2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f2a6:	d102      	bne.n	800f2ae <__ieee754_powf+0xde>
 800f2a8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f2ac:	e7a8      	b.n	800f200 <__ieee754_powf+0x30>
 800f2ae:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f2b2:	d109      	bne.n	800f2c8 <__ieee754_powf+0xf8>
 800f2b4:	2e00      	cmp	r6, #0
 800f2b6:	db07      	blt.n	800f2c8 <__ieee754_powf+0xf8>
 800f2b8:	eeb0 0a48 	vmov.f32	s0, s16
 800f2bc:	ecbd 8b02 	vpop	{d8}
 800f2c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2c4:	f000 bae8 	b.w	800f898 <__ieee754_sqrtf>
 800f2c8:	eeb0 0a48 	vmov.f32	s0, s16
 800f2cc:	f000 fa50 	bl	800f770 <fabsf>
 800f2d0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f2d4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f2d8:	4647      	mov	r7, r8
 800f2da:	d002      	beq.n	800f2e2 <__ieee754_powf+0x112>
 800f2dc:	f1b8 0f00 	cmp.w	r8, #0
 800f2e0:	d117      	bne.n	800f312 <__ieee754_powf+0x142>
 800f2e2:	2c00      	cmp	r4, #0
 800f2e4:	bfbc      	itt	lt
 800f2e6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f2ea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f2ee:	2e00      	cmp	r6, #0
 800f2f0:	da86      	bge.n	800f200 <__ieee754_powf+0x30>
 800f2f2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f2f6:	ea58 0805 	orrs.w	r8, r8, r5
 800f2fa:	d104      	bne.n	800f306 <__ieee754_powf+0x136>
 800f2fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f300:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f304:	e77c      	b.n	800f200 <__ieee754_powf+0x30>
 800f306:	2d01      	cmp	r5, #1
 800f308:	f47f af7a 	bne.w	800f200 <__ieee754_powf+0x30>
 800f30c:	eeb1 0a40 	vneg.f32	s0, s0
 800f310:	e776      	b.n	800f200 <__ieee754_powf+0x30>
 800f312:	0ff0      	lsrs	r0, r6, #31
 800f314:	3801      	subs	r0, #1
 800f316:	ea55 0300 	orrs.w	r3, r5, r0
 800f31a:	d104      	bne.n	800f326 <__ieee754_powf+0x156>
 800f31c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f320:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f324:	e76c      	b.n	800f200 <__ieee754_powf+0x30>
 800f326:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f32a:	d973      	bls.n	800f414 <__ieee754_powf+0x244>
 800f32c:	4bad      	ldr	r3, [pc, #692]	@ (800f5e4 <__ieee754_powf+0x414>)
 800f32e:	4598      	cmp	r8, r3
 800f330:	d808      	bhi.n	800f344 <__ieee754_powf+0x174>
 800f332:	2c00      	cmp	r4, #0
 800f334:	da0b      	bge.n	800f34e <__ieee754_powf+0x17e>
 800f336:	2000      	movs	r0, #0
 800f338:	ecbd 8b02 	vpop	{d8}
 800f33c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f340:	f000 baa4 	b.w	800f88c <__math_oflowf>
 800f344:	4ba8      	ldr	r3, [pc, #672]	@ (800f5e8 <__ieee754_powf+0x418>)
 800f346:	4598      	cmp	r8, r3
 800f348:	d908      	bls.n	800f35c <__ieee754_powf+0x18c>
 800f34a:	2c00      	cmp	r4, #0
 800f34c:	dcf3      	bgt.n	800f336 <__ieee754_powf+0x166>
 800f34e:	2000      	movs	r0, #0
 800f350:	ecbd 8b02 	vpop	{d8}
 800f354:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f358:	f000 ba92 	b.w	800f880 <__math_uflowf>
 800f35c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f360:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f364:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800f5ec <__ieee754_powf+0x41c>
 800f368:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f36c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f370:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f374:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f378:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f37c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f380:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800f5f0 <__ieee754_powf+0x420>
 800f384:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f388:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800f5f4 <__ieee754_powf+0x424>
 800f38c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f390:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800f5f8 <__ieee754_powf+0x428>
 800f394:	eef0 6a67 	vmov.f32	s13, s15
 800f398:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f39c:	ee16 3a90 	vmov	r3, s13
 800f3a0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f3a4:	f023 030f 	bic.w	r3, r3, #15
 800f3a8:	ee06 3a90 	vmov	s13, r3
 800f3ac:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f3b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f3b4:	3d01      	subs	r5, #1
 800f3b6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800f3ba:	4305      	orrs	r5, r0
 800f3bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f3c0:	f024 040f 	bic.w	r4, r4, #15
 800f3c4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f3c8:	bf18      	it	ne
 800f3ca:	eeb0 8a47 	vmovne.f32	s16, s14
 800f3ce:	ee07 4a10 	vmov	s14, r4
 800f3d2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f3d6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f3da:	ee07 3a90 	vmov	s15, r3
 800f3de:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f3e2:	ee07 4a10 	vmov	s14, r4
 800f3e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3ea:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f3ee:	ee17 1a10 	vmov	r1, s14
 800f3f2:	2900      	cmp	r1, #0
 800f3f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f3f8:	f340 80dd 	ble.w	800f5b6 <__ieee754_powf+0x3e6>
 800f3fc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f400:	f240 80ca 	bls.w	800f598 <__ieee754_powf+0x3c8>
 800f404:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f40c:	bf4c      	ite	mi
 800f40e:	2001      	movmi	r0, #1
 800f410:	2000      	movpl	r0, #0
 800f412:	e791      	b.n	800f338 <__ieee754_powf+0x168>
 800f414:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f418:	bf01      	itttt	eq
 800f41a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f5fc <__ieee754_powf+0x42c>
 800f41e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f422:	f06f 0317 	mvneq.w	r3, #23
 800f426:	ee17 7a90 	vmoveq	r7, s15
 800f42a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f42e:	bf18      	it	ne
 800f430:	2300      	movne	r3, #0
 800f432:	3a7f      	subs	r2, #127	@ 0x7f
 800f434:	441a      	add	r2, r3
 800f436:	4b72      	ldr	r3, [pc, #456]	@ (800f600 <__ieee754_powf+0x430>)
 800f438:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f43c:	429f      	cmp	r7, r3
 800f43e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f442:	dd06      	ble.n	800f452 <__ieee754_powf+0x282>
 800f444:	4b6f      	ldr	r3, [pc, #444]	@ (800f604 <__ieee754_powf+0x434>)
 800f446:	429f      	cmp	r7, r3
 800f448:	f340 80a4 	ble.w	800f594 <__ieee754_powf+0x3c4>
 800f44c:	3201      	adds	r2, #1
 800f44e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f452:	2600      	movs	r6, #0
 800f454:	4b6c      	ldr	r3, [pc, #432]	@ (800f608 <__ieee754_powf+0x438>)
 800f456:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f45a:	ee07 1a10 	vmov	s14, r1
 800f45e:	edd3 5a00 	vldr	s11, [r3]
 800f462:	4b6a      	ldr	r3, [pc, #424]	@ (800f60c <__ieee754_powf+0x43c>)
 800f464:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f468:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f46c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f470:	1049      	asrs	r1, r1, #1
 800f472:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f476:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f47a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f47e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f482:	ee07 1a90 	vmov	s15, r1
 800f486:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f48a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f48e:	ee15 7a10 	vmov	r7, s10
 800f492:	401f      	ands	r7, r3
 800f494:	ee06 7a90 	vmov	s13, r7
 800f498:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f49c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f4a0:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f4a4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f4a8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f610 <__ieee754_powf+0x440>
 800f4ac:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f614 <__ieee754_powf+0x444>
 800f4b0:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f4b4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f618 <__ieee754_powf+0x448>
 800f4b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f4bc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f5ec <__ieee754_powf+0x41c>
 800f4c0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f4c4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f61c <__ieee754_powf+0x44c>
 800f4c8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f4cc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f620 <__ieee754_powf+0x450>
 800f4d0:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f4d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f4d8:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f4dc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f4e0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f4e4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f4e8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f4ec:	eef0 5a67 	vmov.f32	s11, s15
 800f4f0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f4f4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f4f8:	ee15 1a90 	vmov	r1, s11
 800f4fc:	4019      	ands	r1, r3
 800f4fe:	ee05 1a90 	vmov	s11, r1
 800f502:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f506:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f50a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f50e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f512:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f516:	eeb0 6a67 	vmov.f32	s12, s15
 800f51a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f51e:	ee16 1a10 	vmov	r1, s12
 800f522:	4019      	ands	r1, r3
 800f524:	ee06 1a10 	vmov	s12, r1
 800f528:	eeb0 7a46 	vmov.f32	s14, s12
 800f52c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f530:	493c      	ldr	r1, [pc, #240]	@ (800f624 <__ieee754_powf+0x454>)
 800f532:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f53a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f628 <__ieee754_powf+0x458>
 800f53e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f62c <__ieee754_powf+0x45c>
 800f542:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f546:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f630 <__ieee754_powf+0x460>
 800f54a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f54e:	ed91 7a00 	vldr	s14, [r1]
 800f552:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f556:	ee07 2a10 	vmov	s14, r2
 800f55a:	eef0 6a67 	vmov.f32	s13, s15
 800f55e:	4a35      	ldr	r2, [pc, #212]	@ (800f634 <__ieee754_powf+0x464>)
 800f560:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f564:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f568:	ed92 5a00 	vldr	s10, [r2]
 800f56c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f570:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f574:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f578:	ee16 2a90 	vmov	r2, s13
 800f57c:	4013      	ands	r3, r2
 800f57e:	ee06 3a90 	vmov	s13, r3
 800f582:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f586:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f58a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800f58e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f592:	e70f      	b.n	800f3b4 <__ieee754_powf+0x1e4>
 800f594:	2601      	movs	r6, #1
 800f596:	e75d      	b.n	800f454 <__ieee754_powf+0x284>
 800f598:	d152      	bne.n	800f640 <__ieee754_powf+0x470>
 800f59a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f638 <__ieee754_powf+0x468>
 800f59e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f5a2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f5a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ae:	f73f af29 	bgt.w	800f404 <__ieee754_powf+0x234>
 800f5b2:	2386      	movs	r3, #134	@ 0x86
 800f5b4:	e048      	b.n	800f648 <__ieee754_powf+0x478>
 800f5b6:	4a21      	ldr	r2, [pc, #132]	@ (800f63c <__ieee754_powf+0x46c>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d907      	bls.n	800f5cc <__ieee754_powf+0x3fc>
 800f5bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5c4:	bf4c      	ite	mi
 800f5c6:	2001      	movmi	r0, #1
 800f5c8:	2000      	movpl	r0, #0
 800f5ca:	e6c1      	b.n	800f350 <__ieee754_powf+0x180>
 800f5cc:	d138      	bne.n	800f640 <__ieee754_powf+0x470>
 800f5ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f5d2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5da:	dbea      	blt.n	800f5b2 <__ieee754_powf+0x3e2>
 800f5dc:	e7ee      	b.n	800f5bc <__ieee754_powf+0x3ec>
 800f5de:	bf00      	nop
 800f5e0:	00000000 	.word	0x00000000
 800f5e4:	3f7ffff3 	.word	0x3f7ffff3
 800f5e8:	3f800007 	.word	0x3f800007
 800f5ec:	3eaaaaab 	.word	0x3eaaaaab
 800f5f0:	3fb8aa3b 	.word	0x3fb8aa3b
 800f5f4:	36eca570 	.word	0x36eca570
 800f5f8:	3fb8aa00 	.word	0x3fb8aa00
 800f5fc:	4b800000 	.word	0x4b800000
 800f600:	001cc471 	.word	0x001cc471
 800f604:	005db3d6 	.word	0x005db3d6
 800f608:	0800ff78 	.word	0x0800ff78
 800f60c:	fffff000 	.word	0xfffff000
 800f610:	3e6c3255 	.word	0x3e6c3255
 800f614:	3e53f142 	.word	0x3e53f142
 800f618:	3e8ba305 	.word	0x3e8ba305
 800f61c:	3edb6db7 	.word	0x3edb6db7
 800f620:	3f19999a 	.word	0x3f19999a
 800f624:	0800ff68 	.word	0x0800ff68
 800f628:	3f76384f 	.word	0x3f76384f
 800f62c:	3f763800 	.word	0x3f763800
 800f630:	369dc3a0 	.word	0x369dc3a0
 800f634:	0800ff70 	.word	0x0800ff70
 800f638:	3338aa3c 	.word	0x3338aa3c
 800f63c:	43160000 	.word	0x43160000
 800f640:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f644:	d971      	bls.n	800f72a <__ieee754_powf+0x55a>
 800f646:	15db      	asrs	r3, r3, #23
 800f648:	3b7e      	subs	r3, #126	@ 0x7e
 800f64a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f64e:	4118      	asrs	r0, r3
 800f650:	4408      	add	r0, r1
 800f652:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f656:	4a3c      	ldr	r2, [pc, #240]	@ (800f748 <__ieee754_powf+0x578>)
 800f658:	3b7f      	subs	r3, #127	@ 0x7f
 800f65a:	411a      	asrs	r2, r3
 800f65c:	4002      	ands	r2, r0
 800f65e:	ee07 2a10 	vmov	s14, r2
 800f662:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f666:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f66a:	f1c3 0317 	rsb	r3, r3, #23
 800f66e:	4118      	asrs	r0, r3
 800f670:	2900      	cmp	r1, #0
 800f672:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f676:	bfb8      	it	lt
 800f678:	4240      	neglt	r0, r0
 800f67a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f67e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800f74c <__ieee754_powf+0x57c>
 800f682:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800f750 <__ieee754_powf+0x580>
 800f686:	ee17 3a10 	vmov	r3, s14
 800f68a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f68e:	f023 030f 	bic.w	r3, r3, #15
 800f692:	ee07 3a10 	vmov	s14, r3
 800f696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f69a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f69e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f6a2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800f754 <__ieee754_powf+0x584>
 800f6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6aa:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f6ae:	eef0 6a67 	vmov.f32	s13, s15
 800f6b2:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f6b6:	eef0 5a66 	vmov.f32	s11, s13
 800f6ba:	eee7 5a46 	vfms.f32	s11, s14, s12
 800f6be:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f6c2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f6c6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800f758 <__ieee754_powf+0x588>
 800f6ca:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800f75c <__ieee754_powf+0x58c>
 800f6ce:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f6d2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800f760 <__ieee754_powf+0x590>
 800f6d6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f6da:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800f764 <__ieee754_powf+0x594>
 800f6de:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f6e2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800f768 <__ieee754_powf+0x598>
 800f6e6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f6ea:	eeb0 6a66 	vmov.f32	s12, s13
 800f6ee:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800f6f2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800f6f6:	ee66 5a86 	vmul.f32	s11, s13, s12
 800f6fa:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f6fe:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800f702:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800f706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f70a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f70e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f712:	ee10 3a10 	vmov	r3, s0
 800f716:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f71a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f71e:	da06      	bge.n	800f72e <__ieee754_powf+0x55e>
 800f720:	f000 f82e 	bl	800f780 <scalbnf>
 800f724:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f728:	e56a      	b.n	800f200 <__ieee754_powf+0x30>
 800f72a:	2000      	movs	r0, #0
 800f72c:	e7a5      	b.n	800f67a <__ieee754_powf+0x4aa>
 800f72e:	ee00 3a10 	vmov	s0, r3
 800f732:	e7f7      	b.n	800f724 <__ieee754_powf+0x554>
 800f734:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f738:	e562      	b.n	800f200 <__ieee754_powf+0x30>
 800f73a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800f76c <__ieee754_powf+0x59c>
 800f73e:	e55f      	b.n	800f200 <__ieee754_powf+0x30>
 800f740:	eeb0 0a48 	vmov.f32	s0, s16
 800f744:	e55c      	b.n	800f200 <__ieee754_powf+0x30>
 800f746:	bf00      	nop
 800f748:	ff800000 	.word	0xff800000
 800f74c:	3f317218 	.word	0x3f317218
 800f750:	3f317200 	.word	0x3f317200
 800f754:	35bfbe8c 	.word	0x35bfbe8c
 800f758:	b5ddea0e 	.word	0xb5ddea0e
 800f75c:	3331bb4c 	.word	0x3331bb4c
 800f760:	388ab355 	.word	0x388ab355
 800f764:	bb360b61 	.word	0xbb360b61
 800f768:	3e2aaaab 	.word	0x3e2aaaab
 800f76c:	00000000 	.word	0x00000000

0800f770 <fabsf>:
 800f770:	ee10 3a10 	vmov	r3, s0
 800f774:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f778:	ee00 3a10 	vmov	s0, r3
 800f77c:	4770      	bx	lr
	...

0800f780 <scalbnf>:
 800f780:	ee10 3a10 	vmov	r3, s0
 800f784:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f788:	d02b      	beq.n	800f7e2 <scalbnf+0x62>
 800f78a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f78e:	d302      	bcc.n	800f796 <scalbnf+0x16>
 800f790:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f794:	4770      	bx	lr
 800f796:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f79a:	d123      	bne.n	800f7e4 <scalbnf+0x64>
 800f79c:	4b24      	ldr	r3, [pc, #144]	@ (800f830 <scalbnf+0xb0>)
 800f79e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f834 <scalbnf+0xb4>
 800f7a2:	4298      	cmp	r0, r3
 800f7a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f7a8:	db17      	blt.n	800f7da <scalbnf+0x5a>
 800f7aa:	ee10 3a10 	vmov	r3, s0
 800f7ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f7b2:	3a19      	subs	r2, #25
 800f7b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f7b8:	4288      	cmp	r0, r1
 800f7ba:	dd15      	ble.n	800f7e8 <scalbnf+0x68>
 800f7bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f838 <scalbnf+0xb8>
 800f7c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f83c <scalbnf+0xbc>
 800f7c4:	ee10 3a10 	vmov	r3, s0
 800f7c8:	eeb0 7a67 	vmov.f32	s14, s15
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	bfb8      	it	lt
 800f7d0:	eef0 7a66 	vmovlt.f32	s15, s13
 800f7d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f7d8:	4770      	bx	lr
 800f7da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f840 <scalbnf+0xc0>
 800f7de:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f7e2:	4770      	bx	lr
 800f7e4:	0dd2      	lsrs	r2, r2, #23
 800f7e6:	e7e5      	b.n	800f7b4 <scalbnf+0x34>
 800f7e8:	4410      	add	r0, r2
 800f7ea:	28fe      	cmp	r0, #254	@ 0xfe
 800f7ec:	dce6      	bgt.n	800f7bc <scalbnf+0x3c>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	dd06      	ble.n	800f800 <scalbnf+0x80>
 800f7f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f7f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f7fa:	ee00 3a10 	vmov	s0, r3
 800f7fe:	4770      	bx	lr
 800f800:	f110 0f16 	cmn.w	r0, #22
 800f804:	da09      	bge.n	800f81a <scalbnf+0x9a>
 800f806:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f840 <scalbnf+0xc0>
 800f80a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f844 <scalbnf+0xc4>
 800f80e:	ee10 3a10 	vmov	r3, s0
 800f812:	eeb0 7a67 	vmov.f32	s14, s15
 800f816:	2b00      	cmp	r3, #0
 800f818:	e7d9      	b.n	800f7ce <scalbnf+0x4e>
 800f81a:	3019      	adds	r0, #25
 800f81c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f820:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f824:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f848 <scalbnf+0xc8>
 800f828:	ee07 3a90 	vmov	s15, r3
 800f82c:	e7d7      	b.n	800f7de <scalbnf+0x5e>
 800f82e:	bf00      	nop
 800f830:	ffff3cb0 	.word	0xffff3cb0
 800f834:	4c000000 	.word	0x4c000000
 800f838:	7149f2ca 	.word	0x7149f2ca
 800f83c:	f149f2ca 	.word	0xf149f2ca
 800f840:	0da24260 	.word	0x0da24260
 800f844:	8da24260 	.word	0x8da24260
 800f848:	33000000 	.word	0x33000000

0800f84c <with_errnof>:
 800f84c:	b510      	push	{r4, lr}
 800f84e:	ed2d 8b02 	vpush	{d8}
 800f852:	eeb0 8a40 	vmov.f32	s16, s0
 800f856:	4604      	mov	r4, r0
 800f858:	f7fd fbe0 	bl	800d01c <__errno>
 800f85c:	eeb0 0a48 	vmov.f32	s0, s16
 800f860:	ecbd 8b02 	vpop	{d8}
 800f864:	6004      	str	r4, [r0, #0]
 800f866:	bd10      	pop	{r4, pc}

0800f868 <xflowf>:
 800f868:	b130      	cbz	r0, 800f878 <xflowf+0x10>
 800f86a:	eef1 7a40 	vneg.f32	s15, s0
 800f86e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f872:	2022      	movs	r0, #34	@ 0x22
 800f874:	f7ff bfea 	b.w	800f84c <with_errnof>
 800f878:	eef0 7a40 	vmov.f32	s15, s0
 800f87c:	e7f7      	b.n	800f86e <xflowf+0x6>
	...

0800f880 <__math_uflowf>:
 800f880:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f888 <__math_uflowf+0x8>
 800f884:	f7ff bff0 	b.w	800f868 <xflowf>
 800f888:	10000000 	.word	0x10000000

0800f88c <__math_oflowf>:
 800f88c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f894 <__math_oflowf+0x8>
 800f890:	f7ff bfea 	b.w	800f868 <xflowf>
 800f894:	70000000 	.word	0x70000000

0800f898 <__ieee754_sqrtf>:
 800f898:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f89c:	4770      	bx	lr
	...

0800f8a0 <_init>:
 800f8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8a2:	bf00      	nop
 800f8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8a6:	bc08      	pop	{r3}
 800f8a8:	469e      	mov	lr, r3
 800f8aa:	4770      	bx	lr

0800f8ac <_fini>:
 800f8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ae:	bf00      	nop
 800f8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8b2:	bc08      	pop	{r3}
 800f8b4:	469e      	mov	lr, r3
 800f8b6:	4770      	bx	lr
