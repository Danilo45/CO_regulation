
muvr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcd8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800fe68  0800fe68  00010e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010548  08010548  000121d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010548  08010548  00011548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010550  08010550  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010550  08010550  00011550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010554  08010554  00011554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08010558  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121d8  2**0
                  CONTENTS
 10 .bss          00004f08  200001d8  200001d8  000121d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200050e0  200050e0  000121d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e85d  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e7f  00000000  00000000  00030a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  000348e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001430  00000000  00000000  000362a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025923  00000000  00000000  000376d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e1ab  00000000  00000000  0005cffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7a4e  00000000  00000000  0007b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162bf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008170  00000000  00000000  00162c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0016ada8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fe50 	.word	0x0800fe50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800fe50 	.word	0x0800fe50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9b5 	b.w	8000fd4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	@ 0x30
 8000fdc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2319      	movs	r3, #25
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	463b      	mov	r3, r7
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	2288      	movs	r2, #136	@ 0x88
 8000ff0:	21ec      	movs	r1, #236	@ 0xec
 8000ff2:	4857      	ldr	r0, [pc, #348]	@ (8001150 <TrimRead+0x178>)
 8000ff4:	f003 ffea 	bl	8004fcc <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	3319      	adds	r3, #25
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	9202      	str	r2, [sp, #8]
 8001002:	2207      	movs	r2, #7
 8001004:	9201      	str	r2, [sp, #4]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	22e1      	movs	r2, #225	@ 0xe1
 800100c:	21ec      	movs	r1, #236	@ 0xec
 800100e:	4850      	ldr	r0, [pc, #320]	@ (8001150 <TrimRead+0x178>)
 8001010:	f003 ffdc 	bl	8004fcc <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001014:	787b      	ldrb	r3, [r7, #1]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	783b      	ldrb	r3, [r7, #0]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b4b      	ldr	r3, [pc, #300]	@ (8001154 <TrimRead+0x17c>)
 8001026:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	78bb      	ldrb	r3, [r7, #2]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21a      	sxth	r2, r3
 8001036:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <TrimRead+0x180>)
 8001038:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800103a:	797b      	ldrb	r3, [r7, #5]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	793b      	ldrb	r3, [r7, #4]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b44      	ldr	r3, [pc, #272]	@ (800115c <TrimRead+0x184>)
 800104a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <TrimRead+0x188>)
 800105e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001060:	7a7b      	ldrb	r3, [r7, #9]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b3d      	ldr	r3, [pc, #244]	@ (8001164 <TrimRead+0x18c>)
 8001070:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7abb      	ldrb	r3, [r7, #10]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <TrimRead+0x190>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001084:	7b7b      	ldrb	r3, [r7, #13]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b36      	ldr	r3, [pc, #216]	@ (800116c <TrimRead+0x194>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <TrimRead+0x198>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7c3b      	ldrb	r3, [r7, #16]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <TrimRead+0x19c>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010ba:	7cfb      	ldrb	r3, [r7, #19]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7cbb      	ldrb	r3, [r7, #18]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <TrimRead+0x1a0>)
 80010ca:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010cc:	7d7b      	ldrb	r3, [r7, #21]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7d3b      	ldrb	r3, [r7, #20]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <TrimRead+0x1a4>)
 80010dc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <TrimRead+0x1a8>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80010f0:	7e3b      	ldrb	r3, [r7, #24]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <TrimRead+0x1ac>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80010f8:	7ebb      	ldrb	r3, [r7, #26]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7e7b      	ldrb	r3, [r7, #25]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <TrimRead+0x1b0>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800110a:	7efb      	ldrb	r3, [r7, #27]
 800110c:	461a      	mov	r2, r3
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <TrimRead+0x1b4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001112:	7f3b      	ldrb	r3, [r7, #28]
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	b21a      	sxth	r2, r3
 8001118:	7f7b      	ldrb	r3, [r7, #29]
 800111a:	b21b      	sxth	r3, r3
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <TrimRead+0x1b8>)
 8001128:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800112a:	7fbb      	ldrb	r3, [r7, #30]
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	b21a      	sxth	r2, r3
 8001130:	7f7b      	ldrb	r3, [r7, #29]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <TrimRead+0x1bc>)
 800113e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001140:	7ffb      	ldrb	r3, [r7, #31]
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <TrimRead+0x1c0>)
 8001146:	801a      	strh	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000274 	.word	0x20000274
 8001154:	20000204 	.word	0x20000204
 8001158:	2000020c 	.word	0x2000020c
 800115c:	2000020e 	.word	0x2000020e
 8001160:	20000206 	.word	0x20000206
 8001164:	20000210 	.word	0x20000210
 8001168:	20000212 	.word	0x20000212
 800116c:	20000214 	.word	0x20000214
 8001170:	20000216 	.word	0x20000216
 8001174:	20000218 	.word	0x20000218
 8001178:	2000021a 	.word	0x2000021a
 800117c:	2000021c 	.word	0x2000021c
 8001180:	2000021e 	.word	0x2000021e
 8001184:	20000208 	.word	0x20000208
 8001188:	20000220 	.word	0x20000220
 800118c:	2000020a 	.word	0x2000020a
 8001190:	20000222 	.word	0x20000222
 8001194:	20000224 	.word	0x20000224
 8001198:	20000226 	.word	0x20000226

0800119c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4604      	mov	r4, r0
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	4623      	mov	r3, r4
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	4603      	mov	r3, r0
 80011b0:	71bb      	strb	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	717b      	strb	r3, [r7, #5]
 80011b6:	4613      	mov	r3, r2
 80011b8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011ba:	f7ff ff0d 	bl	8000fd8 <TrimRead>


	uint8_t datatowrite = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011c6:	23b6      	movs	r3, #182	@ 0xb6
 80011c8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 030f 	add.w	r3, r7, #15
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	22e0      	movs	r2, #224	@ 0xe0
 80011de:	21ec      	movs	r1, #236	@ 0xec
 80011e0:	4858      	ldr	r0, [pc, #352]	@ (8001344 <BME280_Config+0x1a8>)
 80011e2:	f003 fdf9 	bl	8004dd8 <HAL_I2C_Mem_Write>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <BME280_Config+0x56>
	{
		return -1;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	e0a3      	b.n	800133a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80011f2:	2064      	movs	r0, #100	@ 0x64
 80011f4:	f002 f9ee 	bl	80035d4 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f107 030f 	add.w	r3, r7, #15
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	22f2      	movs	r2, #242	@ 0xf2
 8001210:	21ec      	movs	r1, #236	@ 0xec
 8001212:	484c      	ldr	r0, [pc, #304]	@ (8001344 <BME280_Config+0x1a8>)
 8001214:	f003 fde0 	bl	8004dd8 <HAL_I2C_Mem_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <BME280_Config+0x88>
	{
		return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e08a      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001224:	2064      	movs	r0, #100	@ 0x64
 8001226:	f002 f9d5 	bl	80035d4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 030e 	add.w	r3, r7, #14
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	22f2      	movs	r2, #242	@ 0xf2
 800123e:	21ec      	movs	r1, #236	@ 0xec
 8001240:	4840      	ldr	r0, [pc, #256]	@ (8001344 <BME280_Config+0x1a8>)
 8001242:	f003 fec3 	bl	8004fcc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001246:	7bba      	ldrb	r2, [r7, #14]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	429a      	cmp	r2, r3
 800124c:	d002      	beq.n	8001254 <BME280_Config+0xb8>
	{
		return -1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e072      	b.n	800133a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001254:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001258:	015b      	lsls	r3, r3, #5
 800125a:	b25a      	sxtb	r2, r3
 800125c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b25b      	sxtb	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b25b      	sxtb	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800126c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f107 030f 	add.w	r3, r7, #15
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	22f5      	movs	r2, #245	@ 0xf5
 8001280:	21ec      	movs	r1, #236	@ 0xec
 8001282:	4830      	ldr	r0, [pc, #192]	@ (8001344 <BME280_Config+0x1a8>)
 8001284:	f003 fda8 	bl	8004dd8 <HAL_I2C_Mem_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <BME280_Config+0xf8>
	{
		return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e052      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001294:	2064      	movs	r0, #100	@ 0x64
 8001296:	f002 f99d 	bl	80035d4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22f5      	movs	r2, #245	@ 0xf5
 80012ae:	21ec      	movs	r1, #236	@ 0xec
 80012b0:	4824      	ldr	r0, [pc, #144]	@ (8001344 <BME280_Config+0x1a8>)
 80012b2:	f003 fe8b 	bl	8004fcc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012b6:	7bba      	ldrb	r2, [r7, #14]
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d002      	beq.n	80012c4 <BME280_Config+0x128>
	{
		return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e03a      	b.n	800133a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	015b      	lsls	r3, r3, #5
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 030f 	add.w	r3, r7, #15
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	22f4      	movs	r2, #244	@ 0xf4
 80012f4:	21ec      	movs	r1, #236	@ 0xec
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <BME280_Config+0x1a8>)
 80012f8:	f003 fd6e 	bl	8004dd8 <HAL_I2C_Mem_Write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <BME280_Config+0x16c>
	{
		return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e018      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001308:	2064      	movs	r0, #100	@ 0x64
 800130a:	f002 f963 	bl	80035d4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800130e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 030e 	add.w	r3, r7, #14
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	22f4      	movs	r2, #244	@ 0xf4
 8001322:	21ec      	movs	r1, #236	@ 0xec
 8001324:	4807      	ldr	r0, [pc, #28]	@ (8001344 <BME280_Config+0x1a8>)
 8001326:	f003 fe51 	bl	8004fcc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800132a:	7bba      	ldrb	r2, [r7, #14]
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	429a      	cmp	r2, r3
 8001330:	d002      	beq.n	8001338 <BME280_Config+0x19c>
	{
		return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e000      	b.n	800133a <BME280_Config+0x19e>
	}

	return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bd90      	pop	{r4, r7, pc}
 8001342:	bf00      	nop
 8001344:	20000274 	.word	0x20000274

08001348 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c3, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2301      	movs	r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <BMEReadRaw+0x8c>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	22d0      	movs	r2, #208	@ 0xd0
 8001360:	21ec      	movs	r1, #236	@ 0xec
 8001362:	481d      	ldr	r0, [pc, #116]	@ (80013d8 <BMEReadRaw+0x90>)
 8001364:	f003 fe32 	bl	8004fcc <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001368:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <BMEReadRaw+0x8c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b60      	cmp	r3, #96	@ 0x60
 800136e:	d12a      	bne.n	80013c6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2308      	movs	r3, #8
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	463b      	mov	r3, r7
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2301      	movs	r3, #1
 8001380:	22f7      	movs	r2, #247	@ 0xf7
 8001382:	21ec      	movs	r1, #236	@ 0xec
 8001384:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <BMEReadRaw+0x90>)
 8001386:	f003 fe21 	bl	8004fcc <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800138a:	783b      	ldrb	r3, [r7, #0]
 800138c:	031a      	lsls	r2, r3, #12
 800138e:	787b      	ldrb	r3, [r7, #1]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4313      	orrs	r3, r2
 8001394:	78ba      	ldrb	r2, [r7, #2]
 8001396:	0912      	lsrs	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	4313      	orrs	r3, r2
 800139c:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <BMEReadRaw+0x94>)
 800139e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	793b      	ldrb	r3, [r7, #4]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4313      	orrs	r3, r2
 80013aa:	797a      	ldrb	r2, [r7, #5]
 80013ac:	0912      	lsrs	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	4313      	orrs	r3, r2
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <BMEReadRaw+0x98>)
 80013b4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	4313      	orrs	r3, r2
 80013be:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <BMEReadRaw+0x9c>)
 80013c0:	6013      	str	r3, [r2, #0]

		return 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e001      	b.n	80013ca <BMEReadRaw+0x82>
	}

	else return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001f4 	.word	0x200001f4
 80013d8:	20000274 	.word	0x20000274
 80013dc:	200001fc 	.word	0x200001fc
 80013e0:	200001f8 	.word	0x200001f8
 80013e4:	20000200 	.word	0x20000200

080013e8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	10da      	asrs	r2, r3, #3
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <BME280_compensate_T_int32+0x74>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <BME280_compensate_T_int32+0x78>)
 80013fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	12db      	asrs	r3, r3, #11
 8001408:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	111b      	asrs	r3, r3, #4
 800140e:	4a13      	ldr	r2, [pc, #76]	@ (800145c <BME280_compensate_T_int32+0x74>)
 8001410:	8812      	ldrh	r2, [r2, #0]
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	1112      	asrs	r2, r2, #4
 8001418:	4910      	ldr	r1, [pc, #64]	@ (800145c <BME280_compensate_T_int32+0x74>)
 800141a:	8809      	ldrh	r1, [r1, #0]
 800141c:	1a52      	subs	r2, r2, r1
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	131b      	asrs	r3, r3, #12
 8001424:	4a0f      	ldr	r2, [pc, #60]	@ (8001464 <BME280_compensate_T_int32+0x7c>)
 8001426:	f9b2 2000 	ldrsh.w	r2, [r2]
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	139b      	asrs	r3, r3, #14
 8001430:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <BME280_compensate_T_int32+0x80>)
 800143a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <BME280_compensate_T_int32+0x80>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3380      	adds	r3, #128	@ 0x80
 8001448:	121b      	asrs	r3, r3, #8
 800144a:	60fb      	str	r3, [r7, #12]
	return T;
 800144c:	68fb      	ldr	r3, [r7, #12]
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000204 	.word	0x20000204
 8001460:	2000020c 	.word	0x2000020c
 8001464:	2000020e 	.word	0x2000020e
 8001468:	20000228 	.word	0x20000228

0800146c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001470:	b0ca      	sub	sp, #296	@ 0x128
 8001472:	af00      	add	r7, sp, #0
 8001474:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001478:	4baf      	ldr	r3, [pc, #700]	@ (8001738 <BME280_compensate_P_int64+0x2cc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	17da      	asrs	r2, r3, #31
 800147e:	461c      	mov	r4, r3
 8001480:	4615      	mov	r5, r2
 8001482:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001486:	f145 3bff 	adc.w	fp, r5, #4294967295
 800148a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800148e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001492:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001496:	fb03 f102 	mul.w	r1, r3, r2
 800149a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800149e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	18ca      	adds	r2, r1, r3
 80014a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014ac:	fba3 8903 	umull	r8, r9, r3, r3
 80014b0:	eb02 0309 	add.w	r3, r2, r9
 80014b4:	4699      	mov	r9, r3
 80014b6:	4ba1      	ldr	r3, [pc, #644]	@ (800173c <BME280_compensate_P_int64+0x2d0>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	17da      	asrs	r2, r3, #31
 80014c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014cc:	4603      	mov	r3, r0
 80014ce:	fb03 f209 	mul.w	r2, r3, r9
 80014d2:	460b      	mov	r3, r1
 80014d4:	fb08 f303 	mul.w	r3, r8, r3
 80014d8:	4413      	add	r3, r2
 80014da:	4602      	mov	r2, r0
 80014dc:	fba8 1202 	umull	r1, r2, r8, r2
 80014e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014e4:	460a      	mov	r2, r1
 80014e6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014ee:	4413      	add	r3, r2
 80014f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014f4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80014f8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80014fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001500:	4b8f      	ldr	r3, [pc, #572]	@ (8001740 <BME280_compensate_P_int64+0x2d4>)
 8001502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001506:	b21b      	sxth	r3, r3
 8001508:	17da      	asrs	r2, r3, #31
 800150a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800150e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001512:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001516:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800151a:	462a      	mov	r2, r5
 800151c:	fb02 f203 	mul.w	r2, r2, r3
 8001520:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001524:	4621      	mov	r1, r4
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	441a      	add	r2, r3
 800152c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001530:	4621      	mov	r1, r4
 8001532:	fba3 1301 	umull	r1, r3, r3, r1
 8001536:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800153a:	460b      	mov	r3, r1
 800153c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001544:	18d3      	adds	r3, r2, r3
 8001546:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001556:	462b      	mov	r3, r5
 8001558:	0459      	lsls	r1, r3, #17
 800155a:	4623      	mov	r3, r4
 800155c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001560:	4623      	mov	r3, r4
 8001562:	0458      	lsls	r0, r3, #17
 8001564:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001568:	1814      	adds	r4, r2, r0
 800156a:	643c      	str	r4, [r7, #64]	@ 0x40
 800156c:	414b      	adcs	r3, r1
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001570:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001574:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001578:	4b72      	ldr	r3, [pc, #456]	@ (8001744 <BME280_compensate_P_int64+0x2d8>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	b21b      	sxth	r3, r3
 8001580:	17da      	asrs	r2, r3, #31
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001586:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001596:	00d9      	lsls	r1, r3, #3
 8001598:	2000      	movs	r0, #0
 800159a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800159e:	1814      	adds	r4, r2, r0
 80015a0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80015a2:	414b      	adcs	r3, r1
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80015aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015ae:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b6:	fb03 f102 	mul.w	r1, r3, r2
 80015ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	18ca      	adds	r2, r1, r3
 80015c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015cc:	fba3 1303 	umull	r1, r3, r3, r3
 80015d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015d4:	460b      	mov	r3, r1
 80015d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015de:	18d3      	adds	r3, r2, r3
 80015e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015e4:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <BME280_compensate_P_int64+0x2dc>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	17da      	asrs	r2, r3, #31
 80015ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015f6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015fa:	462b      	mov	r3, r5
 80015fc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001600:	4642      	mov	r2, r8
 8001602:	fb02 f203 	mul.w	r2, r2, r3
 8001606:	464b      	mov	r3, r9
 8001608:	4621      	mov	r1, r4
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	4622      	mov	r2, r4
 8001612:	4641      	mov	r1, r8
 8001614:	fba2 1201 	umull	r1, r2, r2, r1
 8001618:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800161c:	460a      	mov	r2, r1
 800161e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001622:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001626:	4413      	add	r3, r2
 8001628:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001638:	4623      	mov	r3, r4
 800163a:	0a18      	lsrs	r0, r3, #8
 800163c:	462b      	mov	r3, r5
 800163e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001642:	462b      	mov	r3, r5
 8001644:	1219      	asrs	r1, r3, #8
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <BME280_compensate_P_int64+0x2e0>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	b21b      	sxth	r3, r3
 800164e:	17da      	asrs	r2, r3, #31
 8001650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001654:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001658:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800165c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001660:	464a      	mov	r2, r9
 8001662:	fb02 f203 	mul.w	r2, r2, r3
 8001666:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800166a:	4644      	mov	r4, r8
 800166c:	fb04 f303 	mul.w	r3, r4, r3
 8001670:	441a      	add	r2, r3
 8001672:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001676:	4644      	mov	r4, r8
 8001678:	fba3 4304 	umull	r4, r3, r3, r4
 800167c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001680:	4623      	mov	r3, r4
 8001682:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800169c:	464c      	mov	r4, r9
 800169e:	0323      	lsls	r3, r4, #12
 80016a0:	4644      	mov	r4, r8
 80016a2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016a6:	4644      	mov	r4, r8
 80016a8:	0322      	lsls	r2, r4, #12
 80016aa:	1884      	adds	r4, r0, r2
 80016ac:	633c      	str	r4, [r7, #48]	@ 0x30
 80016ae:	eb41 0303 	adc.w	r3, r1, r3
 80016b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80016b8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016c0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80016c4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80016c8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016cc:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <BME280_compensate_P_int64+0x2e4>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016dc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016e0:	462b      	mov	r3, r5
 80016e2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016e6:	4642      	mov	r2, r8
 80016e8:	fb02 f203 	mul.w	r2, r2, r3
 80016ec:	464b      	mov	r3, r9
 80016ee:	4621      	mov	r1, r4
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	4622      	mov	r2, r4
 80016f8:	4641      	mov	r1, r8
 80016fa:	fba2 1201 	umull	r1, r2, r2, r1
 80016fe:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001702:	460a      	mov	r2, r1
 8001704:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001708:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800171e:	4629      	mov	r1, r5
 8001720:	104a      	asrs	r2, r1, #1
 8001722:	4629      	mov	r1, r5
 8001724:	17cb      	asrs	r3, r1, #31
 8001726:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 800172a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800172e:	4313      	orrs	r3, r2
 8001730:	d110      	bne.n	8001754 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001732:	2300      	movs	r3, #0
 8001734:	e154      	b.n	80019e0 <BME280_compensate_P_int64+0x574>
 8001736:	bf00      	nop
 8001738:	20000228 	.word	0x20000228
 800173c:	20000218 	.word	0x20000218
 8001740:	20000216 	.word	0x20000216
 8001744:	20000214 	.word	0x20000214
 8001748:	20000212 	.word	0x20000212
 800174c:	20000210 	.word	0x20000210
 8001750:	20000206 	.word	0x20000206
	}
	p = 1048576-adc_P;
 8001754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001758:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800175c:	17da      	asrs	r2, r3, #31
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001762:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001766:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800176a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800176e:	105b      	asrs	r3, r3, #1
 8001770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001774:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001778:	07db      	lsls	r3, r3, #31
 800177a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800177e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001782:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001786:	4621      	mov	r1, r4
 8001788:	1a89      	subs	r1, r1, r2
 800178a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800178c:	4629      	mov	r1, r5
 800178e:	eb61 0303 	sbc.w	r3, r1, r3
 8001792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001794:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	1891      	adds	r1, r2, r2
 800179e:	6239      	str	r1, [r7, #32]
 80017a0:	415b      	adcs	r3, r3
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017a8:	4621      	mov	r1, r4
 80017aa:	1851      	adds	r1, r2, r1
 80017ac:	61b9      	str	r1, [r7, #24]
 80017ae:	4629      	mov	r1, r5
 80017b0:	414b      	adcs	r3, r1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017c0:	4649      	mov	r1, r9
 80017c2:	018b      	lsls	r3, r1, #6
 80017c4:	4641      	mov	r1, r8
 80017c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ca:	4641      	mov	r1, r8
 80017cc:	018a      	lsls	r2, r1, #6
 80017ce:	4641      	mov	r1, r8
 80017d0:	1889      	adds	r1, r1, r2
 80017d2:	6139      	str	r1, [r7, #16]
 80017d4:	4649      	mov	r1, r9
 80017d6:	eb43 0101 	adc.w	r1, r3, r1
 80017da:	6179      	str	r1, [r7, #20]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017e8:	4649      	mov	r1, r9
 80017ea:	008b      	lsls	r3, r1, #2
 80017ec:	4641      	mov	r1, r8
 80017ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017f2:	4641      	mov	r1, r8
 80017f4:	008a      	lsls	r2, r1, #2
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	4622      	mov	r2, r4
 80017fe:	189b      	adds	r3, r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	460b      	mov	r3, r1
 8001804:	462a      	mov	r2, r5
 8001806:	eb42 0303 	adc.w	r3, r2, r3
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001818:	4649      	mov	r1, r9
 800181a:	008b      	lsls	r3, r1, #2
 800181c:	4641      	mov	r1, r8
 800181e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001822:	4641      	mov	r1, r8
 8001824:	008a      	lsls	r2, r1, #2
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	4603      	mov	r3, r0
 800182c:	4622      	mov	r2, r4
 800182e:	189b      	adds	r3, r3, r2
 8001830:	673b      	str	r3, [r7, #112]	@ 0x70
 8001832:	462b      	mov	r3, r5
 8001834:	460a      	mov	r2, r1
 8001836:	eb42 0303 	adc.w	r3, r2, r3
 800183a:	677b      	str	r3, [r7, #116]	@ 0x74
 800183c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001840:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001844:	f7ff fa00 	bl	8000c48 <__aeabi_ldivmod>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001850:	4b66      	ldr	r3, [pc, #408]	@ (80019ec <BME280_compensate_P_int64+0x580>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	b21b      	sxth	r3, r3
 8001858:	17da      	asrs	r2, r3, #31
 800185a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800185c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800185e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	0b50      	lsrs	r0, r2, #13
 800186c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001870:	1359      	asrs	r1, r3, #13
 8001872:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001876:	462b      	mov	r3, r5
 8001878:	fb00 f203 	mul.w	r2, r0, r3
 800187c:	4623      	mov	r3, r4
 800187e:	fb03 f301 	mul.w	r3, r3, r1
 8001882:	4413      	add	r3, r2
 8001884:	4622      	mov	r2, r4
 8001886:	fba2 1200 	umull	r1, r2, r2, r0
 800188a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800188e:	460a      	mov	r2, r1
 8001890:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001894:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001898:	4413      	add	r3, r2
 800189a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800189e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0b50      	lsrs	r0, r2, #13
 80018ac:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018b0:	1359      	asrs	r1, r3, #13
 80018b2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80018b6:	462b      	mov	r3, r5
 80018b8:	fb00 f203 	mul.w	r2, r0, r3
 80018bc:	4623      	mov	r3, r4
 80018be:	fb03 f301 	mul.w	r3, r3, r1
 80018c2:	4413      	add	r3, r2
 80018c4:	4622      	mov	r2, r4
 80018c6:	fba2 1200 	umull	r1, r2, r2, r0
 80018ca:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018ce:	460a      	mov	r2, r1
 80018d0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018d4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018ea:	4621      	mov	r1, r4
 80018ec:	0e4a      	lsrs	r2, r1, #25
 80018ee:	4629      	mov	r1, r5
 80018f0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018f4:	4629      	mov	r1, r5
 80018f6:	164b      	asrs	r3, r1, #25
 80018f8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80018fc:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <BME280_compensate_P_int64+0x584>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	b21b      	sxth	r3, r3
 8001904:	17da      	asrs	r2, r3, #31
 8001906:	663b      	str	r3, [r7, #96]	@ 0x60
 8001908:	667a      	str	r2, [r7, #100]	@ 0x64
 800190a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800190e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001912:	462a      	mov	r2, r5
 8001914:	fb02 f203 	mul.w	r2, r2, r3
 8001918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191c:	4621      	mov	r1, r4
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001928:	4621      	mov	r1, r4
 800192a:	fba2 1201 	umull	r1, r2, r2, r1
 800192e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001932:	460a      	mov	r2, r1
 8001934:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001938:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800193c:	4413      	add	r3, r2
 800193e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800194e:	4621      	mov	r1, r4
 8001950:	0cca      	lsrs	r2, r1, #19
 8001952:	4629      	mov	r1, r5
 8001954:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001958:	4629      	mov	r1, r5
 800195a:	14cb      	asrs	r3, r1, #19
 800195c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001960:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001964:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001968:	1884      	adds	r4, r0, r2
 800196a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800196c:	eb41 0303 	adc.w	r3, r1, r3
 8001970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001972:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001976:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800197a:	4621      	mov	r1, r4
 800197c:	1889      	adds	r1, r1, r2
 800197e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001980:	4629      	mov	r1, r5
 8001982:	eb43 0101 	adc.w	r1, r3, r1
 8001986:	6579      	str	r1, [r7, #84]	@ 0x54
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001994:	4623      	mov	r3, r4
 8001996:	0a18      	lsrs	r0, r3, #8
 8001998:	462b      	mov	r3, r5
 800199a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800199e:	462b      	mov	r3, r5
 80019a0:	1219      	asrs	r1, r3, #8
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <BME280_compensate_P_int64+0x588>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	17da      	asrs	r2, r3, #31
 80019ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80019bc:	464c      	mov	r4, r9
 80019be:	0123      	lsls	r3, r4, #4
 80019c0:	4644      	mov	r4, r8
 80019c2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019c6:	4644      	mov	r4, r8
 80019c8:	0122      	lsls	r2, r4, #4
 80019ca:	1884      	adds	r4, r0, r2
 80019cc:	603c      	str	r4, [r7, #0]
 80019ce:	eb41 0303 	adc.w	r3, r1, r3
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019d8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80019dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80019e6:	46bd      	mov	sp, r7
 80019e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ec:	2000021e 	.word	0x2000021e
 80019f0:	2000021c 	.word	0x2000021c
 80019f4:	2000021a 	.word	0x2000021a

080019f8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a00:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <bme280_compensate_H_int32+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001a08:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	039a      	lsls	r2, r3, #14
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <bme280_compensate_H_int32+0xc0>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	051b      	lsls	r3, r3, #20
 8001a16:	1ad2      	subs	r2, r2, r3
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <bme280_compensate_H_int32+0xc4>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a28:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a2c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a2e:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <bme280_compensate_H_int32+0xc8>)
 8001a30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a34:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a3c:	1292      	asrs	r2, r2, #10
 8001a3e:	4921      	ldr	r1, [pc, #132]	@ (8001ac4 <bme280_compensate_H_int32+0xcc>)
 8001a40:	8809      	ldrh	r1, [r1, #0]
 8001a42:	4608      	mov	r0, r1
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	fb00 f101 	mul.w	r1, r0, r1
 8001a4a:	12c9      	asrs	r1, r1, #11
 8001a4c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001a50:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a54:	1292      	asrs	r2, r2, #10
 8001a56:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001a5a:	491b      	ldr	r1, [pc, #108]	@ (8001ac8 <bme280_compensate_H_int32+0xd0>)
 8001a5c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a60:	fb01 f202 	mul.w	r2, r1, r2
 8001a64:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001a68:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	13db      	asrs	r3, r3, #15
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	13d2      	asrs	r2, r2, #15
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a7e:	4a13      	ldr	r2, [pc, #76]	@ (8001acc <bme280_compensate_H_int32+0xd4>)
 8001a80:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001a86:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a94:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a9c:	bfa8      	it	ge
 8001a9e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001aa2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	131b      	asrs	r3, r3, #12
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	20000228 	.word	0x20000228
 8001ab8:	20000222 	.word	0x20000222
 8001abc:	20000224 	.word	0x20000224
 8001ac0:	20000226 	.word	0x20000226
 8001ac4:	2000020a 	.word	0x2000020a
 8001ac8:	20000220 	.word	0x20000220
 8001acc:	20000208 	.word	0x20000208

08001ad0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ad4:	f7ff fc38 	bl	8001348 <BMEReadRaw>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d163      	bne.n	8001ba6 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001ade:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <BME280_Measure+0x104>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ae6:	d104      	bne.n	8001af2 <BME280_Measure+0x22>
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <BME280_Measure+0x108>)
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e016      	b.n	8001b20 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <BME280_Measure+0x104>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fc76 	bl	80013e8 <BME280_compensate_T_int32>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd10 	bl	8000524 <__aeabi_i2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b34      	ldr	r3, [pc, #208]	@ (8001bdc <BME280_Measure+0x10c>)
 8001b0a:	f7fe fe9f 	bl	800084c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f847 	bl	8000ba8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b1e:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001b20:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <BME280_Measure+0x110>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b28:	d104      	bne.n	8001b34 <BME280_Measure+0x64>
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <BME280_Measure+0x114>)
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e016      	b.n	8001b62 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b34:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <BME280_Measure+0x110>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fc97 	bl	800146c <BME280_compensate_P_int64>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcdf 	bl	8000504 <__aeabi_ui2d>
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <BME280_Measure+0x118>)
 8001b4c:	f7fe fe7e 	bl	800084c <__aeabi_ddiv>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff f826 	bl	8000ba8 <__aeabi_d2f>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a21      	ldr	r2, [pc, #132]	@ (8001be4 <BME280_Measure+0x114>)
 8001b60:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <BME280_Measure+0x11c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b6a:	d104      	bne.n	8001b76 <BME280_Measure+0xa6>
 8001b6c:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <BME280_Measure+0x120>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e023      	b.n	8001bbe <BME280_Measure+0xee>
		  else
		  {
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <BME280_Measure+0x11c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff3c 	bl	80019f8 <bme280_compensate_H_int32>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcbe 	bl	8000504 <__aeabi_ui2d>
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <BME280_Measure+0x124>)
 8001b8e:	f7fe fe5d 	bl	800084c <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff f805 	bl	8000ba8 <__aeabi_d2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a13      	ldr	r2, [pc, #76]	@ (8001bf0 <BME280_Measure+0x120>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e00b      	b.n	8001bbe <BME280_Measure+0xee>


	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <BME280_Measure+0x120>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <BME280_Measure+0x120>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001be4 <BME280_Measure+0x114>)
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <BME280_Measure+0x114>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bbc:	6013      	str	r3, [r2, #0]
	}
	data.temperature = Temperature;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <BME280_Measure+0x128>)
 8001bc4:	6013      	str	r3, [r2, #0]
	data.humidity = Humidity;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <BME280_Measure+0x120>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <BME280_Measure+0x128>)
 8001bcc:	6053      	str	r3, [r2, #4]



}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200001f8 	.word	0x200001f8
 8001bd8:	2000043c 	.word	0x2000043c
 8001bdc:	40590000 	.word	0x40590000
 8001be0:	200001fc 	.word	0x200001fc
 8001be4:	20000440 	.word	0x20000440
 8001be8:	40700000 	.word	0x40700000
 8001bec:	20000200 	.word	0x20000200
 8001bf0:	20000444 	.word	0x20000444
 8001bf4:	40900000 	.word	0x40900000
 8001bf8:	20000448 	.word	0x20000448

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c02:	f001 fca5 	bl	8003550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c06:	f000 f8dd 	bl	8001dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0a:	f000 fb25 	bl	8002258 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c0e:	f000 fb03 	bl	8002218 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c12:	f000 fad7 	bl	80021c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001c16:	f000 fa5f 	bl	80020d8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001c1a:	f000 f93d 	bl	8001e98 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001c1e:	f000 f98d 	bl	8001f3c <MX_I2C3_Init>
  MX_TIM1_Init();
 8001c22:	f000 f9b9 	bl	8001f98 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001c26:	2304      	movs	r3, #4
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2303      	movs	r3, #3
 8001c30:	2201      	movs	r2, #1
 8001c32:	2105      	movs	r1, #5
 8001c34:	2002      	movs	r0, #2
 8001c36:	f7ff fab1 	bl	800119c <BME280_Config>
//  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c3a:	f006 ff1b 	bl	8008a74 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of xUARTMutex */
  xUARTMutexHandle = osMutexNew(&xUARTMutex_attributes);
 8001c3e:	483c      	ldr	r0, [pc, #240]	@ (8001d30 <main+0x134>)
 8001c40:	f007 f80f 	bl	8008c62 <osMutexNew>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a3b      	ldr	r2, [pc, #236]	@ (8001d34 <main+0x138>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* creation of xFANMutex */
  xFANMutexHandle = osMutexNew(&xFANMutex_attributes);
 8001c4a:	483b      	ldr	r0, [pc, #236]	@ (8001d38 <main+0x13c>)
 8001c4c:	f007 f809 	bl	8008c62 <osMutexNew>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a3a      	ldr	r2, [pc, #232]	@ (8001d3c <main+0x140>)
 8001c54:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSpeakerSem */
  xSpeakerSemHandle = osSemaphoreNew(1, 0, &xSpeakerSem_attributes);
 8001c56:	4a3a      	ldr	r2, [pc, #232]	@ (8001d40 <main+0x144>)
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f007 f90f 	bl	8008e7e <osSemaphoreNew>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a38      	ldr	r2, [pc, #224]	@ (8001d44 <main+0x148>)
 8001c64:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue_r0 */
  queue_r0Handle = osMessageQueueNew (5, sizeof(WeatherData_t), &queue_r0_attributes);
 8001c66:	4a38      	ldr	r2, [pc, #224]	@ (8001d48 <main+0x14c>)
 8001c68:	2108      	movs	r1, #8
 8001c6a:	2005      	movs	r0, #5
 8001c6c:	f007 fa26 	bl	80090bc <osMessageQueueNew>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a36      	ldr	r2, [pc, #216]	@ (8001d4c <main+0x150>)
 8001c74:	6013      	str	r3, [r2, #0]

  /* creation of queue_pr */
  queue_prHandle = osMessageQueueNew (5, sizeof(float), &queue_pr_attributes);
 8001c76:	4a36      	ldr	r2, [pc, #216]	@ (8001d50 <main+0x154>)
 8001c78:	2104      	movs	r1, #4
 8001c7a:	2005      	movs	r0, #5
 8001c7c:	f007 fa1e 	bl	80090bc <osMessageQueueNew>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a34      	ldr	r2, [pc, #208]	@ (8001d54 <main+0x158>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* creation of queue_co */
  queue_coHandle = osMessageQueueNew (5, sizeof(float), &queue_co_attributes);
 8001c86:	4a34      	ldr	r2, [pc, #208]	@ (8001d58 <main+0x15c>)
 8001c88:	2104      	movs	r1, #4
 8001c8a:	2005      	movs	r0, #5
 8001c8c:	f007 fa16 	bl	80090bc <osMessageQueueNew>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a32      	ldr	r2, [pc, #200]	@ (8001d5c <main+0x160>)
 8001c94:	6013      	str	r3, [r2, #0]

  /* creation of uartCommandQueue */
  uartCommandQueueHandle = osMessageQueueNew (3, sizeof(uint8_t), &uartCommandQueue_attributes);
 8001c96:	4a32      	ldr	r2, [pc, #200]	@ (8001d60 <main+0x164>)
 8001c98:	2101      	movs	r1, #1
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f007 fa0e 	bl	80090bc <osMessageQueueNew>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a30      	ldr	r2, [pc, #192]	@ (8001d64 <main+0x168>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* creation of queue_watchdog */
  queue_watchdogHandle = osMessageQueueNew (4, sizeof(WatchdogError_t), &queue_watchdog_attributes);
 8001ca6:	4a30      	ldr	r2, [pc, #192]	@ (8001d68 <main+0x16c>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	2004      	movs	r0, #4
 8001cac:	f007 fa06 	bl	80090bc <osMessageQueueNew>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d6c <main+0x170>)
 8001cb4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CoMeasureTask */
  CoMeasureTaskHandle = osThreadNew(co_measure_task, NULL, &CoMeasureTask_attributes);
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8001d70 <main+0x174>)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	482e      	ldr	r0, [pc, #184]	@ (8001d74 <main+0x178>)
 8001cbc:	f006 ff24 	bl	8008b08 <osThreadNew>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d78 <main+0x17c>)
 8001cc4:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(weather_task, NULL, &WeatherTask_attributes);
 8001cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d7c <main+0x180>)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	482d      	ldr	r0, [pc, #180]	@ (8001d80 <main+0x184>)
 8001ccc:	f006 ff1c 	bl	8008b08 <osThreadNew>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001d84 <main+0x188>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* creation of Speaker */
  SpeakerHandle = osThreadNew(speaker_alarm_task, NULL, &Speaker_attributes);
 8001cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d88 <main+0x18c>)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	482c      	ldr	r0, [pc, #176]	@ (8001d8c <main+0x190>)
 8001cdc:	f006 ff14 	bl	8008b08 <osThreadNew>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <main+0x194>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* creation of FanTask */
  FanTaskHandle = osThreadNew(fan_task, NULL, &FanTask_attributes);
 8001ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8001d94 <main+0x198>)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	482b      	ldr	r0, [pc, #172]	@ (8001d98 <main+0x19c>)
 8001cec:	f006 ff0c 	bl	8008b08 <osThreadNew>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d9c <main+0x1a0>)
 8001cf4:	6013      	str	r3, [r2, #0]

  /* creation of UartCommand */
  UartCommandHandle = osThreadNew(uart_command_task, NULL, &UartCommand_attributes);
 8001cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8001da0 <main+0x1a4>)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	482a      	ldr	r0, [pc, #168]	@ (8001da4 <main+0x1a8>)
 8001cfc:	f006 ff04 	bl	8008b08 <osThreadNew>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a29      	ldr	r2, [pc, #164]	@ (8001da8 <main+0x1ac>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* creation of UartDisplay */
  UartDisplayHandle = osThreadNew(uart_display_task, NULL, &UartDisplay_attributes);
 8001d06:	4a29      	ldr	r2, [pc, #164]	@ (8001dac <main+0x1b0>)
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4829      	ldr	r0, [pc, #164]	@ (8001db0 <main+0x1b4>)
 8001d0c:	f006 fefc 	bl	8008b08 <osThreadNew>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4a28      	ldr	r2, [pc, #160]	@ (8001db4 <main+0x1b8>)
 8001d14:	6013      	str	r3, [r2, #0]

  /* creation of WatchdogTask */
  WatchdogTaskHandle = osThreadNew(watch_dog_task, NULL, &WatchdogTask_attributes);
 8001d16:	4a28      	ldr	r2, [pc, #160]	@ (8001db8 <main+0x1bc>)
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4828      	ldr	r0, [pc, #160]	@ (8001dbc <main+0x1c0>)
 8001d1c:	f006 fef4 	bl	8008b08 <osThreadNew>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <main+0x1c4>)
 8001d24:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d26:	f006 fec9 	bl	8008abc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d2a:	bf00      	nop
 8001d2c:	e7fd      	b.n	8001d2a <main+0x12e>
 8001d2e:	bf00      	nop
 8001d30:	08010170 	.word	0x08010170
 8001d34:	20000430 	.word	0x20000430
 8001d38:	08010180 	.word	0x08010180
 8001d3c:	20000434 	.word	0x20000434
 8001d40:	08010190 	.word	0x08010190
 8001d44:	20000438 	.word	0x20000438
 8001d48:	080100f8 	.word	0x080100f8
 8001d4c:	2000041c 	.word	0x2000041c
 8001d50:	08010110 	.word	0x08010110
 8001d54:	20000420 	.word	0x20000420
 8001d58:	08010128 	.word	0x08010128
 8001d5c:	20000424 	.word	0x20000424
 8001d60:	08010140 	.word	0x08010140
 8001d64:	20000428 	.word	0x20000428
 8001d68:	08010158 	.word	0x08010158
 8001d6c:	2000042c 	.word	0x2000042c
 8001d70:	0800fffc 	.word	0x0800fffc
 8001d74:	08002605 	.word	0x08002605
 8001d78:	20000400 	.word	0x20000400
 8001d7c:	08010020 	.word	0x08010020
 8001d80:	08002875 	.word	0x08002875
 8001d84:	20000404 	.word	0x20000404
 8001d88:	08010044 	.word	0x08010044
 8001d8c:	080028f1 	.word	0x080028f1
 8001d90:	20000408 	.word	0x20000408
 8001d94:	08010068 	.word	0x08010068
 8001d98:	08002919 	.word	0x08002919
 8001d9c:	2000040c 	.word	0x2000040c
 8001da0:	0801008c 	.word	0x0801008c
 8001da4:	080029fd 	.word	0x080029fd
 8001da8:	20000410 	.word	0x20000410
 8001dac:	080100b0 	.word	0x080100b0
 8001db0:	08002ac5 	.word	0x08002ac5
 8001db4:	20000414 	.word	0x20000414
 8001db8:	080100d4 	.word	0x080100d4
 8001dbc:	08002cad 	.word	0x08002cad
 8001dc0:	20000418 	.word	0x20000418

08001dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b094      	sub	sp, #80	@ 0x50
 8001dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	2230      	movs	r2, #48	@ 0x30
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00b fb51 	bl	800d47a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <SystemClock_Config+0xcc>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	4a27      	ldr	r2, [pc, #156]	@ (8001e90 <SystemClock_Config+0xcc>)
 8001df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df8:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <SystemClock_Config+0xcc>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <SystemClock_Config+0xd0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <SystemClock_Config+0xd0>)
 8001e0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <SystemClock_Config+0xd0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e24:	2301      	movs	r3, #1
 8001e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e28:	2310      	movs	r3, #16
 8001e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e34:	2308      	movs	r3, #8
 8001e36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e38:	2364      	movs	r3, #100	@ 0x64
 8001e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e40:	2304      	movs	r3, #4
 8001e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e44:	f107 0320 	add.w	r3, r7, #32
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 fea5 	bl	8005b98 <HAL_RCC_OscConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e54:	f000 ffcc 	bl	8002df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e58:	230f      	movs	r3, #15
 8001e5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e64:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	2103      	movs	r1, #3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 f906 	bl	8006088 <HAL_RCC_ClockConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e82:	f000 ffb5 	bl	8002df0 <Error_Handler>
  }
}
 8001e86:	bf00      	nop
 8001e88:	3750      	adds	r7, #80	@ 0x50
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40007000 	.word	0x40007000

08001e98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001eac:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <MX_ADC1_Init+0x9c>)
 8001eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001ed8:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <MX_ADC1_Init+0xa0>)
 8001eda:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ef6:	480e      	ldr	r0, [pc, #56]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001ef8:	f001 fb90 	bl	800361c <HAL_ADC_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f02:	f000 ff75 	bl	8002df0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f06:	230f      	movs	r3, #15
 8001f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f12:	463b      	mov	r3, r7
 8001f14:	4619      	mov	r1, r3
 8001f16:	4806      	ldr	r0, [pc, #24]	@ (8001f30 <MX_ADC1_Init+0x98>)
 8001f18:	f001 fd62 	bl	80039e0 <HAL_ADC_ConfigChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f22:	f000 ff65 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000022c 	.word	0x2000022c
 8001f34:	40012000 	.word	0x40012000
 8001f38:	0f000001 	.word	0x0f000001

08001f3c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f42:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <MX_I2C3_Init+0x54>)
 8001f44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f48:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <MX_I2C3_Init+0x58>)
 8001f4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f5e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f66:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f7a:	f002 fde9 	bl	8004b50 <HAL_I2C_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f84:	f000 ff34 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000274 	.word	0x20000274
 8001f90:	40005c00 	.word	0x40005c00
 8001f94:	000186a0 	.word	0x000186a0

08001f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b096      	sub	sp, #88	@ 0x58
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2220      	movs	r2, #32
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00b fa52 	bl	800d47a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8001fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80020d4 <MX_TIM1_Init+0x13c>)
 8001fda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8001fde:	2253      	movs	r2, #83	@ 0x53
 8001fe0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001fe8:	4b39      	ldr	r3, [pc, #228]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8001fea:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001fee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff0:	4b37      	ldr	r3, [pc, #220]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ff6:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffc:	4b34      	ldr	r3, [pc, #208]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002002:	4833      	ldr	r0, [pc, #204]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8002004:	f004 fa52 	bl	80064ac <HAL_TIM_Base_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800200e:	f000 feef 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002016:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002018:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800201c:	4619      	mov	r1, r3
 800201e:	482c      	ldr	r0, [pc, #176]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8002020:	f004 fe48 	bl	8006cb4 <HAL_TIM_ConfigClockSource>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800202a:	f000 fee1 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800202e:	4828      	ldr	r0, [pc, #160]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8002030:	f004 fafc 	bl	800662c <HAL_TIM_PWM_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800203a:	f000 fed9 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002046:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800204a:	4619      	mov	r1, r3
 800204c:	4820      	ldr	r0, [pc, #128]	@ (80020d0 <MX_TIM1_Init+0x138>)
 800204e:	f005 fa37 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002058:	f000 feca 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205c:	2360      	movs	r3, #96	@ 0x60
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800207c:	2208      	movs	r2, #8
 800207e:	4619      	mov	r1, r3
 8002080:	4813      	ldr	r0, [pc, #76]	@ (80020d0 <MX_TIM1_Init+0x138>)
 8002082:	f004 fd55 	bl	8006b30 <HAL_TIM_PWM_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800208c:	f000 feb0 	bl	8002df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <MX_TIM1_Init+0x138>)
 80020b4:	f005 fa80 	bl	80075b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80020be:	f000 fe97 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020c2:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <MX_TIM1_Init+0x138>)
 80020c4:	f000 ffaa 	bl	800301c <HAL_TIM_MspPostInit>

}
 80020c8:	bf00      	nop
 80020ca:	3758      	adds	r7, #88	@ 0x58
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200002c8 	.word	0x200002c8
 80020d4:	40010000 	.word	0x40010000

080020d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	@ 0x38
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ec:	f107 0320 	add.w	r3, r7, #32
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
 8002104:	615a      	str	r2, [r3, #20]
 8002106:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002108:	4b2d      	ldr	r3, [pc, #180]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 800210a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800210e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002110:	4b2b      	ldr	r3, [pc, #172]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 8002112:	2253      	movs	r2, #83	@ 0x53
 8002114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800211c:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 800211e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002122:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b26      	ldr	r3, [pc, #152]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002130:	4823      	ldr	r0, [pc, #140]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 8002132:	f004 f9bb 	bl	80064ac <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800213c:	f000 fe58 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800214a:	4619      	mov	r1, r3
 800214c:	481c      	ldr	r0, [pc, #112]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 800214e:	f004 fdb1 	bl	8006cb4 <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002158:	f000 fe4a 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800215c:	4818      	ldr	r0, [pc, #96]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 800215e:	f004 fa65 	bl	800662c <HAL_TIM_PWM_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002168:	f000 fe42 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002174:	f107 0320 	add.w	r3, r7, #32
 8002178:	4619      	mov	r1, r3
 800217a:	4811      	ldr	r0, [pc, #68]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 800217c:	f005 f9a0 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002186:	f000 fe33 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218a:	2360      	movs	r3, #96	@ 0x60
 800218c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2204      	movs	r2, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	4807      	ldr	r0, [pc, #28]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 80021a2:	f004 fcc5 	bl	8006b30 <HAL_TIM_PWM_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80021ac:	f000 fe20 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021b0:	4803      	ldr	r0, [pc, #12]	@ (80021c0 <MX_TIM2_Init+0xe8>)
 80021b2:	f000 ff33 	bl	800301c <HAL_TIM_MspPostInit>

}
 80021b6:	bf00      	nop
 80021b8:	3738      	adds	r7, #56	@ 0x38
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000310 	.word	0x20000310

080021c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <MX_USART2_UART_Init+0x4c>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <MX_USART2_UART_Init+0x50>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ce:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <MX_USART2_UART_Init+0x4c>)
 80021d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <MX_USART2_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <MX_USART2_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <MX_USART2_UART_Init+0x4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <MX_USART2_UART_Init+0x4c>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <MX_USART2_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <MX_USART2_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	@ (8002210 <MX_USART2_UART_Init+0x4c>)
 80021fc:	f005 fa42 	bl	8007684 <HAL_UART_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002206:	f000 fdf3 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000358 	.word	0x20000358
 8002214:	40004400 	.word	0x40004400

08002218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <MX_DMA_Init+0x3c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a0b      	ldr	r2, [pc, #44]	@ (8002254 <MX_DMA_Init+0x3c>)
 8002228:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <MX_DMA_Init+0x3c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2105      	movs	r1, #5
 800223e:	2011      	movs	r0, #17
 8002240:	f001 fea4 	bl	8003f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002244:	2011      	movs	r0, #17
 8002246:	f001 febd 	bl	8003fc4 <HAL_NVIC_EnableIRQ>

}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	@ 0x28
 800225c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <MX_GPIO_Init+0x100>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a38      	ldr	r2, [pc, #224]	@ (8002358 <MX_GPIO_Init+0x100>)
 8002278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <MX_GPIO_Init+0x100>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <MX_GPIO_Init+0x100>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a31      	ldr	r2, [pc, #196]	@ (8002358 <MX_GPIO_Init+0x100>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b2f      	ldr	r3, [pc, #188]	@ (8002358 <MX_GPIO_Init+0x100>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002358 <MX_GPIO_Init+0x100>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002358 <MX_GPIO_Init+0x100>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b28      	ldr	r3, [pc, #160]	@ (8002358 <MX_GPIO_Init+0x100>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <MX_GPIO_Init+0x100>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a23      	ldr	r2, [pc, #140]	@ (8002358 <MX_GPIO_Init+0x100>)
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b21      	ldr	r3, [pc, #132]	@ (8002358 <MX_GPIO_Init+0x100>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <MX_GPIO_Init+0x100>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002358 <MX_GPIO_Init+0x100>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <MX_GPIO_Init+0x100>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 41a2 	mov.w	r1, #20736	@ 0x5100
 8002300:	4816      	ldr	r0, [pc, #88]	@ (800235c <MX_GPIO_Init+0x104>)
 8002302:	f002 fc0b 	bl	8004b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800230c:	4814      	ldr	r0, [pc, #80]	@ (8002360 <MX_GPIO_Init+0x108>)
 800230e:	f002 fc05 	bl	8004b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE12 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_14;
 8002312:	f44f 43a2 	mov.w	r3, #20736	@ 0x5100
 8002316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	480c      	ldr	r0, [pc, #48]	@ (800235c <MX_GPIO_Init+0x104>)
 800232c:	f002 fa5a 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002330:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	4619      	mov	r1, r3
 8002348:	4805      	ldr	r0, [pc, #20]	@ (8002360 <MX_GPIO_Init+0x108>)
 800234a:	f002 fa4b 	bl	80047e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800234e:	bf00      	nop
 8002350:	3728      	adds	r7, #40	@ 0x28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40021000 	.word	0x40021000
 8002360:	40020c00 	.word	0x40020c00

08002364 <uart_tx_enqueue>:

/* USER CODE BEGIN 4 */

int uart_tx_enqueue(const uint8_t* data, uint16_t len) {
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
    uint16_t next_head;
    for (uint16_t i = 0; i < len; i++) {
 8002370:	2300      	movs	r3, #0
 8002372:	81fb      	strh	r3, [r7, #14]
 8002374:	e021      	b.n	80023ba <uart_tx_enqueue+0x56>
        next_head = (uart_tx_head + 1) % UART_TX_BUF_SIZE;
 8002376:	4b16      	ldr	r3, [pc, #88]	@ (80023d0 <uart_tx_enqueue+0x6c>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	425a      	negs	r2, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	bf58      	it	pl
 8002386:	4253      	negpl	r3, r2
 8002388:	81bb      	strh	r3, [r7, #12]
        if (next_head == uart_tx_tail) {
 800238a:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <uart_tx_enqueue+0x70>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	89ba      	ldrh	r2, [r7, #12]
 8002392:	429a      	cmp	r2, r3
 8002394:	d102      	bne.n	800239c <uart_tx_enqueue+0x38>
            // Bafer pun
            return -1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	e013      	b.n	80023c4 <uart_tx_enqueue+0x60>
        }
        uart_tx_buffer[uart_tx_head] = data[i];
 800239c:	89fb      	ldrh	r3, [r7, #14]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a0b      	ldr	r2, [pc, #44]	@ (80023d0 <uart_tx_enqueue+0x6c>)
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	b292      	uxth	r2, r2
 80023a8:	7819      	ldrb	r1, [r3, #0]
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <uart_tx_enqueue+0x74>)
 80023ac:	5499      	strb	r1, [r3, r2]
        uart_tx_head = next_head;
 80023ae:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <uart_tx_enqueue+0x6c>)
 80023b0:	89bb      	ldrh	r3, [r7, #12]
 80023b2:	8013      	strh	r3, [r2, #0]
    for (uint16_t i = 0; i < len; i++) {
 80023b4:	89fb      	ldrh	r3, [r7, #14]
 80023b6:	3301      	adds	r3, #1
 80023b8:	81fb      	strh	r3, [r7, #14]
 80023ba:	89fa      	ldrh	r2, [r7, #14]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d3d9      	bcc.n	8002376 <uart_tx_enqueue+0x12>
    }
    return 0;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	20000554 	.word	0x20000554
 80023d4:	20000556 	.word	0x20000556
 80023d8:	20000454 	.word	0x20000454

080023dc <uart_start_tx_dma>:

void uart_start_tx_dma(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
    if (uart_tx_busy) return; // već radi
 80023e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <uart_start_tx_dma+0x7c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d132      	bne.n	8002450 <uart_start_tx_dma+0x74>

    if (uart_tx_head == uart_tx_tail) {
 80023ea:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <uart_start_tx_dma+0x80>)
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <uart_start_tx_dma+0x84>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d02c      	beq.n	8002454 <uart_start_tx_dma+0x78>
        // Bafer prazan
        return;
    }

    uart_tx_busy = 1;
 80023fa:	4b17      	ldr	r3, [pc, #92]	@ (8002458 <uart_start_tx_dma+0x7c>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]

    if (uart_tx_head > uart_tx_tail) {
 8002400:	4b16      	ldr	r3, [pc, #88]	@ (800245c <uart_start_tx_dma+0x80>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29a      	uxth	r2, r3
 8002406:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <uart_start_tx_dma+0x84>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	429a      	cmp	r2, r3
 800240e:	d90a      	bls.n	8002426 <uart_start_tx_dma+0x4a>
        current_transmit_length = uart_tx_head - uart_tx_tail;
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <uart_start_tx_dma+0x80>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29a      	uxth	r2, r3
 8002416:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <uart_start_tx_dma+0x84>)
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	b29a      	uxth	r2, r3
 8002420:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <uart_start_tx_dma+0x88>)
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	e007      	b.n	8002436 <uart_start_tx_dma+0x5a>
    } else {
        current_transmit_length = UART_TX_BUF_SIZE - uart_tx_tail;
 8002426:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <uart_start_tx_dma+0x84>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <uart_start_tx_dma+0x88>)
 8002434:	801a      	strh	r2, [r3, #0]
    }

    HAL_UART_Transmit_DMA(&huart2, &uart_tx_buffer[uart_tx_tail], current_transmit_length);
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <uart_start_tx_dma+0x84>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <uart_start_tx_dma+0x8c>)
 8002440:	4413      	add	r3, r2
 8002442:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <uart_start_tx_dma+0x88>)
 8002444:	8812      	ldrh	r2, [r2, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	4808      	ldr	r0, [pc, #32]	@ (800246c <uart_start_tx_dma+0x90>)
 800244a:	f005 fa1b 	bl	8007884 <HAL_UART_Transmit_DMA>
 800244e:	e002      	b.n	8002456 <uart_start_tx_dma+0x7a>
    if (uart_tx_busy) return; // već radi
 8002450:	bf00      	nop
 8002452:	e000      	b.n	8002456 <uart_start_tx_dma+0x7a>
        return;
 8002454:	bf00      	nop
}
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000558 	.word	0x20000558
 800245c:	20000554 	.word	0x20000554
 8002460:	20000556 	.word	0x20000556
 8002464:	2000055a 	.word	0x2000055a
 8002468:	20000454 	.word	0x20000454
 800246c:	20000358 	.word	0x20000358

08002470 <Speaker_Beep>:

void Speaker_Beep(uint32_t duration_ms)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
    htim2.Instance->CCR2 = 470;
 8002478:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <Speaker_Beep+0x44>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8002480:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002482:	2104      	movs	r1, #4
 8002484:	480b      	ldr	r0, [pc, #44]	@ (80024b4 <Speaker_Beep+0x44>)
 8002486:	f004 f92b 	bl	80066e0 <HAL_TIM_PWM_Start>
    osDelay(pdMS_TO_TICKS(duration_ms));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	4a08      	ldr	r2, [pc, #32]	@ (80024b8 <Speaker_Beep+0x48>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	4618      	mov	r0, r3
 800249e:	f006 fbc5 	bl	8008c2c <osDelay>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80024a2:	2104      	movs	r1, #4
 80024a4:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <Speaker_Beep+0x44>)
 80024a6:	f004 f9e3 	bl	8006870 <HAL_TIM_PWM_Stop>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000310 	.word	0x20000310
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <fan_rotating>:

void fan_rotating(uint32_t duration_ms)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_GPIO_Pin, GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024ca:	4816      	ldr	r0, [pc, #88]	@ (8002524 <fan_rotating+0x68>)
 80024cc:	f002 fb26 	bl	8004b1c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 19000);
 80024d0:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <fan_rotating+0x6c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f644 2238 	movw	r2, #19000	@ 0x4a38
 80024d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	osMutexAcquire(xUARTMutexHandle, osWaitForever);
 80024da:	4b14      	ldr	r3, [pc, #80]	@ (800252c <fan_rotating+0x70>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f04f 31ff 	mov.w	r1, #4294967295
 80024e2:	4618      	mov	r0, r3
 80024e4:	f006 fc43 	bl	8008d6e <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)"F\r\n", 3, 100);
 80024e8:	2364      	movs	r3, #100	@ 0x64
 80024ea:	2203      	movs	r2, #3
 80024ec:	4910      	ldr	r1, [pc, #64]	@ (8002530 <fan_rotating+0x74>)
 80024ee:	4811      	ldr	r0, [pc, #68]	@ (8002534 <fan_rotating+0x78>)
 80024f0:	f005 f918 	bl	8007724 <HAL_UART_Transmit>
	osMutexRelease(xUARTMutexHandle);
 80024f4:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <fan_rotating+0x70>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f006 fc83 	bl	8008e04 <osMutexRelease>
    osDelay(pdMS_TO_TICKS(duration_ms));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <fan_rotating+0x7c>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	4618      	mov	r0, r3
 8002512:	f006 fb8b 	bl	8008c2c <osDelay>
	fan_stop();
 8002516:	f000 f811 	bl	800253c <fan_stop>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	200002c8 	.word	0x200002c8
 800252c:	20000430 	.word	0x20000430
 8002530:	0800ff28 	.word	0x0800ff28
 8002534:	20000358 	.word	0x20000358
 8002538:	10624dd3 	.word	0x10624dd3

0800253c <fan_stop>:

void fan_stop(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002540:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <fan_stop+0x18>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	200002c8 	.word	0x200002c8

08002558 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a09      	ldr	r2, [pc, #36]	@ (800258c <HAL_UART_RxCpltCallback+0x34>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10b      	bne.n	8002582 <HAL_UART_RxCpltCallback+0x2a>
        osMessageQueuePut(uartCommandQueueHandle, &rx_buff, 0, 0);
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_UART_RxCpltCallback+0x38>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	2200      	movs	r2, #0
 8002572:	4908      	ldr	r1, [pc, #32]	@ (8002594 <HAL_UART_RxCpltCallback+0x3c>)
 8002574:	f006 fe16 	bl	80091a4 <osMessageQueuePut>
        HAL_UART_Receive_IT(&huart2, &rx_buff, 1);
 8002578:	2201      	movs	r2, #1
 800257a:	4906      	ldr	r1, [pc, #24]	@ (8002594 <HAL_UART_RxCpltCallback+0x3c>)
 800257c:	4806      	ldr	r0, [pc, #24]	@ (8002598 <HAL_UART_RxCpltCallback+0x40>)
 800257e:	f005 f95c 	bl	800783a <HAL_UART_Receive_IT>
    }
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40004400 	.word	0x40004400
 8002590:	20000428 	.word	0x20000428
 8002594:	20000450 	.word	0x20000450
 8002598:	20000358 	.word	0x20000358

0800259c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <HAL_UART_TxCpltCallback+0x54>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d11b      	bne.n	80025e6 <HAL_UART_TxCpltCallback+0x4a>
        uart_tx_tail = (uart_tx_tail + current_transmit_length) % UART_TX_BUF_SIZE;
 80025ae:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <HAL_UART_TxCpltCallback+0x58>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_UART_TxCpltCallback+0x5c>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_UART_TxCpltCallback+0x58>)
 80025c2:	801a      	strh	r2, [r3, #0]

        if (uart_tx_tail != uart_tx_head) {
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_UART_TxCpltCallback+0x58>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <HAL_UART_TxCpltCallback+0x60>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d005      	beq.n	80025e0 <HAL_UART_TxCpltCallback+0x44>
            uart_tx_busy = 0;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_UART_TxCpltCallback+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
            uart_start_tx_dma();
 80025da:	f7ff feff 	bl	80023dc <uart_start_tx_dma>
        } else {
            uart_tx_busy = 0;
        }
    }
}
 80025de:	e002      	b.n	80025e6 <HAL_UART_TxCpltCallback+0x4a>
            uart_tx_busy = 0;
 80025e0:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <HAL_UART_TxCpltCallback+0x64>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40004400 	.word	0x40004400
 80025f4:	20000556 	.word	0x20000556
 80025f8:	2000055a 	.word	0x2000055a
 80025fc:	20000554 	.word	0x20000554
 8002600:	20000558 	.word	0x20000558

08002604 <co_measure_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_co_measure_task */
void co_measure_task(void *argument)
{
 8002604:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002608:	b0a4      	sub	sp, #144	@ 0x90
 800260a:	af06      	add	r7, sp, #24
 800260c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800260e:	2201      	movs	r2, #1
 8002610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002614:	4884      	ldr	r0, [pc, #528]	@ (8002828 <co_measure_task+0x224>)
 8002616:	f002 fa81 	bl	8004b1c <HAL_GPIO_WritePin>
	uint32_t adc_value;
	const float Vcc = 5.0f;
 800261a:	4b84      	ldr	r3, [pc, #528]	@ (800282c <co_measure_task+0x228>)
 800261c:	673b      	str	r3, [r7, #112]	@ 0x70
	const float RL = 10000.0f;
 800261e:	4b84      	ldr	r3, [pc, #528]	@ (8002830 <co_measure_task+0x22c>)
 8002620:	66fb      	str	r3, [r7, #108]	@ 0x6c
	WeatherData_t latestWeather = { .temperature = 25.0f, .humidity = 52.0f };
 8002622:	4a84      	ldr	r2, [pc, #528]	@ (8002834 <co_measure_task+0x230>)
 8002624:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800262c:	e883 0003 	stmia.w	r3, {r0, r1}
// Kalibracija R0 za trenutnu temp i hum (izvodi se jednom na početku)
//	osDelay(pdMS_TO_TICKS(1000));
	float Vout;
	float Rs, T, H;
	osDelay(pdMS_TO_TICKS(100));
 8002630:	2064      	movs	r0, #100	@ 0x64
 8002632:	f006 fafb 	bl	8008c2c <osDelay>
	osMessageQueueGet(queue_r0Handle, &latestWeather, NULL, osWaitForever);
 8002636:	4b80      	ldr	r3, [pc, #512]	@ (8002838 <co_measure_task+0x234>)
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	2200      	movs	r2, #0
 8002644:	f006 fe0e 	bl	8009264 <osMessageQueueGet>
	T = latestWeather.temperature;
 8002648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800264a:	66bb      	str	r3, [r7, #104]	@ 0x68
	H = latestWeather.humidity;
 800264c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800264e:	667b      	str	r3, [r7, #100]	@ 0x64
	HAL_ADC_Start(&hadc1);
 8002650:	487a      	ldr	r0, [pc, #488]	@ (800283c <co_measure_task+0x238>)
 8002652:	f001 f827 	bl	80036a4 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8002656:	2164      	movs	r1, #100	@ 0x64
 8002658:	4878      	ldr	r0, [pc, #480]	@ (800283c <co_measure_task+0x238>)
 800265a:	f001 f928 	bl	80038ae <HAL_ADC_PollForConversion>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <co_measure_task+0x68>
		adc_value = HAL_ADC_GetValue(&hadc1);
 8002664:	4875      	ldr	r0, [pc, #468]	@ (800283c <co_measure_task+0x238>)
 8002666:	f001 f9ad 	bl	80039c4 <HAL_ADC_GetValue>
 800266a:	6778      	str	r0, [r7, #116]	@ 0x74
	}
	HAL_ADC_Stop(&hadc1);
 800266c:	4873      	ldr	r0, [pc, #460]	@ (800283c <co_measure_task+0x238>)
 800266e:	f001 f8eb 	bl	8003848 <HAL_ADC_Stop>

	Vout = (adc_value * Vcc) / 4095.0f;
 8002672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800267c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002684:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002840 <co_measure_task+0x23c>
 8002688:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800268c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	Rs = ((Vcc - Vout) * RL) / Vout;
 8002690:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002694:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002698:	ee37 7a67 	vsub.f32	s14, s14, s15
 800269c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80026a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026a4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80026a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ac:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c


	float R0 = Rs / (-0.0122f * T - 0.00609f * H + 1.7086f);
 80026b0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80026b4:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002844 <co_measure_task+0x240>
 80026b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026bc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80026c0:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8002848 <co_measure_task+0x244>
 80026c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026cc:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800284c <co_measure_task+0x248>
 80026d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80026d4:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80026d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026dc:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

	char msg[64];
	snprintf(msg, sizeof(msg), "R0 = %.2f\r\n (T=%.1fC H=%.1f%%)", R0, T, H);
 80026e0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80026e2:	f7fd ff31 	bl	8000548 <__aeabi_f2d>
 80026e6:	4604      	mov	r4, r0
 80026e8:	460d      	mov	r5, r1
 80026ea:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80026ec:	f7fd ff2c 	bl	8000548 <__aeabi_f2d>
 80026f0:	4680      	mov	r8, r0
 80026f2:	4689      	mov	r9, r1
 80026f4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80026f6:	f7fd ff27 	bl	8000548 <__aeabi_f2d>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	f107 000c 	add.w	r0, r7, #12
 8002702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002706:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800270a:	e9cd 4500 	strd	r4, r5, [sp]
 800270e:	4a50      	ldr	r2, [pc, #320]	@ (8002850 <co_measure_task+0x24c>)
 8002710:	2140      	movs	r1, #64	@ 0x40
 8002712:	f00a fe3b 	bl	800d38c <sniprintf>
	osMutexAcquire(xUARTMutexHandle, osWaitForever);
 8002716:	4b4f      	ldr	r3, [pc, #316]	@ (8002854 <co_measure_task+0x250>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f04f 31ff 	mov.w	r1, #4294967295
 800271e:	4618      	mov	r0, r3
 8002720:	f006 fb25 	bl	8008d6e <osMutexAcquire>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)msg, strlen(msg));
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fda1 	bl	8000270 <strlen>
 800272e:	4603      	mov	r3, r0
 8002730:	b29a      	uxth	r2, r3
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	4619      	mov	r1, r3
 8002738:	4847      	ldr	r0, [pc, #284]	@ (8002858 <co_measure_task+0x254>)
 800273a:	f005 f8a3 	bl	8007884 <HAL_UART_Transmit_DMA>
	osMutexRelease(xUARTMutexHandle);
 800273e:	4b45      	ldr	r3, [pc, #276]	@ (8002854 <co_measure_task+0x250>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f006 fb5e 	bl	8008e04 <osMutexRelease>
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
//	osMutexRelease(xUARTMutexHandle);

	// Petlja za merenje CO
	for (;;) {
		HAL_ADC_Start(&hadc1);
 8002748:	483c      	ldr	r0, [pc, #240]	@ (800283c <co_measure_task+0x238>)
 800274a:	f000 ffab 	bl	80036a4 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 800274e:	2164      	movs	r1, #100	@ 0x64
 8002750:	483a      	ldr	r0, [pc, #232]	@ (800283c <co_measure_task+0x238>)
 8002752:	f001 f8ac 	bl	80038ae <HAL_ADC_PollForConversion>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d155      	bne.n	8002808 <co_measure_task+0x204>
			adc_value = HAL_ADC_GetValue(&hadc1);
 800275c:	4837      	ldr	r0, [pc, #220]	@ (800283c <co_measure_task+0x238>)
 800275e:	f001 f931 	bl	80039c4 <HAL_ADC_GetValue>
 8002762:	6778      	str	r0, [r7, #116]	@ 0x74
			Vout = (adc_value * Vcc) / 4095.0f;
 8002764:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800276e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002776:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002840 <co_measure_task+0x23c>
 800277a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800277e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			Rs = ((Vcc - Vout) * RL) / Vout;
 8002782:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002786:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800278a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800278e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002792:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002796:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800279a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800279e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

			float ratio = Rs / R0;
 80027a2:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80027a6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80027aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ae:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			float co_ppm = 19.709f * powf(ratio, -0.652f);
 80027b2:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 800285c <co_measure_task+0x258>
 80027b6:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 80027ba:	f00c ff7f 	bl	800f6bc <powf>
 80027be:	eef0 7a40 	vmov.f32	s15, s0
 80027c2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002860 <co_measure_task+0x25c>
 80027c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ca:	edc7 7a02 	vstr	s15, [r7, #8]
//			snprintf(msg, sizeof(msg), "CO: %.1f ppm \r\n", co_ppm);
//			osMutexAcquire(xUARTMutexHandle, osWaitForever);
//			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
//			osMutexRelease(xUARTMutexHandle);
//
			osMessageQueuePut(queue_coHandle, &co_ppm, 0, pdMS_TO_TICKS(100));
 80027ce:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <co_measure_task+0x260>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	f107 0108 	add.w	r1, r7, #8
 80027d6:	2364      	movs	r3, #100	@ 0x64
 80027d8:	2200      	movs	r2, #0
 80027da:	f006 fce3 	bl	80091a4 <osMessageQueuePut>
			if (co_ppm > 30.0f) {
 80027de:	edd7 7a02 	vldr	s15, [r7, #8]
 80027e2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80027e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	dd0b      	ble.n	8002808 <co_measure_task+0x204>
//			    HAL_UART_Transmit(&huart2, (uint8_t*)"Speaker Semafor RELEASE\r\n", 26, 100);
				xTaskNotifyGive(FanTaskHandle);
 80027f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <co_measure_task+0x264>)
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	2300      	movs	r3, #0
 80027f6:	2202      	movs	r2, #2
 80027f8:	2100      	movs	r1, #0
 80027fa:	f008 ffff 	bl	800b7fc <xTaskGenericNotify>
				osSemaphoreRelease(xSpeakerSemHandle);
 80027fe:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <co_measure_task+0x268>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f006 fc16 	bl	8009034 <osSemaphoreRelease>
			}
		}
		HAL_ADC_Stop(&hadc1);
 8002808:	480c      	ldr	r0, [pc, #48]	@ (800283c <co_measure_task+0x238>)
 800280a:	f001 f81d 	bl	8003848 <HAL_ADC_Stop>
		xTaskNotify(WatchdogTaskHandle, 0x01, eSetBits);
 800280e:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <co_measure_task+0x26c>)
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	2300      	movs	r3, #0
 8002814:	2201      	movs	r2, #1
 8002816:	2101      	movs	r1, #1
 8002818:	f008 fff0 	bl	800b7fc <xTaskGenericNotify>
		osDelay(pdMS_TO_TICKS(500));
 800281c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002820:	f006 fa04 	bl	8008c2c <osDelay>
		HAL_ADC_Start(&hadc1);
 8002824:	e790      	b.n	8002748 <co_measure_task+0x144>
 8002826:	bf00      	nop
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40a00000 	.word	0x40a00000
 8002830:	461c4000 	.word	0x461c4000
 8002834:	0800ff4c 	.word	0x0800ff4c
 8002838:	2000041c 	.word	0x2000041c
 800283c:	2000022c 	.word	0x2000022c
 8002840:	457ff000 	.word	0x457ff000
 8002844:	bc47e282 	.word	0xbc47e282
 8002848:	3bc78e9f 	.word	0x3bc78e9f
 800284c:	3fdab368 	.word	0x3fdab368
 8002850:	0800ff2c 	.word	0x0800ff2c
 8002854:	20000430 	.word	0x20000430
 8002858:	20000358 	.word	0x20000358
 800285c:	bf26e979 	.word	0xbf26e979
 8002860:	419dac08 	.word	0x419dac08
 8002864:	20000424 	.word	0x20000424
 8002868:	2000040c 	.word	0x2000040c
 800286c:	20000438 	.word	0x20000438
 8002870:	20000418 	.word	0x20000418

08002874 <weather_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_weather_task */
void weather_task(void *argument)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN weather_task */
//	char uart_buf[128];
//	int uart_buf_len;
	for (;;) {
		BME280_Measure();
 800287c:	f7ff f928 	bl	8001ad0 <BME280_Measure>
		osMessageQueuePut(queue_r0Handle, &data, 0, pdMS_TO_TICKS(100));
 8002880:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <weather_task+0x60>)
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	2364      	movs	r3, #100	@ 0x64
 8002886:	2200      	movs	r2, #0
 8002888:	4913      	ldr	r1, [pc, #76]	@ (80028d8 <weather_task+0x64>)
 800288a:	f006 fc8b 	bl	80091a4 <osMessageQueuePut>
//				      "Temp: %.2f C, Press: %.2f hPa, Hum: %.2f %%\r\n",
//				      data.temperature, Pressure / 100.0f, data.humidity);
//		osMutexAcquire(xUARTMutexHandle, osWaitForever);
//		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
//		osMutexRelease(xUARTMutexHandle);
		osMessageQueuePut(queue_prHandle, &Pressure, 0, pdMS_TO_TICKS(100));
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <weather_task+0x68>)
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	2364      	movs	r3, #100	@ 0x64
 8002894:	2200      	movs	r2, #0
 8002896:	4912      	ldr	r1, [pc, #72]	@ (80028e0 <weather_task+0x6c>)
 8002898:	f006 fc84 	bl	80091a4 <osMessageQueuePut>
		if(Pressure>1020000	){
 800289c:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <weather_task+0x6c>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80028e4 <weather_task+0x70>
 80028a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	dd04      	ble.n	80028ba <weather_task+0x46>
//			osMutexAcquire(xUARTMutexHandle, osWaitForever);
//		    HAL_UART_Transmit(&huart2, (uint8_t*)"Speaker Semafor PRESSURE\r\n", 27, 100);
//			osMutexRelease(xUARTMutexHandle);
		    osSemaphoreRelease(xSpeakerSemHandle);
 80028b0:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <weather_task+0x74>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f006 fbbd 	bl	8009034 <osSemaphoreRelease>
		}
		xTaskNotify(WatchdogTaskHandle, 0x02, eSetBits);
 80028ba:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <weather_task+0x78>)
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	2201      	movs	r2, #1
 80028c2:	2102      	movs	r1, #2
 80028c4:	f008 ff9a 	bl	800b7fc <xTaskGenericNotify>
		osDelay(pdMS_TO_TICKS(500));
 80028c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028cc:	f006 f9ae 	bl	8008c2c <osDelay>
		BME280_Measure();
 80028d0:	e7d4      	b.n	800287c <weather_task+0x8>
 80028d2:	bf00      	nop
 80028d4:	2000041c 	.word	0x2000041c
 80028d8:	20000448 	.word	0x20000448
 80028dc:	20000420 	.word	0x20000420
 80028e0:	20000440 	.word	0x20000440
 80028e4:	49790600 	.word	0x49790600
 80028e8:	20000438 	.word	0x20000438
 80028ec:	20000418 	.word	0x20000418

080028f0 <speaker_alarm_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_speaker_alarm_task */
void speaker_alarm_task(void *argument)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN speaker_alarm_task */
//	HAL_UART_Transmit(&huart2, (uint8_t*)"Speaker task running...\r\n", 26, 100);
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(xSpeakerSemHandle, osWaitForever);
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <speaker_alarm_task+0x24>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	4618      	mov	r0, r3
 8002902:	f006 fb45 	bl	8008f90 <osSemaphoreAcquire>
//	  HAL_UART_Transmit(&huart2, (uint8_t*)"Beep!\r\n", 7, 100);
	  Speaker_Beep(1000);
 8002906:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800290a:	f7ff fdb1 	bl	8002470 <Speaker_Beep>
	  osSemaphoreAcquire(xSpeakerSemHandle, osWaitForever);
 800290e:	bf00      	nop
 8002910:	e7f2      	b.n	80028f8 <speaker_alarm_task+0x8>
 8002912:	bf00      	nop
 8002914:	20000438 	.word	0x20000438

08002918 <fan_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fan_task */
void fan_task(void *argument)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fan_task */
	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_GPIO_Pin, GPIO_PIN_SET);
 8002920:	2201      	movs	r2, #1
 8002922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002926:	482e      	ldr	r0, [pc, #184]	@ (80029e0 <fan_task+0xc8>)
 8002928:	f002 f8f8 	bl	8004b1c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_GPIO_Pin, GPIO_PIN_SET);
 800292c:	2201      	movs	r2, #1
 800292e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002932:	482b      	ldr	r0, [pc, #172]	@ (80029e0 <fan_task+0xc8>)
 8002934:	f002 f8f2 	bl	8004b1c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SLP_GPIO_Port, SLP_GPIO_Pin, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800293e:	4828      	ldr	r0, [pc, #160]	@ (80029e0 <fan_task+0xc8>)
 8002940:	f002 f8ec 	bl	8004b1c <HAL_GPIO_WritePin>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002944:	2108      	movs	r1, #8
 8002946:	4827      	ldr	r0, [pc, #156]	@ (80029e4 <fan_task+0xcc>)
 8002948:	f003 feca 	bl	80066e0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	2001      	movs	r0, #1
 8002952:	f008 fea7 	bl	800b6a4 <ulTaskNotifyTake>
//	  HAL_UART_Transmit(&huart2, (uint8_t*)"FAN\r\n", 5, 100);
	  if (fan_continuous_mode){
 8002956:	4b24      	ldr	r3, [pc, #144]	@ (80029e8 <fan_task+0xd0>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d02e      	beq.n	80029be <fan_task+0xa6>
		  // Uključi ventilator i čekaj dok se fan_continuous_mode ne resetuje na 0
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 19000);
 8002960:	4b20      	ldr	r3, [pc, #128]	@ (80029e4 <fan_task+0xcc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f644 2238 	movw	r2, #19000	@ 0x4a38
 8002968:	63da      	str	r2, [r3, #60]	@ 0x3c
		  while (fan_continuous_mode)
 800296a:	e014      	b.n	8002996 <fan_task+0x7e>
		  {
			  osDelay(100);
 800296c:	2064      	movs	r0, #100	@ 0x64
 800296e:	f006 f95d 	bl	8008c2c <osDelay>

			osMutexAcquire(xUARTMutexHandle, osWaitForever);
 8002972:	4b1e      	ldr	r3, [pc, #120]	@ (80029ec <fan_task+0xd4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f04f 31ff 	mov.w	r1, #4294967295
 800297a:	4618      	mov	r0, r3
 800297c:	f006 f9f7 	bl	8008d6e <osMutexAcquire>
			HAL_UART_Transmit(&huart2, (uint8_t*)"F\r\n", 3, 100);
 8002980:	2364      	movs	r3, #100	@ 0x64
 8002982:	2203      	movs	r2, #3
 8002984:	491a      	ldr	r1, [pc, #104]	@ (80029f0 <fan_task+0xd8>)
 8002986:	481b      	ldr	r0, [pc, #108]	@ (80029f4 <fan_task+0xdc>)
 8002988:	f004 fecc 	bl	8007724 <HAL_UART_Transmit>
			osMutexRelease(xUARTMutexHandle);
 800298c:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <fan_task+0xd4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f006 fa37 	bl	8008e04 <osMutexRelease>
		  while (fan_continuous_mode)
 8002996:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <fan_task+0xd0>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e5      	bne.n	800296c <fan_task+0x54>
		  }
		  osMutexAcquire(xFANMutexHandle, osWaitForever);
 80029a0:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <fan_task+0xe0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295
 80029a8:	4618      	mov	r0, r3
 80029aa:	f006 f9e0 	bl	8008d6e <osMutexAcquire>
		  fan_stop();
 80029ae:	f7ff fdc5 	bl	800253c <fan_stop>
		  osMutexRelease(xFANMutexHandle);
 80029b2:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <fan_task+0xe0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f006 fa24 	bl	8008e04 <osMutexRelease>
 80029bc:	e7c6      	b.n	800294c <fan_task+0x34>
	  }else{
		  osMutexAcquire(xFANMutexHandle, osWaitForever);
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <fan_task+0xe0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f04f 31ff 	mov.w	r1, #4294967295
 80029c6:	4618      	mov	r0, r3
 80029c8:	f006 f9d1 	bl	8008d6e <osMutexAcquire>
		  fan_rotating(1000);
 80029cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029d0:	f7ff fd74 	bl	80024bc <fan_rotating>
		  osMutexRelease(xFANMutexHandle);
 80029d4:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <fan_task+0xe0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f006 fa13 	bl	8008e04 <osMutexRelease>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80029de:	e7b5      	b.n	800294c <fan_task+0x34>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	200002c8 	.word	0x200002c8
 80029e8:	20000451 	.word	0x20000451
 80029ec:	20000430 	.word	0x20000430
 80029f0:	0800ff28 	.word	0x0800ff28
 80029f4:	20000358 	.word	0x20000358
 80029f8:	20000434 	.word	0x20000434

080029fc <uart_command_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_command_task */
void uart_command_task(void *argument)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_command_task */
  /* Infinite loop */
	uint8_t fan_state;
	HAL_UART_Receive_IT(&huart2, &rx_buff, 1);
 8002a04:	2201      	movs	r2, #1
 8002a06:	4929      	ldr	r1, [pc, #164]	@ (8002aac <uart_command_task+0xb0>)
 8002a08:	4829      	ldr	r0, [pc, #164]	@ (8002ab0 <uart_command_task+0xb4>)
 8002a0a:	f004 ff16 	bl	800783a <HAL_UART_Receive_IT>
	for(;;)
	{
		if(osMessageQueueGet(uartCommandQueueHandle, &fan_state, NULL, osWaitForever) == osOK){
 8002a0e:	4b29      	ldr	r3, [pc, #164]	@ (8002ab4 <uart_command_task+0xb8>)
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	f107 010b 	add.w	r1, r7, #11
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f006 fc22 	bl	8009264 <osMessageQueueGet>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f3      	bne.n	8002a0e <uart_command_task+0x12>
			if (fan_state == '0') {
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	2b30      	cmp	r3, #48	@ 0x30
 8002a2a:	d111      	bne.n	8002a50 <uart_command_task+0x54>
			    fan_continuous_mode = 0;
 8002a2c:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <uart_command_task+0xbc>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
				osMutexAcquire(xFANMutexHandle, osWaitForever);
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <uart_command_task+0xc0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f04f 31ff 	mov.w	r1, #4294967295
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f006 f997 	bl	8008d6e <osMutexAcquire>
			    fan_stop();
 8002a40:	f7ff fd7c 	bl	800253c <fan_stop>
			    osMutexRelease(xFANMutexHandle);
 8002a44:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <uart_command_task+0xc0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f006 f9db 	bl	8008e04 <osMutexRelease>
 8002a4e:	e7de      	b.n	8002a0e <uart_command_task+0x12>
			}
			else if (fan_state == '1') {
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	2b31      	cmp	r3, #49	@ 0x31
 8002a54:	d10a      	bne.n	8002a6c <uart_command_task+0x70>
			    fan_continuous_mode = 1;
 8002a56:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <uart_command_task+0xbc>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
			    xTaskNotifyGive(FanTaskHandle);
 8002a5c:	4b18      	ldr	r3, [pc, #96]	@ (8002ac0 <uart_command_task+0xc4>)
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	2300      	movs	r3, #0
 8002a62:	2202      	movs	r2, #2
 8002a64:	2100      	movs	r1, #0
 8002a66:	f008 fec9 	bl	800b7fc <xTaskGenericNotify>
 8002a6a:	e7d0      	b.n	8002a0e <uart_command_task+0x12>
			}
			else if (fan_state >= '2' && fan_state <= '9') {
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	2b31      	cmp	r3, #49	@ 0x31
 8002a70:	d9cd      	bls.n	8002a0e <uart_command_task+0x12>
 8002a72:	7afb      	ldrb	r3, [r7, #11]
 8002a74:	2b39      	cmp	r3, #57	@ 0x39
 8002a76:	d8ca      	bhi.n	8002a0e <uart_command_task+0x12>
			    fan_continuous_mode = 0;
 8002a78:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <uart_command_task+0xbc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
			    uint32_t duration = (fan_state - '0') * 1000;
 8002a7e:	7afb      	ldrb	r3, [r7, #11]
 8002a80:	3b30      	subs	r3, #48	@ 0x30
 8002a82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
				osMutexAcquire(xFANMutexHandle, osWaitForever);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <uart_command_task+0xc0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	4618      	mov	r0, r3
 8002a96:	f006 f96a 	bl	8008d6e <osMutexAcquire>
				fan_rotating(duration);
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff fd0e 	bl	80024bc <fan_rotating>
				osMutexRelease(xFANMutexHandle);
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <uart_command_task+0xc0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f006 f9ad 	bl	8008e04 <osMutexRelease>
		if(osMessageQueueGet(uartCommandQueueHandle, &fan_state, NULL, osWaitForever) == osOK){
 8002aaa:	e7b0      	b.n	8002a0e <uart_command_task+0x12>
 8002aac:	20000450 	.word	0x20000450
 8002ab0:	20000358 	.word	0x20000358
 8002ab4:	20000428 	.word	0x20000428
 8002ab8:	20000451 	.word	0x20000451
 8002abc:	20000434 	.word	0x20000434
 8002ac0:	2000040c 	.word	0x2000040c

08002ac4 <uart_display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_display_task */
void uart_display_task(void *argument)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b098      	sub	sp, #96	@ 0x60
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  huart2.Instance->CR3 |= USART_CR3_DMAT;

	  if(osMessageQueueGet(queue_coHandle, &co_ppm, NULL, osWaitForever) == osOK){
 8002acc:	4b6c      	ldr	r3, [pc, #432]	@ (8002c80 <uart_display_task+0x1bc>)
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f006 fbc3 	bl	8009264 <osMessageQueueGet>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d128      	bne.n	8002b36 <uart_display_task+0x72>
//		  while (huart2.gState != HAL_UART_STATE_READY) osDelay(1);
		  snprintf(msg, sizeof(msg), "UART: Co: %.1f ppm\r\n", co_ppm);
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fd2e 	bl	8000548 <__aeabi_f2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	f107 0010 	add.w	r0, r7, #16
 8002af4:	e9cd 2300 	strd	r2, r3, [sp]
 8002af8:	4a62      	ldr	r2, [pc, #392]	@ (8002c84 <uart_display_task+0x1c0>)
 8002afa:	2140      	movs	r1, #64	@ 0x40
 8002afc:	f00a fc46 	bl	800d38c <sniprintf>
		  osMutexAcquire(xUARTMutexHandle, osWaitForever);
 8002b00:	4b61      	ldr	r3, [pc, #388]	@ (8002c88 <uart_display_task+0x1c4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f006 f930 	bl	8008d6e <osMutexAcquire>
		  uart_tx_enqueue((uint8_t*)msg, strlen(msg));
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fbac 	bl	8000270 <strlen>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fc1e 	bl	8002364 <uart_tx_enqueue>
		  uart_start_tx_dma();
 8002b28:	f7ff fc58 	bl	80023dc <uart_start_tx_dma>
//		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)msg, strlen(msg));
		  osMutexRelease(xUARTMutexHandle);
 8002b2c:	4b56      	ldr	r3, [pc, #344]	@ (8002c88 <uart_display_task+0x1c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f006 f967 	bl	8008e04 <osMutexRelease>
	  }
	  if(osMessageQueueGet(queue_prHandle, &Pressure, NULL, osWaitForever) == osOK){
 8002b36:	4b55      	ldr	r3, [pc, #340]	@ (8002c8c <uart_display_task+0x1c8>)
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	2200      	movs	r2, #0
 8002b44:	f006 fb8e 	bl	8009264 <osMessageQueueGet>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d132      	bne.n	8002bb4 <uart_display_task+0xf0>
		  while (huart2.gState != HAL_UART_STATE_READY) osDelay(1);
 8002b4e:	e002      	b.n	8002b56 <uart_display_task+0x92>
 8002b50:	2001      	movs	r0, #1
 8002b52:	f006 f86b 	bl	8008c2c <osDelay>
 8002b56:	4b4e      	ldr	r3, [pc, #312]	@ (8002c90 <uart_display_task+0x1cc>)
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d1f6      	bne.n	8002b50 <uart_display_task+0x8c>
		  snprintf(msg, sizeof(msg), "UART: P: %.2f hPa\r\n", Pressure);
 8002b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fcef 	bl	8000548 <__aeabi_f2d>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	f107 0010 	add.w	r0, r7, #16
 8002b72:	e9cd 2300 	strd	r2, r3, [sp]
 8002b76:	4a47      	ldr	r2, [pc, #284]	@ (8002c94 <uart_display_task+0x1d0>)
 8002b78:	2140      	movs	r1, #64	@ 0x40
 8002b7a:	f00a fc07 	bl	800d38c <sniprintf>
		  osMutexAcquire(xUARTMutexHandle, osWaitForever);
 8002b7e:	4b42      	ldr	r3, [pc, #264]	@ (8002c88 <uart_display_task+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f04f 31ff 	mov.w	r1, #4294967295
 8002b86:	4618      	mov	r0, r3
 8002b88:	f006 f8f1 	bl	8008d6e <osMutexAcquire>
//		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)msg, strlen(msg));
		  uart_tx_enqueue((uint8_t*)msg, strlen(msg));
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fb6d 	bl	8000270 <strlen>
 8002b96:	4603      	mov	r3, r0
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	f107 0310 	add.w	r3, r7, #16
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fbdf 	bl	8002364 <uart_tx_enqueue>
		  uart_start_tx_dma();
 8002ba6:	f7ff fc19 	bl	80023dc <uart_start_tx_dma>
		  osMutexRelease(xUARTMutexHandle);
 8002baa:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <uart_display_task+0x1c4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f006 f928 	bl	8008e04 <osMutexRelease>
	  }
	  if (osMessageQueueGet(queue_watchdogHandle, &err, NULL, pdMS_TO_TICKS(100)) == osOK){
 8002bb4:	4b38      	ldr	r3, [pc, #224]	@ (8002c98 <uart_display_task+0x1d4>)
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	f107 010f 	add.w	r1, r7, #15
 8002bbc:	2364      	movs	r3, #100	@ 0x64
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f006 fb50 	bl	8009264 <osMessageQueueGet>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d14e      	bne.n	8002c68 <uart_display_task+0x1a4>
		  switch (err){
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d016      	beq.n	8002bfe <uart_display_task+0x13a>
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	dc1c      	bgt.n	8002c0e <uart_display_task+0x14a>
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d002      	beq.n	8002bde <uart_display_task+0x11a>
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d008      	beq.n	8002bee <uart_display_task+0x12a>
 8002bdc:	e017      	b.n	8002c0e <uart_display_task+0x14a>
			case WTDG_ERROR_CO:
				snprintf(msg, sizeof(msg), "[WDTG] Greska u CO mjerenju\r\n");
 8002bde:	f107 0310 	add.w	r3, r7, #16
 8002be2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c9c <uart_display_task+0x1d8>)
 8002be4:	2140      	movs	r1, #64	@ 0x40
 8002be6:	4618      	mov	r0, r3
 8002be8:	f00a fbd0 	bl	800d38c <sniprintf>
				break;
 8002bec:	e017      	b.n	8002c1e <uart_display_task+0x15a>
			case WTDG_ERROR_WEATHER:
				snprintf(msg, sizeof(msg), "[WDTG] Greska u Weather mjerenju\r\n");
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca0 <uart_display_task+0x1dc>)
 8002bf4:	2140      	movs	r1, #64	@ 0x40
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f00a fbc8 	bl	800d38c <sniprintf>
				break;
 8002bfc:	e00f      	b.n	8002c1e <uart_display_task+0x15a>
			case WTDG_ERROR_UART:
				snprintf(msg, sizeof(msg), "[WDTG] Greska u UART Prikazu\r\n");
 8002bfe:	f107 0310 	add.w	r3, r7, #16
 8002c02:	4a28      	ldr	r2, [pc, #160]	@ (8002ca4 <uart_display_task+0x1e0>)
 8002c04:	2140      	movs	r1, #64	@ 0x40
 8002c06:	4618      	mov	r0, r3
 8002c08:	f00a fbc0 	bl	800d38c <sniprintf>
				break;
 8002c0c:	e007      	b.n	8002c1e <uart_display_task+0x15a>
			default:
				snprintf(msg, sizeof(msg), "[WDTG] Greska u CO mjerenju\r\n");
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	4a22      	ldr	r2, [pc, #136]	@ (8002c9c <uart_display_task+0x1d8>)
 8002c14:	2140      	movs	r1, #64	@ 0x40
 8002c16:	4618      	mov	r0, r3
 8002c18:	f00a fbb8 	bl	800d38c <sniprintf>
				break;
 8002c1c:	bf00      	nop
		}
		  osMutexAcquire(xUARTMutexHandle, osWaitForever);
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <uart_display_task+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f04f 31ff 	mov.w	r1, #4294967295
 8002c26:	4618      	mov	r0, r3
 8002c28:	f006 f8a1 	bl	8008d6e <osMutexAcquire>
		  while (huart2.gState != HAL_UART_STATE_READY) osDelay(1);
 8002c2c:	e002      	b.n	8002c34 <uart_display_task+0x170>
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f005 fffc 	bl	8008c2c <osDelay>
 8002c34:	4b16      	ldr	r3, [pc, #88]	@ (8002c90 <uart_display_task+0x1cc>)
 8002c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d1f6      	bne.n	8002c2e <uart_display_task+0x16a>
//		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)msg, strlen(msg));
		  uart_tx_enqueue((uint8_t*)msg, strlen(msg));
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fb13 	bl	8000270 <strlen>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	f107 0310 	add.w	r3, r7, #16
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fb85 	bl	8002364 <uart_tx_enqueue>
		  uart_start_tx_dma();
 8002c5a:	f7ff fbbf 	bl	80023dc <uart_start_tx_dma>
		  osMutexRelease(xUARTMutexHandle);
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <uart_display_task+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f006 f8ce 	bl	8008e04 <osMutexRelease>
	  }

	  xTaskNotify(WatchdogTaskHandle, 0x04, eSetBits);  // uart task
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <uart_display_task+0x1e4>)
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2201      	movs	r2, #1
 8002c70:	2104      	movs	r1, #4
 8002c72:	f008 fdc3 	bl	800b7fc <xTaskGenericNotify>
	  osDelay(pdMS_TO_TICKS(300));
 8002c76:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002c7a:	f005 ffd7 	bl	8008c2c <osDelay>
	  if(osMessageQueueGet(queue_coHandle, &co_ppm, NULL, osWaitForever) == osOK){
 8002c7e:	e725      	b.n	8002acc <uart_display_task+0x8>
 8002c80:	20000424 	.word	0x20000424
 8002c84:	0800ff54 	.word	0x0800ff54
 8002c88:	20000430 	.word	0x20000430
 8002c8c:	20000420 	.word	0x20000420
 8002c90:	20000358 	.word	0x20000358
 8002c94:	0800ff6c 	.word	0x0800ff6c
 8002c98:	2000042c 	.word	0x2000042c
 8002c9c:	0800ff80 	.word	0x0800ff80
 8002ca0:	0800ffa0 	.word	0x0800ffa0
 8002ca4:	0800ffc4 	.word	0x0800ffc4
 8002ca8:	20000418 	.word	0x20000418

08002cac <watch_dog_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_watch_dog_task */
void watch_dog_task(void *argument)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watch_dog_task */
	//bit mask co 0x01, weather 0x02, uart 0x04
	const TickType_t xDelay = pdMS_TO_TICKS(5000);
 8002cb4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002cb8:	61bb      	str	r3, [r7, #24]
	uint32_t ulNotificationValue;
	uint32_t aliveMask;
	WatchdogError_t err;
	for (;;)
	{
		aliveMask = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
		TickType_t startTick = xTaskGetTickCount();
 8002cbe:	f008 f80b 	bl	800acd8 <xTaskGetTickCount>
 8002cc2:	6178      	str	r0, [r7, #20]
		while ((xTaskGetTickCount() - startTick) < xDelay)
 8002cc4:	e00f      	b.n	8002ce6 <watch_dog_task+0x3a>
				{
					if (xTaskNotifyWait(0x00, 0xFFFFFFFF, &ulNotificationValue, pdMS_TO_TICKS(500)) == pdTRUE)
 8002cc6:	f107 0210 	add.w	r2, r7, #16
 8002cca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002cce:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f008 fd32 	bl	800b73c <xTaskNotifyWait>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d103      	bne.n	8002ce6 <watch_dog_task+0x3a>
					{
						aliveMask |= ulNotificationValue;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61fb      	str	r3, [r7, #28]
		while ((xTaskGetTickCount() - startTick) < xDelay)
 8002ce6:	f007 fff7 	bl	800acd8 <xTaskGetTickCount>
 8002cea:	4602      	mov	r2, r0
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d8e7      	bhi.n	8002cc6 <watch_dog_task+0x1a>
					}
				}
		if ((aliveMask & 0x07) == 0x07)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	2b07      	cmp	r3, #7
 8002cfe:	d10c      	bne.n	8002d1a <watch_dog_task+0x6e>
				{
					// Svi taskovi su se javili
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // ZELENA
 8002d00:	2201      	movs	r2, #1
 8002d02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d06:	482f      	ldr	r0, [pc, #188]	@ (8002dc4 <watch_dog_task+0x118>)
 8002d08:	f001 ff08 	bl	8004b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // CRVENA
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d12:	482c      	ldr	r0, [pc, #176]	@ (8002dc4 <watch_dog_task+0x118>)
 8002d14:	f001 ff02 	bl	8004b1c <HAL_GPIO_WritePin>
 8002d18:	e7cf      	b.n	8002cba <watch_dog_task+0xe>
				}else if (!(aliveMask & 0x01)) {
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d116      	bne.n	8002d52 <watch_dog_task+0xa6>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // ZELENA
 8002d24:	2200      	movs	r2, #0
 8002d26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d2a:	4826      	ldr	r0, [pc, #152]	@ (8002dc4 <watch_dog_task+0x118>)
 8002d2c:	f001 fef6 	bl	8004b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);   // CRVENA
 8002d30:	2201      	movs	r2, #1
 8002d32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d36:	4823      	ldr	r0, [pc, #140]	@ (8002dc4 <watch_dog_task+0x118>)
 8002d38:	f001 fef0 	bl	8004b1c <HAL_GPIO_WritePin>
					err = WTDG_ERROR_CO;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
					osMessageQueuePut(queue_watchdogHandle, &err, 0, pdMS_TO_TICKS(100));
 8002d40:	4b21      	ldr	r3, [pc, #132]	@ (8002dc8 <watch_dog_task+0x11c>)
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	f107 010f 	add.w	r1, r7, #15
 8002d48:	2364      	movs	r3, #100	@ 0x64
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f006 fa2a 	bl	80091a4 <osMessageQueuePut>
 8002d50:	e7b3      	b.n	8002cba <watch_dog_task+0xe>
				}else if (!(aliveMask & 0x02)) {
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d116      	bne.n	8002d8a <watch_dog_task+0xde>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // ZELENA
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d62:	4818      	ldr	r0, [pc, #96]	@ (8002dc4 <watch_dog_task+0x118>)
 8002d64:	f001 feda 	bl	8004b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);   // CRVENA
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d6e:	4815      	ldr	r0, [pc, #84]	@ (8002dc4 <watch_dog_task+0x118>)
 8002d70:	f001 fed4 	bl	8004b1c <HAL_GPIO_WritePin>
					err = WTDG_ERROR_WEATHER;
 8002d74:	2302      	movs	r3, #2
 8002d76:	73fb      	strb	r3, [r7, #15]
					osMessageQueuePut(queue_watchdogHandle, &err, 0, pdMS_TO_TICKS(100));
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <watch_dog_task+0x11c>)
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	f107 010f 	add.w	r1, r7, #15
 8002d80:	2364      	movs	r3, #100	@ 0x64
 8002d82:	2200      	movs	r2, #0
 8002d84:	f006 fa0e 	bl	80091a4 <osMessageQueuePut>
 8002d88:	e797      	b.n	8002cba <watch_dog_task+0xe>


				}else if (!(aliveMask & 0x04)) {
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d192      	bne.n	8002cba <watch_dog_task+0xe>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // ZELENA
 8002d94:	2200      	movs	r2, #0
 8002d96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d9a:	480a      	ldr	r0, [pc, #40]	@ (8002dc4 <watch_dog_task+0x118>)
 8002d9c:	f001 febe 	bl	8004b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);   // CRVENA
 8002da0:	2201      	movs	r2, #1
 8002da2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002da6:	4807      	ldr	r0, [pc, #28]	@ (8002dc4 <watch_dog_task+0x118>)
 8002da8:	f001 feb8 	bl	8004b1c <HAL_GPIO_WritePin>
					err = WTDG_ERROR_UART;
 8002dac:	2303      	movs	r3, #3
 8002dae:	73fb      	strb	r3, [r7, #15]
					osMessageQueuePut(queue_watchdogHandle, &err, 0, pdMS_TO_TICKS(100));
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <watch_dog_task+0x11c>)
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	f107 010f 	add.w	r1, r7, #15
 8002db8:	2364      	movs	r3, #100	@ 0x64
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f006 f9f2 	bl	80091a4 <osMessageQueuePut>
	{
 8002dc0:	e77b      	b.n	8002cba <watch_dog_task+0xe>
 8002dc2:	bf00      	nop
 8002dc4:	40020c00 	.word	0x40020c00
 8002dc8:	2000042c 	.word	0x2000042c

08002dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dde:	f000 fbd9 	bl	8003594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40001000 	.word	0x40001000

08002df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <Error_Handler+0x8>

08002dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_MspInit+0x54>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	4a11      	ldr	r2, [pc, #68]	@ (8002e50 <HAL_MspInit+0x54>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e12:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <HAL_MspInit+0x54>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <HAL_MspInit+0x54>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <HAL_MspInit+0x54>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2e:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <HAL_MspInit+0x54>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	210f      	movs	r1, #15
 8002e3e:	f06f 0001 	mvn.w	r0, #1
 8002e42:	f001 f8a3 	bl	8003f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800

08002e54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	@ 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <HAL_ADC_MspInit+0x7c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d127      	bne.n	8002ec6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	4b16      	ldr	r3, [pc, #88]	@ (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	4a15      	ldr	r2, [pc, #84]	@ (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e86:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4805      	ldr	r0, [pc, #20]	@ (8002ed8 <HAL_ADC_MspInit+0x84>)
 8002ec2:	f001 fc8f 	bl	80047e4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ec6:	bf00      	nop
 8002ec8:	3728      	adds	r7, #40	@ 0x28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40012000 	.word	0x40012000
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020800 	.word	0x40020800

08002edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	@ 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a29      	ldr	r2, [pc, #164]	@ (8002fa0 <HAL_I2C_MspInit+0xc4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d14b      	bne.n	8002f96 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	4b28      	ldr	r3, [pc, #160]	@ (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	4a27      	ldr	r2, [pc, #156]	@ (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0e:	4b25      	ldr	r3, [pc, #148]	@ (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b21      	ldr	r3, [pc, #132]	@ (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	4a20      	ldr	r2, [pc, #128]	@ (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f3c:	2312      	movs	r3, #18
 8002f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f44:	2303      	movs	r3, #3
 8002f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f48:	2304      	movs	r3, #4
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	4619      	mov	r1, r3
 8002f52:	4815      	ldr	r0, [pc, #84]	@ (8002fa8 <HAL_I2C_MspInit+0xcc>)
 8002f54:	f001 fc46 	bl	80047e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f5e:	2312      	movs	r3, #18
 8002f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6e:	f107 0314 	add.w	r3, r7, #20
 8002f72:	4619      	mov	r1, r3
 8002f74:	480d      	ldr	r0, [pc, #52]	@ (8002fac <HAL_I2C_MspInit+0xd0>)
 8002f76:	f001 fc35 	bl	80047e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	4a08      	ldr	r2, [pc, #32]	@ (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8a:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002f96:	bf00      	nop
 8002f98:	3728      	adds	r7, #40	@ 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40005c00 	.word	0x40005c00
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020000 	.word	0x40020000

08002fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a15      	ldr	r2, [pc, #84]	@ (8003014 <HAL_TIM_Base_MspInit+0x64>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <HAL_TIM_Base_MspInit+0x68>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	4a13      	ldr	r2, [pc, #76]	@ (8003018 <HAL_TIM_Base_MspInit+0x68>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fd2:	4b11      	ldr	r3, [pc, #68]	@ (8003018 <HAL_TIM_Base_MspInit+0x68>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fde:	e012      	b.n	8003006 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe8:	d10d      	bne.n	8003006 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <HAL_TIM_Base_MspInit+0x68>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	4a09      	ldr	r2, [pc, #36]	@ (8003018 <HAL_TIM_Base_MspInit+0x68>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffa:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <HAL_TIM_Base_MspInit+0x68>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40010000 	.word	0x40010000
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <HAL_TIM_MspPostInit+0xb0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d11f      	bne.n	800307e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	4b23      	ldr	r3, [pc, #140]	@ (80030d0 <HAL_TIM_MspPostInit+0xb4>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	4a22      	ldr	r2, [pc, #136]	@ (80030d0 <HAL_TIM_MspPostInit+0xb4>)
 8003048:	f043 0310 	orr.w	r3, r3, #16
 800304c:	6313      	str	r3, [r2, #48]	@ 0x30
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_TIM_MspPostInit+0xb4>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800305a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800305e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	2302      	movs	r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800306c:	2301      	movs	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4619      	mov	r1, r3
 8003076:	4817      	ldr	r0, [pc, #92]	@ (80030d4 <HAL_TIM_MspPostInit+0xb8>)
 8003078:	f001 fbb4 	bl	80047e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800307c:	e022      	b.n	80030c4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003086:	d11d      	bne.n	80030c4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <HAL_TIM_MspPostInit+0xb4>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003090:	4a0f      	ldr	r2, [pc, #60]	@ (80030d0 <HAL_TIM_MspPostInit+0xb4>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6313      	str	r3, [r2, #48]	@ 0x30
 8003098:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <HAL_TIM_MspPostInit+0xb4>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030a4:	2302      	movs	r3, #2
 80030a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030b4:	2301      	movs	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4619      	mov	r1, r3
 80030be:	4806      	ldr	r0, [pc, #24]	@ (80030d8 <HAL_TIM_MspPostInit+0xbc>)
 80030c0:	f001 fb90 	bl	80047e4 <HAL_GPIO_Init>
}
 80030c4:	bf00      	nop
 80030c6:	3728      	adds	r7, #40	@ 0x28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40020000 	.word	0x40020000

080030dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	@ 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a34      	ldr	r2, [pc, #208]	@ (80031cc <HAL_UART_MspInit+0xf0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d161      	bne.n	80031c2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	4b33      	ldr	r3, [pc, #204]	@ (80031d0 <HAL_UART_MspInit+0xf4>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	4a32      	ldr	r2, [pc, #200]	@ (80031d0 <HAL_UART_MspInit+0xf4>)
 8003108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310c:	6413      	str	r3, [r2, #64]	@ 0x40
 800310e:	4b30      	ldr	r3, [pc, #192]	@ (80031d0 <HAL_UART_MspInit+0xf4>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b2c      	ldr	r3, [pc, #176]	@ (80031d0 <HAL_UART_MspInit+0xf4>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	4a2b      	ldr	r2, [pc, #172]	@ (80031d0 <HAL_UART_MspInit+0xf4>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6313      	str	r3, [r2, #48]	@ 0x30
 800312a:	4b29      	ldr	r3, [pc, #164]	@ (80031d0 <HAL_UART_MspInit+0xf4>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003136:	230c      	movs	r3, #12
 8003138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003146:	2307      	movs	r3, #7
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	4820      	ldr	r0, [pc, #128]	@ (80031d4 <HAL_UART_MspInit+0xf8>)
 8003152:	f001 fb47 	bl	80047e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003156:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 8003158:	4a20      	ldr	r2, [pc, #128]	@ (80031dc <HAL_UART_MspInit+0x100>)
 800315a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800315c:	4b1e      	ldr	r3, [pc, #120]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 800315e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003162:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003164:	4b1c      	ldr	r3, [pc, #112]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 8003166:	2240      	movs	r2, #64	@ 0x40
 8003168:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800316a:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003170:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 8003172:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003176:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003178:	4b17      	ldr	r3, [pc, #92]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 800317a:	2200      	movs	r2, #0
 800317c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800317e:	4b16      	ldr	r3, [pc, #88]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 8003180:	2200      	movs	r2, #0
 8003182:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003184:	4b14      	ldr	r3, [pc, #80]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 800318c:	2200      	movs	r2, #0
 800318e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 8003192:	2200      	movs	r2, #0
 8003194:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003196:	4810      	ldr	r0, [pc, #64]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 8003198:	f000 ff22 	bl	8003fe0 <HAL_DMA_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80031a2:	f7ff fe25 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 80031aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80031ac:	4a0a      	ldr	r2, [pc, #40]	@ (80031d8 <HAL_UART_MspInit+0xfc>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2105      	movs	r1, #5
 80031b6:	2026      	movs	r0, #38	@ 0x26
 80031b8:	f000 fee8 	bl	8003f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031bc:	2026      	movs	r0, #38	@ 0x26
 80031be:	f000 ff01 	bl	8003fc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80031c2:	bf00      	nop
 80031c4:	3728      	adds	r7, #40	@ 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40004400 	.word	0x40004400
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020000 	.word	0x40020000
 80031d8:	200003a0 	.word	0x200003a0
 80031dc:	400260a0 	.word	0x400260a0

080031e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08e      	sub	sp, #56	@ 0x38
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	4b33      	ldr	r3, [pc, #204]	@ (80032c4 <HAL_InitTick+0xe4>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	4a32      	ldr	r2, [pc, #200]	@ (80032c4 <HAL_InitTick+0xe4>)
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003200:	4b30      	ldr	r3, [pc, #192]	@ (80032c4 <HAL_InitTick+0xe4>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800320c:	f107 0210 	add.w	r2, r7, #16
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f003 f916 	bl	8006448 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003226:	f003 f8e7 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 800322a:	6378      	str	r0, [r7, #52]	@ 0x34
 800322c:	e004      	b.n	8003238 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800322e:	f003 f8e3 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 8003232:	4603      	mov	r3, r0
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	4a23      	ldr	r2, [pc, #140]	@ (80032c8 <HAL_InitTick+0xe8>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	0c9b      	lsrs	r3, r3, #18
 8003242:	3b01      	subs	r3, #1
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003246:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <HAL_InitTick+0xec>)
 8003248:	4a21      	ldr	r2, [pc, #132]	@ (80032d0 <HAL_InitTick+0xf0>)
 800324a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800324c:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <HAL_InitTick+0xec>)
 800324e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003252:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003254:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <HAL_InitTick+0xec>)
 8003256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003258:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800325a:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <HAL_InitTick+0xec>)
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003260:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <HAL_InitTick+0xec>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003266:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_InitTick+0xec>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800326c:	4817      	ldr	r0, [pc, #92]	@ (80032cc <HAL_InitTick+0xec>)
 800326e:	f003 f91d 	bl	80064ac <HAL_TIM_Base_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003278:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11b      	bne.n	80032b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003280:	4812      	ldr	r0, [pc, #72]	@ (80032cc <HAL_InitTick+0xec>)
 8003282:	f003 f963 	bl	800654c <HAL_TIM_Base_Start_IT>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800328c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003294:	2036      	movs	r0, #54	@ 0x36
 8003296:	f000 fe95 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b0f      	cmp	r3, #15
 800329e:	d808      	bhi.n	80032b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80032a0:	2200      	movs	r2, #0
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	2036      	movs	r0, #54	@ 0x36
 80032a6:	f000 fe71 	bl	8003f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032aa:	4a0a      	ldr	r2, [pc, #40]	@ (80032d4 <HAL_InitTick+0xf4>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	e002      	b.n	80032b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80032b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3738      	adds	r7, #56	@ 0x38
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	431bde83 	.word	0x431bde83
 80032cc:	2000055c 	.word	0x2000055c
 80032d0:	40001000 	.word	0x40001000
 80032d4:	20000004 	.word	0x20000004

080032d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <NMI_Handler+0x4>

080032e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <HardFault_Handler+0x4>

080032e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <MemManage_Handler+0x4>

080032f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <BusFault_Handler+0x4>

080032f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <UsageFault_Handler+0x4>

08003300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003314:	4802      	ldr	r0, [pc, #8]	@ (8003320 <DMA1_Stream6_IRQHandler+0x10>)
 8003316:	f000 fffb 	bl	8004310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200003a0 	.word	0x200003a0

08003324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003328:	4802      	ldr	r0, [pc, #8]	@ (8003334 <USART2_IRQHandler+0x10>)
 800332a:	f004 fb27 	bl	800797c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000358 	.word	0x20000358

08003338 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800333c:	4802      	ldr	r0, [pc, #8]	@ (8003348 <TIM6_DAC_IRQHandler+0x10>)
 800333e:	f003 fb07 	bl	8006950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	2000055c 	.word	0x2000055c

0800334c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return 1;
 8003350:	2301      	movs	r3, #1
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <_kill>:

int _kill(int pid, int sig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003366:	f00a f931 	bl	800d5cc <__errno>
 800336a:	4603      	mov	r3, r0
 800336c:	2216      	movs	r2, #22
 800336e:	601a      	str	r2, [r3, #0]
  return -1;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_exit>:

void _exit (int status)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003384:	f04f 31ff 	mov.w	r1, #4294967295
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ffe7 	bl	800335c <_kill>
  while (1) {}    /* Make sure we hang here */
 800338e:	bf00      	nop
 8003390:	e7fd      	b.n	800338e <_exit+0x12>

08003392 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	e00a      	b.n	80033ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033a4:	f3af 8000 	nop.w
 80033a8:	4601      	mov	r1, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	60ba      	str	r2, [r7, #8]
 80033b0:	b2ca      	uxtb	r2, r1
 80033b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3301      	adds	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	dbf0      	blt.n	80033a4 <_read+0x12>
  }

  return len;
 80033c2:	687b      	ldr	r3, [r7, #4]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e009      	b.n	80033f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	60ba      	str	r2, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3301      	adds	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	dbf1      	blt.n	80033de <_write+0x12>
  }
  return len;
 80033fa:	687b      	ldr	r3, [r7, #4]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_close>:

int _close(int file)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800342c:	605a      	str	r2, [r3, #4]
  return 0;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_isatty>:

int _isatty(int file)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003444:	2301      	movs	r3, #1
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003474:	4a14      	ldr	r2, [pc, #80]	@ (80034c8 <_sbrk+0x5c>)
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <_sbrk+0x60>)
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003480:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <_sbrk+0x64>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <_sbrk+0x64>)
 800348a:	4a12      	ldr	r2, [pc, #72]	@ (80034d4 <_sbrk+0x68>)
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <_sbrk+0x64>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	429a      	cmp	r2, r3
 800349a:	d207      	bcs.n	80034ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800349c:	f00a f896 	bl	800d5cc <__errno>
 80034a0:	4603      	mov	r3, r0
 80034a2:	220c      	movs	r2, #12
 80034a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	e009      	b.n	80034c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034ac:	4b08      	ldr	r3, [pc, #32]	@ (80034d0 <_sbrk+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b2:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <_sbrk+0x64>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <_sbrk+0x64>)
 80034bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20020000 	.word	0x20020000
 80034cc:	00000400 	.word	0x00000400
 80034d0:	200005a4 	.word	0x200005a4
 80034d4:	200050e0 	.word	0x200050e0

080034d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034dc:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <SystemInit+0x20>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	4a05      	ldr	r2, [pc, #20]	@ (80034f8 <SystemInit+0x20>)
 80034e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003534 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003500:	f7ff ffea 	bl	80034d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003504:	480c      	ldr	r0, [pc, #48]	@ (8003538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003506:	490d      	ldr	r1, [pc, #52]	@ (800353c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003508:	4a0d      	ldr	r2, [pc, #52]	@ (8003540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800350a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800350c:	e002      	b.n	8003514 <LoopCopyDataInit>

0800350e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003512:	3304      	adds	r3, #4

08003514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003518:	d3f9      	bcc.n	800350e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800351c:	4c0a      	ldr	r4, [pc, #40]	@ (8003548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003520:	e001      	b.n	8003526 <LoopFillZerobss>

08003522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003524:	3204      	adds	r2, #4

08003526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003528:	d3fb      	bcc.n	8003522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800352a:	f00a f855 	bl	800d5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800352e:	f7fe fb65 	bl	8001bfc <main>
  bx  lr    
 8003532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800353c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003540:	08010558 	.word	0x08010558
  ldr r2, =_sbss
 8003544:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003548:	200050e0 	.word	0x200050e0

0800354c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800354c:	e7fe      	b.n	800354c <ADC_IRQHandler>
	...

08003550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003554:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <HAL_Init+0x40>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0d      	ldr	r2, [pc, #52]	@ (8003590 <HAL_Init+0x40>)
 800355a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800355e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_Init+0x40>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <HAL_Init+0x40>)
 8003566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800356a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <HAL_Init+0x40>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a07      	ldr	r2, [pc, #28]	@ (8003590 <HAL_Init+0x40>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003578:	2003      	movs	r0, #3
 800357a:	f000 fcfc 	bl	8003f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357e:	200f      	movs	r0, #15
 8003580:	f7ff fe2e 	bl	80031e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003584:	f7ff fc3a 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023c00 	.word	0x40023c00

08003594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003598:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <HAL_IncTick+0x20>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_IncTick+0x24>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	4a04      	ldr	r2, [pc, #16]	@ (80035b8 <HAL_IncTick+0x24>)
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000008 	.word	0x20000008
 80035b8:	200005a8 	.word	0x200005a8

080035bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return uwTick;
 80035c0:	4b03      	ldr	r3, [pc, #12]	@ (80035d0 <HAL_GetTick+0x14>)
 80035c2:	681b      	ldr	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	200005a8 	.word	0x200005a8

080035d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035dc:	f7ff ffee 	bl	80035bc <HAL_GetTick>
 80035e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d005      	beq.n	80035fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003618 <HAL_Delay+0x44>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035fa:	bf00      	nop
 80035fc:	f7ff ffde 	bl	80035bc <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	429a      	cmp	r2, r3
 800360a:	d8f7      	bhi.n	80035fc <HAL_Delay+0x28>
  {
  }
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000008 	.word	0x20000008

0800361c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e033      	b.n	800369a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fc0a 	bl	8002e54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d118      	bne.n	800368c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003662:	f023 0302 	bic.w	r3, r3, #2
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fad8 	bl	8003c24 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	641a      	str	r2, [r3, #64]	@ 0x40
 800368a:	e001      	b.n	8003690 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003698:	7bfb      	ldrb	r3, [r7, #15]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_ADC_Start+0x1a>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e0b2      	b.n	8003824 <HAL_ADC_Start+0x180>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d018      	beq.n	8003706 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036e4:	4b52      	ldr	r3, [pc, #328]	@ (8003830 <HAL_ADC_Start+0x18c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a52      	ldr	r2, [pc, #328]	@ (8003834 <HAL_ADC_Start+0x190>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	0c9a      	lsrs	r2, r3, #18
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80036f8:	e002      	b.n	8003700 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f9      	bne.n	80036fa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d17a      	bne.n	800380a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800373e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800374e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003752:	d106      	bne.n	8003762 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	f023 0206 	bic.w	r2, r3, #6
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003760:	e002      	b.n	8003768 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003770:	4b31      	ldr	r3, [pc, #196]	@ (8003838 <HAL_ADC_Start+0x194>)
 8003772:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800377c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2b00      	cmp	r3, #0
 8003788:	d12a      	bne.n	80037e0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2b      	ldr	r2, [pc, #172]	@ (800383c <HAL_ADC_Start+0x198>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d015      	beq.n	80037c0 <HAL_ADC_Start+0x11c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a29      	ldr	r2, [pc, #164]	@ (8003840 <HAL_ADC_Start+0x19c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d105      	bne.n	80037aa <HAL_ADC_Start+0x106>
 800379e:	4b26      	ldr	r3, [pc, #152]	@ (8003838 <HAL_ADC_Start+0x194>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a25      	ldr	r2, [pc, #148]	@ (8003844 <HAL_ADC_Start+0x1a0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d136      	bne.n	8003822 <HAL_ADC_Start+0x17e>
 80037b4:	4b20      	ldr	r3, [pc, #128]	@ (8003838 <HAL_ADC_Start+0x194>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d130      	bne.n	8003822 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d129      	bne.n	8003822 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	e020      	b.n	8003822 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a15      	ldr	r2, [pc, #84]	@ (800383c <HAL_ADC_Start+0x198>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d11b      	bne.n	8003822 <HAL_ADC_Start+0x17e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d114      	bne.n	8003822 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	e00b      	b.n	8003822 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f043 0210 	orr.w	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f043 0201 	orr.w	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20000000 	.word	0x20000000
 8003834:	431bde83 	.word	0x431bde83
 8003838:	40012300 	.word	0x40012300
 800383c:	40012000 	.word	0x40012000
 8003840:	40012100 	.word	0x40012100
 8003844:	40012200 	.word	0x40012200

08003848 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_ADC_Stop+0x16>
 800385a:	2302      	movs	r3, #2
 800385c:	e021      	b.n	80038a2 <HAL_ADC_Stop+0x5a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ca:	d113      	bne.n	80038f4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80038d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038da:	d10b      	bne.n	80038f4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e063      	b.n	80039bc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80038f4:	f7ff fe62 	bl	80035bc <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038fa:	e021      	b.n	8003940 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d01d      	beq.n	8003940 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <HAL_ADC_PollForConversion+0x6c>
 800390a:	f7ff fe57 	bl	80035bc <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d212      	bcs.n	8003940 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d00b      	beq.n	8003940 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	f043 0204 	orr.w	r2, r3, #4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e03d      	b.n	80039bc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d1d6      	bne.n	80038fc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f06f 0212 	mvn.w	r2, #18
 8003956:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d123      	bne.n	80039ba <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11f      	bne.n	80039ba <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	d111      	bne.n	80039ba <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d105      	bne.n	80039ba <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x1c>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e105      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x228>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b09      	cmp	r3, #9
 8003a0a:	d925      	bls.n	8003a58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68d9      	ldr	r1, [r3, #12]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b1e      	subs	r3, #30
 8003a22:	2207      	movs	r2, #7
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43da      	mvns	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	400a      	ands	r2, r1
 8003a30:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68d9      	ldr	r1, [r3, #12]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	4618      	mov	r0, r3
 8003a44:	4603      	mov	r3, r0
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4403      	add	r3, r0
 8003a4a:	3b1e      	subs	r3, #30
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	e022      	b.n	8003a9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6919      	ldr	r1, [r3, #16]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43da      	mvns	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	400a      	ands	r2, r1
 8003a7a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6919      	ldr	r1, [r3, #16]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4403      	add	r3, r0
 8003a94:	409a      	lsls	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d824      	bhi.n	8003af0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b05      	subs	r3, #5
 8003ab8:	221f      	movs	r2, #31
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	3b05      	subs	r3, #5
 8003ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	635a      	str	r2, [r3, #52]	@ 0x34
 8003aee:	e04c      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b0c      	cmp	r3, #12
 8003af6:	d824      	bhi.n	8003b42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	3b23      	subs	r3, #35	@ 0x23
 8003b0a:	221f      	movs	r2, #31
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43da      	mvns	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	400a      	ands	r2, r1
 8003b18:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4618      	mov	r0, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	3b23      	subs	r3, #35	@ 0x23
 8003b34:	fa00 f203 	lsl.w	r2, r0, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b40:	e023      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	3b41      	subs	r3, #65	@ 0x41
 8003b54:	221f      	movs	r2, #31
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	400a      	ands	r2, r1
 8003b62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4618      	mov	r0, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3b41      	subs	r3, #65	@ 0x41
 8003b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b8a:	4b22      	ldr	r3, [pc, #136]	@ (8003c14 <HAL_ADC_ConfigChannel+0x234>)
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a21      	ldr	r2, [pc, #132]	@ (8003c18 <HAL_ADC_ConfigChannel+0x238>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d109      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x1cc>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b12      	cmp	r3, #18
 8003b9e:	d105      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	@ (8003c18 <HAL_ADC_ConfigChannel+0x238>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d123      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x21e>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d003      	beq.n	8003bc6 <HAL_ADC_ConfigChannel+0x1e6>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b11      	cmp	r3, #17
 8003bc4:	d11b      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d111      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bda:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <HAL_ADC_ConfigChannel+0x23c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a10      	ldr	r2, [pc, #64]	@ (8003c20 <HAL_ADC_ConfigChannel+0x240>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	0c9a      	lsrs	r2, r3, #18
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003bf0:	e002      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f9      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40012300 	.word	0x40012300
 8003c18:	40012000 	.word	0x40012000
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	431bde83 	.word	0x431bde83

08003c24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c2c:	4b79      	ldr	r3, [pc, #484]	@ (8003e14 <ADC_Init+0x1f0>)
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	021a      	lsls	r2, r3, #8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb6:	4a58      	ldr	r2, [pc, #352]	@ (8003e18 <ADC_Init+0x1f4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d022      	beq.n	8003d02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003cca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6899      	ldr	r1, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6899      	ldr	r1, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	e00f      	b.n	8003d22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d20:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0202 	bic.w	r2, r2, #2
 8003d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	7e1b      	ldrb	r3, [r3, #24]
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d5e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003d6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	035a      	lsls	r2, r3, #13
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	e007      	b.n	8003d98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d96:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	051a      	lsls	r2, r3, #20
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6899      	ldr	r1, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003dda:	025a      	lsls	r2, r3, #9
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	029a      	lsls	r2, r3, #10
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40012300 	.word	0x40012300
 8003e18:	0f000001 	.word	0x0f000001

08003e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4e:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	60d3      	str	r3, [r2, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <__NVIC_GetPriorityGrouping+0x18>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 0307 	and.w	r3, r3, #7
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	db0b      	blt.n	8003eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	f003 021f 	and.w	r2, r3, #31
 8003e98:	4907      	ldr	r1, [pc, #28]	@ (8003eb8 <__NVIC_EnableIRQ+0x38>)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	e000e100 	.word	0xe000e100

08003ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db0a      	blt.n	8003ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	490c      	ldr	r1, [pc, #48]	@ (8003f08 <__NVIC_SetPriority+0x4c>)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	0112      	lsls	r2, r2, #4
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee4:	e00a      	b.n	8003efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4908      	ldr	r1, [pc, #32]	@ (8003f0c <__NVIC_SetPriority+0x50>)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	3b04      	subs	r3, #4
 8003ef4:	0112      	lsls	r2, r2, #4
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	440b      	add	r3, r1
 8003efa:	761a      	strb	r2, [r3, #24]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000e100 	.word	0xe000e100
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	@ 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f1c3 0307 	rsb	r3, r3, #7
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	bf28      	it	cs
 8003f2e:	2304      	movcs	r3, #4
 8003f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d902      	bls.n	8003f40 <NVIC_EncodePriority+0x30>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3b03      	subs	r3, #3
 8003f3e:	e000      	b.n	8003f42 <NVIC_EncodePriority+0x32>
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	401a      	ands	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f58:	f04f 31ff 	mov.w	r1, #4294967295
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43d9      	mvns	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	4313      	orrs	r3, r2
         );
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ff4c 	bl	8003e1c <__NVIC_SetPriorityGrouping>
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f9e:	f7ff ff61 	bl	8003e64 <__NVIC_GetPriorityGrouping>
 8003fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f7ff ffb1 	bl	8003f10 <NVIC_EncodePriority>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff80 	bl	8003ebc <__NVIC_SetPriority>
}
 8003fbc:	bf00      	nop
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ff54 	bl	8003e80 <__NVIC_EnableIRQ>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fec:	f7ff fae6 	bl	80035bc <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e099      	b.n	8004130 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800401c:	e00f      	b.n	800403e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800401e:	f7ff facd 	bl	80035bc <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b05      	cmp	r3, #5
 800402a:	d908      	bls.n	800403e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2203      	movs	r2, #3
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e078      	b.n	8004130 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e8      	bne.n	800401e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4b38      	ldr	r3, [pc, #224]	@ (8004138 <HAL_DMA_Init+0x158>)
 8004058:	4013      	ands	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800406a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	2b04      	cmp	r3, #4
 8004096:	d107      	bne.n	80040a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	4313      	orrs	r3, r2
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f023 0307 	bic.w	r3, r3, #7
 80040be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d117      	bne.n	8004102 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00e      	beq.n	8004102 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb01 	bl	80046ec <DMA_CheckFifoParam>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2240      	movs	r2, #64	@ 0x40
 80040f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80040fe:	2301      	movs	r3, #1
 8004100:	e016      	b.n	8004130 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fab8 	bl	8004680 <DMA_CalcBaseAndBitshift>
 8004110:	4603      	mov	r3, r0
 8004112:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	223f      	movs	r2, #63	@ 0x3f
 800411a:	409a      	lsls	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	f010803f 	.word	0xf010803f

0800413c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_DMA_Start_IT+0x26>
 800415e:	2302      	movs	r3, #2
 8004160:	e040      	b.n	80041e4 <HAL_DMA_Start_IT+0xa8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d12f      	bne.n	80041d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fa4a 	bl	8004624 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004194:	223f      	movs	r2, #63	@ 0x3f
 8004196:	409a      	lsls	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0216 	orr.w	r2, r2, #22
 80041aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0208 	orr.w	r2, r2, #8
 80041c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	e005      	b.n	80041e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041de:	2302      	movs	r3, #2
 80041e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041fa:	f7ff f9df 	bl	80035bc <HAL_GetTick>
 80041fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d008      	beq.n	800421e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2280      	movs	r2, #128	@ 0x80
 8004210:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e052      	b.n	80042c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0216 	bic.w	r2, r2, #22
 800422c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800423c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d103      	bne.n	800424e <HAL_DMA_Abort+0x62>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0208 	bic.w	r2, r2, #8
 800425c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800426e:	e013      	b.n	8004298 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004270:	f7ff f9a4 	bl	80035bc <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b05      	cmp	r3, #5
 800427c:	d90c      	bls.n	8004298 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2203      	movs	r2, #3
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e015      	b.n	80042c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e4      	bne.n	8004270 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042aa:	223f      	movs	r2, #63	@ 0x3f
 80042ac:	409a      	lsls	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d004      	beq.n	80042ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e00c      	b.n	8004304 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2205      	movs	r2, #5
 80042ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800431c:	4b8e      	ldr	r3, [pc, #568]	@ (8004558 <HAL_DMA_IRQHandler+0x248>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a8e      	ldr	r2, [pc, #568]	@ (800455c <HAL_DMA_IRQHandler+0x24c>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0a9b      	lsrs	r3, r3, #10
 8004328:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433a:	2208      	movs	r2, #8
 800433c:	409a      	lsls	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01a      	beq.n	800437c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0204 	bic.w	r2, r2, #4
 8004362:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	2208      	movs	r2, #8
 800436a:	409a      	lsls	r2, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004380:	2201      	movs	r2, #1
 8004382:	409a      	lsls	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d012      	beq.n	80043b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	2201      	movs	r2, #1
 80043a0:	409a      	lsls	r2, r3
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	f043 0202 	orr.w	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b6:	2204      	movs	r2, #4
 80043b8:	409a      	lsls	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4013      	ands	r3, r2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d012      	beq.n	80043e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d4:	2204      	movs	r2, #4
 80043d6:	409a      	lsls	r2, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	f043 0204 	orr.w	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ec:	2210      	movs	r2, #16
 80043ee:	409a      	lsls	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d043      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d03c      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	2210      	movs	r2, #16
 800440c:	409a      	lsls	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d018      	beq.n	8004452 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d024      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
 800443e:	e01f      	b.n	8004480 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4798      	blx	r3
 8004450:	e016      	b.n	8004480 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0208 	bic.w	r2, r2, #8
 800446e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004484:	2220      	movs	r2, #32
 8004486:	409a      	lsls	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 808f 	beq.w	80045b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8087 	beq.w	80045b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	2220      	movs	r2, #32
 80044a8:	409a      	lsls	r2, r3
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d136      	bne.n	8004528 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0216 	bic.w	r2, r2, #22
 80044c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <HAL_DMA_IRQHandler+0x1da>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0208 	bic.w	r2, r2, #8
 80044f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fe:	223f      	movs	r2, #63	@ 0x3f
 8004500:	409a      	lsls	r2, r3
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800451a:	2b00      	cmp	r3, #0
 800451c:	d07e      	beq.n	800461c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	4798      	blx	r3
        }
        return;
 8004526:	e079      	b.n	800461c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01d      	beq.n	8004572 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10d      	bne.n	8004560 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004548:	2b00      	cmp	r3, #0
 800454a:	d031      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
 8004554:	e02c      	b.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
 8004556:	bf00      	nop
 8004558:	20000000 	.word	0x20000000
 800455c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d023      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
 8004570:	e01e      	b.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10f      	bne.n	80045a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0210 	bic.w	r2, r2, #16
 800458e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d032      	beq.n	800461e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d022      	beq.n	800460a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2205      	movs	r2, #5
 80045c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	3301      	adds	r3, #1
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d307      	bcc.n	80045f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f2      	bne.n	80045dc <HAL_DMA_IRQHandler+0x2cc>
 80045f6:	e000      	b.n	80045fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
 800461a:	e000      	b.n	800461e <HAL_DMA_IRQHandler+0x30e>
        return;
 800461c:	bf00      	nop
    }
  }
}
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004640:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b40      	cmp	r3, #64	@ 0x40
 8004650:	d108      	bne.n	8004664 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004662:	e007      	b.n	8004674 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	60da      	str	r2, [r3, #12]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	3b10      	subs	r3, #16
 8004690:	4a14      	ldr	r2, [pc, #80]	@ (80046e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800469a:	4a13      	ldr	r2, [pc, #76]	@ (80046e8 <DMA_CalcBaseAndBitshift+0x68>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d909      	bls.n	80046c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	659a      	str	r2, [r3, #88]	@ 0x58
 80046c0:	e007      	b.n	80046d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	aaaaaaab 	.word	0xaaaaaaab
 80046e8:	080101b8 	.word	0x080101b8

080046ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11f      	bne.n	8004746 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d856      	bhi.n	80047ba <DMA_CheckFifoParam+0xce>
 800470c:	a201      	add	r2, pc, #4	@ (adr r2, 8004714 <DMA_CheckFifoParam+0x28>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004725 	.word	0x08004725
 8004718:	08004737 	.word	0x08004737
 800471c:	08004725 	.word	0x08004725
 8004720:	080047bb 	.word	0x080047bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d046      	beq.n	80047be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004734:	e043      	b.n	80047be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800473e:	d140      	bne.n	80047c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004744:	e03d      	b.n	80047c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800474e:	d121      	bne.n	8004794 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d837      	bhi.n	80047c6 <DMA_CheckFifoParam+0xda>
 8004756:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <DMA_CheckFifoParam+0x70>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	0800476d 	.word	0x0800476d
 8004760:	08004773 	.word	0x08004773
 8004764:	0800476d 	.word	0x0800476d
 8004768:	08004785 	.word	0x08004785
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e030      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d025      	beq.n	80047ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004782:	e022      	b.n	80047ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800478c:	d11f      	bne.n	80047ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004792:	e01c      	b.n	80047ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d903      	bls.n	80047a2 <DMA_CheckFifoParam+0xb6>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d003      	beq.n	80047a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047a0:	e018      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      break;
 80047a6:	e015      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00e      	beq.n	80047d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
      break;
 80047b8:	e00b      	b.n	80047d2 <DMA_CheckFifoParam+0xe6>
      break;
 80047ba:	bf00      	nop
 80047bc:	e00a      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047be:	bf00      	nop
 80047c0:	e008      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047c2:	bf00      	nop
 80047c4:	e006      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047c6:	bf00      	nop
 80047c8:	e004      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047ca:	bf00      	nop
 80047cc:	e002      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80047ce:	bf00      	nop
 80047d0:	e000      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047d2:	bf00      	nop
    }
  } 
  
  return status; 
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop

080047e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	@ 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	e16b      	b.n	8004ad8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004800:	2201      	movs	r2, #1
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	429a      	cmp	r2, r3
 800481a:	f040 815a 	bne.w	8004ad2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d005      	beq.n	8004836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004832:	2b02      	cmp	r3, #2
 8004834:	d130      	bne.n	8004898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	2203      	movs	r2, #3
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800486c:	2201      	movs	r2, #1
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 0201 	and.w	r2, r3, #1
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d017      	beq.n	80048d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	2203      	movs	r2, #3
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d123      	bne.n	8004928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	08da      	lsrs	r2, r3, #3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3208      	adds	r2, #8
 80048e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	220f      	movs	r2, #15
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	08da      	lsrs	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3208      	adds	r2, #8
 8004922:	69b9      	ldr	r1, [r7, #24]
 8004924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	2203      	movs	r2, #3
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 0203 	and.w	r2, r3, #3
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80b4 	beq.w	8004ad2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	4b60      	ldr	r3, [pc, #384]	@ (8004af0 <HAL_GPIO_Init+0x30c>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	4a5f      	ldr	r2, [pc, #380]	@ (8004af0 <HAL_GPIO_Init+0x30c>)
 8004974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004978:	6453      	str	r3, [r2, #68]	@ 0x44
 800497a:	4b5d      	ldr	r3, [pc, #372]	@ (8004af0 <HAL_GPIO_Init+0x30c>)
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004986:	4a5b      	ldr	r2, [pc, #364]	@ (8004af4 <HAL_GPIO_Init+0x310>)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	3302      	adds	r3, #2
 800498e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	220f      	movs	r2, #15
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a52      	ldr	r2, [pc, #328]	@ (8004af8 <HAL_GPIO_Init+0x314>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d02b      	beq.n	8004a0a <HAL_GPIO_Init+0x226>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a51      	ldr	r2, [pc, #324]	@ (8004afc <HAL_GPIO_Init+0x318>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d025      	beq.n	8004a06 <HAL_GPIO_Init+0x222>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a50      	ldr	r2, [pc, #320]	@ (8004b00 <HAL_GPIO_Init+0x31c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01f      	beq.n	8004a02 <HAL_GPIO_Init+0x21e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004b04 <HAL_GPIO_Init+0x320>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d019      	beq.n	80049fe <HAL_GPIO_Init+0x21a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004b08 <HAL_GPIO_Init+0x324>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_GPIO_Init+0x216>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4d      	ldr	r2, [pc, #308]	@ (8004b0c <HAL_GPIO_Init+0x328>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00d      	beq.n	80049f6 <HAL_GPIO_Init+0x212>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004b10 <HAL_GPIO_Init+0x32c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d007      	beq.n	80049f2 <HAL_GPIO_Init+0x20e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004b14 <HAL_GPIO_Init+0x330>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d101      	bne.n	80049ee <HAL_GPIO_Init+0x20a>
 80049ea:	2307      	movs	r3, #7
 80049ec:	e00e      	b.n	8004a0c <HAL_GPIO_Init+0x228>
 80049ee:	2308      	movs	r3, #8
 80049f0:	e00c      	b.n	8004a0c <HAL_GPIO_Init+0x228>
 80049f2:	2306      	movs	r3, #6
 80049f4:	e00a      	b.n	8004a0c <HAL_GPIO_Init+0x228>
 80049f6:	2305      	movs	r3, #5
 80049f8:	e008      	b.n	8004a0c <HAL_GPIO_Init+0x228>
 80049fa:	2304      	movs	r3, #4
 80049fc:	e006      	b.n	8004a0c <HAL_GPIO_Init+0x228>
 80049fe:	2303      	movs	r3, #3
 8004a00:	e004      	b.n	8004a0c <HAL_GPIO_Init+0x228>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e002      	b.n	8004a0c <HAL_GPIO_Init+0x228>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <HAL_GPIO_Init+0x228>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	f002 0203 	and.w	r2, r2, #3
 8004a12:	0092      	lsls	r2, r2, #2
 8004a14:	4093      	lsls	r3, r2
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a1c:	4935      	ldr	r1, [pc, #212]	@ (8004af4 <HAL_GPIO_Init+0x310>)
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	089b      	lsrs	r3, r3, #2
 8004a22:	3302      	adds	r3, #2
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <HAL_GPIO_Init+0x334>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a4e:	4a32      	ldr	r2, [pc, #200]	@ (8004b18 <HAL_GPIO_Init+0x334>)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a54:	4b30      	ldr	r3, [pc, #192]	@ (8004b18 <HAL_GPIO_Init+0x334>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4013      	ands	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a78:	4a27      	ldr	r2, [pc, #156]	@ (8004b18 <HAL_GPIO_Init+0x334>)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a7e:	4b26      	ldr	r3, [pc, #152]	@ (8004b18 <HAL_GPIO_Init+0x334>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <HAL_GPIO_Init+0x334>)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <HAL_GPIO_Init+0x334>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004acc:	4a12      	ldr	r2, [pc, #72]	@ (8004b18 <HAL_GPIO_Init+0x334>)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2b0f      	cmp	r3, #15
 8004adc:	f67f ae90 	bls.w	8004800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	3724      	adds	r7, #36	@ 0x24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40013800 	.word	0x40013800
 8004af8:	40020000 	.word	0x40020000
 8004afc:	40020400 	.word	0x40020400
 8004b00:	40020800 	.word	0x40020800
 8004b04:	40020c00 	.word	0x40020c00
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40021400 	.word	0x40021400
 8004b10:	40021800 	.word	0x40021800
 8004b14:	40021c00 	.word	0x40021c00
 8004b18:	40013c00 	.word	0x40013c00

08004b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b2c:	787b      	ldrb	r3, [r7, #1]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b32:	887a      	ldrh	r2, [r7, #2]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b38:	e003      	b.n	8004b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	041a      	lsls	r2, r3, #16
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	619a      	str	r2, [r3, #24]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e12b      	b.n	8004dba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fe f9b0 	bl	8002edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	@ 0x24
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f001 fc20 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4a81      	ldr	r2, [pc, #516]	@ (8004dc4 <HAL_I2C_Init+0x274>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d807      	bhi.n	8004bd4 <HAL_I2C_Init+0x84>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a80      	ldr	r2, [pc, #512]	@ (8004dc8 <HAL_I2C_Init+0x278>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	bf94      	ite	ls
 8004bcc:	2301      	movls	r3, #1
 8004bce:	2300      	movhi	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e006      	b.n	8004be2 <HAL_I2C_Init+0x92>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a7d      	ldr	r2, [pc, #500]	@ (8004dcc <HAL_I2C_Init+0x27c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	bf94      	ite	ls
 8004bdc:	2301      	movls	r3, #1
 8004bde:	2300      	movhi	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0e7      	b.n	8004dba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a78      	ldr	r2, [pc, #480]	@ (8004dd0 <HAL_I2C_Init+0x280>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	0c9b      	lsrs	r3, r3, #18
 8004bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a6a      	ldr	r2, [pc, #424]	@ (8004dc4 <HAL_I2C_Init+0x274>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d802      	bhi.n	8004c24 <HAL_I2C_Init+0xd4>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3301      	adds	r3, #1
 8004c22:	e009      	b.n	8004c38 <HAL_I2C_Init+0xe8>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	4a69      	ldr	r2, [pc, #420]	@ (8004dd4 <HAL_I2C_Init+0x284>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	099b      	lsrs	r3, r3, #6
 8004c36:	3301      	adds	r3, #1
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	495c      	ldr	r1, [pc, #368]	@ (8004dc4 <HAL_I2C_Init+0x274>)
 8004c54:	428b      	cmp	r3, r1
 8004c56:	d819      	bhi.n	8004c8c <HAL_I2C_Init+0x13c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1e59      	subs	r1, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c66:	1c59      	adds	r1, r3, #1
 8004c68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c6c:	400b      	ands	r3, r1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_I2C_Init+0x138>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1e59      	subs	r1, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c80:	3301      	adds	r3, #1
 8004c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c86:	e051      	b.n	8004d2c <HAL_I2C_Init+0x1dc>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	e04f      	b.n	8004d2c <HAL_I2C_Init+0x1dc>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d111      	bne.n	8004cb8 <HAL_I2C_Init+0x168>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1e58      	subs	r0, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	440b      	add	r3, r1
 8004ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	e012      	b.n	8004cde <HAL_I2C_Init+0x18e>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	1e58      	subs	r0, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	0099      	lsls	r1, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Init+0x196>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e022      	b.n	8004d2c <HAL_I2C_Init+0x1dc>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10e      	bne.n	8004d0c <HAL_I2C_Init+0x1bc>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1e58      	subs	r0, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	440b      	add	r3, r1
 8004cfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d0a:	e00f      	b.n	8004d2c <HAL_I2C_Init+0x1dc>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1e58      	subs	r0, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	0099      	lsls	r1, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d22:	3301      	adds	r3, #1
 8004d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	6809      	ldr	r1, [r1, #0]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69da      	ldr	r2, [r3, #28]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6911      	ldr	r1, [r2, #16]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68d2      	ldr	r2, [r2, #12]
 8004d66:	4311      	orrs	r1, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	000186a0 	.word	0x000186a0
 8004dc8:	001e847f 	.word	0x001e847f
 8004dcc:	003d08ff 	.word	0x003d08ff
 8004dd0:	431bde83 	.word	0x431bde83
 8004dd4:	10624dd3 	.word	0x10624dd3

08004dd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	817b      	strh	r3, [r7, #10]
 8004dea:	460b      	mov	r3, r1
 8004dec:	813b      	strh	r3, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004df2:	f7fe fbe3 	bl	80035bc <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	f040 80d9 	bne.w	8004fb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2319      	movs	r3, #25
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	496d      	ldr	r1, [pc, #436]	@ (8004fc4 <HAL_I2C_Mem_Write+0x1ec>)
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fc8b 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0cc      	b.n	8004fba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_I2C_Mem_Write+0x56>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e0c5      	b.n	8004fba <HAL_I2C_Mem_Write+0x1e2>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d007      	beq.n	8004e54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2221      	movs	r2, #33	@ 0x21
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2240      	movs	r2, #64	@ 0x40
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a3a      	ldr	r2, [r7, #32]
 8004e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a4d      	ldr	r2, [pc, #308]	@ (8004fc8 <HAL_I2C_Mem_Write+0x1f0>)
 8004e94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e96:	88f8      	ldrh	r0, [r7, #6]
 8004e98:	893a      	ldrh	r2, [r7, #8]
 8004e9a:	8979      	ldrh	r1, [r7, #10]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fac2 	bl	8005430 <I2C_RequestMemoryWrite>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d052      	beq.n	8004f58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e081      	b.n	8004fba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fd50 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d107      	bne.n	8004ede <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e06b      	b.n	8004fba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d11b      	bne.n	8004f58 <HAL_I2C_Mem_Write+0x180>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d017      	beq.n	8004f58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1aa      	bne.n	8004eb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fd43 	bl	80059f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d107      	bne.n	8004f88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e016      	b.n	8004fba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	00100002 	.word	0x00100002
 8004fc8:	ffff0000 	.word	0xffff0000

08004fcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08c      	sub	sp, #48	@ 0x30
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	817b      	strh	r3, [r7, #10]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	813b      	strh	r3, [r7, #8]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fe6:	f7fe fae9 	bl	80035bc <HAL_GetTick>
 8004fea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	f040 8214 	bne.w	8005422 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	2319      	movs	r3, #25
 8005000:	2201      	movs	r2, #1
 8005002:	497b      	ldr	r1, [pc, #492]	@ (80051f0 <HAL_I2C_Mem_Read+0x224>)
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fb91 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005010:	2302      	movs	r3, #2
 8005012:	e207      	b.n	8005424 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_I2C_Mem_Read+0x56>
 800501e:	2302      	movs	r3, #2
 8005020:	e200      	b.n	8005424 <HAL_I2C_Mem_Read+0x458>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	d007      	beq.n	8005048 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005056:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2222      	movs	r2, #34	@ 0x22
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2240      	movs	r2, #64	@ 0x40
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005072:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a5b      	ldr	r2, [pc, #364]	@ (80051f4 <HAL_I2C_Mem_Read+0x228>)
 8005088:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800508a:	88f8      	ldrh	r0, [r7, #6]
 800508c:	893a      	ldrh	r2, [r7, #8]
 800508e:	8979      	ldrh	r1, [r7, #10]
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	4603      	mov	r3, r0
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 fa5e 	bl	800555c <I2C_RequestMemoryRead>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e1bc      	b.n	8005424 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d113      	bne.n	80050da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e190      	b.n	80053fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d11b      	bne.n	800511a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e170      	b.n	80053fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511e:	2b02      	cmp	r3, #2
 8005120:	d11b      	bne.n	800515a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005130:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	e150      	b.n	80053fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005170:	e144      	b.n	80053fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005176:	2b03      	cmp	r3, #3
 8005178:	f200 80f1 	bhi.w	800535e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005180:	2b01      	cmp	r3, #1
 8005182:	d123      	bne.n	80051cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005186:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fc79 	bl	8005a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e145      	b.n	8005424 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051ca:	e117      	b.n	80053fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d14e      	bne.n	8005272 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051da:	2200      	movs	r2, #0
 80051dc:	4906      	ldr	r1, [pc, #24]	@ (80051f8 <HAL_I2C_Mem_Read+0x22c>)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 faa4 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e11a      	b.n	8005424 <HAL_I2C_Mem_Read+0x458>
 80051ee:	bf00      	nop
 80051f0:	00100002 	.word	0x00100002
 80051f4:	ffff0000 	.word	0xffff0000
 80051f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005270:	e0c4      	b.n	80053fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005278:	2200      	movs	r2, #0
 800527a:	496c      	ldr	r1, [pc, #432]	@ (800542c <HAL_I2C_Mem_Read+0x460>)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fa55 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0cb      	b.n	8005424 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d4:	2200      	movs	r2, #0
 80052d6:	4955      	ldr	r1, [pc, #340]	@ (800542c <HAL_I2C_Mem_Read+0x460>)
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fa27 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e09d      	b.n	8005424 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800535c:	e04e      	b.n	80053fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800535e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005360:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fb8c 	bl	8005a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e058      	b.n	8005424 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d124      	bne.n	80053fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d107      	bne.n	80053ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005400:	2b00      	cmp	r3, #0
 8005402:	f47f aeb6 	bne.w	8005172 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3728      	adds	r7, #40	@ 0x28
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	00010004 	.word	0x00010004

08005430 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	4608      	mov	r0, r1
 800543a:	4611      	mov	r1, r2
 800543c:	461a      	mov	r2, r3
 800543e:	4603      	mov	r3, r0
 8005440:	817b      	strh	r3, [r7, #10]
 8005442:	460b      	mov	r3, r1
 8005444:	813b      	strh	r3, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	2200      	movs	r2, #0
 8005462:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f960 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005480:	d103      	bne.n	800548a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005488:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e05f      	b.n	800554e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800548e:	897b      	ldrh	r3, [r7, #10]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800549c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	6a3a      	ldr	r2, [r7, #32]
 80054a2:	492d      	ldr	r1, [pc, #180]	@ (8005558 <I2C_RequestMemoryWrite+0x128>)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f9bb 	bl	8005820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e04c      	b.n	800554e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054cc:	6a39      	ldr	r1, [r7, #32]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fa46 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d107      	bne.n	80054f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e02b      	b.n	800554e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d105      	bne.n	8005508 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054fc:	893b      	ldrh	r3, [r7, #8]
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	611a      	str	r2, [r3, #16]
 8005506:	e021      	b.n	800554c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005508:	893b      	ldrh	r3, [r7, #8]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	b29b      	uxth	r3, r3
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005518:	6a39      	ldr	r1, [r7, #32]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fa20 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00d      	beq.n	8005542 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2b04      	cmp	r3, #4
 800552c:	d107      	bne.n	800553e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800553c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e005      	b.n	800554e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005542:	893b      	ldrh	r3, [r7, #8]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	00010002 	.word	0x00010002

0800555c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	4608      	mov	r0, r1
 8005566:	4611      	mov	r1, r2
 8005568:	461a      	mov	r2, r3
 800556a:	4603      	mov	r3, r0
 800556c:	817b      	strh	r3, [r7, #10]
 800556e:	460b      	mov	r3, r1
 8005570:	813b      	strh	r3, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005584:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005594:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	2200      	movs	r2, #0
 800559e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f8c2 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00d      	beq.n	80055ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055bc:	d103      	bne.n	80055c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e0aa      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ca:	897b      	ldrh	r3, [r7, #10]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	6a3a      	ldr	r2, [r7, #32]
 80055de:	4952      	ldr	r1, [pc, #328]	@ (8005728 <I2C_RequestMemoryRead+0x1cc>)
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f91d 	bl	8005820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e097      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005608:	6a39      	ldr	r1, [r7, #32]
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f9a8 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00d      	beq.n	8005632 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	2b04      	cmp	r3, #4
 800561c:	d107      	bne.n	800562e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800562c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e076      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005638:	893b      	ldrh	r3, [r7, #8]
 800563a:	b2da      	uxtb	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	611a      	str	r2, [r3, #16]
 8005642:	e021      	b.n	8005688 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005644:	893b      	ldrh	r3, [r7, #8]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	b29b      	uxth	r3, r3
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005654:	6a39      	ldr	r1, [r7, #32]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f982 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	2b04      	cmp	r3, #4
 8005668:	d107      	bne.n	800567a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005678:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e050      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800567e:	893b      	ldrh	r3, [r7, #8]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800568a:	6a39      	ldr	r1, [r7, #32]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f967 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00d      	beq.n	80056b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	2b04      	cmp	r3, #4
 800569e:	d107      	bne.n	80056b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e035      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f82b 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ea:	d103      	bne.n	80056f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e013      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056f8:	897b      	ldrh	r3, [r7, #10]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	4906      	ldr	r1, [pc, #24]	@ (8005728 <I2C_RequestMemoryRead+0x1cc>)
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f886 	bl	8005820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	00010002 	.word	0x00010002

0800572c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	4613      	mov	r3, r2
 800573a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800573c:	e048      	b.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d044      	beq.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005746:	f7fd ff39 	bl	80035bc <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d139      	bne.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	0c1b      	lsrs	r3, r3, #16
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d10d      	bne.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	43da      	mvns	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	e00c      	b.n	800579c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	43da      	mvns	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d116      	bne.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e023      	b.n	8005818 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	0c1b      	lsrs	r3, r3, #16
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d10d      	bne.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	43da      	mvns	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4013      	ands	r3, r2
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	e00c      	b.n	8005810 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	43da      	mvns	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4013      	ands	r3, r2
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	429a      	cmp	r2, r3
 8005814:	d093      	beq.n	800573e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800582e:	e071      	b.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800583e:	d123      	bne.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005858:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	f043 0204 	orr.w	r2, r3, #4
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e067      	b.n	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d041      	beq.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005890:	f7fd fe94 	bl	80035bc <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d136      	bne.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10c      	bne.n	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	43da      	mvns	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bf14      	ite	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	2300      	moveq	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e00b      	b.n	80058e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	43da      	mvns	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4013      	ands	r3, r2
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e021      	b.n	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b01      	cmp	r3, #1
 800591c:	d10c      	bne.n	8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	43da      	mvns	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4013      	ands	r3, r2
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e00b      	b.n	8005950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	43da      	mvns	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4013      	ands	r3, r2
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	f47f af6d 	bne.w	8005830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800596c:	e034      	b.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f8e3 	bl	8005b3a <I2C_IsAcknowledgeFailed>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e034      	b.n	80059e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d028      	beq.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fd fe19 	bl	80035bc <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11d      	bne.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a6:	2b80      	cmp	r3, #128	@ 0x80
 80059a8:	d016      	beq.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e007      	b.n	80059e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e2:	2b80      	cmp	r3, #128	@ 0x80
 80059e4:	d1c3      	bne.n	800596e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059fc:	e034      	b.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f89b 	bl	8005b3a <I2C_IsAcknowledgeFailed>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e034      	b.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d028      	beq.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a16:	f7fd fdd1 	bl	80035bc <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d302      	bcc.n	8005a2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11d      	bne.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d016      	beq.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a54:	f043 0220 	orr.w	r2, r3, #32
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e007      	b.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d1c3      	bne.n	80059fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a8c:	e049      	b.n	8005b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d119      	bne.n	8005ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0210 	mvn.w	r2, #16
 8005aa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e030      	b.n	8005b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad0:	f7fd fd74 	bl	80035bc <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d11d      	bne.n	8005b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af0:	2b40      	cmp	r3, #64	@ 0x40
 8005af2:	d016      	beq.n	8005b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0e:	f043 0220 	orr.w	r2, r3, #32
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e007      	b.n	8005b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2c:	2b40      	cmp	r3, #64	@ 0x40
 8005b2e:	d1ae      	bne.n	8005a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b50:	d11b      	bne.n	8005b8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	f043 0204 	orr.w	r2, r3, #4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e267      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d075      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bb6:	4b88      	ldr	r3, [pc, #544]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d00c      	beq.n	8005bdc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bc2:	4b85      	ldr	r3, [pc, #532]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d112      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bce:	4b82      	ldr	r3, [pc, #520]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bda:	d10b      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d05b      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x108>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d157      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e242      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bfc:	d106      	bne.n	8005c0c <HAL_RCC_OscConfig+0x74>
 8005bfe:	4b76      	ldr	r3, [pc, #472]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a75      	ldr	r2, [pc, #468]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e01d      	b.n	8005c48 <HAL_RCC_OscConfig+0xb0>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c14:	d10c      	bne.n	8005c30 <HAL_RCC_OscConfig+0x98>
 8005c16:	4b70      	ldr	r3, [pc, #448]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a6f      	ldr	r2, [pc, #444]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	4b6d      	ldr	r3, [pc, #436]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a6c      	ldr	r2, [pc, #432]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e00b      	b.n	8005c48 <HAL_RCC_OscConfig+0xb0>
 8005c30:	4b69      	ldr	r3, [pc, #420]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a68      	ldr	r2, [pc, #416]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4b66      	ldr	r3, [pc, #408]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a65      	ldr	r2, [pc, #404]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d013      	beq.n	8005c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fd fcb4 	bl	80035bc <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c58:	f7fd fcb0 	bl	80035bc <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	@ 0x64
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e207      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0xc0>
 8005c76:	e014      	b.n	8005ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c78:	f7fd fca0 	bl	80035bc <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c80:	f7fd fc9c 	bl	80035bc <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b64      	cmp	r3, #100	@ 0x64
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e1f3      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c92:	4b51      	ldr	r3, [pc, #324]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0xe8>
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d063      	beq.n	8005d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cae:	4b4a      	ldr	r3, [pc, #296]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cba:	4b47      	ldr	r3, [pc, #284]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d11c      	bne.n	8005d00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cc6:	4b44      	ldr	r3, [pc, #272]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d116      	bne.n	8005d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd2:	4b41      	ldr	r3, [pc, #260]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_RCC_OscConfig+0x152>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d001      	beq.n	8005cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e1c7      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cea:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	4937      	ldr	r1, [pc, #220]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cfe:	e03a      	b.n	8005d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d020      	beq.n	8005d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d08:	4b34      	ldr	r3, [pc, #208]	@ (8005ddc <HAL_RCC_OscConfig+0x244>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0e:	f7fd fc55 	bl	80035bc <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d16:	f7fd fc51 	bl	80035bc <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e1a8      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d28:	4b2b      	ldr	r3, [pc, #172]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d34:	4b28      	ldr	r3, [pc, #160]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	4925      	ldr	r1, [pc, #148]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]
 8005d48:	e015      	b.n	8005d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d4a:	4b24      	ldr	r3, [pc, #144]	@ (8005ddc <HAL_RCC_OscConfig+0x244>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fd fc34 	bl	80035bc <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d58:	f7fd fc30 	bl	80035bc <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e187      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d036      	beq.n	8005df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d8a:	4b15      	ldr	r3, [pc, #84]	@ (8005de0 <HAL_RCC_OscConfig+0x248>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d90:	f7fd fc14 	bl	80035bc <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d98:	f7fd fc10 	bl	80035bc <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e167      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005daa:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f0      	beq.n	8005d98 <HAL_RCC_OscConfig+0x200>
 8005db6:	e01b      	b.n	8005df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <HAL_RCC_OscConfig+0x248>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dbe:	f7fd fbfd 	bl	80035bc <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc4:	e00e      	b.n	8005de4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc6:	f7fd fbf9 	bl	80035bc <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d907      	bls.n	8005de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e150      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	42470000 	.word	0x42470000
 8005de0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de4:	4b88      	ldr	r3, [pc, #544]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ea      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8097 	beq.w	8005f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e02:	4b81      	ldr	r3, [pc, #516]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	4b7d      	ldr	r3, [pc, #500]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	4a7c      	ldr	r2, [pc, #496]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e26:	60bb      	str	r3, [r7, #8]
 8005e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2e:	4b77      	ldr	r3, [pc, #476]	@ (800600c <HAL_RCC_OscConfig+0x474>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d118      	bne.n	8005e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e3a:	4b74      	ldr	r3, [pc, #464]	@ (800600c <HAL_RCC_OscConfig+0x474>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a73      	ldr	r2, [pc, #460]	@ (800600c <HAL_RCC_OscConfig+0x474>)
 8005e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e46:	f7fd fbb9 	bl	80035bc <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e4e:	f7fd fbb5 	bl	80035bc <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e10c      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e60:	4b6a      	ldr	r3, [pc, #424]	@ (800600c <HAL_RCC_OscConfig+0x474>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d106      	bne.n	8005e82 <HAL_RCC_OscConfig+0x2ea>
 8005e74:	4b64      	ldr	r3, [pc, #400]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e78:	4a63      	ldr	r2, [pc, #396]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e7a:	f043 0301 	orr.w	r3, r3, #1
 8005e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e80:	e01c      	b.n	8005ebc <HAL_RCC_OscConfig+0x324>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b05      	cmp	r3, #5
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x30c>
 8005e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e90:	f043 0304 	orr.w	r3, r3, #4
 8005e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e96:	4b5c      	ldr	r3, [pc, #368]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9a:	4a5b      	ldr	r2, [pc, #364]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ea2:	e00b      	b.n	8005ebc <HAL_RCC_OscConfig+0x324>
 8005ea4:	4b58      	ldr	r3, [pc, #352]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea8:	4a57      	ldr	r2, [pc, #348]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eb0:	4b55      	ldr	r3, [pc, #340]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb4:	4a54      	ldr	r2, [pc, #336]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005eb6:	f023 0304 	bic.w	r3, r3, #4
 8005eba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec4:	f7fd fb7a 	bl	80035bc <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eca:	e00a      	b.n	8005ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ecc:	f7fd fb76 	bl	80035bc <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e0cb      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee2:	4b49      	ldr	r3, [pc, #292]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0ee      	beq.n	8005ecc <HAL_RCC_OscConfig+0x334>
 8005eee:	e014      	b.n	8005f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef0:	f7fd fb64 	bl	80035bc <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ef6:	e00a      	b.n	8005f0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef8:	f7fd fb60 	bl	80035bc <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e0b5      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1ee      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d105      	bne.n	8005f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f20:	4b39      	ldr	r3, [pc, #228]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	4a38      	ldr	r2, [pc, #224]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80a1 	beq.w	8006078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f36:	4b34      	ldr	r3, [pc, #208]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d05c      	beq.n	8005ffc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d141      	bne.n	8005fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f4a:	4b31      	ldr	r3, [pc, #196]	@ (8006010 <HAL_RCC_OscConfig+0x478>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f50:	f7fd fb34 	bl	80035bc <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fd fb30 	bl	80035bc <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e087      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6a:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	019b      	lsls	r3, r3, #6
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	041b      	lsls	r3, r3, #16
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	061b      	lsls	r3, r3, #24
 8005f9a:	491b      	ldr	r1, [pc, #108]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8006010 <HAL_RCC_OscConfig+0x478>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa6:	f7fd fb09 	bl	80035bc <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fae:	f7fd fb05 	bl	80035bc <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e05c      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc0:	4b11      	ldr	r3, [pc, #68]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f0      	beq.n	8005fae <HAL_RCC_OscConfig+0x416>
 8005fcc:	e054      	b.n	8006078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fce:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <HAL_RCC_OscConfig+0x478>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd4:	f7fd faf2 	bl	80035bc <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fdc:	f7fd faee 	bl	80035bc <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e045      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fee:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f0      	bne.n	8005fdc <HAL_RCC_OscConfig+0x444>
 8005ffa:	e03d      	b.n	8006078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d107      	bne.n	8006014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e038      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
 8006008:	40023800 	.word	0x40023800
 800600c:	40007000 	.word	0x40007000
 8006010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006014:	4b1b      	ldr	r3, [pc, #108]	@ (8006084 <HAL_RCC_OscConfig+0x4ec>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d028      	beq.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800602c:	429a      	cmp	r2, r3
 800602e:	d121      	bne.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603a:	429a      	cmp	r2, r3
 800603c:	d11a      	bne.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006044:	4013      	ands	r3, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800604a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800604c:	4293      	cmp	r3, r2
 800604e:	d111      	bne.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	3b01      	subs	r3, #1
 800605e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006060:	429a      	cmp	r2, r3
 8006062:	d107      	bne.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d001      	beq.n	8006078 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800

08006088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0cc      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800609c:	4b68      	ldr	r3, [pc, #416]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d90c      	bls.n	80060c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060aa:	4b65      	ldr	r3, [pc, #404]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b63      	ldr	r3, [pc, #396]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0b8      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d020      	beq.n	8006112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060dc:	4b59      	ldr	r3, [pc, #356]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4a58      	ldr	r2, [pc, #352]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060f4:	4b53      	ldr	r3, [pc, #332]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4a52      	ldr	r2, [pc, #328]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006100:	4b50      	ldr	r3, [pc, #320]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	494d      	ldr	r1, [pc, #308]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	4313      	orrs	r3, r2
 8006110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d044      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d107      	bne.n	8006136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006126:	4b47      	ldr	r3, [pc, #284]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d119      	bne.n	8006166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e07f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d003      	beq.n	8006146 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006142:	2b03      	cmp	r3, #3
 8006144:	d107      	bne.n	8006156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006146:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e06f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006156:	4b3b      	ldr	r3, [pc, #236]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e067      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006166:	4b37      	ldr	r3, [pc, #220]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f023 0203 	bic.w	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4934      	ldr	r1, [pc, #208]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006178:	f7fd fa20 	bl	80035bc <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617e:	e00a      	b.n	8006196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006180:	f7fd fa1c 	bl	80035bc <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e04f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006196:	4b2b      	ldr	r3, [pc, #172]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 020c 	and.w	r2, r3, #12
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d1eb      	bne.n	8006180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061a8:	4b25      	ldr	r3, [pc, #148]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d20c      	bcs.n	80061d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b6:	4b22      	ldr	r3, [pc, #136]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061be:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e032      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061dc:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	4916      	ldr	r1, [pc, #88]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061fa:	4b12      	ldr	r3, [pc, #72]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	490e      	ldr	r1, [pc, #56]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	4313      	orrs	r3, r2
 800620c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800620e:	f000 f821 	bl	8006254 <HAL_RCC_GetSysClockFreq>
 8006212:	4602      	mov	r2, r0
 8006214:	4b0b      	ldr	r3, [pc, #44]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	490a      	ldr	r1, [pc, #40]	@ (8006248 <HAL_RCC_ClockConfig+0x1c0>)
 8006220:	5ccb      	ldrb	r3, [r1, r3]
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	4a09      	ldr	r2, [pc, #36]	@ (800624c <HAL_RCC_ClockConfig+0x1c4>)
 8006228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <HAL_RCC_ClockConfig+0x1c8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fc ffd6 	bl	80031e0 <HAL_InitTick>

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023c00 	.word	0x40023c00
 8006244:	40023800 	.word	0x40023800
 8006248:	080101a0 	.word	0x080101a0
 800624c:	20000000 	.word	0x20000000
 8006250:	20000004 	.word	0x20000004

08006254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006258:	b090      	sub	sp, #64	@ 0x40
 800625a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800626c:	4b59      	ldr	r3, [pc, #356]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 030c 	and.w	r3, r3, #12
 8006274:	2b08      	cmp	r3, #8
 8006276:	d00d      	beq.n	8006294 <HAL_RCC_GetSysClockFreq+0x40>
 8006278:	2b08      	cmp	r3, #8
 800627a:	f200 80a1 	bhi.w	80063c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_RCC_GetSysClockFreq+0x34>
 8006282:	2b04      	cmp	r3, #4
 8006284:	d003      	beq.n	800628e <HAL_RCC_GetSysClockFreq+0x3a>
 8006286:	e09b      	b.n	80063c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006288:	4b53      	ldr	r3, [pc, #332]	@ (80063d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800628a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800628c:	e09b      	b.n	80063c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800628e:	4b53      	ldr	r3, [pc, #332]	@ (80063dc <HAL_RCC_GetSysClockFreq+0x188>)
 8006290:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006292:	e098      	b.n	80063c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006294:	4b4f      	ldr	r3, [pc, #316]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800629c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800629e:	4b4d      	ldr	r3, [pc, #308]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d028      	beq.n	80062fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062aa:	4b4a      	ldr	r3, [pc, #296]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	099b      	lsrs	r3, r3, #6
 80062b0:	2200      	movs	r2, #0
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80062bc:	2100      	movs	r1, #0
 80062be:	4b47      	ldr	r3, [pc, #284]	@ (80063dc <HAL_RCC_GetSysClockFreq+0x188>)
 80062c0:	fb03 f201 	mul.w	r2, r3, r1
 80062c4:	2300      	movs	r3, #0
 80062c6:	fb00 f303 	mul.w	r3, r0, r3
 80062ca:	4413      	add	r3, r2
 80062cc:	4a43      	ldr	r2, [pc, #268]	@ (80063dc <HAL_RCC_GetSysClockFreq+0x188>)
 80062ce:	fba0 1202 	umull	r1, r2, r0, r2
 80062d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062d4:	460a      	mov	r2, r1
 80062d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80062d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062da:	4413      	add	r3, r2
 80062dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e0:	2200      	movs	r2, #0
 80062e2:	61bb      	str	r3, [r7, #24]
 80062e4:	61fa      	str	r2, [r7, #28]
 80062e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80062ee:	f7fa fcfb 	bl	8000ce8 <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4613      	mov	r3, r2
 80062f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062fa:	e053      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062fc:	4b35      	ldr	r3, [pc, #212]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	099b      	lsrs	r3, r3, #6
 8006302:	2200      	movs	r2, #0
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	617a      	str	r2, [r7, #20]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800630e:	f04f 0b00 	mov.w	fp, #0
 8006312:	4652      	mov	r2, sl
 8006314:	465b      	mov	r3, fp
 8006316:	f04f 0000 	mov.w	r0, #0
 800631a:	f04f 0100 	mov.w	r1, #0
 800631e:	0159      	lsls	r1, r3, #5
 8006320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006324:	0150      	lsls	r0, r2, #5
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	ebb2 080a 	subs.w	r8, r2, sl
 800632e:	eb63 090b 	sbc.w	r9, r3, fp
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800633e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006342:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006346:	ebb2 0408 	subs.w	r4, r2, r8
 800634a:	eb63 0509 	sbc.w	r5, r3, r9
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	00eb      	lsls	r3, r5, #3
 8006358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800635c:	00e2      	lsls	r2, r4, #3
 800635e:	4614      	mov	r4, r2
 8006360:	461d      	mov	r5, r3
 8006362:	eb14 030a 	adds.w	r3, r4, sl
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	eb45 030b 	adc.w	r3, r5, fp
 800636c:	607b      	str	r3, [r7, #4]
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800637a:	4629      	mov	r1, r5
 800637c:	028b      	lsls	r3, r1, #10
 800637e:	4621      	mov	r1, r4
 8006380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006384:	4621      	mov	r1, r4
 8006386:	028a      	lsls	r2, r1, #10
 8006388:	4610      	mov	r0, r2
 800638a:	4619      	mov	r1, r3
 800638c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638e:	2200      	movs	r2, #0
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	60fa      	str	r2, [r7, #12]
 8006394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006398:	f7fa fca6 	bl	8000ce8 <__aeabi_uldivmod>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4613      	mov	r3, r2
 80063a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063a4:	4b0b      	ldr	r3, [pc, #44]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	3301      	adds	r3, #1
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80063b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063be:	e002      	b.n	80063c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063c0:	4b05      	ldr	r3, [pc, #20]	@ (80063d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80063c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3740      	adds	r7, #64	@ 0x40
 80063cc:	46bd      	mov	sp, r7
 80063ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d2:	bf00      	nop
 80063d4:	40023800 	.word	0x40023800
 80063d8:	00f42400 	.word	0x00f42400
 80063dc:	017d7840 	.word	0x017d7840

080063e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063e4:	4b03      	ldr	r3, [pc, #12]	@ (80063f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063e6:	681b      	ldr	r3, [r3, #0]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000000 	.word	0x20000000

080063f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063fc:	f7ff fff0 	bl	80063e0 <HAL_RCC_GetHCLKFreq>
 8006400:	4602      	mov	r2, r0
 8006402:	4b05      	ldr	r3, [pc, #20]	@ (8006418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	0a9b      	lsrs	r3, r3, #10
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	4903      	ldr	r1, [pc, #12]	@ (800641c <HAL_RCC_GetPCLK1Freq+0x24>)
 800640e:	5ccb      	ldrb	r3, [r1, r3]
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006414:	4618      	mov	r0, r3
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40023800 	.word	0x40023800
 800641c:	080101b0 	.word	0x080101b0

08006420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006424:	f7ff ffdc 	bl	80063e0 <HAL_RCC_GetHCLKFreq>
 8006428:	4602      	mov	r2, r0
 800642a:	4b05      	ldr	r3, [pc, #20]	@ (8006440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	0b5b      	lsrs	r3, r3, #13
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	4903      	ldr	r1, [pc, #12]	@ (8006444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006436:	5ccb      	ldrb	r3, [r1, r3]
 8006438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800643c:	4618      	mov	r0, r3
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40023800 	.word	0x40023800
 8006444:	080101b0 	.word	0x080101b0

08006448 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	220f      	movs	r2, #15
 8006456:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006458:	4b12      	ldr	r3, [pc, #72]	@ (80064a4 <HAL_RCC_GetClockConfig+0x5c>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0203 	and.w	r2, r3, #3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006464:	4b0f      	ldr	r3, [pc, #60]	@ (80064a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006470:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800647c:	4b09      	ldr	r3, [pc, #36]	@ (80064a4 <HAL_RCC_GetClockConfig+0x5c>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	08db      	lsrs	r3, r3, #3
 8006482:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800648a:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <HAL_RCC_GetClockConfig+0x60>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0207 	and.w	r2, r3, #7
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	601a      	str	r2, [r3, #0]
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40023800 	.word	0x40023800
 80064a8:	40023c00 	.word	0x40023c00

080064ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e041      	b.n	8006542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fc fd6c 	bl	8002fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f000 fcd2 	bl	8006e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	d001      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e04e      	b.n	8006602 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a23      	ldr	r2, [pc, #140]	@ (8006610 <HAL_TIM_Base_Start_IT+0xc4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d022      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x80>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800658e:	d01d      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x80>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1f      	ldr	r2, [pc, #124]	@ (8006614 <HAL_TIM_Base_Start_IT+0xc8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d018      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x80>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1e      	ldr	r2, [pc, #120]	@ (8006618 <HAL_TIM_Base_Start_IT+0xcc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x80>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1c      	ldr	r2, [pc, #112]	@ (800661c <HAL_TIM_Base_Start_IT+0xd0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x80>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006620 <HAL_TIM_Base_Start_IT+0xd4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x80>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a19      	ldr	r2, [pc, #100]	@ (8006624 <HAL_TIM_Base_Start_IT+0xd8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x80>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a18      	ldr	r2, [pc, #96]	@ (8006628 <HAL_TIM_Base_Start_IT+0xdc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d111      	bne.n	80065f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b06      	cmp	r3, #6
 80065dc:	d010      	beq.n	8006600 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ee:	e007      	b.n	8006600 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40010000 	.word	0x40010000
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40000c00 	.word	0x40000c00
 8006620:	40010400 	.word	0x40010400
 8006624:	40014000 	.word	0x40014000
 8006628:	40001800 	.word	0x40001800

0800662c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e041      	b.n	80066c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f839 	bl	80066ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f000 fc12 	bl	8006e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <HAL_TIM_PWM_Start+0x24>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	bf14      	ite	ne
 80066fc:	2301      	movne	r3, #1
 80066fe:	2300      	moveq	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	e022      	b.n	800674a <HAL_TIM_PWM_Start+0x6a>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b04      	cmp	r3, #4
 8006708:	d109      	bne.n	800671e <HAL_TIM_PWM_Start+0x3e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b01      	cmp	r3, #1
 8006714:	bf14      	ite	ne
 8006716:	2301      	movne	r3, #1
 8006718:	2300      	moveq	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	e015      	b.n	800674a <HAL_TIM_PWM_Start+0x6a>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b08      	cmp	r3, #8
 8006722:	d109      	bne.n	8006738 <HAL_TIM_PWM_Start+0x58>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b01      	cmp	r3, #1
 800672e:	bf14      	ite	ne
 8006730:	2301      	movne	r3, #1
 8006732:	2300      	moveq	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	e008      	b.n	800674a <HAL_TIM_PWM_Start+0x6a>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b01      	cmp	r3, #1
 8006742:	bf14      	ite	ne
 8006744:	2301      	movne	r3, #1
 8006746:	2300      	moveq	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e07c      	b.n	800684c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <HAL_TIM_PWM_Start+0x82>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006760:	e013      	b.n	800678a <HAL_TIM_PWM_Start+0xaa>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b04      	cmp	r3, #4
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Start+0x92>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006770:	e00b      	b.n	800678a <HAL_TIM_PWM_Start+0xaa>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d104      	bne.n	8006782 <HAL_TIM_PWM_Start+0xa2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006780:	e003      	b.n	800678a <HAL_TIM_PWM_Start+0xaa>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2202      	movs	r2, #2
 8006786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2201      	movs	r2, #1
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fe6e 	bl	8007474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a2d      	ldr	r2, [pc, #180]	@ (8006854 <HAL_TIM_PWM_Start+0x174>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d004      	beq.n	80067ac <HAL_TIM_PWM_Start+0xcc>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006858 <HAL_TIM_PWM_Start+0x178>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d101      	bne.n	80067b0 <HAL_TIM_PWM_Start+0xd0>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <HAL_TIM_PWM_Start+0xd2>
 80067b0:	2300      	movs	r3, #0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a22      	ldr	r2, [pc, #136]	@ (8006854 <HAL_TIM_PWM_Start+0x174>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d022      	beq.n	8006816 <HAL_TIM_PWM_Start+0x136>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d8:	d01d      	beq.n	8006816 <HAL_TIM_PWM_Start+0x136>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1f      	ldr	r2, [pc, #124]	@ (800685c <HAL_TIM_PWM_Start+0x17c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d018      	beq.n	8006816 <HAL_TIM_PWM_Start+0x136>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006860 <HAL_TIM_PWM_Start+0x180>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d013      	beq.n	8006816 <HAL_TIM_PWM_Start+0x136>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006864 <HAL_TIM_PWM_Start+0x184>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00e      	beq.n	8006816 <HAL_TIM_PWM_Start+0x136>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a16      	ldr	r2, [pc, #88]	@ (8006858 <HAL_TIM_PWM_Start+0x178>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d009      	beq.n	8006816 <HAL_TIM_PWM_Start+0x136>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a18      	ldr	r2, [pc, #96]	@ (8006868 <HAL_TIM_PWM_Start+0x188>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d004      	beq.n	8006816 <HAL_TIM_PWM_Start+0x136>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a16      	ldr	r2, [pc, #88]	@ (800686c <HAL_TIM_PWM_Start+0x18c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d111      	bne.n	800683a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b06      	cmp	r3, #6
 8006826:	d010      	beq.n	800684a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006838:	e007      	b.n	800684a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0201 	orr.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	40010000 	.word	0x40010000
 8006858:	40010400 	.word	0x40010400
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40014000 	.word	0x40014000
 800686c:	40001800 	.word	0x40001800

08006870 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fdf6 	bl	8007474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a2e      	ldr	r2, [pc, #184]	@ (8006948 <HAL_TIM_PWM_Stop+0xd8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_TIM_PWM_Stop+0x2c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a2d      	ldr	r2, [pc, #180]	@ (800694c <HAL_TIM_PWM_Stop+0xdc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d101      	bne.n	80068a0 <HAL_TIM_PWM_Stop+0x30>
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <HAL_TIM_PWM_Stop+0x32>
 80068a0:	2300      	movs	r3, #0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d017      	beq.n	80068d6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10f      	bne.n	80068d6 <HAL_TIM_PWM_Stop+0x66>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	f240 4344 	movw	r3, #1092	@ 0x444
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d107      	bne.n	80068d6 <HAL_TIM_PWM_Stop+0x66>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a1a      	ldr	r2, [r3, #32]
 80068dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10f      	bne.n	8006906 <HAL_TIM_PWM_Stop+0x96>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <HAL_TIM_PWM_Stop+0x96>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <HAL_TIM_PWM_Stop+0xa6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006914:	e013      	b.n	800693e <HAL_TIM_PWM_Stop+0xce>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b04      	cmp	r3, #4
 800691a:	d104      	bne.n	8006926 <HAL_TIM_PWM_Stop+0xb6>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006924:	e00b      	b.n	800693e <HAL_TIM_PWM_Stop+0xce>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b08      	cmp	r3, #8
 800692a:	d104      	bne.n	8006936 <HAL_TIM_PWM_Stop+0xc6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006934:	e003      	b.n	800693e <HAL_TIM_PWM_Stop+0xce>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40010000 	.word	0x40010000
 800694c:	40010400 	.word	0x40010400

08006950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d020      	beq.n	80069b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01b      	beq.n	80069b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0202 	mvn.w	r2, #2
 8006984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa5b 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa4d 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa5e 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d020      	beq.n	8006a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01b      	beq.n	8006a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0204 	mvn.w	r2, #4
 80069d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa35 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 80069ec:	e005      	b.n	80069fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa27 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fa38 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f003 0308 	and.w	r3, r3, #8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d020      	beq.n	8006a4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01b      	beq.n	8006a4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0208 	mvn.w	r2, #8
 8006a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2204      	movs	r2, #4
 8006a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa0f 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 8006a38:	e005      	b.n	8006a46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa01 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fa12 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d020      	beq.n	8006a98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01b      	beq.n	8006a98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0210 	mvn.w	r2, #16
 8006a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9e9 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 8006a84:	e005      	b.n	8006a92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9db 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f9ec 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00c      	beq.n	8006abc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f06f 0201 	mvn.w	r2, #1
 8006ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fc f988 	bl	8002dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00c      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d007      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fdc8 	bl	8007670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00c      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9bd 	bl	8006e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00c      	beq.n	8006b28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0220 	mvn.w	r2, #32
 8006b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fd9a 	bl	800765c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e0ae      	b.n	8006cac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b0c      	cmp	r3, #12
 8006b5a:	f200 809f 	bhi.w	8006c9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b99 	.word	0x08006b99
 8006b68:	08006c9d 	.word	0x08006c9d
 8006b6c:	08006c9d 	.word	0x08006c9d
 8006b70:	08006c9d 	.word	0x08006c9d
 8006b74:	08006bd9 	.word	0x08006bd9
 8006b78:	08006c9d 	.word	0x08006c9d
 8006b7c:	08006c9d 	.word	0x08006c9d
 8006b80:	08006c9d 	.word	0x08006c9d
 8006b84:	08006c1b 	.word	0x08006c1b
 8006b88:	08006c9d 	.word	0x08006c9d
 8006b8c:	08006c9d 	.word	0x08006c9d
 8006b90:	08006c9d 	.word	0x08006c9d
 8006b94:	08006c5b 	.word	0x08006c5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fa1e 	bl	8006fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0208 	orr.w	r2, r2, #8
 8006bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0204 	bic.w	r2, r2, #4
 8006bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6999      	ldr	r1, [r3, #24]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	691a      	ldr	r2, [r3, #16]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	619a      	str	r2, [r3, #24]
      break;
 8006bd6:	e064      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fa6e 	bl	80070c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6999      	ldr	r1, [r3, #24]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	021a      	lsls	r2, r3, #8
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	619a      	str	r2, [r3, #24]
      break;
 8006c18:	e043      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68b9      	ldr	r1, [r7, #8]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fac3 	bl	80071ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0208 	orr.w	r2, r2, #8
 8006c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0204 	bic.w	r2, r2, #4
 8006c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69d9      	ldr	r1, [r3, #28]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	61da      	str	r2, [r3, #28]
      break;
 8006c58:	e023      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fb17 	bl	8007294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69da      	ldr	r2, [r3, #28]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69d9      	ldr	r1, [r3, #28]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	021a      	lsls	r2, r3, #8
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	61da      	str	r2, [r3, #28]
      break;
 8006c9a:	e002      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e0b4      	b.n	8006e3a <HAL_TIM_ConfigClockSource+0x186>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d08:	d03e      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0xd4>
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d0e:	f200 8087 	bhi.w	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d16:	f000 8086 	beq.w	8006e26 <HAL_TIM_ConfigClockSource+0x172>
 8006d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d1e:	d87f      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d20:	2b70      	cmp	r3, #112	@ 0x70
 8006d22:	d01a      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0xa6>
 8006d24:	2b70      	cmp	r3, #112	@ 0x70
 8006d26:	d87b      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d28:	2b60      	cmp	r3, #96	@ 0x60
 8006d2a:	d050      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0x11a>
 8006d2c:	2b60      	cmp	r3, #96	@ 0x60
 8006d2e:	d877      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d30:	2b50      	cmp	r3, #80	@ 0x50
 8006d32:	d03c      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0xfa>
 8006d34:	2b50      	cmp	r3, #80	@ 0x50
 8006d36:	d873      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d058      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x13a>
 8006d3c:	2b40      	cmp	r3, #64	@ 0x40
 8006d3e:	d86f      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d40:	2b30      	cmp	r3, #48	@ 0x30
 8006d42:	d064      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x15a>
 8006d44:	2b30      	cmp	r3, #48	@ 0x30
 8006d46:	d86b      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d060      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x15a>
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d867      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d05c      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x15a>
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d05a      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x15a>
 8006d58:	e062      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d6a:	f000 fb63 	bl	8007434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	609a      	str	r2, [r3, #8]
      break;
 8006d86:	e04f      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d98:	f000 fb4c 	bl	8007434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006daa:	609a      	str	r2, [r3, #8]
      break;
 8006dac:	e03c      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f000 fac0 	bl	8007340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2150      	movs	r1, #80	@ 0x50
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fb19 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8006dcc:	e02c      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f000 fadf 	bl	800739e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2160      	movs	r1, #96	@ 0x60
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fb09 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8006dec:	e01c      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f000 faa0 	bl	8007340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2140      	movs	r1, #64	@ 0x40
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 faf9 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8006e0c:	e00c      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	f000 faf0 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8006e1e:	e003      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
      break;
 8006e24:	e000      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a43      	ldr	r2, [pc, #268]	@ (8006fb4 <TIM_Base_SetConfig+0x120>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d013      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eb2:	d00f      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a40      	ldr	r2, [pc, #256]	@ (8006fb8 <TIM_Base_SetConfig+0x124>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00b      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8006fbc <TIM_Base_SetConfig+0x128>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d007      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a3e      	ldr	r2, [pc, #248]	@ (8006fc0 <TIM_Base_SetConfig+0x12c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d003      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a3d      	ldr	r2, [pc, #244]	@ (8006fc4 <TIM_Base_SetConfig+0x130>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d108      	bne.n	8006ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a32      	ldr	r2, [pc, #200]	@ (8006fb4 <TIM_Base_SetConfig+0x120>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d02b      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef4:	d027      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8006fb8 <TIM_Base_SetConfig+0x124>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d023      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2e      	ldr	r2, [pc, #184]	@ (8006fbc <TIM_Base_SetConfig+0x128>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01f      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a2d      	ldr	r2, [pc, #180]	@ (8006fc0 <TIM_Base_SetConfig+0x12c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d01b      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a2c      	ldr	r2, [pc, #176]	@ (8006fc4 <TIM_Base_SetConfig+0x130>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d017      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a2b      	ldr	r2, [pc, #172]	@ (8006fc8 <TIM_Base_SetConfig+0x134>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d013      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a2a      	ldr	r2, [pc, #168]	@ (8006fcc <TIM_Base_SetConfig+0x138>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00f      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a29      	ldr	r2, [pc, #164]	@ (8006fd0 <TIM_Base_SetConfig+0x13c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00b      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a28      	ldr	r2, [pc, #160]	@ (8006fd4 <TIM_Base_SetConfig+0x140>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d007      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a27      	ldr	r2, [pc, #156]	@ (8006fd8 <TIM_Base_SetConfig+0x144>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a26      	ldr	r2, [pc, #152]	@ (8006fdc <TIM_Base_SetConfig+0x148>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d108      	bne.n	8006f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb4 <TIM_Base_SetConfig+0x120>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <TIM_Base_SetConfig+0xf2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a10      	ldr	r2, [pc, #64]	@ (8006fc4 <TIM_Base_SetConfig+0x130>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d103      	bne.n	8006f8e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	691a      	ldr	r2, [r3, #16]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f043 0204 	orr.w	r2, r3, #4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	601a      	str	r2, [r3, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40010000 	.word	0x40010000
 8006fb8:	40000400 	.word	0x40000400
 8006fbc:	40000800 	.word	0x40000800
 8006fc0:	40000c00 	.word	0x40000c00
 8006fc4:	40010400 	.word	0x40010400
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40014400 	.word	0x40014400
 8006fd0:	40014800 	.word	0x40014800
 8006fd4:	40001800 	.word	0x40001800
 8006fd8:	40001c00 	.word	0x40001c00
 8006fdc:	40002000 	.word	0x40002000

08006fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	f023 0201 	bic.w	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800700e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f023 0302 	bic.w	r3, r3, #2
 8007028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a20      	ldr	r2, [pc, #128]	@ (80070b8 <TIM_OC1_SetConfig+0xd8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d003      	beq.n	8007044 <TIM_OC1_SetConfig+0x64>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a1f      	ldr	r2, [pc, #124]	@ (80070bc <TIM_OC1_SetConfig+0xdc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d10c      	bne.n	800705e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f023 0308 	bic.w	r3, r3, #8
 800704a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f023 0304 	bic.w	r3, r3, #4
 800705c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a15      	ldr	r2, [pc, #84]	@ (80070b8 <TIM_OC1_SetConfig+0xd8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d003      	beq.n	800706e <TIM_OC1_SetConfig+0x8e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a14      	ldr	r2, [pc, #80]	@ (80070bc <TIM_OC1_SetConfig+0xdc>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d111      	bne.n	8007092 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800707c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	621a      	str	r2, [r3, #32]
}
 80070ac:	bf00      	nop
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	40010000 	.word	0x40010000
 80070bc:	40010400 	.word	0x40010400

080070c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	f023 0210 	bic.w	r2, r3, #16
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f023 0320 	bic.w	r3, r3, #32
 800710a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	011b      	lsls	r3, r3, #4
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a22      	ldr	r2, [pc, #136]	@ (80071a4 <TIM_OC2_SetConfig+0xe4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_OC2_SetConfig+0x68>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a21      	ldr	r2, [pc, #132]	@ (80071a8 <TIM_OC2_SetConfig+0xe8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d10d      	bne.n	8007144 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800712e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007142:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a17      	ldr	r2, [pc, #92]	@ (80071a4 <TIM_OC2_SetConfig+0xe4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC2_SetConfig+0x94>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a16      	ldr	r2, [pc, #88]	@ (80071a8 <TIM_OC2_SetConfig+0xe8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d113      	bne.n	800717c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800715a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	621a      	str	r2, [r3, #32]
}
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40010400 	.word	0x40010400

080071ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a21      	ldr	r2, [pc, #132]	@ (800728c <TIM_OC3_SetConfig+0xe0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <TIM_OC3_SetConfig+0x66>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a20      	ldr	r2, [pc, #128]	@ (8007290 <TIM_OC3_SetConfig+0xe4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d10d      	bne.n	800722e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800722c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a16      	ldr	r2, [pc, #88]	@ (800728c <TIM_OC3_SetConfig+0xe0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d003      	beq.n	800723e <TIM_OC3_SetConfig+0x92>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a15      	ldr	r2, [pc, #84]	@ (8007290 <TIM_OC3_SetConfig+0xe4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d113      	bne.n	8007266 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800724c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	4313      	orrs	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	621a      	str	r2, [r3, #32]
}
 8007280:	bf00      	nop
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	40010000 	.word	0x40010000
 8007290:	40010400 	.word	0x40010400

08007294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	031b      	lsls	r3, r3, #12
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a12      	ldr	r2, [pc, #72]	@ (8007338 <TIM_OC4_SetConfig+0xa4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d003      	beq.n	80072fc <TIM_OC4_SetConfig+0x68>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a11      	ldr	r2, [pc, #68]	@ (800733c <TIM_OC4_SetConfig+0xa8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d109      	bne.n	8007310 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	019b      	lsls	r3, r3, #6
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	40010000 	.word	0x40010000
 800733c:	40010400 	.word	0x40010400

08007340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f023 0201 	bic.w	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800736a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 030a 	bic.w	r3, r3, #10
 800737c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800739e:	b480      	push	{r7}
 80073a0:	b087      	sub	sp, #28
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	f023 0210 	bic.w	r2, r3, #16
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	031b      	lsls	r3, r3, #12
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	f043 0307 	orr.w	r3, r3, #7
 8007420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	609a      	str	r2, [r3, #8]
}
 8007428:	bf00      	nop
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800744e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	021a      	lsls	r2, r3, #8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	431a      	orrs	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4313      	orrs	r3, r2
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	609a      	str	r2, [r3, #8]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 031f 	and.w	r3, r3, #31
 8007486:	2201      	movs	r2, #1
 8007488:	fa02 f303 	lsl.w	r3, r2, r3
 800748c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a1a      	ldr	r2, [r3, #32]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	43db      	mvns	r3, r3
 8007496:	401a      	ands	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ac:	431a      	orrs	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	621a      	str	r2, [r3, #32]
}
 80074b2:	bf00      	nop
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
	...

080074c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e05a      	b.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a21      	ldr	r2, [pc, #132]	@ (800759c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d022      	beq.n	8007562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007524:	d01d      	beq.n	8007562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1d      	ldr	r2, [pc, #116]	@ (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d018      	beq.n	8007562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1b      	ldr	r2, [pc, #108]	@ (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d013      	beq.n	8007562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1a      	ldr	r2, [pc, #104]	@ (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00e      	beq.n	8007562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a18      	ldr	r2, [pc, #96]	@ (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d009      	beq.n	8007562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a17      	ldr	r2, [pc, #92]	@ (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d004      	beq.n	8007562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a15      	ldr	r2, [pc, #84]	@ (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d10c      	bne.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4313      	orrs	r3, r2
 8007572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40010000 	.word	0x40010000
 80075a0:	40000400 	.word	0x40000400
 80075a4:	40000800 	.word	0x40000800
 80075a8:	40000c00 	.word	0x40000c00
 80075ac:	40010400 	.word	0x40010400
 80075b0:	40014000 	.word	0x40014000
 80075b4:	40001800 	.word	0x40001800

080075b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e03d      	b.n	8007650 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e042      	b.n	800771c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d106      	bne.n	80076b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fb fd16 	bl	80030dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2224      	movs	r2, #36	@ 0x24
 80076b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 ff1b 	bl	8008504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695a      	ldr	r2, [r3, #20]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	@ 0x28
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	4613      	mov	r3, r2
 8007732:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b20      	cmp	r3, #32
 8007742:	d175      	bne.n	8007830 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <HAL_UART_Transmit+0x2c>
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e06e      	b.n	8007832 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2221      	movs	r2, #33	@ 0x21
 800775e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007762:	f7fb ff2b 	bl	80035bc <HAL_GetTick>
 8007766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	88fa      	ldrh	r2, [r7, #6]
 8007772:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800777c:	d108      	bne.n	8007790 <HAL_UART_Transmit+0x6c>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	61bb      	str	r3, [r7, #24]
 800778e:	e003      	b.n	8007798 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007794:	2300      	movs	r3, #0
 8007796:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007798:	e02e      	b.n	80077f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2200      	movs	r2, #0
 80077a2:	2180      	movs	r1, #128	@ 0x80
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 fc58 	bl	800805a <UART_WaitOnFlagUntilTimeout>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e03a      	b.n	8007832 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	3302      	adds	r3, #2
 80077d6:	61bb      	str	r3, [r7, #24]
 80077d8:	e007      	b.n	80077ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	781a      	ldrb	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	3301      	adds	r3, #1
 80077e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1cb      	bne.n	800779a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2200      	movs	r2, #0
 800780a:	2140      	movs	r1, #64	@ 0x40
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fc24 	bl	800805a <UART_WaitOnFlagUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e006      	b.n	8007832 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2220      	movs	r2, #32
 8007828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	e000      	b.n	8007832 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007830:	2302      	movs	r3, #2
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	4613      	mov	r3, r2
 8007846:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b20      	cmp	r3, #32
 8007852:	d112      	bne.n	800787a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_UART_Receive_IT+0x26>
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e00b      	b.n	800787c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	461a      	mov	r2, r3
 800786e:	68b9      	ldr	r1, [r7, #8]
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 fc4b 	bl	800810c <UART_Start_Receive_IT>
 8007876:	4603      	mov	r3, r0
 8007878:	e000      	b.n	800787c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800787a:	2302      	movs	r3, #2
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08c      	sub	sp, #48	@ 0x30
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b20      	cmp	r3, #32
 800789c:	d162      	bne.n	8007964 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <HAL_UART_Transmit_DMA+0x26>
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e05b      	b.n	8007966 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	88fa      	ldrh	r2, [r7, #6]
 80078b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2221      	movs	r2, #33	@ 0x21
 80078ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d2:	4a27      	ldr	r2, [pc, #156]	@ (8007970 <HAL_UART_Transmit_DMA+0xec>)
 80078d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078da:	4a26      	ldr	r2, [pc, #152]	@ (8007974 <HAL_UART_Transmit_DMA+0xf0>)
 80078dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e2:	4a25      	ldr	r2, [pc, #148]	@ (8007978 <HAL_UART_Transmit_DMA+0xf4>)
 80078e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ea:	2200      	movs	r2, #0
 80078ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80078ee:	f107 0308 	add.w	r3, r7, #8
 80078f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80078f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fa:	6819      	ldr	r1, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3304      	adds	r3, #4
 8007902:	461a      	mov	r2, r3
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	f7fc fc19 	bl	800413c <HAL_DMA_Start_IT>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d008      	beq.n	8007922 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2210      	movs	r2, #16
 8007914:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e021      	b.n	8007966 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800792a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	617b      	str	r3, [r7, #20]
   return(result);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3314      	adds	r3, #20
 800794a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800794c:	627a      	str	r2, [r7, #36]	@ 0x24
 800794e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6a39      	ldr	r1, [r7, #32]
 8007952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	61fb      	str	r3, [r7, #28]
   return(result);
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e5      	bne.n	800792c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	e000      	b.n	8007966 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8007964:	2302      	movs	r3, #2
  }
}
 8007966:	4618      	mov	r0, r3
 8007968:	3730      	adds	r7, #48	@ 0x30
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	08007f11 	.word	0x08007f11
 8007974:	08007fab 	.word	0x08007fab
 8007978:	08007fc7 	.word	0x08007fc7

0800797c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b0ba      	sub	sp, #232	@ 0xe8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80079ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10f      	bne.n	80079e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <HAL_UART_IRQHandler+0x66>
 80079ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fcd4 	bl	8008388 <UART_Receive_IT>
      return;
 80079e0:	e273      	b.n	8007eca <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 80de 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x22c>
 80079ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 80d1 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <HAL_UART_IRQHandler+0xae>
 8007a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a22:	f043 0201 	orr.w	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <HAL_UART_IRQHandler+0xd2>
 8007a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a46:	f043 0202 	orr.w	r2, r3, #2
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <HAL_UART_IRQHandler+0xf6>
 8007a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d011      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x126>
 8007a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9a:	f043 0208 	orr.w	r2, r3, #8
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 820a 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab0:	f003 0320 	and.w	r3, r3, #32
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d008      	beq.n	8007aca <HAL_UART_IRQHandler+0x14e>
 8007ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fc5f 	bl	8008388 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad4:	2b40      	cmp	r3, #64	@ 0x40
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2301      	moveq	r3, #1
 8007ada:	2300      	movne	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d103      	bne.n	8007af6 <HAL_UART_IRQHandler+0x17a>
 8007aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d04f      	beq.n	8007b96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fb6a 	bl	80081d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b06:	2b40      	cmp	r3, #64	@ 0x40
 8007b08:	d141      	bne.n	8007b8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3314      	adds	r3, #20
 8007b10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3314      	adds	r3, #20
 8007b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1d9      	bne.n	8007b0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d013      	beq.n	8007b86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b62:	4a8a      	ldr	r2, [pc, #552]	@ (8007d8c <HAL_UART_IRQHandler+0x410>)
 8007b64:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fc fbae 	bl	80042cc <HAL_DMA_Abort_IT>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d016      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b84:	e00e      	b.n	8007ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f9ac 	bl	8007ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8c:	e00a      	b.n	8007ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f9a8 	bl	8007ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	e006      	b.n	8007ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f9a4 	bl	8007ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007ba2:	e18d      	b.n	8007ec0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	bf00      	nop
    return;
 8007ba6:	e18b      	b.n	8007ec0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	f040 8167 	bne.w	8007e80 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb6:	f003 0310 	and.w	r3, r3, #16
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8160 	beq.w	8007e80 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc4:	f003 0310 	and.w	r3, r3, #16
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 8159 	beq.w	8007e80 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60bb      	str	r3, [r7, #8]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	60bb      	str	r3, [r7, #8]
 8007be2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bee:	2b40      	cmp	r3, #64	@ 0x40
 8007bf0:	f040 80ce 	bne.w	8007d90 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80a9 	beq.w	8007d5c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c12:	429a      	cmp	r2, r3
 8007c14:	f080 80a2 	bcs.w	8007d5c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c2a:	f000 8088 	beq.w	8007d3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	330c      	adds	r3, #12
 8007c56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1d9      	bne.n	8007c2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3314      	adds	r3, #20
 8007c80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c8c:	f023 0301 	bic.w	r3, r3, #1
 8007c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3314      	adds	r3, #20
 8007c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e1      	bne.n	8007c7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3314      	adds	r3, #20
 8007cbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3314      	adds	r3, #20
 8007cd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007cda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ce0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e3      	bne.n	8007cb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	330c      	adds	r3, #12
 8007d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d0e:	f023 0310 	bic.w	r3, r3, #16
 8007d12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	330c      	adds	r3, #12
 8007d1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e3      	bne.n	8007cfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fc fa57 	bl	80041ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f8cf 	bl	8007ef8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007d5a:	e0b3      	b.n	8007ec4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d64:	429a      	cmp	r2, r3
 8007d66:	f040 80ad 	bne.w	8007ec4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d74:	f040 80a6 	bne.w	8007ec4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f8b7 	bl	8007ef8 <HAL_UARTEx_RxEventCallback>
      return;
 8007d8a:	e09b      	b.n	8007ec4 <HAL_UART_IRQHandler+0x548>
 8007d8c:	08008297 	.word	0x08008297
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 808e 	beq.w	8007ec8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 8089 	beq.w	8007ec8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007dda:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ddc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007de0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e3      	bne.n	8007db6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3314      	adds	r3, #20
 8007df4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e12:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e3      	bne.n	8007dee <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	330c      	adds	r3, #12
 8007e54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e58:	61fa      	str	r2, [r7, #28]
 8007e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	69b9      	ldr	r1, [r7, #24]
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	617b      	str	r3, [r7, #20]
   return(result);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e3      	bne.n	8007e34 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f83d 	bl	8007ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e7e:	e023      	b.n	8007ec8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d009      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x524>
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fa0d 	bl	80082b8 <UART_Transmit_IT>
    return;
 8007e9e:	e014      	b.n	8007eca <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00e      	beq.n	8007eca <HAL_UART_IRQHandler+0x54e>
 8007eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d008      	beq.n	8007eca <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa4d 	bl	8008358 <UART_EndTransmit_IT>
    return;
 8007ebe:	e004      	b.n	8007eca <HAL_UART_IRQHandler+0x54e>
    return;
 8007ec0:	bf00      	nop
 8007ec2:	e002      	b.n	8007eca <HAL_UART_IRQHandler+0x54e>
      return;
 8007ec4:	bf00      	nop
 8007ec6:	e000      	b.n	8007eca <HAL_UART_IRQHandler+0x54e>
      return;
 8007ec8:	bf00      	nop
  }
}
 8007eca:	37e8      	adds	r7, #232	@ 0xe8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b090      	sub	sp, #64	@ 0x40
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d137      	bne.n	8007f9c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f2e:	2200      	movs	r2, #0
 8007f30:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3314      	adds	r3, #20
 8007f38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	e853 3f00 	ldrex	r3, [r3]
 8007f40:	623b      	str	r3, [r7, #32]
   return(result);
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3314      	adds	r3, #20
 8007f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f52:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e5      	bne.n	8007f32 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	330c      	adds	r3, #12
 8007f84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f86:	61fa      	str	r2, [r7, #28]
 8007f88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	69b9      	ldr	r1, [r7, #24]
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	617b      	str	r3, [r7, #20]
   return(result);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e5      	bne.n	8007f66 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f9a:	e002      	b.n	8007fa2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007f9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007f9e:	f7fa fafd 	bl	800259c <HAL_UART_TxCpltCallback>
}
 8007fa2:	bf00      	nop
 8007fa4:	3740      	adds	r7, #64	@ 0x40
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7ff ff89 	bl	8007ed0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fbe:	bf00      	nop
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe2:	2b80      	cmp	r3, #128	@ 0x80
 8007fe4:	bf0c      	ite	eq
 8007fe6:	2301      	moveq	r3, #1
 8007fe8:	2300      	movne	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b21      	cmp	r3, #33	@ 0x21
 8007ff8:	d108      	bne.n	800800c <UART_DMAError+0x46>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2200      	movs	r2, #0
 8008004:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008006:	68b8      	ldr	r0, [r7, #8]
 8008008:	f000 f8ba 	bl	8008180 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008016:	2b40      	cmp	r3, #64	@ 0x40
 8008018:	bf0c      	ite	eq
 800801a:	2301      	moveq	r3, #1
 800801c:	2300      	movne	r3, #0
 800801e:	b2db      	uxtb	r3, r3
 8008020:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b22      	cmp	r3, #34	@ 0x22
 800802c:	d108      	bne.n	8008040 <UART_DMAError+0x7a>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800803a:	68b8      	ldr	r0, [r7, #8]
 800803c:	f000 f8c8 	bl	80081d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008044:	f043 0210 	orr.w	r2, r3, #16
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800804c:	68b8      	ldr	r0, [r7, #8]
 800804e:	f7ff ff49 	bl	8007ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b086      	sub	sp, #24
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	4613      	mov	r3, r2
 8008068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806a:	e03b      	b.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008072:	d037      	beq.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008074:	f7fb faa2 	bl	80035bc <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	6a3a      	ldr	r2, [r7, #32]
 8008080:	429a      	cmp	r2, r3
 8008082:	d302      	bcc.n	800808a <UART_WaitOnFlagUntilTimeout+0x30>
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e03a      	b.n	8008104 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	d023      	beq.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b80      	cmp	r3, #128	@ 0x80
 80080a0:	d020      	beq.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b40      	cmp	r3, #64	@ 0x40
 80080a6:	d01d      	beq.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	d116      	bne.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f87f 	bl	80081d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2208      	movs	r2, #8
 80080d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e00f      	b.n	8008104 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4013      	ands	r3, r2
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	bf0c      	ite	eq
 80080f4:	2301      	moveq	r3, #1
 80080f6:	2300      	movne	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	461a      	mov	r2, r3
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d0b4      	beq.n	800806c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	88fa      	ldrh	r2, [r7, #6]
 8008124:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2222      	movs	r2, #34	@ 0x22
 8008136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008150:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695a      	ldr	r2, [r3, #20]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0201 	orr.w	r2, r2, #1
 8008160:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f042 0220 	orr.w	r2, r2, #32
 8008170:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008180:	b480      	push	{r7}
 8008182:	b089      	sub	sp, #36	@ 0x24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	330c      	adds	r3, #12
 800818e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	60bb      	str	r3, [r7, #8]
   return(result);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800819e:	61fb      	str	r3, [r7, #28]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	61ba      	str	r2, [r7, #24]
 80081aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6979      	ldr	r1, [r7, #20]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	613b      	str	r3, [r7, #16]
   return(result);
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e5      	bne.n	8008188 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80081c4:	bf00      	nop
 80081c6:	3724      	adds	r7, #36	@ 0x24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b095      	sub	sp, #84	@ 0x54
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	330c      	adds	r3, #12
 80081de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	330c      	adds	r3, #12
 80081f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e5      	bne.n	80081d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3314      	adds	r3, #20
 8008212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	61fb      	str	r3, [r7, #28]
   return(result);
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	f023 0301 	bic.w	r3, r3, #1
 8008222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3314      	adds	r3, #20
 800822a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800822c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800822e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008234:	e841 2300 	strex	r3, r2, [r1]
 8008238:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1e5      	bne.n	800820c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008244:	2b01      	cmp	r3, #1
 8008246:	d119      	bne.n	800827c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	330c      	adds	r3, #12
 800824e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	60bb      	str	r3, [r7, #8]
   return(result);
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f023 0310 	bic.w	r3, r3, #16
 800825e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	330c      	adds	r3, #12
 8008266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008268:	61ba      	str	r2, [r7, #24]
 800826a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6979      	ldr	r1, [r7, #20]
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	613b      	str	r3, [r7, #16]
   return(result);
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e5      	bne.n	8008248 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800828a:	bf00      	nop
 800828c:	3754      	adds	r7, #84	@ 0x54
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7ff fe1a 	bl	8007ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b21      	cmp	r3, #33	@ 0x21
 80082ca:	d13e      	bne.n	800834a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082d4:	d114      	bne.n	8008300 <UART_Transmit_IT+0x48>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d110      	bne.n	8008300 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	1c9a      	adds	r2, r3, #2
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	621a      	str	r2, [r3, #32]
 80082fe:	e008      	b.n	8008312 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6211      	str	r1, [r2, #32]
 800830a:	781a      	ldrb	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008316:	b29b      	uxth	r3, r3
 8008318:	3b01      	subs	r3, #1
 800831a:	b29b      	uxth	r3, r3
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	4619      	mov	r1, r3
 8008320:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10f      	bne.n	8008346 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008334:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008344:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	e000      	b.n	800834c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800834a:	2302      	movs	r3, #2
  }
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800836e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7fa f90f 	bl	800259c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08c      	sub	sp, #48	@ 0x30
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008394:	2300      	movs	r3, #0
 8008396:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b22      	cmp	r3, #34	@ 0x22
 80083a2:	f040 80aa 	bne.w	80084fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ae:	d115      	bne.n	80083dc <UART_Receive_IT+0x54>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d111      	bne.n	80083dc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d4:	1c9a      	adds	r2, r3, #2
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80083da:	e024      	b.n	8008426 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ea:	d007      	beq.n	80083fc <UART_Receive_IT+0x74>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10a      	bne.n	800840a <UART_Receive_IT+0x82>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	b2da      	uxtb	r2, r3
 8008404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	e008      	b.n	800841c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008416:	b2da      	uxtb	r2, r3
 8008418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800842a:	b29b      	uxth	r3, r3
 800842c:	3b01      	subs	r3, #1
 800842e:	b29b      	uxth	r3, r3
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	4619      	mov	r1, r3
 8008434:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008436:	2b00      	cmp	r3, #0
 8008438:	d15d      	bne.n	80084f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0220 	bic.w	r2, r2, #32
 8008448:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008458:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695a      	ldr	r2, [r3, #20]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0201 	bic.w	r2, r2, #1
 8008468:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847c:	2b01      	cmp	r3, #1
 800847e:	d135      	bne.n	80084ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	330c      	adds	r3, #12
 800848c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	613b      	str	r3, [r7, #16]
   return(result);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f023 0310 	bic.w	r3, r3, #16
 800849c:	627b      	str	r3, [r7, #36]	@ 0x24
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	330c      	adds	r3, #12
 80084a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a6:	623a      	str	r2, [r7, #32]
 80084a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	69f9      	ldr	r1, [r7, #28]
 80084ac:	6a3a      	ldr	r2, [r7, #32]
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e5      	bne.n	8008486 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	2b10      	cmp	r3, #16
 80084c6:	d10a      	bne.n	80084de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff fd07 	bl	8007ef8 <HAL_UARTEx_RxEventCallback>
 80084ea:	e002      	b.n	80084f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7fa f833 	bl	8002558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e002      	b.n	80084fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	e000      	b.n	80084fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084fa:	2302      	movs	r3, #2
  }
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3730      	adds	r7, #48	@ 0x30
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008508:	b0c0      	sub	sp, #256	@ 0x100
 800850a:	af00      	add	r7, sp, #0
 800850c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800851c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008520:	68d9      	ldr	r1, [r3, #12]
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	ea40 0301 	orr.w	r3, r0, r1
 800852c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800852e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	431a      	orrs	r2, r3
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	431a      	orrs	r2, r3
 8008544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	4313      	orrs	r3, r2
 800854c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800855c:	f021 010c 	bic.w	r1, r1, #12
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800856a:	430b      	orrs	r3, r1
 800856c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800856e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800857a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800857e:	6999      	ldr	r1, [r3, #24]
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	ea40 0301 	orr.w	r3, r0, r1
 800858a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	4b8f      	ldr	r3, [pc, #572]	@ (80087d0 <UART_SetConfig+0x2cc>)
 8008594:	429a      	cmp	r2, r3
 8008596:	d005      	beq.n	80085a4 <UART_SetConfig+0xa0>
 8008598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	4b8d      	ldr	r3, [pc, #564]	@ (80087d4 <UART_SetConfig+0x2d0>)
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d104      	bne.n	80085ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085a4:	f7fd ff3c 	bl	8006420 <HAL_RCC_GetPCLK2Freq>
 80085a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80085ac:	e003      	b.n	80085b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ae:	f7fd ff23 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 80085b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085c0:	f040 810c 	bne.w	80087dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80085d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80085d6:	4622      	mov	r2, r4
 80085d8:	462b      	mov	r3, r5
 80085da:	1891      	adds	r1, r2, r2
 80085dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80085de:	415b      	adcs	r3, r3
 80085e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80085e6:	4621      	mov	r1, r4
 80085e8:	eb12 0801 	adds.w	r8, r2, r1
 80085ec:	4629      	mov	r1, r5
 80085ee:	eb43 0901 	adc.w	r9, r3, r1
 80085f2:	f04f 0200 	mov.w	r2, #0
 80085f6:	f04f 0300 	mov.w	r3, #0
 80085fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008606:	4690      	mov	r8, r2
 8008608:	4699      	mov	r9, r3
 800860a:	4623      	mov	r3, r4
 800860c:	eb18 0303 	adds.w	r3, r8, r3
 8008610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008614:	462b      	mov	r3, r5
 8008616:	eb49 0303 	adc.w	r3, r9, r3
 800861a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800861e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800862a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800862e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008632:	460b      	mov	r3, r1
 8008634:	18db      	adds	r3, r3, r3
 8008636:	653b      	str	r3, [r7, #80]	@ 0x50
 8008638:	4613      	mov	r3, r2
 800863a:	eb42 0303 	adc.w	r3, r2, r3
 800863e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008648:	f7f8 fb4e 	bl	8000ce8 <__aeabi_uldivmod>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4b61      	ldr	r3, [pc, #388]	@ (80087d8 <UART_SetConfig+0x2d4>)
 8008652:	fba3 2302 	umull	r2, r3, r3, r2
 8008656:	095b      	lsrs	r3, r3, #5
 8008658:	011c      	lsls	r4, r3, #4
 800865a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800865e:	2200      	movs	r2, #0
 8008660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008664:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800866c:	4642      	mov	r2, r8
 800866e:	464b      	mov	r3, r9
 8008670:	1891      	adds	r1, r2, r2
 8008672:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008674:	415b      	adcs	r3, r3
 8008676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800867c:	4641      	mov	r1, r8
 800867e:	eb12 0a01 	adds.w	sl, r2, r1
 8008682:	4649      	mov	r1, r9
 8008684:	eb43 0b01 	adc.w	fp, r3, r1
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	f04f 0300 	mov.w	r3, #0
 8008690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800869c:	4692      	mov	sl, r2
 800869e:	469b      	mov	fp, r3
 80086a0:	4643      	mov	r3, r8
 80086a2:	eb1a 0303 	adds.w	r3, sl, r3
 80086a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086aa:	464b      	mov	r3, r9
 80086ac:	eb4b 0303 	adc.w	r3, fp, r3
 80086b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80086c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086c8:	460b      	mov	r3, r1
 80086ca:	18db      	adds	r3, r3, r3
 80086cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80086ce:	4613      	mov	r3, r2
 80086d0:	eb42 0303 	adc.w	r3, r2, r3
 80086d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80086de:	f7f8 fb03 	bl	8000ce8 <__aeabi_uldivmod>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4611      	mov	r1, r2
 80086e8:	4b3b      	ldr	r3, [pc, #236]	@ (80087d8 <UART_SetConfig+0x2d4>)
 80086ea:	fba3 2301 	umull	r2, r3, r3, r1
 80086ee:	095b      	lsrs	r3, r3, #5
 80086f0:	2264      	movs	r2, #100	@ 0x64
 80086f2:	fb02 f303 	mul.w	r3, r2, r3
 80086f6:	1acb      	subs	r3, r1, r3
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80086fe:	4b36      	ldr	r3, [pc, #216]	@ (80087d8 <UART_SetConfig+0x2d4>)
 8008700:	fba3 2302 	umull	r2, r3, r3, r2
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800870c:	441c      	add	r4, r3
 800870e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008712:	2200      	movs	r2, #0
 8008714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008718:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800871c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008720:	4642      	mov	r2, r8
 8008722:	464b      	mov	r3, r9
 8008724:	1891      	adds	r1, r2, r2
 8008726:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008728:	415b      	adcs	r3, r3
 800872a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800872c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008730:	4641      	mov	r1, r8
 8008732:	1851      	adds	r1, r2, r1
 8008734:	6339      	str	r1, [r7, #48]	@ 0x30
 8008736:	4649      	mov	r1, r9
 8008738:	414b      	adcs	r3, r1
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
 800873c:	f04f 0200 	mov.w	r2, #0
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008748:	4659      	mov	r1, fp
 800874a:	00cb      	lsls	r3, r1, #3
 800874c:	4651      	mov	r1, sl
 800874e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008752:	4651      	mov	r1, sl
 8008754:	00ca      	lsls	r2, r1, #3
 8008756:	4610      	mov	r0, r2
 8008758:	4619      	mov	r1, r3
 800875a:	4603      	mov	r3, r0
 800875c:	4642      	mov	r2, r8
 800875e:	189b      	adds	r3, r3, r2
 8008760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008764:	464b      	mov	r3, r9
 8008766:	460a      	mov	r2, r1
 8008768:	eb42 0303 	adc.w	r3, r2, r3
 800876c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800877c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008784:	460b      	mov	r3, r1
 8008786:	18db      	adds	r3, r3, r3
 8008788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800878a:	4613      	mov	r3, r2
 800878c:	eb42 0303 	adc.w	r3, r2, r3
 8008790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800879a:	f7f8 faa5 	bl	8000ce8 <__aeabi_uldivmod>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <UART_SetConfig+0x2d4>)
 80087a4:	fba3 1302 	umull	r1, r3, r3, r2
 80087a8:	095b      	lsrs	r3, r3, #5
 80087aa:	2164      	movs	r1, #100	@ 0x64
 80087ac:	fb01 f303 	mul.w	r3, r1, r3
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	3332      	adds	r3, #50	@ 0x32
 80087b6:	4a08      	ldr	r2, [pc, #32]	@ (80087d8 <UART_SetConfig+0x2d4>)
 80087b8:	fba2 2303 	umull	r2, r3, r2, r3
 80087bc:	095b      	lsrs	r3, r3, #5
 80087be:	f003 0207 	and.w	r2, r3, #7
 80087c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4422      	add	r2, r4
 80087ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087cc:	e106      	b.n	80089dc <UART_SetConfig+0x4d8>
 80087ce:	bf00      	nop
 80087d0:	40011000 	.word	0x40011000
 80087d4:	40011400 	.word	0x40011400
 80087d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80087ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80087ee:	4642      	mov	r2, r8
 80087f0:	464b      	mov	r3, r9
 80087f2:	1891      	adds	r1, r2, r2
 80087f4:	6239      	str	r1, [r7, #32]
 80087f6:	415b      	adcs	r3, r3
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087fe:	4641      	mov	r1, r8
 8008800:	1854      	adds	r4, r2, r1
 8008802:	4649      	mov	r1, r9
 8008804:	eb43 0501 	adc.w	r5, r3, r1
 8008808:	f04f 0200 	mov.w	r2, #0
 800880c:	f04f 0300 	mov.w	r3, #0
 8008810:	00eb      	lsls	r3, r5, #3
 8008812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008816:	00e2      	lsls	r2, r4, #3
 8008818:	4614      	mov	r4, r2
 800881a:	461d      	mov	r5, r3
 800881c:	4643      	mov	r3, r8
 800881e:	18e3      	adds	r3, r4, r3
 8008820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008824:	464b      	mov	r3, r9
 8008826:	eb45 0303 	adc.w	r3, r5, r3
 800882a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800882e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800883a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800884a:	4629      	mov	r1, r5
 800884c:	008b      	lsls	r3, r1, #2
 800884e:	4621      	mov	r1, r4
 8008850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008854:	4621      	mov	r1, r4
 8008856:	008a      	lsls	r2, r1, #2
 8008858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800885c:	f7f8 fa44 	bl	8000ce8 <__aeabi_uldivmod>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4b60      	ldr	r3, [pc, #384]	@ (80089e8 <UART_SetConfig+0x4e4>)
 8008866:	fba3 2302 	umull	r2, r3, r3, r2
 800886a:	095b      	lsrs	r3, r3, #5
 800886c:	011c      	lsls	r4, r3, #4
 800886e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008872:	2200      	movs	r2, #0
 8008874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008878:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800887c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008880:	4642      	mov	r2, r8
 8008882:	464b      	mov	r3, r9
 8008884:	1891      	adds	r1, r2, r2
 8008886:	61b9      	str	r1, [r7, #24]
 8008888:	415b      	adcs	r3, r3
 800888a:	61fb      	str	r3, [r7, #28]
 800888c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008890:	4641      	mov	r1, r8
 8008892:	1851      	adds	r1, r2, r1
 8008894:	6139      	str	r1, [r7, #16]
 8008896:	4649      	mov	r1, r9
 8008898:	414b      	adcs	r3, r1
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	f04f 0300 	mov.w	r3, #0
 80088a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088a8:	4659      	mov	r1, fp
 80088aa:	00cb      	lsls	r3, r1, #3
 80088ac:	4651      	mov	r1, sl
 80088ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088b2:	4651      	mov	r1, sl
 80088b4:	00ca      	lsls	r2, r1, #3
 80088b6:	4610      	mov	r0, r2
 80088b8:	4619      	mov	r1, r3
 80088ba:	4603      	mov	r3, r0
 80088bc:	4642      	mov	r2, r8
 80088be:	189b      	adds	r3, r3, r2
 80088c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088c4:	464b      	mov	r3, r9
 80088c6:	460a      	mov	r2, r1
 80088c8:	eb42 0303 	adc.w	r3, r2, r3
 80088cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	f04f 0300 	mov.w	r3, #0
 80088e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80088e8:	4649      	mov	r1, r9
 80088ea:	008b      	lsls	r3, r1, #2
 80088ec:	4641      	mov	r1, r8
 80088ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088f2:	4641      	mov	r1, r8
 80088f4:	008a      	lsls	r2, r1, #2
 80088f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80088fa:	f7f8 f9f5 	bl	8000ce8 <__aeabi_uldivmod>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4611      	mov	r1, r2
 8008904:	4b38      	ldr	r3, [pc, #224]	@ (80089e8 <UART_SetConfig+0x4e4>)
 8008906:	fba3 2301 	umull	r2, r3, r3, r1
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	2264      	movs	r2, #100	@ 0x64
 800890e:	fb02 f303 	mul.w	r3, r2, r3
 8008912:	1acb      	subs	r3, r1, r3
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	3332      	adds	r3, #50	@ 0x32
 8008918:	4a33      	ldr	r2, [pc, #204]	@ (80089e8 <UART_SetConfig+0x4e4>)
 800891a:	fba2 2303 	umull	r2, r3, r2, r3
 800891e:	095b      	lsrs	r3, r3, #5
 8008920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008924:	441c      	add	r4, r3
 8008926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800892a:	2200      	movs	r2, #0
 800892c:	673b      	str	r3, [r7, #112]	@ 0x70
 800892e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008930:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008934:	4642      	mov	r2, r8
 8008936:	464b      	mov	r3, r9
 8008938:	1891      	adds	r1, r2, r2
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	415b      	adcs	r3, r3
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008944:	4641      	mov	r1, r8
 8008946:	1851      	adds	r1, r2, r1
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	4649      	mov	r1, r9
 800894c:	414b      	adcs	r3, r1
 800894e:	607b      	str	r3, [r7, #4]
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800895c:	4659      	mov	r1, fp
 800895e:	00cb      	lsls	r3, r1, #3
 8008960:	4651      	mov	r1, sl
 8008962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008966:	4651      	mov	r1, sl
 8008968:	00ca      	lsls	r2, r1, #3
 800896a:	4610      	mov	r0, r2
 800896c:	4619      	mov	r1, r3
 800896e:	4603      	mov	r3, r0
 8008970:	4642      	mov	r2, r8
 8008972:	189b      	adds	r3, r3, r2
 8008974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008976:	464b      	mov	r3, r9
 8008978:	460a      	mov	r2, r1
 800897a:	eb42 0303 	adc.w	r3, r2, r3
 800897e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	663b      	str	r3, [r7, #96]	@ 0x60
 800898a:	667a      	str	r2, [r7, #100]	@ 0x64
 800898c:	f04f 0200 	mov.w	r2, #0
 8008990:	f04f 0300 	mov.w	r3, #0
 8008994:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008998:	4649      	mov	r1, r9
 800899a:	008b      	lsls	r3, r1, #2
 800899c:	4641      	mov	r1, r8
 800899e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089a2:	4641      	mov	r1, r8
 80089a4:	008a      	lsls	r2, r1, #2
 80089a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80089aa:	f7f8 f99d 	bl	8000ce8 <__aeabi_uldivmod>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4b0d      	ldr	r3, [pc, #52]	@ (80089e8 <UART_SetConfig+0x4e4>)
 80089b4:	fba3 1302 	umull	r1, r3, r3, r2
 80089b8:	095b      	lsrs	r3, r3, #5
 80089ba:	2164      	movs	r1, #100	@ 0x64
 80089bc:	fb01 f303 	mul.w	r3, r1, r3
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	3332      	adds	r3, #50	@ 0x32
 80089c6:	4a08      	ldr	r2, [pc, #32]	@ (80089e8 <UART_SetConfig+0x4e4>)
 80089c8:	fba2 2303 	umull	r2, r3, r2, r3
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	f003 020f 	and.w	r2, r3, #15
 80089d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4422      	add	r2, r4
 80089da:	609a      	str	r2, [r3, #8]
}
 80089dc:	bf00      	nop
 80089de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80089e2:	46bd      	mov	sp, r7
 80089e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089e8:	51eb851f 	.word	0x51eb851f

080089ec <__NVIC_SetPriority>:
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	6039      	str	r1, [r7, #0]
 80089f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	db0a      	blt.n	8008a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	490c      	ldr	r1, [pc, #48]	@ (8008a38 <__NVIC_SetPriority+0x4c>)
 8008a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0a:	0112      	lsls	r2, r2, #4
 8008a0c:	b2d2      	uxtb	r2, r2
 8008a0e:	440b      	add	r3, r1
 8008a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008a14:	e00a      	b.n	8008a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	4908      	ldr	r1, [pc, #32]	@ (8008a3c <__NVIC_SetPriority+0x50>)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	3b04      	subs	r3, #4
 8008a24:	0112      	lsls	r2, r2, #4
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	440b      	add	r3, r1
 8008a2a:	761a      	strb	r2, [r3, #24]
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	e000e100 	.word	0xe000e100
 8008a3c:	e000ed00 	.word	0xe000ed00

08008a40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008a44:	4b05      	ldr	r3, [pc, #20]	@ (8008a5c <SysTick_Handler+0x1c>)
 8008a46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008a48:	f002 fc9e 	bl	800b388 <xTaskGetSchedulerState>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d001      	beq.n	8008a56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008a52:	f003 fd01 	bl	800c458 <xPortSysTickHandler>
  }
}
 8008a56:	bf00      	nop
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	e000e010 	.word	0xe000e010

08008a60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008a64:	2100      	movs	r1, #0
 8008a66:	f06f 0004 	mvn.w	r0, #4
 8008a6a:	f7ff ffbf 	bl	80089ec <__NVIC_SetPriority>
#endif
}
 8008a6e:	bf00      	nop
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a7a:	f3ef 8305 	mrs	r3, IPSR
 8008a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8008a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008a86:	f06f 0305 	mvn.w	r3, #5
 8008a8a:	607b      	str	r3, [r7, #4]
 8008a8c:	e00c      	b.n	8008aa8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab8 <osKernelInitialize+0x44>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d105      	bne.n	8008aa2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a96:	4b08      	ldr	r3, [pc, #32]	@ (8008ab8 <osKernelInitialize+0x44>)
 8008a98:	2201      	movs	r2, #1
 8008a9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	607b      	str	r3, [r7, #4]
 8008aa0:	e002      	b.n	8008aa8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008aa8:	687b      	ldr	r3, [r7, #4]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	200005ac 	.word	0x200005ac

08008abc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ac2:	f3ef 8305 	mrs	r3, IPSR
 8008ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008ace:	f06f 0305 	mvn.w	r3, #5
 8008ad2:	607b      	str	r3, [r7, #4]
 8008ad4:	e010      	b.n	8008af8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <osKernelStart+0x48>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d109      	bne.n	8008af2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ade:	f7ff ffbf 	bl	8008a60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008ae2:	4b08      	ldr	r3, [pc, #32]	@ (8008b04 <osKernelStart+0x48>)
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ae8:	f001 ffda 	bl	800aaa0 <vTaskStartScheduler>
      stat = osOK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	607b      	str	r3, [r7, #4]
 8008af0:	e002      	b.n	8008af8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008af2:	f04f 33ff 	mov.w	r3, #4294967295
 8008af6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008af8:	687b      	ldr	r3, [r7, #4]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	200005ac 	.word	0x200005ac

08008b08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08e      	sub	sp, #56	@ 0x38
 8008b0c:	af04      	add	r7, sp, #16
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b18:	f3ef 8305 	mrs	r3, IPSR
 8008b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d17e      	bne.n	8008c22 <osThreadNew+0x11a>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d07b      	beq.n	8008c22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008b2a:	2380      	movs	r3, #128	@ 0x80
 8008b2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008b2e:	2318      	movs	r3, #24
 8008b30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008b32:	2300      	movs	r3, #0
 8008b34:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008b36:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d045      	beq.n	8008bce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <osThreadNew+0x48>
        name = attr->name;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d008      	beq.n	8008b76 <osThreadNew+0x6e>
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	2b38      	cmp	r3, #56	@ 0x38
 8008b68:	d805      	bhi.n	8008b76 <osThreadNew+0x6e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <osThreadNew+0x72>
        return (NULL);
 8008b76:	2300      	movs	r3, #0
 8008b78:	e054      	b.n	8008c24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	089b      	lsrs	r3, r3, #2
 8008b88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00e      	beq.n	8008bb0 <osThreadNew+0xa8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	2ba7      	cmp	r3, #167	@ 0xa7
 8008b98:	d90a      	bls.n	8008bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d006      	beq.n	8008bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <osThreadNew+0xa8>
        mem = 1;
 8008baa:	2301      	movs	r3, #1
 8008bac:	61bb      	str	r3, [r7, #24]
 8008bae:	e010      	b.n	8008bd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10c      	bne.n	8008bd2 <osThreadNew+0xca>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d108      	bne.n	8008bd2 <osThreadNew+0xca>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <osThreadNew+0xca>
          mem = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61bb      	str	r3, [r7, #24]
 8008bcc:	e001      	b.n	8008bd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d110      	bne.n	8008bfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008be0:	9202      	str	r2, [sp, #8]
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	6a3a      	ldr	r2, [r7, #32]
 8008bec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f001 fd62 	bl	800a6b8 <xTaskCreateStatic>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	613b      	str	r3, [r7, #16]
 8008bf8:	e013      	b.n	8008c22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d110      	bne.n	8008c22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	f107 0310 	add.w	r3, r7, #16
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f001 fdb0 	bl	800a778 <xTaskCreate>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d001      	beq.n	8008c22 <osThreadNew+0x11a>
            hTask = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008c22:	693b      	ldr	r3, [r7, #16]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3728      	adds	r7, #40	@ 0x28
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c34:	f3ef 8305 	mrs	r3, IPSR
 8008c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <osDelay+0x1c>
    stat = osErrorISR;
 8008c40:	f06f 0305 	mvn.w	r3, #5
 8008c44:	60fb      	str	r3, [r7, #12]
 8008c46:	e007      	b.n	8008c58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f001 feee 	bl	800aa34 <vTaskDelay>
    }
  }

  return (stat);
 8008c58:	68fb      	ldr	r3, [r7, #12]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b088      	sub	sp, #32
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c6e:	f3ef 8305 	mrs	r3, IPSR
 8008c72:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c74:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d174      	bne.n	8008d64 <osMutexNew+0x102>
    if (attr != NULL) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e001      	b.n	8008c8c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <osMutexNew+0x3a>
      rmtx = 1U;
 8008c96:	2301      	movs	r3, #1
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	e001      	b.n	8008ca0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	f003 0308 	and.w	r3, r3, #8
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d15c      	bne.n	8008d64 <osMutexNew+0x102>
      mem = -1;
 8008caa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cae:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d015      	beq.n	8008ce2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d006      	beq.n	8008ccc <osMutexNew+0x6a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	2b4f      	cmp	r3, #79	@ 0x4f
 8008cc4:	d902      	bls.n	8008ccc <osMutexNew+0x6a>
          mem = 1;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	613b      	str	r3, [r7, #16]
 8008cca:	e00c      	b.n	8008ce6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d108      	bne.n	8008ce6 <osMutexNew+0x84>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d104      	bne.n	8008ce6 <osMutexNew+0x84>
            mem = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	613b      	str	r3, [r7, #16]
 8008ce0:	e001      	b.n	8008ce6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d112      	bne.n	8008d12 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	2004      	movs	r0, #4
 8008cfa:	f000 fd70 	bl	80097de <xQueueCreateMutexStatic>
 8008cfe:	61f8      	str	r0, [r7, #28]
 8008d00:	e016      	b.n	8008d30 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	4619      	mov	r1, r3
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f000 fd68 	bl	80097de <xQueueCreateMutexStatic>
 8008d0e:	61f8      	str	r0, [r7, #28]
 8008d10:	e00e      	b.n	8008d30 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10b      	bne.n	8008d30 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d004      	beq.n	8008d28 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008d1e:	2004      	movs	r0, #4
 8008d20:	f000 fd45 	bl	80097ae <xQueueCreateMutex>
 8008d24:	61f8      	str	r0, [r7, #28]
 8008d26:	e003      	b.n	8008d30 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008d28:	2001      	movs	r0, #1
 8008d2a:	f000 fd40 	bl	80097ae <xQueueCreateMutex>
 8008d2e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00c      	beq.n	8008d50 <osMutexNew+0xee>
        if (attr != NULL) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <osMutexNew+0xe2>
          name = attr->name;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	e001      	b.n	8008d48 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008d48:	68f9      	ldr	r1, [r7, #12]
 8008d4a:	69f8      	ldr	r0, [r7, #28]
 8008d4c:	f001 fc2c 	bl	800a5a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d006      	beq.n	8008d64 <osMutexNew+0x102>
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008d64:	69fb      	ldr	r3, [r7, #28]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3720      	adds	r7, #32
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f023 0301 	bic.w	r3, r3, #1
 8008d7e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d8c:	f3ef 8305 	mrs	r3, IPSR
 8008d90:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d92:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008d98:	f06f 0305 	mvn.w	r3, #5
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	e02c      	b.n	8008dfa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d103      	bne.n	8008dae <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008da6:	f06f 0303 	mvn.w	r3, #3
 8008daa:	617b      	str	r3, [r7, #20]
 8008dac:	e025      	b.n	8008dfa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d011      	beq.n	8008dd8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6938      	ldr	r0, [r7, #16]
 8008db8:	f000 fd61 	bl	800987e <xQueueTakeMutexRecursive>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d01b      	beq.n	8008dfa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008dc8:	f06f 0301 	mvn.w	r3, #1
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	e014      	b.n	8008dfa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008dd0:	f06f 0302 	mvn.w	r3, #2
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	e010      	b.n	8008dfa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6938      	ldr	r0, [r7, #16]
 8008ddc:	f001 f906 	bl	8009fec <xQueueSemaphoreTake>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d009      	beq.n	8008dfa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008dec:	f06f 0301 	mvn.w	r3, #1
 8008df0:	617b      	str	r3, [r7, #20]
 8008df2:	e002      	b.n	8008dfa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008df4:	f06f 0302 	mvn.w	r3, #2
 8008df8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008dfa:	697b      	ldr	r3, [r7, #20]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f023 0301 	bic.w	r3, r3, #1
 8008e12:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e20:	f3ef 8305 	mrs	r3, IPSR
 8008e24:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e26:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008e2c:	f06f 0305 	mvn.w	r3, #5
 8008e30:	617b      	str	r3, [r7, #20]
 8008e32:	e01f      	b.n	8008e74 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d103      	bne.n	8008e42 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008e3a:	f06f 0303 	mvn.w	r3, #3
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	e018      	b.n	8008e74 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d009      	beq.n	8008e5c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008e48:	6938      	ldr	r0, [r7, #16]
 8008e4a:	f000 fce3 	bl	8009814 <xQueueGiveMutexRecursive>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d00f      	beq.n	8008e74 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008e54:	f06f 0302 	mvn.w	r3, #2
 8008e58:	617b      	str	r3, [r7, #20]
 8008e5a:	e00b      	b.n	8008e74 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2100      	movs	r1, #0
 8008e62:	6938      	ldr	r0, [r7, #16]
 8008e64:	f000 fdb0 	bl	80099c8 <xQueueGenericSend>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d002      	beq.n	8008e74 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008e6e:	f06f 0302 	mvn.w	r3, #2
 8008e72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008e74:	697b      	ldr	r3, [r7, #20]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b08a      	sub	sp, #40	@ 0x28
 8008e82:	af02      	add	r7, sp, #8
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e8e:	f3ef 8305 	mrs	r3, IPSR
 8008e92:	613b      	str	r3, [r7, #16]
  return(result);
 8008e94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d175      	bne.n	8008f86 <osSemaphoreNew+0x108>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d072      	beq.n	8008f86 <osSemaphoreNew+0x108>
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d86e      	bhi.n	8008f86 <osSemaphoreNew+0x108>
    mem = -1;
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d015      	beq.n	8008ee0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d006      	beq.n	8008eca <osSemaphoreNew+0x4c>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	2b4f      	cmp	r3, #79	@ 0x4f
 8008ec2:	d902      	bls.n	8008eca <osSemaphoreNew+0x4c>
        mem = 1;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	61bb      	str	r3, [r7, #24]
 8008ec8:	e00c      	b.n	8008ee4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d108      	bne.n	8008ee4 <osSemaphoreNew+0x66>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <osSemaphoreNew+0x66>
          mem = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	e001      	b.n	8008ee4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eea:	d04c      	beq.n	8008f86 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d128      	bne.n	8008f44 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d10a      	bne.n	8008f0e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	2203      	movs	r2, #3
 8008efe:	9200      	str	r2, [sp, #0]
 8008f00:	2200      	movs	r2, #0
 8008f02:	2100      	movs	r1, #0
 8008f04:	2001      	movs	r0, #1
 8008f06:	f000 fb5d 	bl	80095c4 <xQueueGenericCreateStatic>
 8008f0a:	61f8      	str	r0, [r7, #28]
 8008f0c:	e005      	b.n	8008f1a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008f0e:	2203      	movs	r2, #3
 8008f10:	2100      	movs	r1, #0
 8008f12:	2001      	movs	r0, #1
 8008f14:	f000 fbd3 	bl	80096be <xQueueGenericCreate>
 8008f18:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d022      	beq.n	8008f66 <osSemaphoreNew+0xe8>
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01f      	beq.n	8008f66 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008f26:	2300      	movs	r3, #0
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	69f8      	ldr	r0, [r7, #28]
 8008f2e:	f000 fd4b 	bl	80099c8 <xQueueGenericSend>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d016      	beq.n	8008f66 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008f38:	69f8      	ldr	r0, [r7, #28]
 8008f3a:	f001 f9e9 	bl	800a310 <vQueueDelete>
            hSemaphore = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61fb      	str	r3, [r7, #28]
 8008f42:	e010      	b.n	8008f66 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d108      	bne.n	8008f5c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 fcca 	bl	80098ec <xQueueCreateCountingSemaphoreStatic>
 8008f58:	61f8      	str	r0, [r7, #28]
 8008f5a:	e004      	b.n	8008f66 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 fcfd 	bl	800995e <xQueueCreateCountingSemaphore>
 8008f64:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00c      	beq.n	8008f86 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <osSemaphoreNew+0xfc>
          name = attr->name;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	617b      	str	r3, [r7, #20]
 8008f78:	e001      	b.n	8008f7e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008f7e:	6979      	ldr	r1, [r7, #20]
 8008f80:	69f8      	ldr	r0, [r7, #28]
 8008f82:	f001 fb11 	bl	800a5a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008f86:	69fb      	ldr	r3, [r7, #28]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3720      	adds	r7, #32
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d103      	bne.n	8008fb0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008fa8:	f06f 0303 	mvn.w	r3, #3
 8008fac:	617b      	str	r3, [r7, #20]
 8008fae:	e039      	b.n	8009024 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fb0:	f3ef 8305 	mrs	r3, IPSR
 8008fb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d022      	beq.n	8009002 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008fc2:	f06f 0303 	mvn.w	r3, #3
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	e02c      	b.n	8009024 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008fce:	f107 0308 	add.w	r3, r7, #8
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	6938      	ldr	r0, [r7, #16]
 8008fd8:	f001 f918 	bl	800a20c <xQueueReceiveFromISR>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d003      	beq.n	8008fea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008fe2:	f06f 0302 	mvn.w	r3, #2
 8008fe6:	617b      	str	r3, [r7, #20]
 8008fe8:	e01c      	b.n	8009024 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d019      	beq.n	8009024 <osSemaphoreAcquire+0x94>
 8008ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8009030 <osSemaphoreAcquire+0xa0>)
 8008ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	e010      	b.n	8009024 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6938      	ldr	r0, [r7, #16]
 8009006:	f000 fff1 	bl	8009fec <xQueueSemaphoreTake>
 800900a:	4603      	mov	r3, r0
 800900c:	2b01      	cmp	r3, #1
 800900e:	d009      	beq.n	8009024 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009016:	f06f 0301 	mvn.w	r3, #1
 800901a:	617b      	str	r3, [r7, #20]
 800901c:	e002      	b.n	8009024 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800901e:	f06f 0302 	mvn.w	r3, #2
 8009022:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009024:	697b      	ldr	r3, [r7, #20]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	e000ed04 	.word	0xe000ed04

08009034 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009040:	2300      	movs	r3, #0
 8009042:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800904a:	f06f 0303 	mvn.w	r3, #3
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	e02c      	b.n	80090ac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009052:	f3ef 8305 	mrs	r3, IPSR
 8009056:	60fb      	str	r3, [r7, #12]
  return(result);
 8009058:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800905a:	2b00      	cmp	r3, #0
 800905c:	d01a      	beq.n	8009094 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800905e:	2300      	movs	r3, #0
 8009060:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	4619      	mov	r1, r3
 8009068:	6938      	ldr	r0, [r7, #16]
 800906a:	f000 fe4d 	bl	8009d08 <xQueueGiveFromISR>
 800906e:	4603      	mov	r3, r0
 8009070:	2b01      	cmp	r3, #1
 8009072:	d003      	beq.n	800907c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009074:	f06f 0302 	mvn.w	r3, #2
 8009078:	617b      	str	r3, [r7, #20]
 800907a:	e017      	b.n	80090ac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d014      	beq.n	80090ac <osSemaphoreRelease+0x78>
 8009082:	4b0d      	ldr	r3, [pc, #52]	@ (80090b8 <osSemaphoreRelease+0x84>)
 8009084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	e00b      	b.n	80090ac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009094:	2300      	movs	r3, #0
 8009096:	2200      	movs	r2, #0
 8009098:	2100      	movs	r1, #0
 800909a:	6938      	ldr	r0, [r7, #16]
 800909c:	f000 fc94 	bl	80099c8 <xQueueGenericSend>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d002      	beq.n	80090ac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80090a6:	f06f 0302 	mvn.w	r3, #2
 80090aa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80090ac:	697b      	ldr	r3, [r7, #20]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08a      	sub	sp, #40	@ 0x28
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80090c8:	2300      	movs	r3, #0
 80090ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090cc:	f3ef 8305 	mrs	r3, IPSR
 80090d0:	613b      	str	r3, [r7, #16]
  return(result);
 80090d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d15f      	bne.n	8009198 <osMessageQueueNew+0xdc>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d05c      	beq.n	8009198 <osMessageQueueNew+0xdc>
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d059      	beq.n	8009198 <osMessageQueueNew+0xdc>
    mem = -1;
 80090e4:	f04f 33ff 	mov.w	r3, #4294967295
 80090e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d029      	beq.n	8009144 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d012      	beq.n	800911e <osMessageQueueNew+0x62>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2b4f      	cmp	r3, #79	@ 0x4f
 80090fe:	d90e      	bls.n	800911e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00a      	beq.n	800911e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	695a      	ldr	r2, [r3, #20]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	fb01 f303 	mul.w	r3, r1, r3
 8009114:	429a      	cmp	r2, r3
 8009116:	d302      	bcc.n	800911e <osMessageQueueNew+0x62>
        mem = 1;
 8009118:	2301      	movs	r3, #1
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	e014      	b.n	8009148 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d110      	bne.n	8009148 <osMessageQueueNew+0x8c>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10c      	bne.n	8009148 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009132:	2b00      	cmp	r3, #0
 8009134:	d108      	bne.n	8009148 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d104      	bne.n	8009148 <osMessageQueueNew+0x8c>
          mem = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	61bb      	str	r3, [r7, #24]
 8009142:	e001      	b.n	8009148 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d10b      	bne.n	8009166 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	691a      	ldr	r2, [r3, #16]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	2100      	movs	r1, #0
 8009158:	9100      	str	r1, [sp, #0]
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 fa31 	bl	80095c4 <xQueueGenericCreateStatic>
 8009162:	61f8      	str	r0, [r7, #28]
 8009164:	e008      	b.n	8009178 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d105      	bne.n	8009178 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800916c:	2200      	movs	r2, #0
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 faa4 	bl	80096be <xQueueGenericCreate>
 8009176:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00c      	beq.n	8009198 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	617b      	str	r3, [r7, #20]
 800918a:	e001      	b.n	8009190 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009190:	6979      	ldr	r1, [r7, #20]
 8009192:	69f8      	ldr	r0, [r7, #28]
 8009194:	f001 fa08 	bl	800a5a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009198:	69fb      	ldr	r3, [r7, #28]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3720      	adds	r7, #32
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091bc:	f3ef 8305 	mrs	r3, IPSR
 80091c0:	617b      	str	r3, [r7, #20]
  return(result);
 80091c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d028      	beq.n	800921a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <osMessageQueuePut+0x36>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <osMessageQueuePut+0x36>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80091da:	f06f 0303 	mvn.w	r3, #3
 80091de:	61fb      	str	r3, [r7, #28]
 80091e0:	e038      	b.n	8009254 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80091e6:	f107 0210 	add.w	r2, r7, #16
 80091ea:	2300      	movs	r3, #0
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	69b8      	ldr	r0, [r7, #24]
 80091f0:	f000 fcec 	bl	8009bcc <xQueueGenericSendFromISR>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d003      	beq.n	8009202 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80091fa:	f06f 0302 	mvn.w	r3, #2
 80091fe:	61fb      	str	r3, [r7, #28]
 8009200:	e028      	b.n	8009254 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d025      	beq.n	8009254 <osMessageQueuePut+0xb0>
 8009208:	4b15      	ldr	r3, [pc, #84]	@ (8009260 <osMessageQueuePut+0xbc>)
 800920a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	e01c      	b.n	8009254 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <osMessageQueuePut+0x82>
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d103      	bne.n	800922e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009226:	f06f 0303 	mvn.w	r3, #3
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	e012      	b.n	8009254 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800922e:	2300      	movs	r3, #0
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	68b9      	ldr	r1, [r7, #8]
 8009234:	69b8      	ldr	r0, [r7, #24]
 8009236:	f000 fbc7 	bl	80099c8 <xQueueGenericSend>
 800923a:	4603      	mov	r3, r0
 800923c:	2b01      	cmp	r3, #1
 800923e:	d009      	beq.n	8009254 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009246:	f06f 0301 	mvn.w	r3, #1
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	e002      	b.n	8009254 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800924e:	f06f 0302 	mvn.w	r3, #2
 8009252:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009254:	69fb      	ldr	r3, [r7, #28]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3720      	adds	r7, #32
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009276:	2300      	movs	r3, #0
 8009278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800927a:	f3ef 8305 	mrs	r3, IPSR
 800927e:	617b      	str	r3, [r7, #20]
  return(result);
 8009280:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009282:	2b00      	cmp	r3, #0
 8009284:	d028      	beq.n	80092d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d005      	beq.n	8009298 <osMessageQueueGet+0x34>
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <osMessageQueueGet+0x34>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009298:	f06f 0303 	mvn.w	r3, #3
 800929c:	61fb      	str	r3, [r7, #28]
 800929e:	e037      	b.n	8009310 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80092a0:	2300      	movs	r3, #0
 80092a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80092a4:	f107 0310 	add.w	r3, r7, #16
 80092a8:	461a      	mov	r2, r3
 80092aa:	68b9      	ldr	r1, [r7, #8]
 80092ac:	69b8      	ldr	r0, [r7, #24]
 80092ae:	f000 ffad 	bl	800a20c <xQueueReceiveFromISR>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d003      	beq.n	80092c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80092b8:	f06f 0302 	mvn.w	r3, #2
 80092bc:	61fb      	str	r3, [r7, #28]
 80092be:	e027      	b.n	8009310 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d024      	beq.n	8009310 <osMessageQueueGet+0xac>
 80092c6:	4b15      	ldr	r3, [pc, #84]	@ (800931c <osMessageQueueGet+0xb8>)
 80092c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	e01b      	b.n	8009310 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <osMessageQueueGet+0x80>
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d103      	bne.n	80092ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80092e4:	f06f 0303 	mvn.w	r3, #3
 80092e8:	61fb      	str	r3, [r7, #28]
 80092ea:	e011      	b.n	8009310 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	69b8      	ldr	r0, [r7, #24]
 80092f2:	f000 fd99 	bl	8009e28 <xQueueReceive>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d009      	beq.n	8009310 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009302:	f06f 0301 	mvn.w	r3, #1
 8009306:	61fb      	str	r3, [r7, #28]
 8009308:	e002      	b.n	8009310 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800930a:	f06f 0302 	mvn.w	r3, #2
 800930e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009310:	69fb      	ldr	r3, [r7, #28]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3720      	adds	r7, #32
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	e000ed04 	.word	0xe000ed04

08009320 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4a07      	ldr	r2, [pc, #28]	@ (800934c <vApplicationGetIdleTaskMemory+0x2c>)
 8009330:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	4a06      	ldr	r2, [pc, #24]	@ (8009350 <vApplicationGetIdleTaskMemory+0x30>)
 8009336:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2280      	movs	r2, #128	@ 0x80
 800933c:	601a      	str	r2, [r3, #0]
}
 800933e:	bf00      	nop
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	200005b0 	.word	0x200005b0
 8009350:	20000658 	.word	0x20000658

08009354 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4a07      	ldr	r2, [pc, #28]	@ (8009380 <vApplicationGetTimerTaskMemory+0x2c>)
 8009364:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	4a06      	ldr	r2, [pc, #24]	@ (8009384 <vApplicationGetTimerTaskMemory+0x30>)
 800936a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009372:	601a      	str	r2, [r3, #0]
}
 8009374:	bf00      	nop
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20000858 	.word	0x20000858
 8009384:	20000900 	.word	0x20000900

08009388 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f103 0208 	add.w	r2, r3, #8
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f04f 32ff 	mov.w	r2, #4294967295
 80093a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f103 0208 	add.w	r2, r3, #8
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f103 0208 	add.w	r2, r3, #8
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	601a      	str	r2, [r3, #0]
}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800942a:	b480      	push	{r7}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009440:	d103      	bne.n	800944a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	e00c      	b.n	8009464 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3308      	adds	r3, #8
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	e002      	b.n	8009458 <vListInsert+0x2e>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	429a      	cmp	r2, r3
 8009462:	d2f6      	bcs.n	8009452 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	601a      	str	r2, [r3, #0]
}
 8009490:	bf00      	nop
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	6892      	ldr	r2, [r2, #8]
 80094b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	6852      	ldr	r2, [r2, #4]
 80094bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d103      	bne.n	80094d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	1e5a      	subs	r2, r3, #1
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10b      	bne.n	800951c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009516:	bf00      	nop
 8009518:	bf00      	nop
 800951a:	e7fd      	b.n	8009518 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800951c:	f002 ff0c 	bl	800c338 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009528:	68f9      	ldr	r1, [r7, #12]
 800952a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	441a      	add	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800954c:	3b01      	subs	r3, #1
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009552:	fb01 f303 	mul.w	r3, r1, r3
 8009556:	441a      	add	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	22ff      	movs	r2, #255	@ 0xff
 8009560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	22ff      	movs	r2, #255	@ 0xff
 8009568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d114      	bne.n	800959c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01a      	beq.n	80095b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3310      	adds	r3, #16
 800957e:	4618      	mov	r0, r3
 8009580:	f001 fd2c 	bl	800afdc <xTaskRemoveFromEventList>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d012      	beq.n	80095b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800958a:	4b0d      	ldr	r3, [pc, #52]	@ (80095c0 <xQueueGenericReset+0xd0>)
 800958c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	e009      	b.n	80095b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3310      	adds	r3, #16
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff fef1 	bl	8009388 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3324      	adds	r3, #36	@ 0x24
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff feec 	bl	8009388 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095b0:	f002 fef4 	bl	800c39c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095b4:	2301      	movs	r3, #1
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08e      	sub	sp, #56	@ 0x38
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10b      	bne.n	80095f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80095ea:	bf00      	nop
 80095ec:	bf00      	nop
 80095ee:	e7fd      	b.n	80095ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10b      	bne.n	800960e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009608:	bf00      	nop
 800960a:	bf00      	nop
 800960c:	e7fd      	b.n	800960a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <xQueueGenericCreateStatic+0x56>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <xQueueGenericCreateStatic+0x5a>
 800961a:	2301      	movs	r3, #1
 800961c:	e000      	b.n	8009620 <xQueueGenericCreateStatic+0x5c>
 800961e:	2300      	movs	r3, #0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10b      	bne.n	800963c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	623b      	str	r3, [r7, #32]
}
 8009636:	bf00      	nop
 8009638:	bf00      	nop
 800963a:	e7fd      	b.n	8009638 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <xQueueGenericCreateStatic+0x84>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <xQueueGenericCreateStatic+0x88>
 8009648:	2301      	movs	r3, #1
 800964a:	e000      	b.n	800964e <xQueueGenericCreateStatic+0x8a>
 800964c:	2300      	movs	r3, #0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	61fb      	str	r3, [r7, #28]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800966a:	2350      	movs	r3, #80	@ 0x50
 800966c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2b50      	cmp	r3, #80	@ 0x50
 8009672:	d00b      	beq.n	800968c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	61bb      	str	r3, [r7, #24]
}
 8009686:	bf00      	nop
 8009688:	bf00      	nop
 800968a:	e7fd      	b.n	8009688 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800968c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00d      	beq.n	80096b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80096a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	4613      	mov	r3, r2
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 f840 	bl	8009734 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3730      	adds	r7, #48	@ 0x30
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b08a      	sub	sp, #40	@ 0x28
 80096c2:	af02      	add	r7, sp, #8
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	4613      	mov	r3, r2
 80096ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10b      	bne.n	80096ea <xQueueGenericCreate+0x2c>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	613b      	str	r3, [r7, #16]
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	e7fd      	b.n	80096e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	fb02 f303 	mul.w	r3, r2, r3
 80096f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	3350      	adds	r3, #80	@ 0x50
 80096f8:	4618      	mov	r0, r3
 80096fa:	f002 ff3f 	bl	800c57c <pvPortMalloc>
 80096fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d011      	beq.n	800972a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	3350      	adds	r3, #80	@ 0x50
 800970e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009718:	79fa      	ldrb	r2, [r7, #7]
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	4613      	mov	r3, r2
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	68b9      	ldr	r1, [r7, #8]
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 f805 	bl	8009734 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800972a:	69bb      	ldr	r3, [r7, #24]
	}
 800972c:	4618      	mov	r0, r3
 800972e:	3720      	adds	r7, #32
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d103      	bne.n	8009750 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	e002      	b.n	8009756 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009762:	2101      	movs	r1, #1
 8009764:	69b8      	ldr	r0, [r7, #24]
 8009766:	f7ff fec3 	bl	80094f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	78fa      	ldrb	r2, [r7, #3]
 800976e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009772:	bf00      	nop
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00e      	beq.n	80097a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800979a:	2300      	movs	r3, #0
 800979c:	2200      	movs	r2, #0
 800979e:	2100      	movs	r1, #0
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f911 	bl	80099c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b086      	sub	sp, #24
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	4603      	mov	r3, r0
 80097b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80097b8:	2301      	movs	r3, #1
 80097ba:	617b      	str	r3, [r7, #20]
 80097bc:	2300      	movs	r3, #0
 80097be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80097c0:	79fb      	ldrb	r3, [r7, #7]
 80097c2:	461a      	mov	r2, r3
 80097c4:	6939      	ldr	r1, [r7, #16]
 80097c6:	6978      	ldr	r0, [r7, #20]
 80097c8:	f7ff ff79 	bl	80096be <xQueueGenericCreate>
 80097cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7ff ffd3 	bl	800977a <prvInitialiseMutex>

		return xNewQueue;
 80097d4:	68fb      	ldr	r3, [r7, #12]
	}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b088      	sub	sp, #32
 80097e2:	af02      	add	r7, sp, #8
 80097e4:	4603      	mov	r3, r0
 80097e6:	6039      	str	r1, [r7, #0]
 80097e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80097ea:	2301      	movs	r3, #1
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	2300      	movs	r3, #0
 80097f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80097f2:	79fb      	ldrb	r3, [r7, #7]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2200      	movs	r2, #0
 80097fa:	6939      	ldr	r1, [r7, #16]
 80097fc:	6978      	ldr	r0, [r7, #20]
 80097fe:	f7ff fee1 	bl	80095c4 <xQueueGenericCreateStatic>
 8009802:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7ff ffb8 	bl	800977a <prvInitialiseMutex>

		return xNewQueue;
 800980a:	68fb      	ldr	r3, [r7, #12]
	}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009814:	b590      	push	{r4, r7, lr}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10b      	bne.n	800983e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	60fb      	str	r3, [r7, #12]
}
 8009838:	bf00      	nop
 800983a:	bf00      	nop
 800983c:	e7fd      	b.n	800983a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	689c      	ldr	r4, [r3, #8]
 8009842:	f001 fd91 	bl	800b368 <xTaskGetCurrentTaskHandle>
 8009846:	4603      	mov	r3, r0
 8009848:	429c      	cmp	r4, r3
 800984a:	d111      	bne.n	8009870 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	1e5a      	subs	r2, r3, #1
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800985e:	2300      	movs	r3, #0
 8009860:	2200      	movs	r2, #0
 8009862:	2100      	movs	r1, #0
 8009864:	6938      	ldr	r0, [r7, #16]
 8009866:	f000 f8af 	bl	80099c8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800986a:	2301      	movs	r3, #1
 800986c:	617b      	str	r3, [r7, #20]
 800986e:	e001      	b.n	8009874 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009874:	697b      	ldr	r3, [r7, #20]
	}
 8009876:	4618      	mov	r0, r3
 8009878:	371c      	adds	r7, #28
 800987a:	46bd      	mov	sp, r7
 800987c:	bd90      	pop	{r4, r7, pc}

0800987e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800987e:	b590      	push	{r4, r7, lr}
 8009880:	b087      	sub	sp, #28
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10b      	bne.n	80098aa <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	60fb      	str	r3, [r7, #12]
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
 80098a8:	e7fd      	b.n	80098a6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	689c      	ldr	r4, [r3, #8]
 80098ae:	f001 fd5b 	bl	800b368 <xTaskGetCurrentTaskHandle>
 80098b2:	4603      	mov	r3, r0
 80098b4:	429c      	cmp	r4, r3
 80098b6:	d107      	bne.n	80098c8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	1c5a      	adds	r2, r3, #1
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80098c2:	2301      	movs	r3, #1
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	e00c      	b.n	80098e2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6938      	ldr	r0, [r7, #16]
 80098cc:	f000 fb8e 	bl	8009fec <xQueueSemaphoreTake>
 80098d0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d004      	beq.n	80098e2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	1c5a      	adds	r2, r3, #1
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80098e2:	697b      	ldr	r3, [r7, #20]
	}
 80098e4:	4618      	mov	r0, r3
 80098e6:	371c      	adds	r7, #28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd90      	pop	{r4, r7, pc}

080098ec <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	@ 0x28
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10b      	bne.n	8009916 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	61bb      	str	r3, [r7, #24]
}
 8009910:	bf00      	nop
 8009912:	bf00      	nop
 8009914:	e7fd      	b.n	8009912 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	429a      	cmp	r2, r3
 800991c:	d90b      	bls.n	8009936 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	617b      	str	r3, [r7, #20]
}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	e7fd      	b.n	8009932 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009936:	2302      	movs	r3, #2
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	2100      	movs	r1, #0
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7ff fe3f 	bl	80095c4 <xQueueGenericCreateStatic>
 8009946:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009954:	69fb      	ldr	r3, [r7, #28]
	}
 8009956:	4618      	mov	r0, r3
 8009958:	3720      	adds	r7, #32
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800995e:	b580      	push	{r7, lr}
 8009960:	b086      	sub	sp, #24
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10b      	bne.n	8009986 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	613b      	str	r3, [r7, #16]
}
 8009980:	bf00      	nop
 8009982:	bf00      	nop
 8009984:	e7fd      	b.n	8009982 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	429a      	cmp	r2, r3
 800998c:	d90b      	bls.n	80099a6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	60fb      	str	r3, [r7, #12]
}
 80099a0:	bf00      	nop
 80099a2:	bf00      	nop
 80099a4:	e7fd      	b.n	80099a2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099a6:	2202      	movs	r2, #2
 80099a8:	2100      	movs	r1, #0
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff fe87 	bl	80096be <xQueueGenericCreate>
 80099b0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80099be:	697b      	ldr	r3, [r7, #20]
	}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08e      	sub	sp, #56	@ 0x38
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099d6:	2300      	movs	r3, #0
 80099d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10b      	bne.n	80099fc <xQueueGenericSend+0x34>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099f6:	bf00      	nop
 80099f8:	bf00      	nop
 80099fa:	e7fd      	b.n	80099f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d103      	bne.n	8009a0a <xQueueGenericSend+0x42>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <xQueueGenericSend+0x46>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e000      	b.n	8009a10 <xQueueGenericSend+0x48>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10b      	bne.n	8009a2c <xQueueGenericSend+0x64>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a26:	bf00      	nop
 8009a28:	bf00      	nop
 8009a2a:	e7fd      	b.n	8009a28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d103      	bne.n	8009a3a <xQueueGenericSend+0x72>
 8009a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <xQueueGenericSend+0x76>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <xQueueGenericSend+0x78>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10b      	bne.n	8009a5c <xQueueGenericSend+0x94>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	623b      	str	r3, [r7, #32]
}
 8009a56:	bf00      	nop
 8009a58:	bf00      	nop
 8009a5a:	e7fd      	b.n	8009a58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a5c:	f001 fc94 	bl	800b388 <xTaskGetSchedulerState>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d102      	bne.n	8009a6c <xQueueGenericSend+0xa4>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <xQueueGenericSend+0xa8>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e000      	b.n	8009a72 <xQueueGenericSend+0xaa>
 8009a70:	2300      	movs	r3, #0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10b      	bne.n	8009a8e <xQueueGenericSend+0xc6>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	61fb      	str	r3, [r7, #28]
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	e7fd      	b.n	8009a8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a8e:	f002 fc53 	bl	800c338 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d302      	bcc.n	8009aa4 <xQueueGenericSend+0xdc>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d129      	bne.n	8009af8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009aa4:	683a      	ldr	r2, [r7, #0]
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009aaa:	f000 fc6d 	bl	800a388 <prvCopyDataToQueue>
 8009aae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d010      	beq.n	8009ada <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aba:	3324      	adds	r3, #36	@ 0x24
 8009abc:	4618      	mov	r0, r3
 8009abe:	f001 fa8d 	bl	800afdc <xTaskRemoveFromEventList>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d013      	beq.n	8009af0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8009bc8 <xQueueGenericSend+0x200>)
 8009aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	e00a      	b.n	8009af0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d007      	beq.n	8009af0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ae0:	4b39      	ldr	r3, [pc, #228]	@ (8009bc8 <xQueueGenericSend+0x200>)
 8009ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009af0:	f002 fc54 	bl	800c39c <vPortExitCritical>
				return pdPASS;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e063      	b.n	8009bc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d103      	bne.n	8009b06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009afe:	f002 fc4d 	bl	800c39c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	e05c      	b.n	8009bc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d106      	bne.n	8009b1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b0c:	f107 0314 	add.w	r3, r7, #20
 8009b10:	4618      	mov	r0, r3
 8009b12:	f001 fac7 	bl	800b0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b16:	2301      	movs	r3, #1
 8009b18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b1a:	f002 fc3f 	bl	800c39c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b1e:	f001 f82f 	bl	800ab80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b22:	f002 fc09 	bl	800c338 <vPortEnterCritical>
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b2c:	b25b      	sxtb	r3, r3
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b32:	d103      	bne.n	8009b3c <xQueueGenericSend+0x174>
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b42:	b25b      	sxtb	r3, r3
 8009b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b48:	d103      	bne.n	8009b52 <xQueueGenericSend+0x18a>
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b52:	f002 fc23 	bl	800c39c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b56:	1d3a      	adds	r2, r7, #4
 8009b58:	f107 0314 	add.w	r3, r7, #20
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 fab6 	bl	800b0d0 <xTaskCheckForTimeOut>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d124      	bne.n	8009bb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b6c:	f000 fd04 	bl	800a578 <prvIsQueueFull>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d018      	beq.n	8009ba8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b78:	3310      	adds	r3, #16
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f001 f9da 	bl	800af38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b86:	f000 fc8f 	bl	800a4a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b8a:	f001 f807 	bl	800ab9c <xTaskResumeAll>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f47f af7c 	bne.w	8009a8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009b96:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc8 <xQueueGenericSend+0x200>)
 8009b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	e772      	b.n	8009a8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009baa:	f000 fc7d 	bl	800a4a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bae:	f000 fff5 	bl	800ab9c <xTaskResumeAll>
 8009bb2:	e76c      	b.n	8009a8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009bb6:	f000 fc77 	bl	800a4a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bba:	f000 ffef 	bl	800ab9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3738      	adds	r7, #56	@ 0x38
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b090      	sub	sp, #64	@ 0x40
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10b      	bne.n	8009bfc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	e7fd      	b.n	8009bf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d103      	bne.n	8009c0a <xQueueGenericSendFromISR+0x3e>
 8009c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <xQueueGenericSendFromISR+0x42>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e000      	b.n	8009c10 <xQueueGenericSendFromISR+0x44>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10b      	bne.n	8009c2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	e7fd      	b.n	8009c28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d103      	bne.n	8009c3a <xQueueGenericSendFromISR+0x6e>
 8009c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <xQueueGenericSendFromISR+0x72>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e000      	b.n	8009c40 <xQueueGenericSendFromISR+0x74>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10b      	bne.n	8009c5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	623b      	str	r3, [r7, #32]
}
 8009c56:	bf00      	nop
 8009c58:	bf00      	nop
 8009c5a:	e7fd      	b.n	8009c58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c5c:	f002 fc4c 	bl	800c4f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c60:	f3ef 8211 	mrs	r2, BASEPRI
 8009c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	61fa      	str	r2, [r7, #28]
 8009c76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d302      	bcc.n	8009c8e <xQueueGenericSendFromISR+0xc2>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d12f      	bne.n	8009cee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	68b9      	ldr	r1, [r7, #8]
 8009ca2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ca4:	f000 fb70 	bl	800a388 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ca8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb0:	d112      	bne.n	8009cd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d016      	beq.n	8009ce8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbc:	3324      	adds	r3, #36	@ 0x24
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 f98c 	bl	800afdc <xTaskRemoveFromEventList>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00e      	beq.n	8009ce8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	e007      	b.n	8009ce8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009cdc:	3301      	adds	r3, #1
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	b25a      	sxtb	r2, r3
 8009ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009cec:	e001      	b.n	8009cf2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009cfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3740      	adds	r7, #64	@ 0x40
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08e      	sub	sp, #56	@ 0x38
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10b      	bne.n	8009d34 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	623b      	str	r3, [r7, #32]
}
 8009d2e:	bf00      	nop
 8009d30:	bf00      	nop
 8009d32:	e7fd      	b.n	8009d30 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	61fb      	str	r3, [r7, #28]
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	e7fd      	b.n	8009d50 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <xQueueGiveFromISR+0x5c>
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <xQueueGiveFromISR+0x60>
 8009d64:	2301      	movs	r3, #1
 8009d66:	e000      	b.n	8009d6a <xQueueGiveFromISR+0x62>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10b      	bne.n	8009d86 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	61bb      	str	r3, [r7, #24]
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	e7fd      	b.n	8009d82 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d86:	f002 fbb7 	bl	800c4f8 <vPortValidateInterruptPriority>
	__asm volatile
 8009d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8009d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	617a      	str	r2, [r7, #20]
 8009da0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009da2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009daa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d22b      	bcs.n	8009e0e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd0:	d112      	bne.n	8009df8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d016      	beq.n	8009e08 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ddc:	3324      	adds	r3, #36	@ 0x24
 8009dde:	4618      	mov	r0, r3
 8009de0:	f001 f8fc 	bl	800afdc <xTaskRemoveFromEventList>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00e      	beq.n	8009e08 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00b      	beq.n	8009e08 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2201      	movs	r2, #1
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	e007      	b.n	8009e08 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	b25a      	sxtb	r2, r3
 8009e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e0c:	e001      	b.n	8009e12 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e14:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f383 8811 	msr	BASEPRI, r3
}
 8009e1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3738      	adds	r7, #56	@ 0x38
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08c      	sub	sp, #48	@ 0x30
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e34:	2300      	movs	r3, #0
 8009e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10b      	bne.n	8009e5a <xQueueReceive+0x32>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	623b      	str	r3, [r7, #32]
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	e7fd      	b.n	8009e56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d103      	bne.n	8009e68 <xQueueReceive+0x40>
 8009e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <xQueueReceive+0x44>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <xQueueReceive+0x46>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10b      	bne.n	8009e8a <xQueueReceive+0x62>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	61fb      	str	r3, [r7, #28]
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	e7fd      	b.n	8009e86 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e8a:	f001 fa7d 	bl	800b388 <xTaskGetSchedulerState>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d102      	bne.n	8009e9a <xQueueReceive+0x72>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <xQueueReceive+0x76>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e000      	b.n	8009ea0 <xQueueReceive+0x78>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10b      	bne.n	8009ebc <xQueueReceive+0x94>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	61bb      	str	r3, [r7, #24]
}
 8009eb6:	bf00      	nop
 8009eb8:	bf00      	nop
 8009eba:	e7fd      	b.n	8009eb8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ebc:	f002 fa3c 	bl	800c338 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01f      	beq.n	8009f0c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ed0:	f000 fac4 	bl	800a45c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed6:	1e5a      	subs	r2, r3, #1
 8009ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eda:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00f      	beq.n	8009f04 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee6:	3310      	adds	r3, #16
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 f877 	bl	800afdc <xTaskRemoveFromEventList>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d007      	beq.n	8009f04 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8009fe8 <xQueueReceive+0x1c0>)
 8009ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f04:	f002 fa4a 	bl	800c39c <vPortExitCritical>
				return pdPASS;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e069      	b.n	8009fe0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d103      	bne.n	8009f1a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f12:	f002 fa43 	bl	800c39c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e062      	b.n	8009fe0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d106      	bne.n	8009f2e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f20:	f107 0310 	add.w	r3, r7, #16
 8009f24:	4618      	mov	r0, r3
 8009f26:	f001 f8bd 	bl	800b0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f2e:	f002 fa35 	bl	800c39c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f32:	f000 fe25 	bl	800ab80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f36:	f002 f9ff 	bl	800c338 <vPortEnterCritical>
 8009f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f40:	b25b      	sxtb	r3, r3
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f46:	d103      	bne.n	8009f50 <xQueueReceive+0x128>
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f56:	b25b      	sxtb	r3, r3
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5c:	d103      	bne.n	8009f66 <xQueueReceive+0x13e>
 8009f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f66:	f002 fa19 	bl	800c39c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f6a:	1d3a      	adds	r2, r7, #4
 8009f6c:	f107 0310 	add.w	r3, r7, #16
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 f8ac 	bl	800b0d0 <xTaskCheckForTimeOut>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d123      	bne.n	8009fc6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f80:	f000 fae4 	bl	800a54c <prvIsQueueEmpty>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d017      	beq.n	8009fba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8c:	3324      	adds	r3, #36	@ 0x24
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	4611      	mov	r1, r2
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 ffd0 	bl	800af38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f9a:	f000 fa85 	bl	800a4a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f9e:	f000 fdfd 	bl	800ab9c <xTaskResumeAll>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d189      	bne.n	8009ebc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe8 <xQueueReceive+0x1c0>)
 8009faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	e780      	b.n	8009ebc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fbc:	f000 fa74 	bl	800a4a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fc0:	f000 fdec 	bl	800ab9c <xTaskResumeAll>
 8009fc4:	e77a      	b.n	8009ebc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fc8:	f000 fa6e 	bl	800a4a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fcc:	f000 fde6 	bl	800ab9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fd2:	f000 fabb 	bl	800a54c <prvIsQueueEmpty>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f43f af6f 	beq.w	8009ebc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3730      	adds	r7, #48	@ 0x30
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08e      	sub	sp, #56	@ 0x38
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009ffe:	2300      	movs	r3, #0
 800a000:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10b      	bne.n	800a020 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	623b      	str	r3, [r7, #32]
}
 800a01a:	bf00      	nop
 800a01c:	bf00      	nop
 800a01e:	e7fd      	b.n	800a01c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00b      	beq.n	800a040 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	61fb      	str	r3, [r7, #28]
}
 800a03a:	bf00      	nop
 800a03c:	bf00      	nop
 800a03e:	e7fd      	b.n	800a03c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a040:	f001 f9a2 	bl	800b388 <xTaskGetSchedulerState>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d102      	bne.n	800a050 <xQueueSemaphoreTake+0x64>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <xQueueSemaphoreTake+0x68>
 800a050:	2301      	movs	r3, #1
 800a052:	e000      	b.n	800a056 <xQueueSemaphoreTake+0x6a>
 800a054:	2300      	movs	r3, #0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	61bb      	str	r3, [r7, #24]
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	e7fd      	b.n	800a06e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a072:	f002 f961 	bl	800c338 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d024      	beq.n	800a0cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a084:	1e5a      	subs	r2, r3, #1
 800a086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a088:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d104      	bne.n	800a09c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a092:	f001 faf3 	bl	800b67c <pvTaskIncrementMutexHeldCount>
 800a096:	4602      	mov	r2, r0
 800a098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00f      	beq.n	800a0c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a6:	3310      	adds	r3, #16
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 ff97 	bl	800afdc <xTaskRemoveFromEventList>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d007      	beq.n	800a0c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0b4:	4b54      	ldr	r3, [pc, #336]	@ (800a208 <xQueueSemaphoreTake+0x21c>)
 800a0b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0c4:	f002 f96a 	bl	800c39c <vPortExitCritical>
				return pdPASS;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e098      	b.n	800a1fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d112      	bne.n	800a0f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00b      	beq.n	800a0f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	617b      	str	r3, [r7, #20]
}
 800a0ea:	bf00      	nop
 800a0ec:	bf00      	nop
 800a0ee:	e7fd      	b.n	800a0ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a0f0:	f002 f954 	bl	800c39c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e082      	b.n	800a1fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d106      	bne.n	800a10c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0fe:	f107 030c 	add.w	r3, r7, #12
 800a102:	4618      	mov	r0, r3
 800a104:	f000 ffce 	bl	800b0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a108:	2301      	movs	r3, #1
 800a10a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a10c:	f002 f946 	bl	800c39c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a110:	f000 fd36 	bl	800ab80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a114:	f002 f910 	bl	800c338 <vPortEnterCritical>
 800a118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a11e:	b25b      	sxtb	r3, r3
 800a120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a124:	d103      	bne.n	800a12e <xQueueSemaphoreTake+0x142>
 800a126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a134:	b25b      	sxtb	r3, r3
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13a:	d103      	bne.n	800a144 <xQueueSemaphoreTake+0x158>
 800a13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a144:	f002 f92a 	bl	800c39c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a148:	463a      	mov	r2, r7
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	4611      	mov	r1, r2
 800a150:	4618      	mov	r0, r3
 800a152:	f000 ffbd 	bl	800b0d0 <xTaskCheckForTimeOut>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d132      	bne.n	800a1c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a15c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a15e:	f000 f9f5 	bl	800a54c <prvIsQueueEmpty>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d026      	beq.n	800a1b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d109      	bne.n	800a184 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a170:	f002 f8e2 	bl	800c338 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	4618      	mov	r0, r3
 800a17a:	f001 f923 	bl	800b3c4 <xTaskPriorityInherit>
 800a17e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a180:	f002 f90c 	bl	800c39c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a186:	3324      	adds	r3, #36	@ 0x24
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 fed3 	bl	800af38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a192:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a194:	f000 f988 	bl	800a4a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a198:	f000 fd00 	bl	800ab9c <xTaskResumeAll>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f47f af67 	bne.w	800a072 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a1a4:	4b18      	ldr	r3, [pc, #96]	@ (800a208 <xQueueSemaphoreTake+0x21c>)
 800a1a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	e75d      	b.n	800a072 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a1b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1b8:	f000 f976 	bl	800a4a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1bc:	f000 fcee 	bl	800ab9c <xTaskResumeAll>
 800a1c0:	e757      	b.n	800a072 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a1c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1c4:	f000 f970 	bl	800a4a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1c8:	f000 fce8 	bl	800ab9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1ce:	f000 f9bd 	bl	800a54c <prvIsQueueEmpty>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f43f af4c 	beq.w	800a072 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00d      	beq.n	800a1fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a1e0:	f002 f8aa 	bl	800c338 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a1e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1e6:	f000 f8b7 	bl	800a358 <prvGetDisinheritPriorityAfterTimeout>
 800a1ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f001 f9be 	bl	800b574 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a1f8:	f002 f8d0 	bl	800c39c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3738      	adds	r7, #56	@ 0x38
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08e      	sub	sp, #56	@ 0x38
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10b      	bne.n	800a23a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	623b      	str	r3, [r7, #32]
}
 800a234:	bf00      	nop
 800a236:	bf00      	nop
 800a238:	e7fd      	b.n	800a236 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d103      	bne.n	800a248 <xQueueReceiveFromISR+0x3c>
 800a240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <xQueueReceiveFromISR+0x40>
 800a248:	2301      	movs	r3, #1
 800a24a:	e000      	b.n	800a24e <xQueueReceiveFromISR+0x42>
 800a24c:	2300      	movs	r3, #0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10b      	bne.n	800a26a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	61fb      	str	r3, [r7, #28]
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop
 800a268:	e7fd      	b.n	800a266 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a26a:	f002 f945 	bl	800c4f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a26e:	f3ef 8211 	mrs	r2, BASEPRI
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	61ba      	str	r2, [r7, #24]
 800a284:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a286:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a288:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a292:	2b00      	cmp	r3, #0
 800a294:	d02f      	beq.n	800a2f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a29c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2a4:	f000 f8da 	bl	800a45c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2aa:	1e5a      	subs	r2, r3, #1
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a2b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b8:	d112      	bne.n	800a2e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d016      	beq.n	800a2f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c4:	3310      	adds	r3, #16
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fe88 	bl	800afdc <xTaskRemoveFromEventList>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00e      	beq.n	800a2f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	e007      	b.n	800a2f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	b25a      	sxtb	r2, r3
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2f4:	e001      	b.n	800a2fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f383 8811 	msr	BASEPRI, r3
}
 800a304:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3738      	adds	r7, #56	@ 0x38
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10b      	bne.n	800a33a <vQueueDelete+0x2a>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	60bb      	str	r3, [r7, #8]
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	e7fd      	b.n	800a336 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 f95e 	bl	800a5fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f002 f9e4 	bl	800c718 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a350:	bf00      	nop
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a364:	2b00      	cmp	r3, #0
 800a366:	d006      	beq.n	800a376 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	e001      	b.n	800a37a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a376:	2300      	movs	r3, #0
 800a378:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a37a:	68fb      	ldr	r3, [r7, #12]
	}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a394:	2300      	movs	r3, #0
 800a396:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10d      	bne.n	800a3c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d14d      	bne.n	800a44a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f001 f86e 	bl	800b494 <xTaskPriorityDisinherit>
 800a3b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	609a      	str	r2, [r3, #8]
 800a3c0:	e043      	b.n	800a44a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d119      	bne.n	800a3fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6858      	ldr	r0, [r3, #4]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	f003 f927 	bl	800d626 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d32b      	bcc.n	800a44a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	605a      	str	r2, [r3, #4]
 800a3fa:	e026      	b.n	800a44a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	68d8      	ldr	r0, [r3, #12]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a404:	461a      	mov	r2, r3
 800a406:	68b9      	ldr	r1, [r7, #8]
 800a408:	f003 f90d 	bl	800d626 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	68da      	ldr	r2, [r3, #12]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a414:	425b      	negs	r3, r3
 800a416:	441a      	add	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	68da      	ldr	r2, [r3, #12]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	429a      	cmp	r2, r3
 800a426:	d207      	bcs.n	800a438 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a430:	425b      	negs	r3, r3
 800a432:	441a      	add	r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d105      	bne.n	800a44a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	3b01      	subs	r3, #1
 800a448:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a452:	697b      	ldr	r3, [r7, #20]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d018      	beq.n	800a4a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a476:	441a      	add	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	429a      	cmp	r2, r3
 800a486:	d303      	bcc.n	800a490 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68d9      	ldr	r1, [r3, #12]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a498:	461a      	mov	r2, r3
 800a49a:	6838      	ldr	r0, [r7, #0]
 800a49c:	f003 f8c3 	bl	800d626 <memcpy>
	}
}
 800a4a0:	bf00      	nop
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a4b0:	f001 ff42 	bl	800c338 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4bc:	e011      	b.n	800a4e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d012      	beq.n	800a4ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	3324      	adds	r3, #36	@ 0x24
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 fd86 	bl	800afdc <xTaskRemoveFromEventList>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a4d6:	f000 fe5f 	bl	800b198 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	dce9      	bgt.n	800a4be <prvUnlockQueue+0x16>
 800a4ea:	e000      	b.n	800a4ee <prvUnlockQueue+0x46>
					break;
 800a4ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	22ff      	movs	r2, #255	@ 0xff
 800a4f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a4f6:	f001 ff51 	bl	800c39c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4fa:	f001 ff1d 	bl	800c338 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a504:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a506:	e011      	b.n	800a52c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d012      	beq.n	800a536 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3310      	adds	r3, #16
 800a514:	4618      	mov	r0, r3
 800a516:	f000 fd61 	bl	800afdc <xTaskRemoveFromEventList>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a520:	f000 fe3a 	bl	800b198 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	3b01      	subs	r3, #1
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a52c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a530:	2b00      	cmp	r3, #0
 800a532:	dce9      	bgt.n	800a508 <prvUnlockQueue+0x60>
 800a534:	e000      	b.n	800a538 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a536:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	22ff      	movs	r2, #255	@ 0xff
 800a53c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a540:	f001 ff2c 	bl	800c39c <vPortExitCritical>
}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a554:	f001 fef0 	bl	800c338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d102      	bne.n	800a566 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a560:	2301      	movs	r3, #1
 800a562:	60fb      	str	r3, [r7, #12]
 800a564:	e001      	b.n	800a56a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a56a:	f001 ff17 	bl	800c39c <vPortExitCritical>

	return xReturn;
 800a56e:	68fb      	ldr	r3, [r7, #12]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a580:	f001 feda 	bl	800c338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d102      	bne.n	800a596 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a590:	2301      	movs	r3, #1
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	e001      	b.n	800a59a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a59a:	f001 feff 	bl	800c39c <vPortExitCritical>

	return xReturn;
 800a59e:	68fb      	ldr	r3, [r7, #12]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	e014      	b.n	800a5e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a5b8:	4a0f      	ldr	r2, [pc, #60]	@ (800a5f8 <vQueueAddToRegistry+0x50>)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10b      	bne.n	800a5dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a5c4:	490c      	ldr	r1, [pc, #48]	@ (800a5f8 <vQueueAddToRegistry+0x50>)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a5ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a5f8 <vQueueAddToRegistry+0x50>)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	00db      	lsls	r3, r3, #3
 800a5d4:	4413      	add	r3, r2
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a5da:	e006      	b.n	800a5ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b07      	cmp	r3, #7
 800a5e6:	d9e7      	bls.n	800a5b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	20000d00 	.word	0x20000d00

0800a5fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	e016      	b.n	800a638 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a60a:	4a10      	ldr	r2, [pc, #64]	@ (800a64c <vQueueUnregisterQueue+0x50>)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	00db      	lsls	r3, r3, #3
 800a610:	4413      	add	r3, r2
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d10b      	bne.n	800a632 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a61a:	4a0c      	ldr	r2, [pc, #48]	@ (800a64c <vQueueUnregisterQueue+0x50>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2100      	movs	r1, #0
 800a620:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a624:	4a09      	ldr	r2, [pc, #36]	@ (800a64c <vQueueUnregisterQueue+0x50>)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	4413      	add	r3, r2
 800a62c:	2200      	movs	r2, #0
 800a62e:	605a      	str	r2, [r3, #4]
				break;
 800a630:	e006      	b.n	800a640 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3301      	adds	r3, #1
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2b07      	cmp	r3, #7
 800a63c:	d9e5      	bls.n	800a60a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	20000d00 	.word	0x20000d00

0800a650 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a660:	f001 fe6a 	bl	800c338 <vPortEnterCritical>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a66a:	b25b      	sxtb	r3, r3
 800a66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a670:	d103      	bne.n	800a67a <vQueueWaitForMessageRestricted+0x2a>
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a680:	b25b      	sxtb	r3, r3
 800a682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a686:	d103      	bne.n	800a690 <vQueueWaitForMessageRestricted+0x40>
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a690:	f001 fe84 	bl	800c39c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d106      	bne.n	800a6aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	3324      	adds	r3, #36	@ 0x24
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 fc6d 	bl	800af84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a6aa:	6978      	ldr	r0, [r7, #20]
 800a6ac:	f7ff fefc 	bl	800a4a8 <prvUnlockQueue>
	}
 800a6b0:	bf00      	nop
 800a6b2:	3718      	adds	r7, #24
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08e      	sub	sp, #56	@ 0x38
 800a6bc:	af04      	add	r7, sp, #16
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10b      	bne.n	800a6e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	623b      	str	r3, [r7, #32]
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10b      	bne.n	800a702 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	61fb      	str	r3, [r7, #28]
}
 800a6fc:	bf00      	nop
 800a6fe:	bf00      	nop
 800a700:	e7fd      	b.n	800a6fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a702:	23a8      	movs	r3, #168	@ 0xa8
 800a704:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	2ba8      	cmp	r3, #168	@ 0xa8
 800a70a:	d00b      	beq.n	800a724 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	61bb      	str	r3, [r7, #24]
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	e7fd      	b.n	800a720 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a724:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01e      	beq.n	800a76a <xTaskCreateStatic+0xb2>
 800a72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d01b      	beq.n	800a76a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a734:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a738:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a73a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a744:	2300      	movs	r3, #0
 800a746:	9303      	str	r3, [sp, #12]
 800a748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74a:	9302      	str	r3, [sp, #8]
 800a74c:	f107 0314 	add.w	r3, r7, #20
 800a750:	9301      	str	r3, [sp, #4]
 800a752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 f851 	bl	800a804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a762:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a764:	f000 f8f6 	bl	800a954 <prvAddNewTaskToReadyList>
 800a768:	e001      	b.n	800a76e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a76a:	2300      	movs	r3, #0
 800a76c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a76e:	697b      	ldr	r3, [r7, #20]
	}
 800a770:	4618      	mov	r0, r3
 800a772:	3728      	adds	r7, #40	@ 0x28
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08c      	sub	sp, #48	@ 0x30
 800a77c:	af04      	add	r7, sp, #16
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	603b      	str	r3, [r7, #0]
 800a784:	4613      	mov	r3, r2
 800a786:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a788:	88fb      	ldrh	r3, [r7, #6]
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f001 fef5 	bl	800c57c <pvPortMalloc>
 800a792:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00e      	beq.n	800a7b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a79a:	20a8      	movs	r0, #168	@ 0xa8
 800a79c:	f001 feee 	bl	800c57c <pvPortMalloc>
 800a7a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d003      	beq.n	800a7b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	631a      	str	r2, [r3, #48]	@ 0x30
 800a7ae:	e005      	b.n	800a7bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a7b0:	6978      	ldr	r0, [r7, #20]
 800a7b2:	f001 ffb1 	bl	800c718 <vPortFree>
 800a7b6:	e001      	b.n	800a7bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d017      	beq.n	800a7f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a7ca:	88fa      	ldrh	r2, [r7, #6]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	9303      	str	r3, [sp, #12]
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	9302      	str	r3, [sp, #8]
 800a7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 f80f 	bl	800a804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7e6:	69f8      	ldr	r0, [r7, #28]
 800a7e8:	f000 f8b4 	bl	800a954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	61bb      	str	r3, [r7, #24]
 800a7f0:	e002      	b.n	800a7f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a7f8:	69bb      	ldr	r3, [r7, #24]
	}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3720      	adds	r7, #32
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
	...

0800a804 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a814:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	461a      	mov	r2, r3
 800a81c:	21a5      	movs	r1, #165	@ 0xa5
 800a81e:	f002 fe2c 	bl	800d47a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a82c:	3b01      	subs	r3, #1
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	f023 0307 	bic.w	r3, r3, #7
 800a83a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	f003 0307 	and.w	r3, r3, #7
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	617b      	str	r3, [r7, #20]
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	e7fd      	b.n	800a85a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d01f      	beq.n	800a8a4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a864:	2300      	movs	r3, #0
 800a866:	61fb      	str	r3, [r7, #28]
 800a868:	e012      	b.n	800a890 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	4413      	add	r3, r2
 800a870:	7819      	ldrb	r1, [r3, #0]
 800a872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	4413      	add	r3, r2
 800a878:	3334      	adds	r3, #52	@ 0x34
 800a87a:	460a      	mov	r2, r1
 800a87c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	4413      	add	r3, r2
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d006      	beq.n	800a898 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	3301      	adds	r3, #1
 800a88e:	61fb      	str	r3, [r7, #28]
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	2b0f      	cmp	r3, #15
 800a894:	d9e9      	bls.n	800a86a <prvInitialiseNewTask+0x66>
 800a896:	e000      	b.n	800a89a <prvInitialiseNewTask+0x96>
			{
				break;
 800a898:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a8a2:	e003      	b.n	800a8ac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ae:	2b37      	cmp	r3, #55	@ 0x37
 800a8b0:	d901      	bls.n	800a8b6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8b2:	2337      	movs	r3, #55	@ 0x37
 800a8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe fd7b 	bl	80093c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d4:	3318      	adds	r3, #24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe fd76 	bl	80093c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	3354      	adds	r3, #84	@ 0x54
 800a906:	224c      	movs	r2, #76	@ 0x4c
 800a908:	2100      	movs	r1, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f002 fdb5 	bl	800d47a <memset>
 800a910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a912:	4a0d      	ldr	r2, [pc, #52]	@ (800a948 <prvInitialiseNewTask+0x144>)
 800a914:	659a      	str	r2, [r3, #88]	@ 0x58
 800a916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a918:	4a0c      	ldr	r2, [pc, #48]	@ (800a94c <prvInitialiseNewTask+0x148>)
 800a91a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91e:	4a0c      	ldr	r2, [pc, #48]	@ (800a950 <prvInitialiseNewTask+0x14c>)
 800a920:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	68f9      	ldr	r1, [r7, #12]
 800a926:	69b8      	ldr	r0, [r7, #24]
 800a928:	f001 fbd8 	bl	800c0dc <pxPortInitialiseStack>
 800a92c:	4602      	mov	r2, r0
 800a92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a930:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a93c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a93e:	bf00      	nop
 800a940:	3720      	adds	r7, #32
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20004f94 	.word	0x20004f94
 800a94c:	20004ffc 	.word	0x20004ffc
 800a950:	20005064 	.word	0x20005064

0800a954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a95c:	f001 fcec 	bl	800c338 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a960:	4b2d      	ldr	r3, [pc, #180]	@ (800aa18 <prvAddNewTaskToReadyList+0xc4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3301      	adds	r3, #1
 800a966:	4a2c      	ldr	r2, [pc, #176]	@ (800aa18 <prvAddNewTaskToReadyList+0xc4>)
 800a968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a96a:	4b2c      	ldr	r3, [pc, #176]	@ (800aa1c <prvAddNewTaskToReadyList+0xc8>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d109      	bne.n	800a986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a972:	4a2a      	ldr	r2, [pc, #168]	@ (800aa1c <prvAddNewTaskToReadyList+0xc8>)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a978:	4b27      	ldr	r3, [pc, #156]	@ (800aa18 <prvAddNewTaskToReadyList+0xc4>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d110      	bne.n	800a9a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a980:	f000 fc2e 	bl	800b1e0 <prvInitialiseTaskLists>
 800a984:	e00d      	b.n	800a9a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a986:	4b26      	ldr	r3, [pc, #152]	@ (800aa20 <prvAddNewTaskToReadyList+0xcc>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a98e:	4b23      	ldr	r3, [pc, #140]	@ (800aa1c <prvAddNewTaskToReadyList+0xc8>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a998:	429a      	cmp	r2, r3
 800a99a:	d802      	bhi.n	800a9a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a99c:	4a1f      	ldr	r2, [pc, #124]	@ (800aa1c <prvAddNewTaskToReadyList+0xc8>)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9a2:	4b20      	ldr	r3, [pc, #128]	@ (800aa24 <prvAddNewTaskToReadyList+0xd0>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	4a1e      	ldr	r2, [pc, #120]	@ (800aa24 <prvAddNewTaskToReadyList+0xd0>)
 800a9aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a9ac:	4b1d      	ldr	r3, [pc, #116]	@ (800aa24 <prvAddNewTaskToReadyList+0xd0>)
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b8:	4b1b      	ldr	r3, [pc, #108]	@ (800aa28 <prvAddNewTaskToReadyList+0xd4>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d903      	bls.n	800a9c8 <prvAddNewTaskToReadyList+0x74>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c4:	4a18      	ldr	r2, [pc, #96]	@ (800aa28 <prvAddNewTaskToReadyList+0xd4>)
 800a9c6:	6013      	str	r3, [r2, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4a15      	ldr	r2, [pc, #84]	@ (800aa2c <prvAddNewTaskToReadyList+0xd8>)
 800a9d6:	441a      	add	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4610      	mov	r0, r2
 800a9e0:	f7fe fcff 	bl	80093e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9e4:	f001 fcda 	bl	800c39c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9e8:	4b0d      	ldr	r3, [pc, #52]	@ (800aa20 <prvAddNewTaskToReadyList+0xcc>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00e      	beq.n	800aa0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800aa1c <prvAddNewTaskToReadyList+0xc8>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d207      	bcs.n	800aa0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800aa30 <prvAddNewTaskToReadyList+0xdc>)
 800aa00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa04:	601a      	str	r2, [r3, #0]
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa0e:	bf00      	nop
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	20001214 	.word	0x20001214
 800aa1c:	20000d40 	.word	0x20000d40
 800aa20:	20001220 	.word	0x20001220
 800aa24:	20001230 	.word	0x20001230
 800aa28:	2000121c 	.word	0x2000121c
 800aa2c:	20000d44 	.word	0x20000d44
 800aa30:	e000ed04 	.word	0xe000ed04

0800aa34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d018      	beq.n	800aa78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa46:	4b14      	ldr	r3, [pc, #80]	@ (800aa98 <vTaskDelay+0x64>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00b      	beq.n	800aa66 <vTaskDelay+0x32>
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	60bb      	str	r3, [r7, #8]
}
 800aa60:	bf00      	nop
 800aa62:	bf00      	nop
 800aa64:	e7fd      	b.n	800aa62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa66:	f000 f88b 	bl	800ab80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 ff87 	bl	800b980 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa72:	f000 f893 	bl	800ab9c <xTaskResumeAll>
 800aa76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d107      	bne.n	800aa8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800aa7e:	4b07      	ldr	r3, [pc, #28]	@ (800aa9c <vTaskDelay+0x68>)
 800aa80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa8e:	bf00      	nop
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	2000123c 	.word	0x2000123c
 800aa9c:	e000ed04 	.word	0xe000ed04

0800aaa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08a      	sub	sp, #40	@ 0x28
 800aaa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aaae:	463a      	mov	r2, r7
 800aab0:	1d39      	adds	r1, r7, #4
 800aab2:	f107 0308 	add.w	r3, r7, #8
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe fc32 	bl	8009320 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	9202      	str	r2, [sp, #8]
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	2300      	movs	r3, #0
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	2300      	movs	r3, #0
 800aacc:	460a      	mov	r2, r1
 800aace:	4924      	ldr	r1, [pc, #144]	@ (800ab60 <vTaskStartScheduler+0xc0>)
 800aad0:	4824      	ldr	r0, [pc, #144]	@ (800ab64 <vTaskStartScheduler+0xc4>)
 800aad2:	f7ff fdf1 	bl	800a6b8 <xTaskCreateStatic>
 800aad6:	4603      	mov	r3, r0
 800aad8:	4a23      	ldr	r2, [pc, #140]	@ (800ab68 <vTaskStartScheduler+0xc8>)
 800aada:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aadc:	4b22      	ldr	r3, [pc, #136]	@ (800ab68 <vTaskStartScheduler+0xc8>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aae4:	2301      	movs	r3, #1
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	e001      	b.n	800aaee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d102      	bne.n	800aafa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aaf4:	f000 ff98 	bl	800ba28 <xTimerCreateTimerTask>
 800aaf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d11b      	bne.n	800ab38 <vTaskStartScheduler+0x98>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	613b      	str	r3, [r7, #16]
}
 800ab12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab14:	4b15      	ldr	r3, [pc, #84]	@ (800ab6c <vTaskStartScheduler+0xcc>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3354      	adds	r3, #84	@ 0x54
 800ab1a:	4a15      	ldr	r2, [pc, #84]	@ (800ab70 <vTaskStartScheduler+0xd0>)
 800ab1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab1e:	4b15      	ldr	r3, [pc, #84]	@ (800ab74 <vTaskStartScheduler+0xd4>)
 800ab20:	f04f 32ff 	mov.w	r2, #4294967295
 800ab24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab26:	4b14      	ldr	r3, [pc, #80]	@ (800ab78 <vTaskStartScheduler+0xd8>)
 800ab28:	2201      	movs	r2, #1
 800ab2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab2c:	4b13      	ldr	r3, [pc, #76]	@ (800ab7c <vTaskStartScheduler+0xdc>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab32:	f001 fb5d 	bl	800c1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab36:	e00f      	b.n	800ab58 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3e:	d10b      	bne.n	800ab58 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	60fb      	str	r3, [r7, #12]
}
 800ab52:	bf00      	nop
 800ab54:	bf00      	nop
 800ab56:	e7fd      	b.n	800ab54 <vTaskStartScheduler+0xb4>
}
 800ab58:	bf00      	nop
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	0800ffe4 	.word	0x0800ffe4
 800ab64:	0800b1b1 	.word	0x0800b1b1
 800ab68:	20001238 	.word	0x20001238
 800ab6c:	20000d40 	.word	0x20000d40
 800ab70:	2000001c 	.word	0x2000001c
 800ab74:	20001234 	.word	0x20001234
 800ab78:	20001220 	.word	0x20001220
 800ab7c:	20001218 	.word	0x20001218

0800ab80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab80:	b480      	push	{r7}
 800ab82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ab84:	4b04      	ldr	r3, [pc, #16]	@ (800ab98 <vTaskSuspendAll+0x18>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	4a03      	ldr	r2, [pc, #12]	@ (800ab98 <vTaskSuspendAll+0x18>)
 800ab8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ab8e:	bf00      	nop
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	2000123c 	.word	0x2000123c

0800ab9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abaa:	4b42      	ldr	r3, [pc, #264]	@ (800acb4 <xTaskResumeAll+0x118>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10b      	bne.n	800abca <xTaskResumeAll+0x2e>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	603b      	str	r3, [r7, #0]
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop
 800abc8:	e7fd      	b.n	800abc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800abca:	f001 fbb5 	bl	800c338 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800abce:	4b39      	ldr	r3, [pc, #228]	@ (800acb4 <xTaskResumeAll+0x118>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3b01      	subs	r3, #1
 800abd4:	4a37      	ldr	r2, [pc, #220]	@ (800acb4 <xTaskResumeAll+0x118>)
 800abd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abd8:	4b36      	ldr	r3, [pc, #216]	@ (800acb4 <xTaskResumeAll+0x118>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d162      	bne.n	800aca6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800abe0:	4b35      	ldr	r3, [pc, #212]	@ (800acb8 <xTaskResumeAll+0x11c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d05e      	beq.n	800aca6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abe8:	e02f      	b.n	800ac4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abea:	4b34      	ldr	r3, [pc, #208]	@ (800acbc <xTaskResumeAll+0x120>)
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3318      	adds	r3, #24
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe fc50 	bl	800949c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3304      	adds	r3, #4
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe fc4b 	bl	800949c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac0a:	4b2d      	ldr	r3, [pc, #180]	@ (800acc0 <xTaskResumeAll+0x124>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d903      	bls.n	800ac1a <xTaskResumeAll+0x7e>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac16:	4a2a      	ldr	r2, [pc, #168]	@ (800acc0 <xTaskResumeAll+0x124>)
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4a27      	ldr	r2, [pc, #156]	@ (800acc4 <xTaskResumeAll+0x128>)
 800ac28:	441a      	add	r2, r3
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f7fe fbd6 	bl	80093e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac3a:	4b23      	ldr	r3, [pc, #140]	@ (800acc8 <xTaskResumeAll+0x12c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d302      	bcc.n	800ac4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ac44:	4b21      	ldr	r3, [pc, #132]	@ (800accc <xTaskResumeAll+0x130>)
 800ac46:	2201      	movs	r2, #1
 800ac48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac4a:	4b1c      	ldr	r3, [pc, #112]	@ (800acbc <xTaskResumeAll+0x120>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1cb      	bne.n	800abea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac58:	f000 fb66 	bl	800b328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ac5c:	4b1c      	ldr	r3, [pc, #112]	@ (800acd0 <xTaskResumeAll+0x134>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d010      	beq.n	800ac8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac68:	f000 f846 	bl	800acf8 <xTaskIncrementTick>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ac72:	4b16      	ldr	r3, [pc, #88]	@ (800accc <xTaskResumeAll+0x130>)
 800ac74:	2201      	movs	r2, #1
 800ac76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1f1      	bne.n	800ac68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ac84:	4b12      	ldr	r3, [pc, #72]	@ (800acd0 <xTaskResumeAll+0x134>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac8a:	4b10      	ldr	r3, [pc, #64]	@ (800accc <xTaskResumeAll+0x130>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d009      	beq.n	800aca6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac92:	2301      	movs	r3, #1
 800ac94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac96:	4b0f      	ldr	r3, [pc, #60]	@ (800acd4 <xTaskResumeAll+0x138>)
 800ac98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aca6:	f001 fb79 	bl	800c39c <vPortExitCritical>

	return xAlreadyYielded;
 800acaa:	68bb      	ldr	r3, [r7, #8]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	2000123c 	.word	0x2000123c
 800acb8:	20001214 	.word	0x20001214
 800acbc:	200011d4 	.word	0x200011d4
 800acc0:	2000121c 	.word	0x2000121c
 800acc4:	20000d44 	.word	0x20000d44
 800acc8:	20000d40 	.word	0x20000d40
 800accc:	20001228 	.word	0x20001228
 800acd0:	20001224 	.word	0x20001224
 800acd4:	e000ed04 	.word	0xe000ed04

0800acd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800acde:	4b05      	ldr	r3, [pc, #20]	@ (800acf4 <xTaskGetTickCount+0x1c>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ace4:	687b      	ldr	r3, [r7, #4]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20001218 	.word	0x20001218

0800acf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad02:	4b4f      	ldr	r3, [pc, #316]	@ (800ae40 <xTaskIncrementTick+0x148>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f040 8090 	bne.w	800ae2c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad0c:	4b4d      	ldr	r3, [pc, #308]	@ (800ae44 <xTaskIncrementTick+0x14c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3301      	adds	r3, #1
 800ad12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad14:	4a4b      	ldr	r2, [pc, #300]	@ (800ae44 <xTaskIncrementTick+0x14c>)
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d121      	bne.n	800ad64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad20:	4b49      	ldr	r3, [pc, #292]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00b      	beq.n	800ad42 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	603b      	str	r3, [r7, #0]
}
 800ad3c:	bf00      	nop
 800ad3e:	bf00      	nop
 800ad40:	e7fd      	b.n	800ad3e <xTaskIncrementTick+0x46>
 800ad42:	4b41      	ldr	r3, [pc, #260]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	4b40      	ldr	r3, [pc, #256]	@ (800ae4c <xTaskIncrementTick+0x154>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a3e      	ldr	r2, [pc, #248]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	4a3e      	ldr	r2, [pc, #248]	@ (800ae4c <xTaskIncrementTick+0x154>)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	4b3e      	ldr	r3, [pc, #248]	@ (800ae50 <xTaskIncrementTick+0x158>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	4a3c      	ldr	r2, [pc, #240]	@ (800ae50 <xTaskIncrementTick+0x158>)
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	f000 fae2 	bl	800b328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ad64:	4b3b      	ldr	r3, [pc, #236]	@ (800ae54 <xTaskIncrementTick+0x15c>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d349      	bcc.n	800ae02 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad6e:	4b36      	ldr	r3, [pc, #216]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d104      	bne.n	800ad82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad78:	4b36      	ldr	r3, [pc, #216]	@ (800ae54 <xTaskIncrementTick+0x15c>)
 800ad7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7e:	601a      	str	r2, [r3, #0]
					break;
 800ad80:	e03f      	b.n	800ae02 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad82:	4b31      	ldr	r3, [pc, #196]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d203      	bcs.n	800ada2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad9a:	4a2e      	ldr	r2, [pc, #184]	@ (800ae54 <xTaskIncrementTick+0x15c>)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ada0:	e02f      	b.n	800ae02 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	3304      	adds	r3, #4
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe fb78 	bl	800949c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d004      	beq.n	800adbe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	3318      	adds	r3, #24
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe fb6f 	bl	800949c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc2:	4b25      	ldr	r3, [pc, #148]	@ (800ae58 <xTaskIncrementTick+0x160>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d903      	bls.n	800add2 <xTaskIncrementTick+0xda>
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adce:	4a22      	ldr	r2, [pc, #136]	@ (800ae58 <xTaskIncrementTick+0x160>)
 800add0:	6013      	str	r3, [r2, #0]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4a1f      	ldr	r2, [pc, #124]	@ (800ae5c <xTaskIncrementTick+0x164>)
 800ade0:	441a      	add	r2, r3
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	3304      	adds	r3, #4
 800ade6:	4619      	mov	r1, r3
 800ade8:	4610      	mov	r0, r2
 800adea:	f7fe fafa 	bl	80093e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae60 <xTaskIncrementTick+0x168>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d3b8      	bcc.n	800ad6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800adfc:	2301      	movs	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae00:	e7b5      	b.n	800ad6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae02:	4b17      	ldr	r3, [pc, #92]	@ (800ae60 <xTaskIncrementTick+0x168>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae08:	4914      	ldr	r1, [pc, #80]	@ (800ae5c <xTaskIncrementTick+0x164>)
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d901      	bls.n	800ae1e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae1e:	4b11      	ldr	r3, [pc, #68]	@ (800ae64 <xTaskIncrementTick+0x16c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d007      	beq.n	800ae36 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ae26:	2301      	movs	r3, #1
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e004      	b.n	800ae36 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae2c:	4b0e      	ldr	r3, [pc, #56]	@ (800ae68 <xTaskIncrementTick+0x170>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	3301      	adds	r3, #1
 800ae32:	4a0d      	ldr	r2, [pc, #52]	@ (800ae68 <xTaskIncrementTick+0x170>)
 800ae34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae36:	697b      	ldr	r3, [r7, #20]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	2000123c 	.word	0x2000123c
 800ae44:	20001218 	.word	0x20001218
 800ae48:	200011cc 	.word	0x200011cc
 800ae4c:	200011d0 	.word	0x200011d0
 800ae50:	2000122c 	.word	0x2000122c
 800ae54:	20001234 	.word	0x20001234
 800ae58:	2000121c 	.word	0x2000121c
 800ae5c:	20000d44 	.word	0x20000d44
 800ae60:	20000d40 	.word	0x20000d40
 800ae64:	20001228 	.word	0x20001228
 800ae68:	20001224 	.word	0x20001224

0800ae6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ae72:	4b2b      	ldr	r3, [pc, #172]	@ (800af20 <vTaskSwitchContext+0xb4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae7a:	4b2a      	ldr	r3, [pc, #168]	@ (800af24 <vTaskSwitchContext+0xb8>)
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae80:	e047      	b.n	800af12 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ae82:	4b28      	ldr	r3, [pc, #160]	@ (800af24 <vTaskSwitchContext+0xb8>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae88:	4b27      	ldr	r3, [pc, #156]	@ (800af28 <vTaskSwitchContext+0xbc>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	e011      	b.n	800aeb4 <vTaskSwitchContext+0x48>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10b      	bne.n	800aeae <vTaskSwitchContext+0x42>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	607b      	str	r3, [r7, #4]
}
 800aea8:	bf00      	nop
 800aeaa:	bf00      	nop
 800aeac:	e7fd      	b.n	800aeaa <vTaskSwitchContext+0x3e>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	491d      	ldr	r1, [pc, #116]	@ (800af2c <vTaskSwitchContext+0xc0>)
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	440b      	add	r3, r1
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0e3      	beq.n	800ae90 <vTaskSwitchContext+0x24>
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4a16      	ldr	r2, [pc, #88]	@ (800af2c <vTaskSwitchContext+0xc0>)
 800aed4:	4413      	add	r3, r2
 800aed6:	60bb      	str	r3, [r7, #8]
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	605a      	str	r2, [r3, #4]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	3308      	adds	r3, #8
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d104      	bne.n	800aef8 <vTaskSwitchContext+0x8c>
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	605a      	str	r2, [r3, #4]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	4a0c      	ldr	r2, [pc, #48]	@ (800af30 <vTaskSwitchContext+0xc4>)
 800af00:	6013      	str	r3, [r2, #0]
 800af02:	4a09      	ldr	r2, [pc, #36]	@ (800af28 <vTaskSwitchContext+0xbc>)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af08:	4b09      	ldr	r3, [pc, #36]	@ (800af30 <vTaskSwitchContext+0xc4>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3354      	adds	r3, #84	@ 0x54
 800af0e:	4a09      	ldr	r2, [pc, #36]	@ (800af34 <vTaskSwitchContext+0xc8>)
 800af10:	6013      	str	r3, [r2, #0]
}
 800af12:	bf00      	nop
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	2000123c 	.word	0x2000123c
 800af24:	20001228 	.word	0x20001228
 800af28:	2000121c 	.word	0x2000121c
 800af2c:	20000d44 	.word	0x20000d44
 800af30:	20000d40 	.word	0x20000d40
 800af34:	2000001c 	.word	0x2000001c

0800af38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10b      	bne.n	800af60 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	60fb      	str	r3, [r7, #12]
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	e7fd      	b.n	800af5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af60:	4b07      	ldr	r3, [pc, #28]	@ (800af80 <vTaskPlaceOnEventList+0x48>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3318      	adds	r3, #24
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7fe fa5e 	bl	800942a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af6e:	2101      	movs	r1, #1
 800af70:	6838      	ldr	r0, [r7, #0]
 800af72:	f000 fd05 	bl	800b980 <prvAddCurrentTaskToDelayedList>
}
 800af76:	bf00      	nop
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	20000d40 	.word	0x20000d40

0800af84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10b      	bne.n	800afae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	617b      	str	r3, [r7, #20]
}
 800afa8:	bf00      	nop
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afae:	4b0a      	ldr	r3, [pc, #40]	@ (800afd8 <vTaskPlaceOnEventListRestricted+0x54>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3318      	adds	r3, #24
 800afb4:	4619      	mov	r1, r3
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f7fe fa13 	bl	80093e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d002      	beq.n	800afc8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800afc2:	f04f 33ff 	mov.w	r3, #4294967295
 800afc6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	68b8      	ldr	r0, [r7, #8]
 800afcc:	f000 fcd8 	bl	800b980 <prvAddCurrentTaskToDelayedList>
	}
 800afd0:	bf00      	nop
 800afd2:	3718      	adds	r7, #24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	20000d40 	.word	0x20000d40

0800afdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10b      	bne.n	800b00a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	60fb      	str	r3, [r7, #12]
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	e7fd      	b.n	800b006 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	3318      	adds	r3, #24
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fe fa44 	bl	800949c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b014:	4b1d      	ldr	r3, [pc, #116]	@ (800b08c <xTaskRemoveFromEventList+0xb0>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d11d      	bne.n	800b058 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	3304      	adds	r3, #4
 800b020:	4618      	mov	r0, r3
 800b022:	f7fe fa3b 	bl	800949c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b02a:	4b19      	ldr	r3, [pc, #100]	@ (800b090 <xTaskRemoveFromEventList+0xb4>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d903      	bls.n	800b03a <xTaskRemoveFromEventList+0x5e>
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b036:	4a16      	ldr	r2, [pc, #88]	@ (800b090 <xTaskRemoveFromEventList+0xb4>)
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4a13      	ldr	r2, [pc, #76]	@ (800b094 <xTaskRemoveFromEventList+0xb8>)
 800b048:	441a      	add	r2, r3
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	3304      	adds	r3, #4
 800b04e:	4619      	mov	r1, r3
 800b050:	4610      	mov	r0, r2
 800b052:	f7fe f9c6 	bl	80093e2 <vListInsertEnd>
 800b056:	e005      	b.n	800b064 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	3318      	adds	r3, #24
 800b05c:	4619      	mov	r1, r3
 800b05e:	480e      	ldr	r0, [pc, #56]	@ (800b098 <xTaskRemoveFromEventList+0xbc>)
 800b060:	f7fe f9bf 	bl	80093e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b068:	4b0c      	ldr	r3, [pc, #48]	@ (800b09c <xTaskRemoveFromEventList+0xc0>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06e:	429a      	cmp	r2, r3
 800b070:	d905      	bls.n	800b07e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b072:	2301      	movs	r3, #1
 800b074:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b076:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a0 <xTaskRemoveFromEventList+0xc4>)
 800b078:	2201      	movs	r2, #1
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	e001      	b.n	800b082 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b082:	697b      	ldr	r3, [r7, #20]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	2000123c 	.word	0x2000123c
 800b090:	2000121c 	.word	0x2000121c
 800b094:	20000d44 	.word	0x20000d44
 800b098:	200011d4 	.word	0x200011d4
 800b09c:	20000d40 	.word	0x20000d40
 800b0a0:	20001228 	.word	0x20001228

0800b0a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0ac:	4b06      	ldr	r3, [pc, #24]	@ (800b0c8 <vTaskInternalSetTimeOutState+0x24>)
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0b4:	4b05      	ldr	r3, [pc, #20]	@ (800b0cc <vTaskInternalSetTimeOutState+0x28>)
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	605a      	str	r2, [r3, #4]
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	2000122c 	.word	0x2000122c
 800b0cc:	20001218 	.word	0x20001218

0800b0d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10b      	bne.n	800b0f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	613b      	str	r3, [r7, #16]
}
 800b0f2:	bf00      	nop
 800b0f4:	bf00      	nop
 800b0f6:	e7fd      	b.n	800b0f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10b      	bne.n	800b116 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	60fb      	str	r3, [r7, #12]
}
 800b110:	bf00      	nop
 800b112:	bf00      	nop
 800b114:	e7fd      	b.n	800b112 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b116:	f001 f90f 	bl	800c338 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b11a:	4b1d      	ldr	r3, [pc, #116]	@ (800b190 <xTaskCheckForTimeOut+0xc0>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b132:	d102      	bne.n	800b13a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b134:	2300      	movs	r3, #0
 800b136:	61fb      	str	r3, [r7, #28]
 800b138:	e023      	b.n	800b182 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	4b15      	ldr	r3, [pc, #84]	@ (800b194 <xTaskCheckForTimeOut+0xc4>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	429a      	cmp	r2, r3
 800b144:	d007      	beq.n	800b156 <xTaskCheckForTimeOut+0x86>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d302      	bcc.n	800b156 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b150:	2301      	movs	r3, #1
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	e015      	b.n	800b182 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d20b      	bcs.n	800b178 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7ff ff99 	bl	800b0a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b172:	2300      	movs	r3, #0
 800b174:	61fb      	str	r3, [r7, #28]
 800b176:	e004      	b.n	800b182 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b17e:	2301      	movs	r3, #1
 800b180:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b182:	f001 f90b 	bl	800c39c <vPortExitCritical>

	return xReturn;
 800b186:	69fb      	ldr	r3, [r7, #28]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3720      	adds	r7, #32
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	20001218 	.word	0x20001218
 800b194:	2000122c 	.word	0x2000122c

0800b198 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b198:	b480      	push	{r7}
 800b19a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b19c:	4b03      	ldr	r3, [pc, #12]	@ (800b1ac <vTaskMissedYield+0x14>)
 800b19e:	2201      	movs	r2, #1
 800b1a0:	601a      	str	r2, [r3, #0]
}
 800b1a2:	bf00      	nop
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	20001228 	.word	0x20001228

0800b1b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1b8:	f000 f852 	bl	800b260 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1bc:	4b06      	ldr	r3, [pc, #24]	@ (800b1d8 <prvIdleTask+0x28>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d9f9      	bls.n	800b1b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b1c4:	4b05      	ldr	r3, [pc, #20]	@ (800b1dc <prvIdleTask+0x2c>)
 800b1c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1d4:	e7f0      	b.n	800b1b8 <prvIdleTask+0x8>
 800b1d6:	bf00      	nop
 800b1d8:	20000d44 	.word	0x20000d44
 800b1dc:	e000ed04 	.word	0xe000ed04

0800b1e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	607b      	str	r3, [r7, #4]
 800b1ea:	e00c      	b.n	800b206 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4a12      	ldr	r2, [pc, #72]	@ (800b240 <prvInitialiseTaskLists+0x60>)
 800b1f8:	4413      	add	r3, r2
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe f8c4 	bl	8009388 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3301      	adds	r3, #1
 800b204:	607b      	str	r3, [r7, #4]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b37      	cmp	r3, #55	@ 0x37
 800b20a:	d9ef      	bls.n	800b1ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b20c:	480d      	ldr	r0, [pc, #52]	@ (800b244 <prvInitialiseTaskLists+0x64>)
 800b20e:	f7fe f8bb 	bl	8009388 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b212:	480d      	ldr	r0, [pc, #52]	@ (800b248 <prvInitialiseTaskLists+0x68>)
 800b214:	f7fe f8b8 	bl	8009388 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b218:	480c      	ldr	r0, [pc, #48]	@ (800b24c <prvInitialiseTaskLists+0x6c>)
 800b21a:	f7fe f8b5 	bl	8009388 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b21e:	480c      	ldr	r0, [pc, #48]	@ (800b250 <prvInitialiseTaskLists+0x70>)
 800b220:	f7fe f8b2 	bl	8009388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b224:	480b      	ldr	r0, [pc, #44]	@ (800b254 <prvInitialiseTaskLists+0x74>)
 800b226:	f7fe f8af 	bl	8009388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b22a:	4b0b      	ldr	r3, [pc, #44]	@ (800b258 <prvInitialiseTaskLists+0x78>)
 800b22c:	4a05      	ldr	r2, [pc, #20]	@ (800b244 <prvInitialiseTaskLists+0x64>)
 800b22e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b230:	4b0a      	ldr	r3, [pc, #40]	@ (800b25c <prvInitialiseTaskLists+0x7c>)
 800b232:	4a05      	ldr	r2, [pc, #20]	@ (800b248 <prvInitialiseTaskLists+0x68>)
 800b234:	601a      	str	r2, [r3, #0]
}
 800b236:	bf00      	nop
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20000d44 	.word	0x20000d44
 800b244:	200011a4 	.word	0x200011a4
 800b248:	200011b8 	.word	0x200011b8
 800b24c:	200011d4 	.word	0x200011d4
 800b250:	200011e8 	.word	0x200011e8
 800b254:	20001200 	.word	0x20001200
 800b258:	200011cc 	.word	0x200011cc
 800b25c:	200011d0 	.word	0x200011d0

0800b260 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b266:	e019      	b.n	800b29c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b268:	f001 f866 	bl	800c338 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b26c:	4b10      	ldr	r3, [pc, #64]	@ (800b2b0 <prvCheckTasksWaitingTermination+0x50>)
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3304      	adds	r3, #4
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fe f90f 	bl	800949c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b27e:	4b0d      	ldr	r3, [pc, #52]	@ (800b2b4 <prvCheckTasksWaitingTermination+0x54>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3b01      	subs	r3, #1
 800b284:	4a0b      	ldr	r2, [pc, #44]	@ (800b2b4 <prvCheckTasksWaitingTermination+0x54>)
 800b286:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b288:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b8 <prvCheckTasksWaitingTermination+0x58>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	4a0a      	ldr	r2, [pc, #40]	@ (800b2b8 <prvCheckTasksWaitingTermination+0x58>)
 800b290:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b292:	f001 f883 	bl	800c39c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f810 	bl	800b2bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b29c:	4b06      	ldr	r3, [pc, #24]	@ (800b2b8 <prvCheckTasksWaitingTermination+0x58>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d1e1      	bne.n	800b268 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	200011e8 	.word	0x200011e8
 800b2b4:	20001214 	.word	0x20001214
 800b2b8:	200011fc 	.word	0x200011fc

0800b2bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3354      	adds	r3, #84	@ 0x54
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f002 f8f3 	bl	800d4b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d108      	bne.n	800b2ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f001 fa1b 	bl	800c718 <vPortFree>
				vPortFree( pxTCB );
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 fa18 	bl	800c718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2e8:	e019      	b.n	800b31e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d103      	bne.n	800b2fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f001 fa0f 	bl	800c718 <vPortFree>
	}
 800b2fa:	e010      	b.n	800b31e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b302:	2b02      	cmp	r3, #2
 800b304:	d00b      	beq.n	800b31e <prvDeleteTCB+0x62>
	__asm volatile
 800b306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	60fb      	str	r3, [r7, #12]
}
 800b318:	bf00      	nop
 800b31a:	bf00      	nop
 800b31c:	e7fd      	b.n	800b31a <prvDeleteTCB+0x5e>
	}
 800b31e:	bf00      	nop
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
	...

0800b328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b32e:	4b0c      	ldr	r3, [pc, #48]	@ (800b360 <prvResetNextTaskUnblockTime+0x38>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d104      	bne.n	800b342 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b338:	4b0a      	ldr	r3, [pc, #40]	@ (800b364 <prvResetNextTaskUnblockTime+0x3c>)
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295
 800b33e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b340:	e008      	b.n	800b354 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b342:	4b07      	ldr	r3, [pc, #28]	@ (800b360 <prvResetNextTaskUnblockTime+0x38>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	4a04      	ldr	r2, [pc, #16]	@ (800b364 <prvResetNextTaskUnblockTime+0x3c>)
 800b352:	6013      	str	r3, [r2, #0]
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	200011cc 	.word	0x200011cc
 800b364:	20001234 	.word	0x20001234

0800b368 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b36e:	4b05      	ldr	r3, [pc, #20]	@ (800b384 <xTaskGetCurrentTaskHandle+0x1c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b374:	687b      	ldr	r3, [r7, #4]
	}
 800b376:	4618      	mov	r0, r3
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	20000d40 	.word	0x20000d40

0800b388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b38e:	4b0b      	ldr	r3, [pc, #44]	@ (800b3bc <xTaskGetSchedulerState+0x34>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d102      	bne.n	800b39c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b396:	2301      	movs	r3, #1
 800b398:	607b      	str	r3, [r7, #4]
 800b39a:	e008      	b.n	800b3ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b39c:	4b08      	ldr	r3, [pc, #32]	@ (800b3c0 <xTaskGetSchedulerState+0x38>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	607b      	str	r3, [r7, #4]
 800b3a8:	e001      	b.n	800b3ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3ae:	687b      	ldr	r3, [r7, #4]
	}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	20001220 	.word	0x20001220
 800b3c0:	2000123c 	.word	0x2000123c

0800b3c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d051      	beq.n	800b47e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3de:	4b2a      	ldr	r3, [pc, #168]	@ (800b488 <xTaskPriorityInherit+0xc4>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d241      	bcs.n	800b46c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	db06      	blt.n	800b3fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3f0:	4b25      	ldr	r3, [pc, #148]	@ (800b488 <xTaskPriorityInherit+0xc4>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	6959      	ldr	r1, [r3, #20]
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b406:	4613      	mov	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4a1f      	ldr	r2, [pc, #124]	@ (800b48c <xTaskPriorityInherit+0xc8>)
 800b410:	4413      	add	r3, r2
 800b412:	4299      	cmp	r1, r3
 800b414:	d122      	bne.n	800b45c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	3304      	adds	r3, #4
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe f83e 	bl	800949c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b420:	4b19      	ldr	r3, [pc, #100]	@ (800b488 <xTaskPriorityInherit+0xc4>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b42e:	4b18      	ldr	r3, [pc, #96]	@ (800b490 <xTaskPriorityInherit+0xcc>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	d903      	bls.n	800b43e <xTaskPriorityInherit+0x7a>
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43a:	4a15      	ldr	r2, [pc, #84]	@ (800b490 <xTaskPriorityInherit+0xcc>)
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4a10      	ldr	r2, [pc, #64]	@ (800b48c <xTaskPriorityInherit+0xc8>)
 800b44c:	441a      	add	r2, r3
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	3304      	adds	r3, #4
 800b452:	4619      	mov	r1, r3
 800b454:	4610      	mov	r0, r2
 800b456:	f7fd ffc4 	bl	80093e2 <vListInsertEnd>
 800b45a:	e004      	b.n	800b466 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b45c:	4b0a      	ldr	r3, [pc, #40]	@ (800b488 <xTaskPriorityInherit+0xc4>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b466:	2301      	movs	r3, #1
 800b468:	60fb      	str	r3, [r7, #12]
 800b46a:	e008      	b.n	800b47e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b470:	4b05      	ldr	r3, [pc, #20]	@ (800b488 <xTaskPriorityInherit+0xc4>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b476:	429a      	cmp	r2, r3
 800b478:	d201      	bcs.n	800b47e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b47a:	2301      	movs	r3, #1
 800b47c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b47e:	68fb      	ldr	r3, [r7, #12]
	}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	20000d40 	.word	0x20000d40
 800b48c:	20000d44 	.word	0x20000d44
 800b490:	2000121c 	.word	0x2000121c

0800b494 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d058      	beq.n	800b55c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b4aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b568 <xTaskPriorityDisinherit+0xd4>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d00b      	beq.n	800b4cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	60fb      	str	r3, [r7, #12]
}
 800b4c6:	bf00      	nop
 800b4c8:	bf00      	nop
 800b4ca:	e7fd      	b.n	800b4c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	60bb      	str	r3, [r7, #8]
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	e7fd      	b.n	800b4e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4f0:	1e5a      	subs	r2, r3, #1
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d02c      	beq.n	800b55c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b506:	2b00      	cmp	r3, #0
 800b508:	d128      	bne.n	800b55c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	3304      	adds	r3, #4
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fd ffc4 	bl	800949c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b520:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b52c:	4b0f      	ldr	r3, [pc, #60]	@ (800b56c <xTaskPriorityDisinherit+0xd8>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	429a      	cmp	r2, r3
 800b532:	d903      	bls.n	800b53c <xTaskPriorityDisinherit+0xa8>
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b538:	4a0c      	ldr	r2, [pc, #48]	@ (800b56c <xTaskPriorityDisinherit+0xd8>)
 800b53a:	6013      	str	r3, [r2, #0]
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b540:	4613      	mov	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4a09      	ldr	r2, [pc, #36]	@ (800b570 <xTaskPriorityDisinherit+0xdc>)
 800b54a:	441a      	add	r2, r3
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	3304      	adds	r3, #4
 800b550:	4619      	mov	r1, r3
 800b552:	4610      	mov	r0, r2
 800b554:	f7fd ff45 	bl	80093e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b558:	2301      	movs	r3, #1
 800b55a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b55c:	697b      	ldr	r3, [r7, #20]
	}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	20000d40 	.word	0x20000d40
 800b56c:	2000121c 	.word	0x2000121c
 800b570:	20000d44 	.word	0x20000d44

0800b574 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b582:	2301      	movs	r3, #1
 800b584:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d06c      	beq.n	800b666 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10b      	bne.n	800b5ac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	60fb      	str	r3, [r7, #12]
}
 800b5a6:	bf00      	nop
 800b5a8:	bf00      	nop
 800b5aa:	e7fd      	b.n	800b5a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d902      	bls.n	800b5bc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	61fb      	str	r3, [r7, #28]
 800b5ba:	e002      	b.n	800b5c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5c0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c6:	69fa      	ldr	r2, [r7, #28]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d04c      	beq.n	800b666 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d147      	bne.n	800b666 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b5d6:	4b26      	ldr	r3, [pc, #152]	@ (800b670 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d10b      	bne.n	800b5f8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	60bb      	str	r3, [r7, #8]
}
 800b5f2:	bf00      	nop
 800b5f4:	bf00      	nop
 800b5f6:	e7fd      	b.n	800b5f4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	69fa      	ldr	r2, [r7, #28]
 800b602:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	699b      	ldr	r3, [r3, #24]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	db04      	blt.n	800b616 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	6959      	ldr	r1, [r3, #20]
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	4613      	mov	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4a13      	ldr	r2, [pc, #76]	@ (800b674 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b626:	4413      	add	r3, r2
 800b628:	4299      	cmp	r1, r3
 800b62a:	d11c      	bne.n	800b666 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	3304      	adds	r3, #4
 800b630:	4618      	mov	r0, r3
 800b632:	f7fd ff33 	bl	800949c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b63a:	4b0f      	ldr	r3, [pc, #60]	@ (800b678 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d903      	bls.n	800b64a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b646:	4a0c      	ldr	r2, [pc, #48]	@ (800b678 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b64e:	4613      	mov	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4a07      	ldr	r2, [pc, #28]	@ (800b674 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b658:	441a      	add	r2, r3
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	3304      	adds	r3, #4
 800b65e:	4619      	mov	r1, r3
 800b660:	4610      	mov	r0, r2
 800b662:	f7fd febe 	bl	80093e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b666:	bf00      	nop
 800b668:	3720      	adds	r7, #32
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	20000d40 	.word	0x20000d40
 800b674:	20000d44 	.word	0x20000d44
 800b678:	2000121c 	.word	0x2000121c

0800b67c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b67c:	b480      	push	{r7}
 800b67e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b680:	4b07      	ldr	r3, [pc, #28]	@ (800b6a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d004      	beq.n	800b692 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b688:	4b05      	ldr	r3, [pc, #20]	@ (800b6a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b68e:	3201      	adds	r2, #1
 800b690:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b692:	4b03      	ldr	r3, [pc, #12]	@ (800b6a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b694:	681b      	ldr	r3, [r3, #0]
	}
 800b696:	4618      	mov	r0, r3
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	20000d40 	.word	0x20000d40

0800b6a4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b6ae:	f000 fe43 	bl	800c338 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b6b2:	4b20      	ldr	r3, [pc, #128]	@ (800b734 <ulTaskNotifyTake+0x90>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d113      	bne.n	800b6e6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b6be:	4b1d      	ldr	r3, [pc, #116]	@ (800b734 <ulTaskNotifyTake+0x90>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00b      	beq.n	800b6e6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	6838      	ldr	r0, [r7, #0]
 800b6d2:	f000 f955 	bl	800b980 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b6d6:	4b18      	ldr	r3, [pc, #96]	@ (800b738 <ulTaskNotifyTake+0x94>)
 800b6d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b6e6:	f000 fe59 	bl	800c39c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b6ea:	f000 fe25 	bl	800c338 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b6ee:	4b11      	ldr	r3, [pc, #68]	@ (800b734 <ulTaskNotifyTake+0x90>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6f6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00e      	beq.n	800b71c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d005      	beq.n	800b710 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b704:	4b0b      	ldr	r3, [pc, #44]	@ (800b734 <ulTaskNotifyTake+0x90>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2200      	movs	r2, #0
 800b70a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800b70e:	e005      	b.n	800b71c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b710:	4b08      	ldr	r3, [pc, #32]	@ (800b734 <ulTaskNotifyTake+0x90>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	3a01      	subs	r2, #1
 800b718:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b71c:	4b05      	ldr	r3, [pc, #20]	@ (800b734 <ulTaskNotifyTake+0x90>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b726:	f000 fe39 	bl	800c39c <vPortExitCritical>

		return ulReturn;
 800b72a:	68fb      	ldr	r3, [r7, #12]
	}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	20000d40 	.word	0x20000d40
 800b738:	e000ed04 	.word	0xe000ed04

0800b73c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b74a:	f000 fdf5 	bl	800c338 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b74e:	4b29      	ldr	r3, [pc, #164]	@ (800b7f4 <xTaskNotifyWait+0xb8>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d01c      	beq.n	800b796 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b75c:	4b25      	ldr	r3, [pc, #148]	@ (800b7f4 <xTaskNotifyWait+0xb8>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	43d2      	mvns	r2, r2
 800b768:	400a      	ands	r2, r1
 800b76a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b76e:	4b21      	ldr	r3, [pc, #132]	@ (800b7f4 <xTaskNotifyWait+0xb8>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00b      	beq.n	800b796 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b77e:	2101      	movs	r1, #1
 800b780:	6838      	ldr	r0, [r7, #0]
 800b782:	f000 f8fd 	bl	800b980 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b786:	4b1c      	ldr	r3, [pc, #112]	@ (800b7f8 <xTaskNotifyWait+0xbc>)
 800b788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b796:	f000 fe01 	bl	800c39c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b79a:	f000 fdcd 	bl	800c338 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d005      	beq.n	800b7b0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b7a4:	4b13      	ldr	r3, [pc, #76]	@ (800b7f4 <xTaskNotifyWait+0xb8>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b7b0:	4b10      	ldr	r3, [pc, #64]	@ (800b7f4 <xTaskNotifyWait+0xb8>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d002      	beq.n	800b7c4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	617b      	str	r3, [r7, #20]
 800b7c2:	e00a      	b.n	800b7da <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b7c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f4 <xTaskNotifyWait+0xb8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	43d2      	mvns	r2, r2
 800b7d0:	400a      	ands	r2, r1
 800b7d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7da:	4b06      	ldr	r3, [pc, #24]	@ (800b7f4 <xTaskNotifyWait+0xb8>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b7e4:	f000 fdda 	bl	800c39c <vPortExitCritical>

		return xReturn;
 800b7e8:	697b      	ldr	r3, [r7, #20]
	}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20000d40 	.word	0x20000d40
 800b7f8:	e000ed04 	.word	0xe000ed04

0800b7fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08a      	sub	sp, #40	@ 0x28
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	603b      	str	r3, [r7, #0]
 800b808:	4613      	mov	r3, r2
 800b80a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b80c:	2301      	movs	r3, #1
 800b80e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10b      	bne.n	800b82e <xTaskGenericNotify+0x32>
	__asm volatile
 800b816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	61bb      	str	r3, [r7, #24]
}
 800b828:	bf00      	nop
 800b82a:	bf00      	nop
 800b82c:	e7fd      	b.n	800b82a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b832:	f000 fd81 	bl	800c338 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d004      	beq.n	800b846 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b84c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b84e:	6a3b      	ldr	r3, [r7, #32]
 800b850:	2202      	movs	r2, #2
 800b852:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b856:	79fb      	ldrb	r3, [r7, #7]
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d82e      	bhi.n	800b8ba <xTaskGenericNotify+0xbe>
 800b85c:	a201      	add	r2, pc, #4	@ (adr r2, 800b864 <xTaskGenericNotify+0x68>)
 800b85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b862:	bf00      	nop
 800b864:	0800b8df 	.word	0x0800b8df
 800b868:	0800b879 	.word	0x0800b879
 800b86c:	0800b88b 	.word	0x0800b88b
 800b870:	0800b89b 	.word	0x0800b89b
 800b874:	0800b8a5 	.word	0x0800b8a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	431a      	orrs	r2, r3
 800b882:	6a3b      	ldr	r3, [r7, #32]
 800b884:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b888:	e02c      	b.n	800b8e4 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b898:	e024      	b.n	800b8e4 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b8a2:	e01f      	b.n	800b8e4 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b8a4:	7ffb      	ldrb	r3, [r7, #31]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d004      	beq.n	800b8b4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b8b2:	e017      	b.n	800b8e4 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b8b8:	e014      	b.n	800b8e4 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c4:	d00d      	beq.n	800b8e2 <xTaskGenericNotify+0xe6>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	617b      	str	r3, [r7, #20]
}
 800b8d8:	bf00      	nop
 800b8da:	bf00      	nop
 800b8dc:	e7fd      	b.n	800b8da <xTaskGenericNotify+0xde>
					break;
 800b8de:	bf00      	nop
 800b8e0:	e000      	b.n	800b8e4 <xTaskGenericNotify+0xe8>

					break;
 800b8e2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b8e4:	7ffb      	ldrb	r3, [r7, #31]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d13b      	bne.n	800b962 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fd fdd4 	bl	800949c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b970 <xTaskGenericNotify+0x174>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d903      	bls.n	800b908 <xTaskGenericNotify+0x10c>
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b904:	4a1a      	ldr	r2, [pc, #104]	@ (800b970 <xTaskGenericNotify+0x174>)
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b90c:	4613      	mov	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4413      	add	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4a17      	ldr	r2, [pc, #92]	@ (800b974 <xTaskGenericNotify+0x178>)
 800b916:	441a      	add	r2, r3
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	3304      	adds	r3, #4
 800b91c:	4619      	mov	r1, r3
 800b91e:	4610      	mov	r0, r2
 800b920:	f7fd fd5f 	bl	80093e2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00b      	beq.n	800b944 <xTaskGenericNotify+0x148>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	613b      	str	r3, [r7, #16]
}
 800b93e:	bf00      	nop
 800b940:	bf00      	nop
 800b942:	e7fd      	b.n	800b940 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b948:	4b0b      	ldr	r3, [pc, #44]	@ (800b978 <xTaskGenericNotify+0x17c>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b94e:	429a      	cmp	r2, r3
 800b950:	d907      	bls.n	800b962 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b952:	4b0a      	ldr	r3, [pc, #40]	@ (800b97c <xTaskGenericNotify+0x180>)
 800b954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b958:	601a      	str	r2, [r3, #0]
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b962:	f000 fd1b 	bl	800c39c <vPortExitCritical>

		return xReturn;
 800b966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b968:	4618      	mov	r0, r3
 800b96a:	3728      	adds	r7, #40	@ 0x28
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	2000121c 	.word	0x2000121c
 800b974:	20000d44 	.word	0x20000d44
 800b978:	20000d40 	.word	0x20000d40
 800b97c:	e000ed04 	.word	0xe000ed04

0800b980 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b98a:	4b21      	ldr	r3, [pc, #132]	@ (800ba10 <prvAddCurrentTaskToDelayedList+0x90>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b990:	4b20      	ldr	r3, [pc, #128]	@ (800ba14 <prvAddCurrentTaskToDelayedList+0x94>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	3304      	adds	r3, #4
 800b996:	4618      	mov	r0, r3
 800b998:	f7fd fd80 	bl	800949c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d10a      	bne.n	800b9ba <prvAddCurrentTaskToDelayedList+0x3a>
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d007      	beq.n	800b9ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9aa:	4b1a      	ldr	r3, [pc, #104]	@ (800ba14 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4819      	ldr	r0, [pc, #100]	@ (800ba18 <prvAddCurrentTaskToDelayedList+0x98>)
 800b9b4:	f7fd fd15 	bl	80093e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9b8:	e026      	b.n	800ba08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4413      	add	r3, r2
 800b9c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9c2:	4b14      	ldr	r3, [pc, #80]	@ (800ba14 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d209      	bcs.n	800b9e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9d2:	4b12      	ldr	r3, [pc, #72]	@ (800ba1c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	4b0f      	ldr	r3, [pc, #60]	@ (800ba14 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3304      	adds	r3, #4
 800b9dc:	4619      	mov	r1, r3
 800b9de:	4610      	mov	r0, r2
 800b9e0:	f7fd fd23 	bl	800942a <vListInsert>
}
 800b9e4:	e010      	b.n	800ba08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9e6:	4b0e      	ldr	r3, [pc, #56]	@ (800ba20 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	4b0a      	ldr	r3, [pc, #40]	@ (800ba14 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	f7fd fd19 	bl	800942a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9f8:	4b0a      	ldr	r3, [pc, #40]	@ (800ba24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d202      	bcs.n	800ba08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba02:	4a08      	ldr	r2, [pc, #32]	@ (800ba24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	6013      	str	r3, [r2, #0]
}
 800ba08:	bf00      	nop
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20001218 	.word	0x20001218
 800ba14:	20000d40 	.word	0x20000d40
 800ba18:	20001200 	.word	0x20001200
 800ba1c:	200011d0 	.word	0x200011d0
 800ba20:	200011cc 	.word	0x200011cc
 800ba24:	20001234 	.word	0x20001234

0800ba28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08a      	sub	sp, #40	@ 0x28
 800ba2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba32:	f000 fb13 	bl	800c05c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba36:	4b1d      	ldr	r3, [pc, #116]	@ (800baac <xTimerCreateTimerTask+0x84>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d021      	beq.n	800ba82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba46:	1d3a      	adds	r2, r7, #4
 800ba48:	f107 0108 	add.w	r1, r7, #8
 800ba4c:	f107 030c 	add.w	r3, r7, #12
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fd fc7f 	bl	8009354 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba56:	6879      	ldr	r1, [r7, #4]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	9202      	str	r2, [sp, #8]
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	2302      	movs	r3, #2
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	2300      	movs	r3, #0
 800ba66:	460a      	mov	r2, r1
 800ba68:	4911      	ldr	r1, [pc, #68]	@ (800bab0 <xTimerCreateTimerTask+0x88>)
 800ba6a:	4812      	ldr	r0, [pc, #72]	@ (800bab4 <xTimerCreateTimerTask+0x8c>)
 800ba6c:	f7fe fe24 	bl	800a6b8 <xTaskCreateStatic>
 800ba70:	4603      	mov	r3, r0
 800ba72:	4a11      	ldr	r2, [pc, #68]	@ (800bab8 <xTimerCreateTimerTask+0x90>)
 800ba74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba76:	4b10      	ldr	r3, [pc, #64]	@ (800bab8 <xTimerCreateTimerTask+0x90>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10b      	bne.n	800baa0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	613b      	str	r3, [r7, #16]
}
 800ba9a:	bf00      	nop
 800ba9c:	bf00      	nop
 800ba9e:	e7fd      	b.n	800ba9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800baa0:	697b      	ldr	r3, [r7, #20]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	20001270 	.word	0x20001270
 800bab0:	0800ffec 	.word	0x0800ffec
 800bab4:	0800bbf5 	.word	0x0800bbf5
 800bab8:	20001274 	.word	0x20001274

0800babc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b08a      	sub	sp, #40	@ 0x28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
 800bac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800baca:	2300      	movs	r3, #0
 800bacc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10b      	bne.n	800baec <xTimerGenericCommand+0x30>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	623b      	str	r3, [r7, #32]
}
 800bae6:	bf00      	nop
 800bae8:	bf00      	nop
 800baea:	e7fd      	b.n	800bae8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800baec:	4b19      	ldr	r3, [pc, #100]	@ (800bb54 <xTimerGenericCommand+0x98>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d02a      	beq.n	800bb4a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2b05      	cmp	r3, #5
 800bb04:	dc18      	bgt.n	800bb38 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb06:	f7ff fc3f 	bl	800b388 <xTaskGetSchedulerState>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d109      	bne.n	800bb24 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb10:	4b10      	ldr	r3, [pc, #64]	@ (800bb54 <xTimerGenericCommand+0x98>)
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	f107 0110 	add.w	r1, r7, #16
 800bb18:	2300      	movs	r3, #0
 800bb1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb1c:	f7fd ff54 	bl	80099c8 <xQueueGenericSend>
 800bb20:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb22:	e012      	b.n	800bb4a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb24:	4b0b      	ldr	r3, [pc, #44]	@ (800bb54 <xTimerGenericCommand+0x98>)
 800bb26:	6818      	ldr	r0, [r3, #0]
 800bb28:	f107 0110 	add.w	r1, r7, #16
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f7fd ff4a 	bl	80099c8 <xQueueGenericSend>
 800bb34:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb36:	e008      	b.n	800bb4a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb38:	4b06      	ldr	r3, [pc, #24]	@ (800bb54 <xTimerGenericCommand+0x98>)
 800bb3a:	6818      	ldr	r0, [r3, #0]
 800bb3c:	f107 0110 	add.w	r1, r7, #16
 800bb40:	2300      	movs	r3, #0
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	f7fe f842 	bl	8009bcc <xQueueGenericSendFromISR>
 800bb48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3728      	adds	r7, #40	@ 0x28
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	20001270 	.word	0x20001270

0800bb58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af02      	add	r7, sp, #8
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb62:	4b23      	ldr	r3, [pc, #140]	@ (800bbf0 <prvProcessExpiredTimer+0x98>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fd fc93 	bl	800949c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb7c:	f003 0304 	and.w	r3, r3, #4
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d023      	beq.n	800bbcc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	699a      	ldr	r2, [r3, #24]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	18d1      	adds	r1, r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	6978      	ldr	r0, [r7, #20]
 800bb92:	f000 f8d5 	bl	800bd40 <prvInsertTimerInActiveList>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d020      	beq.n	800bbde <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	2300      	movs	r3, #0
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	2100      	movs	r1, #0
 800bba6:	6978      	ldr	r0, [r7, #20]
 800bba8:	f7ff ff88 	bl	800babc <xTimerGenericCommand>
 800bbac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d114      	bne.n	800bbde <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	60fb      	str	r3, [r7, #12]
}
 800bbc6:	bf00      	nop
 800bbc8:	bf00      	nop
 800bbca:	e7fd      	b.n	800bbc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbd2:	f023 0301 	bic.w	r3, r3, #1
 800bbd6:	b2da      	uxtb	r2, r3
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	6978      	ldr	r0, [r7, #20]
 800bbe4:	4798      	blx	r3
}
 800bbe6:	bf00      	nop
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20001268 	.word	0x20001268

0800bbf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbfc:	f107 0308 	add.w	r3, r7, #8
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 f859 	bl	800bcb8 <prvGetNextExpireTime>
 800bc06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f000 f805 	bl	800bc1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc12:	f000 f8d7 	bl	800bdc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc16:	bf00      	nop
 800bc18:	e7f0      	b.n	800bbfc <prvTimerTask+0x8>
	...

0800bc1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc26:	f7fe ffab 	bl	800ab80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc2a:	f107 0308 	add.w	r3, r7, #8
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 f866 	bl	800bd00 <prvSampleTimeNow>
 800bc34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d130      	bne.n	800bc9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <prvProcessTimerOrBlockTask+0x3c>
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d806      	bhi.n	800bc58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc4a:	f7fe ffa7 	bl	800ab9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc4e:	68f9      	ldr	r1, [r7, #12]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff ff81 	bl	800bb58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc56:	e024      	b.n	800bca2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d008      	beq.n	800bc70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc5e:	4b13      	ldr	r3, [pc, #76]	@ (800bcac <prvProcessTimerOrBlockTask+0x90>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d101      	bne.n	800bc6c <prvProcessTimerOrBlockTask+0x50>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e000      	b.n	800bc6e <prvProcessTimerOrBlockTask+0x52>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc70:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb0 <prvProcessTimerOrBlockTask+0x94>)
 800bc72:	6818      	ldr	r0, [r3, #0]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	f7fe fce7 	bl	800a650 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc82:	f7fe ff8b 	bl	800ab9c <xTaskResumeAll>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc8c:	4b09      	ldr	r3, [pc, #36]	@ (800bcb4 <prvProcessTimerOrBlockTask+0x98>)
 800bc8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	f3bf 8f6f 	isb	sy
}
 800bc9c:	e001      	b.n	800bca2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc9e:	f7fe ff7d 	bl	800ab9c <xTaskResumeAll>
}
 800bca2:	bf00      	nop
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	2000126c 	.word	0x2000126c
 800bcb0:	20001270 	.word	0x20001270
 800bcb4:	e000ed04 	.word	0xe000ed04

0800bcb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bcc0:	4b0e      	ldr	r3, [pc, #56]	@ (800bcfc <prvGetNextExpireTime+0x44>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <prvGetNextExpireTime+0x16>
 800bcca:	2201      	movs	r2, #1
 800bccc:	e000      	b.n	800bcd0 <prvGetNextExpireTime+0x18>
 800bcce:	2200      	movs	r2, #0
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d105      	bne.n	800bce8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcdc:	4b07      	ldr	r3, [pc, #28]	@ (800bcfc <prvGetNextExpireTime+0x44>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	e001      	b.n	800bcec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bce8:	2300      	movs	r3, #0
 800bcea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcec:	68fb      	ldr	r3, [r7, #12]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	20001268 	.word	0x20001268

0800bd00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd08:	f7fe ffe6 	bl	800acd8 <xTaskGetTickCount>
 800bd0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd0e:	4b0b      	ldr	r3, [pc, #44]	@ (800bd3c <prvSampleTimeNow+0x3c>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d205      	bcs.n	800bd24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd18:	f000 f93a 	bl	800bf90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	601a      	str	r2, [r3, #0]
 800bd22:	e002      	b.n	800bd2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd2a:	4a04      	ldr	r2, [pc, #16]	@ (800bd3c <prvSampleTimeNow+0x3c>)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd30:	68fb      	ldr	r3, [r7, #12]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20001278 	.word	0x20001278

0800bd40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d812      	bhi.n	800bd8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d302      	bcc.n	800bd7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd74:	2301      	movs	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	e01b      	b.n	800bdb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd7a:	4b10      	ldr	r3, [pc, #64]	@ (800bdbc <prvInsertTimerInActiveList+0x7c>)
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3304      	adds	r3, #4
 800bd82:	4619      	mov	r1, r3
 800bd84:	4610      	mov	r0, r2
 800bd86:	f7fd fb50 	bl	800942a <vListInsert>
 800bd8a:	e012      	b.n	800bdb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d206      	bcs.n	800bda2 <prvInsertTimerInActiveList+0x62>
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d302      	bcc.n	800bda2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	617b      	str	r3, [r7, #20]
 800bda0:	e007      	b.n	800bdb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bda2:	4b07      	ldr	r3, [pc, #28]	@ (800bdc0 <prvInsertTimerInActiveList+0x80>)
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	3304      	adds	r3, #4
 800bdaa:	4619      	mov	r1, r3
 800bdac:	4610      	mov	r0, r2
 800bdae:	f7fd fb3c 	bl	800942a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bdb2:	697b      	ldr	r3, [r7, #20]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3718      	adds	r7, #24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	2000126c 	.word	0x2000126c
 800bdc0:	20001268 	.word	0x20001268

0800bdc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b08e      	sub	sp, #56	@ 0x38
 800bdc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdca:	e0ce      	b.n	800bf6a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	da19      	bge.n	800be06 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bdd2:	1d3b      	adds	r3, r7, #4
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10b      	bne.n	800bdf6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	61fb      	str	r3, [r7, #28]
}
 800bdf0:	bf00      	nop
 800bdf2:	bf00      	nop
 800bdf4:	e7fd      	b.n	800bdf2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdfc:	6850      	ldr	r0, [r2, #4]
 800bdfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be00:	6892      	ldr	r2, [r2, #8]
 800be02:	4611      	mov	r1, r2
 800be04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f2c0 80ae 	blt.w	800bf6a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d004      	beq.n	800be24 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1c:	3304      	adds	r3, #4
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fd fb3c 	bl	800949c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be24:	463b      	mov	r3, r7
 800be26:	4618      	mov	r0, r3
 800be28:	f7ff ff6a 	bl	800bd00 <prvSampleTimeNow>
 800be2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b09      	cmp	r3, #9
 800be32:	f200 8097 	bhi.w	800bf64 <prvProcessReceivedCommands+0x1a0>
 800be36:	a201      	add	r2, pc, #4	@ (adr r2, 800be3c <prvProcessReceivedCommands+0x78>)
 800be38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3c:	0800be65 	.word	0x0800be65
 800be40:	0800be65 	.word	0x0800be65
 800be44:	0800be65 	.word	0x0800be65
 800be48:	0800bedb 	.word	0x0800bedb
 800be4c:	0800beef 	.word	0x0800beef
 800be50:	0800bf3b 	.word	0x0800bf3b
 800be54:	0800be65 	.word	0x0800be65
 800be58:	0800be65 	.word	0x0800be65
 800be5c:	0800bedb 	.word	0x0800bedb
 800be60:	0800beef 	.word	0x0800beef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be6a:	f043 0301 	orr.w	r3, r3, #1
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	18d1      	adds	r1, r2, r3
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be84:	f7ff ff5c 	bl	800bd40 <prvInsertTimerInActiveList>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d06c      	beq.n	800bf68 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d061      	beq.n	800bf68 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	441a      	add	r2, r3
 800beac:	2300      	movs	r3, #0
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	2300      	movs	r3, #0
 800beb2:	2100      	movs	r1, #0
 800beb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800beb6:	f7ff fe01 	bl	800babc <xTimerGenericCommand>
 800beba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d152      	bne.n	800bf68 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	61bb      	str	r3, [r7, #24]
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	e7fd      	b.n	800bed6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800beda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bedc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bee0:	f023 0301 	bic.w	r3, r3, #1
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800beec:	e03d      	b.n	800bf6a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800beee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bef4:	f043 0301 	orr.w	r3, r3, #1
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800befc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf04:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10b      	bne.n	800bf26 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	617b      	str	r3, [r7, #20]
}
 800bf20:	bf00      	nop
 800bf22:	bf00      	nop
 800bf24:	e7fd      	b.n	800bf22 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf28:	699a      	ldr	r2, [r3, #24]
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2c:	18d1      	adds	r1, r2, r3
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf34:	f7ff ff04 	bl	800bd40 <prvInsertTimerInActiveList>
					break;
 800bf38:	e017      	b.n	800bf6a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf40:	f003 0302 	and.w	r3, r3, #2
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d103      	bne.n	800bf50 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bf48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf4a:	f000 fbe5 	bl	800c718 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf4e:	e00c      	b.n	800bf6a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf56:	f023 0301 	bic.w	r3, r3, #1
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf62:	e002      	b.n	800bf6a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bf64:	bf00      	nop
 800bf66:	e000      	b.n	800bf6a <prvProcessReceivedCommands+0x1a6>
					break;
 800bf68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf6a:	4b08      	ldr	r3, [pc, #32]	@ (800bf8c <prvProcessReceivedCommands+0x1c8>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	1d39      	adds	r1, r7, #4
 800bf70:	2200      	movs	r2, #0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fd ff58 	bl	8009e28 <xQueueReceive>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f47f af26 	bne.w	800bdcc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf80:	bf00      	nop
 800bf82:	bf00      	nop
 800bf84:	3730      	adds	r7, #48	@ 0x30
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	20001270 	.word	0x20001270

0800bf90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b088      	sub	sp, #32
 800bf94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf96:	e049      	b.n	800c02c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf98:	4b2e      	ldr	r3, [pc, #184]	@ (800c054 <prvSwitchTimerLists+0xc4>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfa2:	4b2c      	ldr	r3, [pc, #176]	@ (800c054 <prvSwitchTimerLists+0xc4>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fd fa73 	bl	800949c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfc4:	f003 0304 	and.w	r3, r3, #4
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d02f      	beq.n	800c02c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	699b      	ldr	r3, [r3, #24]
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfd6:	68ba      	ldr	r2, [r7, #8]
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d90e      	bls.n	800bffc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfea:	4b1a      	ldr	r3, [pc, #104]	@ (800c054 <prvSwitchTimerLists+0xc4>)
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3304      	adds	r3, #4
 800bff2:	4619      	mov	r1, r3
 800bff4:	4610      	mov	r0, r2
 800bff6:	f7fd fa18 	bl	800942a <vListInsert>
 800bffa:	e017      	b.n	800c02c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bffc:	2300      	movs	r3, #0
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	2300      	movs	r3, #0
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	2100      	movs	r1, #0
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f7ff fd58 	bl	800babc <xTimerGenericCommand>
 800c00c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10b      	bne.n	800c02c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	603b      	str	r3, [r7, #0]
}
 800c026:	bf00      	nop
 800c028:	bf00      	nop
 800c02a:	e7fd      	b.n	800c028 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c02c:	4b09      	ldr	r3, [pc, #36]	@ (800c054 <prvSwitchTimerLists+0xc4>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1b0      	bne.n	800bf98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c036:	4b07      	ldr	r3, [pc, #28]	@ (800c054 <prvSwitchTimerLists+0xc4>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c03c:	4b06      	ldr	r3, [pc, #24]	@ (800c058 <prvSwitchTimerLists+0xc8>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a04      	ldr	r2, [pc, #16]	@ (800c054 <prvSwitchTimerLists+0xc4>)
 800c042:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c044:	4a04      	ldr	r2, [pc, #16]	@ (800c058 <prvSwitchTimerLists+0xc8>)
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	6013      	str	r3, [r2, #0]
}
 800c04a:	bf00      	nop
 800c04c:	3718      	adds	r7, #24
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20001268 	.word	0x20001268
 800c058:	2000126c 	.word	0x2000126c

0800c05c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c062:	f000 f969 	bl	800c338 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c066:	4b15      	ldr	r3, [pc, #84]	@ (800c0bc <prvCheckForValidListAndQueue+0x60>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d120      	bne.n	800c0b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c06e:	4814      	ldr	r0, [pc, #80]	@ (800c0c0 <prvCheckForValidListAndQueue+0x64>)
 800c070:	f7fd f98a 	bl	8009388 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c074:	4813      	ldr	r0, [pc, #76]	@ (800c0c4 <prvCheckForValidListAndQueue+0x68>)
 800c076:	f7fd f987 	bl	8009388 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c07a:	4b13      	ldr	r3, [pc, #76]	@ (800c0c8 <prvCheckForValidListAndQueue+0x6c>)
 800c07c:	4a10      	ldr	r2, [pc, #64]	@ (800c0c0 <prvCheckForValidListAndQueue+0x64>)
 800c07e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c080:	4b12      	ldr	r3, [pc, #72]	@ (800c0cc <prvCheckForValidListAndQueue+0x70>)
 800c082:	4a10      	ldr	r2, [pc, #64]	@ (800c0c4 <prvCheckForValidListAndQueue+0x68>)
 800c084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c086:	2300      	movs	r3, #0
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	4b11      	ldr	r3, [pc, #68]	@ (800c0d0 <prvCheckForValidListAndQueue+0x74>)
 800c08c:	4a11      	ldr	r2, [pc, #68]	@ (800c0d4 <prvCheckForValidListAndQueue+0x78>)
 800c08e:	2110      	movs	r1, #16
 800c090:	200a      	movs	r0, #10
 800c092:	f7fd fa97 	bl	80095c4 <xQueueGenericCreateStatic>
 800c096:	4603      	mov	r3, r0
 800c098:	4a08      	ldr	r2, [pc, #32]	@ (800c0bc <prvCheckForValidListAndQueue+0x60>)
 800c09a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c09c:	4b07      	ldr	r3, [pc, #28]	@ (800c0bc <prvCheckForValidListAndQueue+0x60>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d005      	beq.n	800c0b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c0a4:	4b05      	ldr	r3, [pc, #20]	@ (800c0bc <prvCheckForValidListAndQueue+0x60>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	490b      	ldr	r1, [pc, #44]	@ (800c0d8 <prvCheckForValidListAndQueue+0x7c>)
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7fe fa7c 	bl	800a5a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0b0:	f000 f974 	bl	800c39c <vPortExitCritical>
}
 800c0b4:	bf00      	nop
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20001270 	.word	0x20001270
 800c0c0:	20001240 	.word	0x20001240
 800c0c4:	20001254 	.word	0x20001254
 800c0c8:	20001268 	.word	0x20001268
 800c0cc:	2000126c 	.word	0x2000126c
 800c0d0:	2000131c 	.word	0x2000131c
 800c0d4:	2000127c 	.word	0x2000127c
 800c0d8:	0800fff4 	.word	0x0800fff4

0800c0dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	3b04      	subs	r3, #4
 800c0ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	f023 0201 	bic.w	r2, r3, #1
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3b04      	subs	r3, #4
 800c10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c10c:	4a0c      	ldr	r2, [pc, #48]	@ (800c140 <pxPortInitialiseStack+0x64>)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3b14      	subs	r3, #20
 800c116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3b04      	subs	r3, #4
 800c122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f06f 0202 	mvn.w	r2, #2
 800c12a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3b20      	subs	r3, #32
 800c130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c132:	68fb      	ldr	r3, [r7, #12]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	0800c145 	.word	0x0800c145

0800c144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c14e:	4b13      	ldr	r3, [pc, #76]	@ (800c19c <prvTaskExitError+0x58>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c156:	d00b      	beq.n	800c170 <prvTaskExitError+0x2c>
	__asm volatile
 800c158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15c:	f383 8811 	msr	BASEPRI, r3
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	60fb      	str	r3, [r7, #12]
}
 800c16a:	bf00      	nop
 800c16c:	bf00      	nop
 800c16e:	e7fd      	b.n	800c16c <prvTaskExitError+0x28>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	60bb      	str	r3, [r7, #8]
}
 800c182:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c184:	bf00      	nop
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d0fc      	beq.n	800c186 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	2000000c 	.word	0x2000000c

0800c1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c1a0:	4b07      	ldr	r3, [pc, #28]	@ (800c1c0 <pxCurrentTCBConst2>)
 800c1a2:	6819      	ldr	r1, [r3, #0]
 800c1a4:	6808      	ldr	r0, [r1, #0]
 800c1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1aa:	f380 8809 	msr	PSP, r0
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f04f 0000 	mov.w	r0, #0
 800c1b6:	f380 8811 	msr	BASEPRI, r0
 800c1ba:	4770      	bx	lr
 800c1bc:	f3af 8000 	nop.w

0800c1c0 <pxCurrentTCBConst2>:
 800c1c0:	20000d40 	.word	0x20000d40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1c4:	bf00      	nop
 800c1c6:	bf00      	nop

0800c1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1c8:	4808      	ldr	r0, [pc, #32]	@ (800c1ec <prvPortStartFirstTask+0x24>)
 800c1ca:	6800      	ldr	r0, [r0, #0]
 800c1cc:	6800      	ldr	r0, [r0, #0]
 800c1ce:	f380 8808 	msr	MSP, r0
 800c1d2:	f04f 0000 	mov.w	r0, #0
 800c1d6:	f380 8814 	msr	CONTROL, r0
 800c1da:	b662      	cpsie	i
 800c1dc:	b661      	cpsie	f
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	df00      	svc	0
 800c1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1ea:	bf00      	nop
 800c1ec:	e000ed08 	.word	0xe000ed08

0800c1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1f6:	4b47      	ldr	r3, [pc, #284]	@ (800c314 <xPortStartScheduler+0x124>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a47      	ldr	r2, [pc, #284]	@ (800c318 <xPortStartScheduler+0x128>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d10b      	bne.n	800c218 <xPortStartScheduler+0x28>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	613b      	str	r3, [r7, #16]
}
 800c212:	bf00      	nop
 800c214:	bf00      	nop
 800c216:	e7fd      	b.n	800c214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c218:	4b3e      	ldr	r3, [pc, #248]	@ (800c314 <xPortStartScheduler+0x124>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a3f      	ldr	r2, [pc, #252]	@ (800c31c <xPortStartScheduler+0x12c>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d10b      	bne.n	800c23a <xPortStartScheduler+0x4a>
	__asm volatile
 800c222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	60fb      	str	r3, [r7, #12]
}
 800c234:	bf00      	nop
 800c236:	bf00      	nop
 800c238:	e7fd      	b.n	800c236 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c23a:	4b39      	ldr	r3, [pc, #228]	@ (800c320 <xPortStartScheduler+0x130>)
 800c23c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	b2db      	uxtb	r3, r3
 800c244:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	22ff      	movs	r2, #255	@ 0xff
 800c24a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	b2db      	uxtb	r3, r3
 800c252:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c254:	78fb      	ldrb	r3, [r7, #3]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	4b31      	ldr	r3, [pc, #196]	@ (800c324 <xPortStartScheduler+0x134>)
 800c260:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c262:	4b31      	ldr	r3, [pc, #196]	@ (800c328 <xPortStartScheduler+0x138>)
 800c264:	2207      	movs	r2, #7
 800c266:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c268:	e009      	b.n	800c27e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c26a:	4b2f      	ldr	r3, [pc, #188]	@ (800c328 <xPortStartScheduler+0x138>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	3b01      	subs	r3, #1
 800c270:	4a2d      	ldr	r2, [pc, #180]	@ (800c328 <xPortStartScheduler+0x138>)
 800c272:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c274:	78fb      	ldrb	r3, [r7, #3]
 800c276:	b2db      	uxtb	r3, r3
 800c278:	005b      	lsls	r3, r3, #1
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c27e:	78fb      	ldrb	r3, [r7, #3]
 800c280:	b2db      	uxtb	r3, r3
 800c282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c286:	2b80      	cmp	r3, #128	@ 0x80
 800c288:	d0ef      	beq.n	800c26a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c28a:	4b27      	ldr	r3, [pc, #156]	@ (800c328 <xPortStartScheduler+0x138>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f1c3 0307 	rsb	r3, r3, #7
 800c292:	2b04      	cmp	r3, #4
 800c294:	d00b      	beq.n	800c2ae <xPortStartScheduler+0xbe>
	__asm volatile
 800c296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29a:	f383 8811 	msr	BASEPRI, r3
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	60bb      	str	r3, [r7, #8]
}
 800c2a8:	bf00      	nop
 800c2aa:	bf00      	nop
 800c2ac:	e7fd      	b.n	800c2aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c2ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c328 <xPortStartScheduler+0x138>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	021b      	lsls	r3, r3, #8
 800c2b4:	4a1c      	ldr	r2, [pc, #112]	@ (800c328 <xPortStartScheduler+0x138>)
 800c2b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c2b8:	4b1b      	ldr	r3, [pc, #108]	@ (800c328 <xPortStartScheduler+0x138>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c2c0:	4a19      	ldr	r2, [pc, #100]	@ (800c328 <xPortStartScheduler+0x138>)
 800c2c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2cc:	4b17      	ldr	r3, [pc, #92]	@ (800c32c <xPortStartScheduler+0x13c>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a16      	ldr	r2, [pc, #88]	@ (800c32c <xPortStartScheduler+0x13c>)
 800c2d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c2d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2d8:	4b14      	ldr	r3, [pc, #80]	@ (800c32c <xPortStartScheduler+0x13c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a13      	ldr	r2, [pc, #76]	@ (800c32c <xPortStartScheduler+0x13c>)
 800c2de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c2e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2e4:	f000 f8da 	bl	800c49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2e8:	4b11      	ldr	r3, [pc, #68]	@ (800c330 <xPortStartScheduler+0x140>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2ee:	f000 f8f9 	bl	800c4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2f2:	4b10      	ldr	r3, [pc, #64]	@ (800c334 <xPortStartScheduler+0x144>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a0f      	ldr	r2, [pc, #60]	@ (800c334 <xPortStartScheduler+0x144>)
 800c2f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c2fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2fe:	f7ff ff63 	bl	800c1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c302:	f7fe fdb3 	bl	800ae6c <vTaskSwitchContext>
	prvTaskExitError();
 800c306:	f7ff ff1d 	bl	800c144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	e000ed00 	.word	0xe000ed00
 800c318:	410fc271 	.word	0x410fc271
 800c31c:	410fc270 	.word	0x410fc270
 800c320:	e000e400 	.word	0xe000e400
 800c324:	2000136c 	.word	0x2000136c
 800c328:	20001370 	.word	0x20001370
 800c32c:	e000ed20 	.word	0xe000ed20
 800c330:	2000000c 	.word	0x2000000c
 800c334:	e000ef34 	.word	0xe000ef34

0800c338 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	607b      	str	r3, [r7, #4]
}
 800c350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c352:	4b10      	ldr	r3, [pc, #64]	@ (800c394 <vPortEnterCritical+0x5c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3301      	adds	r3, #1
 800c358:	4a0e      	ldr	r2, [pc, #56]	@ (800c394 <vPortEnterCritical+0x5c>)
 800c35a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c35c:	4b0d      	ldr	r3, [pc, #52]	@ (800c394 <vPortEnterCritical+0x5c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d110      	bne.n	800c386 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c364:	4b0c      	ldr	r3, [pc, #48]	@ (800c398 <vPortEnterCritical+0x60>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00b      	beq.n	800c386 <vPortEnterCritical+0x4e>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	603b      	str	r3, [r7, #0]
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	e7fd      	b.n	800c382 <vPortEnterCritical+0x4a>
	}
}
 800c386:	bf00      	nop
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	2000000c 	.word	0x2000000c
 800c398:	e000ed04 	.word	0xe000ed04

0800c39c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c3a2:	4b12      	ldr	r3, [pc, #72]	@ (800c3ec <vPortExitCritical+0x50>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10b      	bne.n	800c3c2 <vPortExitCritical+0x26>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	607b      	str	r3, [r7, #4]
}
 800c3bc:	bf00      	nop
 800c3be:	bf00      	nop
 800c3c0:	e7fd      	b.n	800c3be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c3ec <vPortExitCritical+0x50>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	4a08      	ldr	r2, [pc, #32]	@ (800c3ec <vPortExitCritical+0x50>)
 800c3ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3cc:	4b07      	ldr	r3, [pc, #28]	@ (800c3ec <vPortExitCritical+0x50>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d105      	bne.n	800c3e0 <vPortExitCritical+0x44>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	f383 8811 	msr	BASEPRI, r3
}
 800c3de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	2000000c 	.word	0x2000000c

0800c3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3f0:	f3ef 8009 	mrs	r0, PSP
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	4b15      	ldr	r3, [pc, #84]	@ (800c450 <pxCurrentTCBConst>)
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	f01e 0f10 	tst.w	lr, #16
 800c400:	bf08      	it	eq
 800c402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40a:	6010      	str	r0, [r2, #0]
 800c40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c410:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c414:	f380 8811 	msr	BASEPRI, r0
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	f7fe fd24 	bl	800ae6c <vTaskSwitchContext>
 800c424:	f04f 0000 	mov.w	r0, #0
 800c428:	f380 8811 	msr	BASEPRI, r0
 800c42c:	bc09      	pop	{r0, r3}
 800c42e:	6819      	ldr	r1, [r3, #0]
 800c430:	6808      	ldr	r0, [r1, #0]
 800c432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c436:	f01e 0f10 	tst.w	lr, #16
 800c43a:	bf08      	it	eq
 800c43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c440:	f380 8809 	msr	PSP, r0
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	f3af 8000 	nop.w

0800c450 <pxCurrentTCBConst>:
 800c450:	20000d40 	.word	0x20000d40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop

0800c458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
	__asm volatile
 800c45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c462:	f383 8811 	msr	BASEPRI, r3
 800c466:	f3bf 8f6f 	isb	sy
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	607b      	str	r3, [r7, #4]
}
 800c470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c472:	f7fe fc41 	bl	800acf8 <xTaskIncrementTick>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d003      	beq.n	800c484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c47c:	4b06      	ldr	r3, [pc, #24]	@ (800c498 <xPortSysTickHandler+0x40>)
 800c47e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c482:	601a      	str	r2, [r3, #0]
 800c484:	2300      	movs	r3, #0
 800c486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f383 8811 	msr	BASEPRI, r3
}
 800c48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	e000ed04 	.word	0xe000ed04

0800c49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c49c:	b480      	push	{r7}
 800c49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c4d0 <vPortSetupTimerInterrupt+0x34>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c4d4 <vPortSetupTimerInterrupt+0x38>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c4d8 <vPortSetupTimerInterrupt+0x3c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a0a      	ldr	r2, [pc, #40]	@ (800c4dc <vPortSetupTimerInterrupt+0x40>)
 800c4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b6:	099b      	lsrs	r3, r3, #6
 800c4b8:	4a09      	ldr	r2, [pc, #36]	@ (800c4e0 <vPortSetupTimerInterrupt+0x44>)
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c4be:	4b04      	ldr	r3, [pc, #16]	@ (800c4d0 <vPortSetupTimerInterrupt+0x34>)
 800c4c0:	2207      	movs	r2, #7
 800c4c2:	601a      	str	r2, [r3, #0]
}
 800c4c4:	bf00      	nop
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	e000e010 	.word	0xe000e010
 800c4d4:	e000e018 	.word	0xe000e018
 800c4d8:	20000000 	.word	0x20000000
 800c4dc:	10624dd3 	.word	0x10624dd3
 800c4e0:	e000e014 	.word	0xe000e014

0800c4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c4f4 <vPortEnableVFP+0x10>
 800c4e8:	6801      	ldr	r1, [r0, #0]
 800c4ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4ee:	6001      	str	r1, [r0, #0]
 800c4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4f2:	bf00      	nop
 800c4f4:	e000ed88 	.word	0xe000ed88

0800c4f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4fe:	f3ef 8305 	mrs	r3, IPSR
 800c502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2b0f      	cmp	r3, #15
 800c508:	d915      	bls.n	800c536 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c50a:	4a18      	ldr	r2, [pc, #96]	@ (800c56c <vPortValidateInterruptPriority+0x74>)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	4413      	add	r3, r2
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c514:	4b16      	ldr	r3, [pc, #88]	@ (800c570 <vPortValidateInterruptPriority+0x78>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	7afa      	ldrb	r2, [r7, #11]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d20b      	bcs.n	800c536 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	607b      	str	r3, [r7, #4]
}
 800c530:	bf00      	nop
 800c532:	bf00      	nop
 800c534:	e7fd      	b.n	800c532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c536:	4b0f      	ldr	r3, [pc, #60]	@ (800c574 <vPortValidateInterruptPriority+0x7c>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c53e:	4b0e      	ldr	r3, [pc, #56]	@ (800c578 <vPortValidateInterruptPriority+0x80>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	429a      	cmp	r2, r3
 800c544:	d90b      	bls.n	800c55e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	603b      	str	r3, [r7, #0]
}
 800c558:	bf00      	nop
 800c55a:	bf00      	nop
 800c55c:	e7fd      	b.n	800c55a <vPortValidateInterruptPriority+0x62>
	}
 800c55e:	bf00      	nop
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	e000e3f0 	.word	0xe000e3f0
 800c570:	2000136c 	.word	0x2000136c
 800c574:	e000ed0c 	.word	0xe000ed0c
 800c578:	20001370 	.word	0x20001370

0800c57c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b08a      	sub	sp, #40	@ 0x28
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c584:	2300      	movs	r3, #0
 800c586:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c588:	f7fe fafa 	bl	800ab80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c58c:	4b5c      	ldr	r3, [pc, #368]	@ (800c700 <pvPortMalloc+0x184>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c594:	f000 f924 	bl	800c7e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c598:	4b5a      	ldr	r3, [pc, #360]	@ (800c704 <pvPortMalloc+0x188>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4013      	ands	r3, r2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f040 8095 	bne.w	800c6d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d01e      	beq.n	800c5ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c5ac:	2208      	movs	r2, #8
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d015      	beq.n	800c5ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f023 0307 	bic.w	r3, r3, #7
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f003 0307 	and.w	r3, r3, #7
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00b      	beq.n	800c5ea <pvPortMalloc+0x6e>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	617b      	str	r3, [r7, #20]
}
 800c5e4:	bf00      	nop
 800c5e6:	bf00      	nop
 800c5e8:	e7fd      	b.n	800c5e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d06f      	beq.n	800c6d0 <pvPortMalloc+0x154>
 800c5f0:	4b45      	ldr	r3, [pc, #276]	@ (800c708 <pvPortMalloc+0x18c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d86a      	bhi.n	800c6d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5fa:	4b44      	ldr	r3, [pc, #272]	@ (800c70c <pvPortMalloc+0x190>)
 800c5fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5fe:	4b43      	ldr	r3, [pc, #268]	@ (800c70c <pvPortMalloc+0x190>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c604:	e004      	b.n	800c610 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	429a      	cmp	r2, r3
 800c618:	d903      	bls.n	800c622 <pvPortMalloc+0xa6>
 800c61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1f1      	bne.n	800c606 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c622:	4b37      	ldr	r3, [pc, #220]	@ (800c700 <pvPortMalloc+0x184>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c628:	429a      	cmp	r2, r3
 800c62a:	d051      	beq.n	800c6d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2208      	movs	r2, #8
 800c632:	4413      	add	r3, r2
 800c634:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	1ad2      	subs	r2, r2, r3
 800c646:	2308      	movs	r3, #8
 800c648:	005b      	lsls	r3, r3, #1
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d920      	bls.n	800c690 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c64e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4413      	add	r3, r2
 800c654:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	f003 0307 	and.w	r3, r3, #7
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d00b      	beq.n	800c678 <pvPortMalloc+0xfc>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	613b      	str	r3, [r7, #16]
}
 800c672:	bf00      	nop
 800c674:	bf00      	nop
 800c676:	e7fd      	b.n	800c674 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c68a:	69b8      	ldr	r0, [r7, #24]
 800c68c:	f000 f90a 	bl	800c8a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c690:	4b1d      	ldr	r3, [pc, #116]	@ (800c708 <pvPortMalloc+0x18c>)
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	4a1b      	ldr	r2, [pc, #108]	@ (800c708 <pvPortMalloc+0x18c>)
 800c69c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c69e:	4b1a      	ldr	r3, [pc, #104]	@ (800c708 <pvPortMalloc+0x18c>)
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	4b1b      	ldr	r3, [pc, #108]	@ (800c710 <pvPortMalloc+0x194>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d203      	bcs.n	800c6b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c6aa:	4b17      	ldr	r3, [pc, #92]	@ (800c708 <pvPortMalloc+0x18c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a18      	ldr	r2, [pc, #96]	@ (800c710 <pvPortMalloc+0x194>)
 800c6b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b4:	685a      	ldr	r2, [r3, #4]
 800c6b6:	4b13      	ldr	r3, [pc, #76]	@ (800c704 <pvPortMalloc+0x188>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	431a      	orrs	r2, r3
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6c6:	4b13      	ldr	r3, [pc, #76]	@ (800c714 <pvPortMalloc+0x198>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	4a11      	ldr	r2, [pc, #68]	@ (800c714 <pvPortMalloc+0x198>)
 800c6ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6d0:	f7fe fa64 	bl	800ab9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	f003 0307 	and.w	r3, r3, #7
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00b      	beq.n	800c6f6 <pvPortMalloc+0x17a>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	60fb      	str	r3, [r7, #12]
}
 800c6f0:	bf00      	nop
 800c6f2:	bf00      	nop
 800c6f4:	e7fd      	b.n	800c6f2 <pvPortMalloc+0x176>
	return pvReturn;
 800c6f6:	69fb      	ldr	r3, [r7, #28]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3728      	adds	r7, #40	@ 0x28
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	20004f7c 	.word	0x20004f7c
 800c704:	20004f90 	.word	0x20004f90
 800c708:	20004f80 	.word	0x20004f80
 800c70c:	20004f74 	.word	0x20004f74
 800c710:	20004f84 	.word	0x20004f84
 800c714:	20004f88 	.word	0x20004f88

0800c718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d04f      	beq.n	800c7ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c72a:	2308      	movs	r3, #8
 800c72c:	425b      	negs	r3, r3
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	4413      	add	r3, r2
 800c732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	4b25      	ldr	r3, [pc, #148]	@ (800c7d4 <vPortFree+0xbc>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4013      	ands	r3, r2
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10b      	bne.n	800c75e <vPortFree+0x46>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60fb      	str	r3, [r7, #12]
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	e7fd      	b.n	800c75a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00b      	beq.n	800c77e <vPortFree+0x66>
	__asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	60bb      	str	r3, [r7, #8]
}
 800c778:	bf00      	nop
 800c77a:	bf00      	nop
 800c77c:	e7fd      	b.n	800c77a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	685a      	ldr	r2, [r3, #4]
 800c782:	4b14      	ldr	r3, [pc, #80]	@ (800c7d4 <vPortFree+0xbc>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4013      	ands	r3, r2
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d01e      	beq.n	800c7ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d11a      	bne.n	800c7ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	4b0e      	ldr	r3, [pc, #56]	@ (800c7d4 <vPortFree+0xbc>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	43db      	mvns	r3, r3
 800c79e:	401a      	ands	r2, r3
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c7a4:	f7fe f9ec 	bl	800ab80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	685a      	ldr	r2, [r3, #4]
 800c7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c7d8 <vPortFree+0xc0>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	4a09      	ldr	r2, [pc, #36]	@ (800c7d8 <vPortFree+0xc0>)
 800c7b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c7b6:	6938      	ldr	r0, [r7, #16]
 800c7b8:	f000 f874 	bl	800c8a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c7bc:	4b07      	ldr	r3, [pc, #28]	@ (800c7dc <vPortFree+0xc4>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	4a06      	ldr	r2, [pc, #24]	@ (800c7dc <vPortFree+0xc4>)
 800c7c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c7c6:	f7fe f9e9 	bl	800ab9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7ca:	bf00      	nop
 800c7cc:	3718      	adds	r7, #24
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20004f90 	.word	0x20004f90
 800c7d8:	20004f80 	.word	0x20004f80
 800c7dc:	20004f8c 	.word	0x20004f8c

0800c7e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c7ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7ec:	4b27      	ldr	r3, [pc, #156]	@ (800c88c <prvHeapInit+0xac>)
 800c7ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f003 0307 	and.w	r3, r3, #7
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00c      	beq.n	800c814 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3307      	adds	r3, #7
 800c7fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f023 0307 	bic.w	r3, r3, #7
 800c806:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	4a1f      	ldr	r2, [pc, #124]	@ (800c88c <prvHeapInit+0xac>)
 800c810:	4413      	add	r3, r2
 800c812:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c818:	4a1d      	ldr	r2, [pc, #116]	@ (800c890 <prvHeapInit+0xb0>)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c81e:	4b1c      	ldr	r3, [pc, #112]	@ (800c890 <prvHeapInit+0xb0>)
 800c820:	2200      	movs	r2, #0
 800c822:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	4413      	add	r3, r2
 800c82a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c82c:	2208      	movs	r2, #8
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	1a9b      	subs	r3, r3, r2
 800c832:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f023 0307 	bic.w	r3, r3, #7
 800c83a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	4a15      	ldr	r2, [pc, #84]	@ (800c894 <prvHeapInit+0xb4>)
 800c840:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c842:	4b14      	ldr	r3, [pc, #80]	@ (800c894 <prvHeapInit+0xb4>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2200      	movs	r2, #0
 800c848:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c84a:	4b12      	ldr	r3, [pc, #72]	@ (800c894 <prvHeapInit+0xb4>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	1ad2      	subs	r2, r2, r3
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c860:	4b0c      	ldr	r3, [pc, #48]	@ (800c894 <prvHeapInit+0xb4>)
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	4a0a      	ldr	r2, [pc, #40]	@ (800c898 <prvHeapInit+0xb8>)
 800c86e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	4a09      	ldr	r2, [pc, #36]	@ (800c89c <prvHeapInit+0xbc>)
 800c876:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c878:	4b09      	ldr	r3, [pc, #36]	@ (800c8a0 <prvHeapInit+0xc0>)
 800c87a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c87e:	601a      	str	r2, [r3, #0]
}
 800c880:	bf00      	nop
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	20001374 	.word	0x20001374
 800c890:	20004f74 	.word	0x20004f74
 800c894:	20004f7c 	.word	0x20004f7c
 800c898:	20004f84 	.word	0x20004f84
 800c89c:	20004f80 	.word	0x20004f80
 800c8a0:	20004f90 	.word	0x20004f90

0800c8a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c8ac:	4b28      	ldr	r3, [pc, #160]	@ (800c950 <prvInsertBlockIntoFreeList+0xac>)
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	e002      	b.n	800c8b8 <prvInsertBlockIntoFreeList+0x14>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d8f7      	bhi.n	800c8b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	68ba      	ldr	r2, [r7, #8]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d108      	bne.n	800c8e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	441a      	add	r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	441a      	add	r2, r3
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d118      	bne.n	800c92c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	4b15      	ldr	r3, [pc, #84]	@ (800c954 <prvInsertBlockIntoFreeList+0xb0>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	429a      	cmp	r2, r3
 800c904:	d00d      	beq.n	800c922 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	685a      	ldr	r2, [r3, #4]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	441a      	add	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	e008      	b.n	800c934 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c922:	4b0c      	ldr	r3, [pc, #48]	@ (800c954 <prvInsertBlockIntoFreeList+0xb0>)
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	601a      	str	r2, [r3, #0]
 800c92a:	e003      	b.n	800c934 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d002      	beq.n	800c942 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c942:	bf00      	nop
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	20004f74 	.word	0x20004f74
 800c954:	20004f7c 	.word	0x20004f7c

0800c958 <__cvt>:
 800c958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c95c:	ec57 6b10 	vmov	r6, r7, d0
 800c960:	2f00      	cmp	r7, #0
 800c962:	460c      	mov	r4, r1
 800c964:	4619      	mov	r1, r3
 800c966:	463b      	mov	r3, r7
 800c968:	bfbb      	ittet	lt
 800c96a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c96e:	461f      	movlt	r7, r3
 800c970:	2300      	movge	r3, #0
 800c972:	232d      	movlt	r3, #45	@ 0x2d
 800c974:	700b      	strb	r3, [r1, #0]
 800c976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c978:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c97c:	4691      	mov	r9, r2
 800c97e:	f023 0820 	bic.w	r8, r3, #32
 800c982:	bfbc      	itt	lt
 800c984:	4632      	movlt	r2, r6
 800c986:	4616      	movlt	r6, r2
 800c988:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c98c:	d005      	beq.n	800c99a <__cvt+0x42>
 800c98e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c992:	d100      	bne.n	800c996 <__cvt+0x3e>
 800c994:	3401      	adds	r4, #1
 800c996:	2102      	movs	r1, #2
 800c998:	e000      	b.n	800c99c <__cvt+0x44>
 800c99a:	2103      	movs	r1, #3
 800c99c:	ab03      	add	r3, sp, #12
 800c99e:	9301      	str	r3, [sp, #4]
 800c9a0:	ab02      	add	r3, sp, #8
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	ec47 6b10 	vmov	d0, r6, r7
 800c9a8:	4653      	mov	r3, sl
 800c9aa:	4622      	mov	r2, r4
 800c9ac:	f000 fed4 	bl	800d758 <_dtoa_r>
 800c9b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	d119      	bne.n	800c9ec <__cvt+0x94>
 800c9b8:	f019 0f01 	tst.w	r9, #1
 800c9bc:	d00e      	beq.n	800c9dc <__cvt+0x84>
 800c9be:	eb00 0904 	add.w	r9, r0, r4
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	4639      	mov	r1, r7
 800c9ca:	f7f4 f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9ce:	b108      	cbz	r0, 800c9d4 <__cvt+0x7c>
 800c9d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c9d4:	2230      	movs	r2, #48	@ 0x30
 800c9d6:	9b03      	ldr	r3, [sp, #12]
 800c9d8:	454b      	cmp	r3, r9
 800c9da:	d31e      	bcc.n	800ca1a <__cvt+0xc2>
 800c9dc:	9b03      	ldr	r3, [sp, #12]
 800c9de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9e0:	1b5b      	subs	r3, r3, r5
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	6013      	str	r3, [r2, #0]
 800c9e6:	b004      	add	sp, #16
 800c9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c9f0:	eb00 0904 	add.w	r9, r0, r4
 800c9f4:	d1e5      	bne.n	800c9c2 <__cvt+0x6a>
 800c9f6:	7803      	ldrb	r3, [r0, #0]
 800c9f8:	2b30      	cmp	r3, #48	@ 0x30
 800c9fa:	d10a      	bne.n	800ca12 <__cvt+0xba>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	2300      	movs	r3, #0
 800ca00:	4630      	mov	r0, r6
 800ca02:	4639      	mov	r1, r7
 800ca04:	f7f4 f860 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca08:	b918      	cbnz	r0, 800ca12 <__cvt+0xba>
 800ca0a:	f1c4 0401 	rsb	r4, r4, #1
 800ca0e:	f8ca 4000 	str.w	r4, [sl]
 800ca12:	f8da 3000 	ldr.w	r3, [sl]
 800ca16:	4499      	add	r9, r3
 800ca18:	e7d3      	b.n	800c9c2 <__cvt+0x6a>
 800ca1a:	1c59      	adds	r1, r3, #1
 800ca1c:	9103      	str	r1, [sp, #12]
 800ca1e:	701a      	strb	r2, [r3, #0]
 800ca20:	e7d9      	b.n	800c9d6 <__cvt+0x7e>

0800ca22 <__exponent>:
 800ca22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca24:	2900      	cmp	r1, #0
 800ca26:	bfba      	itte	lt
 800ca28:	4249      	neglt	r1, r1
 800ca2a:	232d      	movlt	r3, #45	@ 0x2d
 800ca2c:	232b      	movge	r3, #43	@ 0x2b
 800ca2e:	2909      	cmp	r1, #9
 800ca30:	7002      	strb	r2, [r0, #0]
 800ca32:	7043      	strb	r3, [r0, #1]
 800ca34:	dd29      	ble.n	800ca8a <__exponent+0x68>
 800ca36:	f10d 0307 	add.w	r3, sp, #7
 800ca3a:	461d      	mov	r5, r3
 800ca3c:	270a      	movs	r7, #10
 800ca3e:	461a      	mov	r2, r3
 800ca40:	fbb1 f6f7 	udiv	r6, r1, r7
 800ca44:	fb07 1416 	mls	r4, r7, r6, r1
 800ca48:	3430      	adds	r4, #48	@ 0x30
 800ca4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ca4e:	460c      	mov	r4, r1
 800ca50:	2c63      	cmp	r4, #99	@ 0x63
 800ca52:	f103 33ff 	add.w	r3, r3, #4294967295
 800ca56:	4631      	mov	r1, r6
 800ca58:	dcf1      	bgt.n	800ca3e <__exponent+0x1c>
 800ca5a:	3130      	adds	r1, #48	@ 0x30
 800ca5c:	1e94      	subs	r4, r2, #2
 800ca5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca62:	1c41      	adds	r1, r0, #1
 800ca64:	4623      	mov	r3, r4
 800ca66:	42ab      	cmp	r3, r5
 800ca68:	d30a      	bcc.n	800ca80 <__exponent+0x5e>
 800ca6a:	f10d 0309 	add.w	r3, sp, #9
 800ca6e:	1a9b      	subs	r3, r3, r2
 800ca70:	42ac      	cmp	r4, r5
 800ca72:	bf88      	it	hi
 800ca74:	2300      	movhi	r3, #0
 800ca76:	3302      	adds	r3, #2
 800ca78:	4403      	add	r3, r0
 800ca7a:	1a18      	subs	r0, r3, r0
 800ca7c:	b003      	add	sp, #12
 800ca7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca80:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ca84:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ca88:	e7ed      	b.n	800ca66 <__exponent+0x44>
 800ca8a:	2330      	movs	r3, #48	@ 0x30
 800ca8c:	3130      	adds	r1, #48	@ 0x30
 800ca8e:	7083      	strb	r3, [r0, #2]
 800ca90:	70c1      	strb	r1, [r0, #3]
 800ca92:	1d03      	adds	r3, r0, #4
 800ca94:	e7f1      	b.n	800ca7a <__exponent+0x58>
	...

0800ca98 <_printf_float>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	b08d      	sub	sp, #52	@ 0x34
 800ca9e:	460c      	mov	r4, r1
 800caa0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800caa4:	4616      	mov	r6, r2
 800caa6:	461f      	mov	r7, r3
 800caa8:	4605      	mov	r5, r0
 800caaa:	f000 fcef 	bl	800d48c <_localeconv_r>
 800caae:	6803      	ldr	r3, [r0, #0]
 800cab0:	9304      	str	r3, [sp, #16]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7f3 fbdc 	bl	8000270 <strlen>
 800cab8:	2300      	movs	r3, #0
 800caba:	930a      	str	r3, [sp, #40]	@ 0x28
 800cabc:	f8d8 3000 	ldr.w	r3, [r8]
 800cac0:	9005      	str	r0, [sp, #20]
 800cac2:	3307      	adds	r3, #7
 800cac4:	f023 0307 	bic.w	r3, r3, #7
 800cac8:	f103 0208 	add.w	r2, r3, #8
 800cacc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cad0:	f8d4 b000 	ldr.w	fp, [r4]
 800cad4:	f8c8 2000 	str.w	r2, [r8]
 800cad8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cadc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cae0:	9307      	str	r3, [sp, #28]
 800cae2:	f8cd 8018 	str.w	r8, [sp, #24]
 800cae6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800caea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caee:	4b9c      	ldr	r3, [pc, #624]	@ (800cd60 <_printf_float+0x2c8>)
 800caf0:	f04f 32ff 	mov.w	r2, #4294967295
 800caf4:	f7f4 f81a 	bl	8000b2c <__aeabi_dcmpun>
 800caf8:	bb70      	cbnz	r0, 800cb58 <_printf_float+0xc0>
 800cafa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cafe:	4b98      	ldr	r3, [pc, #608]	@ (800cd60 <_printf_float+0x2c8>)
 800cb00:	f04f 32ff 	mov.w	r2, #4294967295
 800cb04:	f7f3 fff4 	bl	8000af0 <__aeabi_dcmple>
 800cb08:	bb30      	cbnz	r0, 800cb58 <_printf_float+0xc0>
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	4640      	mov	r0, r8
 800cb10:	4649      	mov	r1, r9
 800cb12:	f7f3 ffe3 	bl	8000adc <__aeabi_dcmplt>
 800cb16:	b110      	cbz	r0, 800cb1e <_printf_float+0x86>
 800cb18:	232d      	movs	r3, #45	@ 0x2d
 800cb1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb1e:	4a91      	ldr	r2, [pc, #580]	@ (800cd64 <_printf_float+0x2cc>)
 800cb20:	4b91      	ldr	r3, [pc, #580]	@ (800cd68 <_printf_float+0x2d0>)
 800cb22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb26:	bf94      	ite	ls
 800cb28:	4690      	movls	r8, r2
 800cb2a:	4698      	movhi	r8, r3
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	6123      	str	r3, [r4, #16]
 800cb30:	f02b 0304 	bic.w	r3, fp, #4
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	f04f 0900 	mov.w	r9, #0
 800cb3a:	9700      	str	r7, [sp, #0]
 800cb3c:	4633      	mov	r3, r6
 800cb3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cb40:	4621      	mov	r1, r4
 800cb42:	4628      	mov	r0, r5
 800cb44:	f000 f9d2 	bl	800ceec <_printf_common>
 800cb48:	3001      	adds	r0, #1
 800cb4a:	f040 808d 	bne.w	800cc68 <_printf_float+0x1d0>
 800cb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb52:	b00d      	add	sp, #52	@ 0x34
 800cb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb58:	4642      	mov	r2, r8
 800cb5a:	464b      	mov	r3, r9
 800cb5c:	4640      	mov	r0, r8
 800cb5e:	4649      	mov	r1, r9
 800cb60:	f7f3 ffe4 	bl	8000b2c <__aeabi_dcmpun>
 800cb64:	b140      	cbz	r0, 800cb78 <_printf_float+0xe0>
 800cb66:	464b      	mov	r3, r9
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	bfbc      	itt	lt
 800cb6c:	232d      	movlt	r3, #45	@ 0x2d
 800cb6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cb72:	4a7e      	ldr	r2, [pc, #504]	@ (800cd6c <_printf_float+0x2d4>)
 800cb74:	4b7e      	ldr	r3, [pc, #504]	@ (800cd70 <_printf_float+0x2d8>)
 800cb76:	e7d4      	b.n	800cb22 <_printf_float+0x8a>
 800cb78:	6863      	ldr	r3, [r4, #4]
 800cb7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cb7e:	9206      	str	r2, [sp, #24]
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	d13b      	bne.n	800cbfc <_printf_float+0x164>
 800cb84:	2306      	movs	r3, #6
 800cb86:	6063      	str	r3, [r4, #4]
 800cb88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	6022      	str	r2, [r4, #0]
 800cb90:	9303      	str	r3, [sp, #12]
 800cb92:	ab0a      	add	r3, sp, #40	@ 0x28
 800cb94:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cb98:	ab09      	add	r3, sp, #36	@ 0x24
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	6861      	ldr	r1, [r4, #4]
 800cb9e:	ec49 8b10 	vmov	d0, r8, r9
 800cba2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cba6:	4628      	mov	r0, r5
 800cba8:	f7ff fed6 	bl	800c958 <__cvt>
 800cbac:	9b06      	ldr	r3, [sp, #24]
 800cbae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbb0:	2b47      	cmp	r3, #71	@ 0x47
 800cbb2:	4680      	mov	r8, r0
 800cbb4:	d129      	bne.n	800cc0a <_printf_float+0x172>
 800cbb6:	1cc8      	adds	r0, r1, #3
 800cbb8:	db02      	blt.n	800cbc0 <_printf_float+0x128>
 800cbba:	6863      	ldr	r3, [r4, #4]
 800cbbc:	4299      	cmp	r1, r3
 800cbbe:	dd41      	ble.n	800cc44 <_printf_float+0x1ac>
 800cbc0:	f1aa 0a02 	sub.w	sl, sl, #2
 800cbc4:	fa5f fa8a 	uxtb.w	sl, sl
 800cbc8:	3901      	subs	r1, #1
 800cbca:	4652      	mov	r2, sl
 800cbcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cbd0:	9109      	str	r1, [sp, #36]	@ 0x24
 800cbd2:	f7ff ff26 	bl	800ca22 <__exponent>
 800cbd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cbd8:	1813      	adds	r3, r2, r0
 800cbda:	2a01      	cmp	r2, #1
 800cbdc:	4681      	mov	r9, r0
 800cbde:	6123      	str	r3, [r4, #16]
 800cbe0:	dc02      	bgt.n	800cbe8 <_printf_float+0x150>
 800cbe2:	6822      	ldr	r2, [r4, #0]
 800cbe4:	07d2      	lsls	r2, r2, #31
 800cbe6:	d501      	bpl.n	800cbec <_printf_float+0x154>
 800cbe8:	3301      	adds	r3, #1
 800cbea:	6123      	str	r3, [r4, #16]
 800cbec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d0a2      	beq.n	800cb3a <_printf_float+0xa2>
 800cbf4:	232d      	movs	r3, #45	@ 0x2d
 800cbf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbfa:	e79e      	b.n	800cb3a <_printf_float+0xa2>
 800cbfc:	9a06      	ldr	r2, [sp, #24]
 800cbfe:	2a47      	cmp	r2, #71	@ 0x47
 800cc00:	d1c2      	bne.n	800cb88 <_printf_float+0xf0>
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1c0      	bne.n	800cb88 <_printf_float+0xf0>
 800cc06:	2301      	movs	r3, #1
 800cc08:	e7bd      	b.n	800cb86 <_printf_float+0xee>
 800cc0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc0e:	d9db      	bls.n	800cbc8 <_printf_float+0x130>
 800cc10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cc14:	d118      	bne.n	800cc48 <_printf_float+0x1b0>
 800cc16:	2900      	cmp	r1, #0
 800cc18:	6863      	ldr	r3, [r4, #4]
 800cc1a:	dd0b      	ble.n	800cc34 <_printf_float+0x19c>
 800cc1c:	6121      	str	r1, [r4, #16]
 800cc1e:	b913      	cbnz	r3, 800cc26 <_printf_float+0x18e>
 800cc20:	6822      	ldr	r2, [r4, #0]
 800cc22:	07d0      	lsls	r0, r2, #31
 800cc24:	d502      	bpl.n	800cc2c <_printf_float+0x194>
 800cc26:	3301      	adds	r3, #1
 800cc28:	440b      	add	r3, r1
 800cc2a:	6123      	str	r3, [r4, #16]
 800cc2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cc2e:	f04f 0900 	mov.w	r9, #0
 800cc32:	e7db      	b.n	800cbec <_printf_float+0x154>
 800cc34:	b913      	cbnz	r3, 800cc3c <_printf_float+0x1a4>
 800cc36:	6822      	ldr	r2, [r4, #0]
 800cc38:	07d2      	lsls	r2, r2, #31
 800cc3a:	d501      	bpl.n	800cc40 <_printf_float+0x1a8>
 800cc3c:	3302      	adds	r3, #2
 800cc3e:	e7f4      	b.n	800cc2a <_printf_float+0x192>
 800cc40:	2301      	movs	r3, #1
 800cc42:	e7f2      	b.n	800cc2a <_printf_float+0x192>
 800cc44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cc48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc4a:	4299      	cmp	r1, r3
 800cc4c:	db05      	blt.n	800cc5a <_printf_float+0x1c2>
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	6121      	str	r1, [r4, #16]
 800cc52:	07d8      	lsls	r0, r3, #31
 800cc54:	d5ea      	bpl.n	800cc2c <_printf_float+0x194>
 800cc56:	1c4b      	adds	r3, r1, #1
 800cc58:	e7e7      	b.n	800cc2a <_printf_float+0x192>
 800cc5a:	2900      	cmp	r1, #0
 800cc5c:	bfd4      	ite	le
 800cc5e:	f1c1 0202 	rsble	r2, r1, #2
 800cc62:	2201      	movgt	r2, #1
 800cc64:	4413      	add	r3, r2
 800cc66:	e7e0      	b.n	800cc2a <_printf_float+0x192>
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	055a      	lsls	r2, r3, #21
 800cc6c:	d407      	bmi.n	800cc7e <_printf_float+0x1e6>
 800cc6e:	6923      	ldr	r3, [r4, #16]
 800cc70:	4642      	mov	r2, r8
 800cc72:	4631      	mov	r1, r6
 800cc74:	4628      	mov	r0, r5
 800cc76:	47b8      	blx	r7
 800cc78:	3001      	adds	r0, #1
 800cc7a:	d12b      	bne.n	800ccd4 <_printf_float+0x23c>
 800cc7c:	e767      	b.n	800cb4e <_printf_float+0xb6>
 800cc7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc82:	f240 80dd 	bls.w	800ce40 <_printf_float+0x3a8>
 800cc86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f7f3 ff1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d033      	beq.n	800ccfe <_printf_float+0x266>
 800cc96:	4a37      	ldr	r2, [pc, #220]	@ (800cd74 <_printf_float+0x2dc>)
 800cc98:	2301      	movs	r3, #1
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	47b8      	blx	r7
 800cca0:	3001      	adds	r0, #1
 800cca2:	f43f af54 	beq.w	800cb4e <_printf_float+0xb6>
 800cca6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ccaa:	4543      	cmp	r3, r8
 800ccac:	db02      	blt.n	800ccb4 <_printf_float+0x21c>
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	07d8      	lsls	r0, r3, #31
 800ccb2:	d50f      	bpl.n	800ccd4 <_printf_float+0x23c>
 800ccb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccb8:	4631      	mov	r1, r6
 800ccba:	4628      	mov	r0, r5
 800ccbc:	47b8      	blx	r7
 800ccbe:	3001      	adds	r0, #1
 800ccc0:	f43f af45 	beq.w	800cb4e <_printf_float+0xb6>
 800ccc4:	f04f 0900 	mov.w	r9, #0
 800ccc8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cccc:	f104 0a1a 	add.w	sl, r4, #26
 800ccd0:	45c8      	cmp	r8, r9
 800ccd2:	dc09      	bgt.n	800cce8 <_printf_float+0x250>
 800ccd4:	6823      	ldr	r3, [r4, #0]
 800ccd6:	079b      	lsls	r3, r3, #30
 800ccd8:	f100 8103 	bmi.w	800cee2 <_printf_float+0x44a>
 800ccdc:	68e0      	ldr	r0, [r4, #12]
 800ccde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cce0:	4298      	cmp	r0, r3
 800cce2:	bfb8      	it	lt
 800cce4:	4618      	movlt	r0, r3
 800cce6:	e734      	b.n	800cb52 <_printf_float+0xba>
 800cce8:	2301      	movs	r3, #1
 800ccea:	4652      	mov	r2, sl
 800ccec:	4631      	mov	r1, r6
 800ccee:	4628      	mov	r0, r5
 800ccf0:	47b8      	blx	r7
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	f43f af2b 	beq.w	800cb4e <_printf_float+0xb6>
 800ccf8:	f109 0901 	add.w	r9, r9, #1
 800ccfc:	e7e8      	b.n	800ccd0 <_printf_float+0x238>
 800ccfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	dc39      	bgt.n	800cd78 <_printf_float+0x2e0>
 800cd04:	4a1b      	ldr	r2, [pc, #108]	@ (800cd74 <_printf_float+0x2dc>)
 800cd06:	2301      	movs	r3, #1
 800cd08:	4631      	mov	r1, r6
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	47b8      	blx	r7
 800cd0e:	3001      	adds	r0, #1
 800cd10:	f43f af1d 	beq.w	800cb4e <_printf_float+0xb6>
 800cd14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cd18:	ea59 0303 	orrs.w	r3, r9, r3
 800cd1c:	d102      	bne.n	800cd24 <_printf_float+0x28c>
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	07d9      	lsls	r1, r3, #31
 800cd22:	d5d7      	bpl.n	800ccd4 <_printf_float+0x23c>
 800cd24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd28:	4631      	mov	r1, r6
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	47b8      	blx	r7
 800cd2e:	3001      	adds	r0, #1
 800cd30:	f43f af0d 	beq.w	800cb4e <_printf_float+0xb6>
 800cd34:	f04f 0a00 	mov.w	sl, #0
 800cd38:	f104 0b1a 	add.w	fp, r4, #26
 800cd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd3e:	425b      	negs	r3, r3
 800cd40:	4553      	cmp	r3, sl
 800cd42:	dc01      	bgt.n	800cd48 <_printf_float+0x2b0>
 800cd44:	464b      	mov	r3, r9
 800cd46:	e793      	b.n	800cc70 <_printf_float+0x1d8>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	465a      	mov	r2, fp
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	f43f aefb 	beq.w	800cb4e <_printf_float+0xb6>
 800cd58:	f10a 0a01 	add.w	sl, sl, #1
 800cd5c:	e7ee      	b.n	800cd3c <_printf_float+0x2a4>
 800cd5e:	bf00      	nop
 800cd60:	7fefffff 	.word	0x7fefffff
 800cd64:	080101c0 	.word	0x080101c0
 800cd68:	080101c4 	.word	0x080101c4
 800cd6c:	080101c8 	.word	0x080101c8
 800cd70:	080101cc 	.word	0x080101cc
 800cd74:	080101d0 	.word	0x080101d0
 800cd78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cd7e:	4553      	cmp	r3, sl
 800cd80:	bfa8      	it	ge
 800cd82:	4653      	movge	r3, sl
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	4699      	mov	r9, r3
 800cd88:	dc36      	bgt.n	800cdf8 <_printf_float+0x360>
 800cd8a:	f04f 0b00 	mov.w	fp, #0
 800cd8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd92:	f104 021a 	add.w	r2, r4, #26
 800cd96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd98:	9306      	str	r3, [sp, #24]
 800cd9a:	eba3 0309 	sub.w	r3, r3, r9
 800cd9e:	455b      	cmp	r3, fp
 800cda0:	dc31      	bgt.n	800ce06 <_printf_float+0x36e>
 800cda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda4:	459a      	cmp	sl, r3
 800cda6:	dc3a      	bgt.n	800ce1e <_printf_float+0x386>
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	07da      	lsls	r2, r3, #31
 800cdac:	d437      	bmi.n	800ce1e <_printf_float+0x386>
 800cdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdb0:	ebaa 0903 	sub.w	r9, sl, r3
 800cdb4:	9b06      	ldr	r3, [sp, #24]
 800cdb6:	ebaa 0303 	sub.w	r3, sl, r3
 800cdba:	4599      	cmp	r9, r3
 800cdbc:	bfa8      	it	ge
 800cdbe:	4699      	movge	r9, r3
 800cdc0:	f1b9 0f00 	cmp.w	r9, #0
 800cdc4:	dc33      	bgt.n	800ce2e <_printf_float+0x396>
 800cdc6:	f04f 0800 	mov.w	r8, #0
 800cdca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cdce:	f104 0b1a 	add.w	fp, r4, #26
 800cdd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd4:	ebaa 0303 	sub.w	r3, sl, r3
 800cdd8:	eba3 0309 	sub.w	r3, r3, r9
 800cddc:	4543      	cmp	r3, r8
 800cdde:	f77f af79 	ble.w	800ccd4 <_printf_float+0x23c>
 800cde2:	2301      	movs	r3, #1
 800cde4:	465a      	mov	r2, fp
 800cde6:	4631      	mov	r1, r6
 800cde8:	4628      	mov	r0, r5
 800cdea:	47b8      	blx	r7
 800cdec:	3001      	adds	r0, #1
 800cdee:	f43f aeae 	beq.w	800cb4e <_printf_float+0xb6>
 800cdf2:	f108 0801 	add.w	r8, r8, #1
 800cdf6:	e7ec      	b.n	800cdd2 <_printf_float+0x33a>
 800cdf8:	4642      	mov	r2, r8
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	47b8      	blx	r7
 800ce00:	3001      	adds	r0, #1
 800ce02:	d1c2      	bne.n	800cd8a <_printf_float+0x2f2>
 800ce04:	e6a3      	b.n	800cb4e <_printf_float+0xb6>
 800ce06:	2301      	movs	r3, #1
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	9206      	str	r2, [sp, #24]
 800ce0e:	47b8      	blx	r7
 800ce10:	3001      	adds	r0, #1
 800ce12:	f43f ae9c 	beq.w	800cb4e <_printf_float+0xb6>
 800ce16:	9a06      	ldr	r2, [sp, #24]
 800ce18:	f10b 0b01 	add.w	fp, fp, #1
 800ce1c:	e7bb      	b.n	800cd96 <_printf_float+0x2fe>
 800ce1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce22:	4631      	mov	r1, r6
 800ce24:	4628      	mov	r0, r5
 800ce26:	47b8      	blx	r7
 800ce28:	3001      	adds	r0, #1
 800ce2a:	d1c0      	bne.n	800cdae <_printf_float+0x316>
 800ce2c:	e68f      	b.n	800cb4e <_printf_float+0xb6>
 800ce2e:	9a06      	ldr	r2, [sp, #24]
 800ce30:	464b      	mov	r3, r9
 800ce32:	4442      	add	r2, r8
 800ce34:	4631      	mov	r1, r6
 800ce36:	4628      	mov	r0, r5
 800ce38:	47b8      	blx	r7
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	d1c3      	bne.n	800cdc6 <_printf_float+0x32e>
 800ce3e:	e686      	b.n	800cb4e <_printf_float+0xb6>
 800ce40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ce44:	f1ba 0f01 	cmp.w	sl, #1
 800ce48:	dc01      	bgt.n	800ce4e <_printf_float+0x3b6>
 800ce4a:	07db      	lsls	r3, r3, #31
 800ce4c:	d536      	bpl.n	800cebc <_printf_float+0x424>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	4642      	mov	r2, r8
 800ce52:	4631      	mov	r1, r6
 800ce54:	4628      	mov	r0, r5
 800ce56:	47b8      	blx	r7
 800ce58:	3001      	adds	r0, #1
 800ce5a:	f43f ae78 	beq.w	800cb4e <_printf_float+0xb6>
 800ce5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce62:	4631      	mov	r1, r6
 800ce64:	4628      	mov	r0, r5
 800ce66:	47b8      	blx	r7
 800ce68:	3001      	adds	r0, #1
 800ce6a:	f43f ae70 	beq.w	800cb4e <_printf_float+0xb6>
 800ce6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce72:	2200      	movs	r2, #0
 800ce74:	2300      	movs	r3, #0
 800ce76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce7a:	f7f3 fe25 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce7e:	b9c0      	cbnz	r0, 800ceb2 <_printf_float+0x41a>
 800ce80:	4653      	mov	r3, sl
 800ce82:	f108 0201 	add.w	r2, r8, #1
 800ce86:	4631      	mov	r1, r6
 800ce88:	4628      	mov	r0, r5
 800ce8a:	47b8      	blx	r7
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	d10c      	bne.n	800ceaa <_printf_float+0x412>
 800ce90:	e65d      	b.n	800cb4e <_printf_float+0xb6>
 800ce92:	2301      	movs	r3, #1
 800ce94:	465a      	mov	r2, fp
 800ce96:	4631      	mov	r1, r6
 800ce98:	4628      	mov	r0, r5
 800ce9a:	47b8      	blx	r7
 800ce9c:	3001      	adds	r0, #1
 800ce9e:	f43f ae56 	beq.w	800cb4e <_printf_float+0xb6>
 800cea2:	f108 0801 	add.w	r8, r8, #1
 800cea6:	45d0      	cmp	r8, sl
 800cea8:	dbf3      	blt.n	800ce92 <_printf_float+0x3fa>
 800ceaa:	464b      	mov	r3, r9
 800ceac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ceb0:	e6df      	b.n	800cc72 <_printf_float+0x1da>
 800ceb2:	f04f 0800 	mov.w	r8, #0
 800ceb6:	f104 0b1a 	add.w	fp, r4, #26
 800ceba:	e7f4      	b.n	800cea6 <_printf_float+0x40e>
 800cebc:	2301      	movs	r3, #1
 800cebe:	4642      	mov	r2, r8
 800cec0:	e7e1      	b.n	800ce86 <_printf_float+0x3ee>
 800cec2:	2301      	movs	r3, #1
 800cec4:	464a      	mov	r2, r9
 800cec6:	4631      	mov	r1, r6
 800cec8:	4628      	mov	r0, r5
 800ceca:	47b8      	blx	r7
 800cecc:	3001      	adds	r0, #1
 800cece:	f43f ae3e 	beq.w	800cb4e <_printf_float+0xb6>
 800ced2:	f108 0801 	add.w	r8, r8, #1
 800ced6:	68e3      	ldr	r3, [r4, #12]
 800ced8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ceda:	1a5b      	subs	r3, r3, r1
 800cedc:	4543      	cmp	r3, r8
 800cede:	dcf0      	bgt.n	800cec2 <_printf_float+0x42a>
 800cee0:	e6fc      	b.n	800ccdc <_printf_float+0x244>
 800cee2:	f04f 0800 	mov.w	r8, #0
 800cee6:	f104 0919 	add.w	r9, r4, #25
 800ceea:	e7f4      	b.n	800ced6 <_printf_float+0x43e>

0800ceec <_printf_common>:
 800ceec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef0:	4616      	mov	r6, r2
 800cef2:	4698      	mov	r8, r3
 800cef4:	688a      	ldr	r2, [r1, #8]
 800cef6:	690b      	ldr	r3, [r1, #16]
 800cef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cefc:	4293      	cmp	r3, r2
 800cefe:	bfb8      	it	lt
 800cf00:	4613      	movlt	r3, r2
 800cf02:	6033      	str	r3, [r6, #0]
 800cf04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cf08:	4607      	mov	r7, r0
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	b10a      	cbz	r2, 800cf12 <_printf_common+0x26>
 800cf0e:	3301      	adds	r3, #1
 800cf10:	6033      	str	r3, [r6, #0]
 800cf12:	6823      	ldr	r3, [r4, #0]
 800cf14:	0699      	lsls	r1, r3, #26
 800cf16:	bf42      	ittt	mi
 800cf18:	6833      	ldrmi	r3, [r6, #0]
 800cf1a:	3302      	addmi	r3, #2
 800cf1c:	6033      	strmi	r3, [r6, #0]
 800cf1e:	6825      	ldr	r5, [r4, #0]
 800cf20:	f015 0506 	ands.w	r5, r5, #6
 800cf24:	d106      	bne.n	800cf34 <_printf_common+0x48>
 800cf26:	f104 0a19 	add.w	sl, r4, #25
 800cf2a:	68e3      	ldr	r3, [r4, #12]
 800cf2c:	6832      	ldr	r2, [r6, #0]
 800cf2e:	1a9b      	subs	r3, r3, r2
 800cf30:	42ab      	cmp	r3, r5
 800cf32:	dc26      	bgt.n	800cf82 <_printf_common+0x96>
 800cf34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf38:	6822      	ldr	r2, [r4, #0]
 800cf3a:	3b00      	subs	r3, #0
 800cf3c:	bf18      	it	ne
 800cf3e:	2301      	movne	r3, #1
 800cf40:	0692      	lsls	r2, r2, #26
 800cf42:	d42b      	bmi.n	800cf9c <_printf_common+0xb0>
 800cf44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf48:	4641      	mov	r1, r8
 800cf4a:	4638      	mov	r0, r7
 800cf4c:	47c8      	blx	r9
 800cf4e:	3001      	adds	r0, #1
 800cf50:	d01e      	beq.n	800cf90 <_printf_common+0xa4>
 800cf52:	6823      	ldr	r3, [r4, #0]
 800cf54:	6922      	ldr	r2, [r4, #16]
 800cf56:	f003 0306 	and.w	r3, r3, #6
 800cf5a:	2b04      	cmp	r3, #4
 800cf5c:	bf02      	ittt	eq
 800cf5e:	68e5      	ldreq	r5, [r4, #12]
 800cf60:	6833      	ldreq	r3, [r6, #0]
 800cf62:	1aed      	subeq	r5, r5, r3
 800cf64:	68a3      	ldr	r3, [r4, #8]
 800cf66:	bf0c      	ite	eq
 800cf68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf6c:	2500      	movne	r5, #0
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	bfc4      	itt	gt
 800cf72:	1a9b      	subgt	r3, r3, r2
 800cf74:	18ed      	addgt	r5, r5, r3
 800cf76:	2600      	movs	r6, #0
 800cf78:	341a      	adds	r4, #26
 800cf7a:	42b5      	cmp	r5, r6
 800cf7c:	d11a      	bne.n	800cfb4 <_printf_common+0xc8>
 800cf7e:	2000      	movs	r0, #0
 800cf80:	e008      	b.n	800cf94 <_printf_common+0xa8>
 800cf82:	2301      	movs	r3, #1
 800cf84:	4652      	mov	r2, sl
 800cf86:	4641      	mov	r1, r8
 800cf88:	4638      	mov	r0, r7
 800cf8a:	47c8      	blx	r9
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	d103      	bne.n	800cf98 <_printf_common+0xac>
 800cf90:	f04f 30ff 	mov.w	r0, #4294967295
 800cf94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf98:	3501      	adds	r5, #1
 800cf9a:	e7c6      	b.n	800cf2a <_printf_common+0x3e>
 800cf9c:	18e1      	adds	r1, r4, r3
 800cf9e:	1c5a      	adds	r2, r3, #1
 800cfa0:	2030      	movs	r0, #48	@ 0x30
 800cfa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cfa6:	4422      	add	r2, r4
 800cfa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cfac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cfb0:	3302      	adds	r3, #2
 800cfb2:	e7c7      	b.n	800cf44 <_printf_common+0x58>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	4622      	mov	r2, r4
 800cfb8:	4641      	mov	r1, r8
 800cfba:	4638      	mov	r0, r7
 800cfbc:	47c8      	blx	r9
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	d0e6      	beq.n	800cf90 <_printf_common+0xa4>
 800cfc2:	3601      	adds	r6, #1
 800cfc4:	e7d9      	b.n	800cf7a <_printf_common+0x8e>
	...

0800cfc8 <_printf_i>:
 800cfc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfcc:	7e0f      	ldrb	r7, [r1, #24]
 800cfce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cfd0:	2f78      	cmp	r7, #120	@ 0x78
 800cfd2:	4691      	mov	r9, r2
 800cfd4:	4680      	mov	r8, r0
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	469a      	mov	sl, r3
 800cfda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cfde:	d807      	bhi.n	800cff0 <_printf_i+0x28>
 800cfe0:	2f62      	cmp	r7, #98	@ 0x62
 800cfe2:	d80a      	bhi.n	800cffa <_printf_i+0x32>
 800cfe4:	2f00      	cmp	r7, #0
 800cfe6:	f000 80d2 	beq.w	800d18e <_printf_i+0x1c6>
 800cfea:	2f58      	cmp	r7, #88	@ 0x58
 800cfec:	f000 80b9 	beq.w	800d162 <_printf_i+0x19a>
 800cff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cff8:	e03a      	b.n	800d070 <_printf_i+0xa8>
 800cffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cffe:	2b15      	cmp	r3, #21
 800d000:	d8f6      	bhi.n	800cff0 <_printf_i+0x28>
 800d002:	a101      	add	r1, pc, #4	@ (adr r1, 800d008 <_printf_i+0x40>)
 800d004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d008:	0800d061 	.word	0x0800d061
 800d00c:	0800d075 	.word	0x0800d075
 800d010:	0800cff1 	.word	0x0800cff1
 800d014:	0800cff1 	.word	0x0800cff1
 800d018:	0800cff1 	.word	0x0800cff1
 800d01c:	0800cff1 	.word	0x0800cff1
 800d020:	0800d075 	.word	0x0800d075
 800d024:	0800cff1 	.word	0x0800cff1
 800d028:	0800cff1 	.word	0x0800cff1
 800d02c:	0800cff1 	.word	0x0800cff1
 800d030:	0800cff1 	.word	0x0800cff1
 800d034:	0800d175 	.word	0x0800d175
 800d038:	0800d09f 	.word	0x0800d09f
 800d03c:	0800d12f 	.word	0x0800d12f
 800d040:	0800cff1 	.word	0x0800cff1
 800d044:	0800cff1 	.word	0x0800cff1
 800d048:	0800d197 	.word	0x0800d197
 800d04c:	0800cff1 	.word	0x0800cff1
 800d050:	0800d09f 	.word	0x0800d09f
 800d054:	0800cff1 	.word	0x0800cff1
 800d058:	0800cff1 	.word	0x0800cff1
 800d05c:	0800d137 	.word	0x0800d137
 800d060:	6833      	ldr	r3, [r6, #0]
 800d062:	1d1a      	adds	r2, r3, #4
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6032      	str	r2, [r6, #0]
 800d068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d06c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d070:	2301      	movs	r3, #1
 800d072:	e09d      	b.n	800d1b0 <_printf_i+0x1e8>
 800d074:	6833      	ldr	r3, [r6, #0]
 800d076:	6820      	ldr	r0, [r4, #0]
 800d078:	1d19      	adds	r1, r3, #4
 800d07a:	6031      	str	r1, [r6, #0]
 800d07c:	0606      	lsls	r6, r0, #24
 800d07e:	d501      	bpl.n	800d084 <_printf_i+0xbc>
 800d080:	681d      	ldr	r5, [r3, #0]
 800d082:	e003      	b.n	800d08c <_printf_i+0xc4>
 800d084:	0645      	lsls	r5, r0, #25
 800d086:	d5fb      	bpl.n	800d080 <_printf_i+0xb8>
 800d088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d08c:	2d00      	cmp	r5, #0
 800d08e:	da03      	bge.n	800d098 <_printf_i+0xd0>
 800d090:	232d      	movs	r3, #45	@ 0x2d
 800d092:	426d      	negs	r5, r5
 800d094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d098:	4859      	ldr	r0, [pc, #356]	@ (800d200 <_printf_i+0x238>)
 800d09a:	230a      	movs	r3, #10
 800d09c:	e011      	b.n	800d0c2 <_printf_i+0xfa>
 800d09e:	6821      	ldr	r1, [r4, #0]
 800d0a0:	6833      	ldr	r3, [r6, #0]
 800d0a2:	0608      	lsls	r0, r1, #24
 800d0a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d0a8:	d402      	bmi.n	800d0b0 <_printf_i+0xe8>
 800d0aa:	0649      	lsls	r1, r1, #25
 800d0ac:	bf48      	it	mi
 800d0ae:	b2ad      	uxthmi	r5, r5
 800d0b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d0b2:	4853      	ldr	r0, [pc, #332]	@ (800d200 <_printf_i+0x238>)
 800d0b4:	6033      	str	r3, [r6, #0]
 800d0b6:	bf14      	ite	ne
 800d0b8:	230a      	movne	r3, #10
 800d0ba:	2308      	moveq	r3, #8
 800d0bc:	2100      	movs	r1, #0
 800d0be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d0c2:	6866      	ldr	r6, [r4, #4]
 800d0c4:	60a6      	str	r6, [r4, #8]
 800d0c6:	2e00      	cmp	r6, #0
 800d0c8:	bfa2      	ittt	ge
 800d0ca:	6821      	ldrge	r1, [r4, #0]
 800d0cc:	f021 0104 	bicge.w	r1, r1, #4
 800d0d0:	6021      	strge	r1, [r4, #0]
 800d0d2:	b90d      	cbnz	r5, 800d0d8 <_printf_i+0x110>
 800d0d4:	2e00      	cmp	r6, #0
 800d0d6:	d04b      	beq.n	800d170 <_printf_i+0x1a8>
 800d0d8:	4616      	mov	r6, r2
 800d0da:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0de:	fb03 5711 	mls	r7, r3, r1, r5
 800d0e2:	5dc7      	ldrb	r7, [r0, r7]
 800d0e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0e8:	462f      	mov	r7, r5
 800d0ea:	42bb      	cmp	r3, r7
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	d9f4      	bls.n	800d0da <_printf_i+0x112>
 800d0f0:	2b08      	cmp	r3, #8
 800d0f2:	d10b      	bne.n	800d10c <_printf_i+0x144>
 800d0f4:	6823      	ldr	r3, [r4, #0]
 800d0f6:	07df      	lsls	r7, r3, #31
 800d0f8:	d508      	bpl.n	800d10c <_printf_i+0x144>
 800d0fa:	6923      	ldr	r3, [r4, #16]
 800d0fc:	6861      	ldr	r1, [r4, #4]
 800d0fe:	4299      	cmp	r1, r3
 800d100:	bfde      	ittt	le
 800d102:	2330      	movle	r3, #48	@ 0x30
 800d104:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d108:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d10c:	1b92      	subs	r2, r2, r6
 800d10e:	6122      	str	r2, [r4, #16]
 800d110:	f8cd a000 	str.w	sl, [sp]
 800d114:	464b      	mov	r3, r9
 800d116:	aa03      	add	r2, sp, #12
 800d118:	4621      	mov	r1, r4
 800d11a:	4640      	mov	r0, r8
 800d11c:	f7ff fee6 	bl	800ceec <_printf_common>
 800d120:	3001      	adds	r0, #1
 800d122:	d14a      	bne.n	800d1ba <_printf_i+0x1f2>
 800d124:	f04f 30ff 	mov.w	r0, #4294967295
 800d128:	b004      	add	sp, #16
 800d12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	f043 0320 	orr.w	r3, r3, #32
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	4833      	ldr	r0, [pc, #204]	@ (800d204 <_printf_i+0x23c>)
 800d138:	2778      	movs	r7, #120	@ 0x78
 800d13a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	6831      	ldr	r1, [r6, #0]
 800d142:	061f      	lsls	r7, r3, #24
 800d144:	f851 5b04 	ldr.w	r5, [r1], #4
 800d148:	d402      	bmi.n	800d150 <_printf_i+0x188>
 800d14a:	065f      	lsls	r7, r3, #25
 800d14c:	bf48      	it	mi
 800d14e:	b2ad      	uxthmi	r5, r5
 800d150:	6031      	str	r1, [r6, #0]
 800d152:	07d9      	lsls	r1, r3, #31
 800d154:	bf44      	itt	mi
 800d156:	f043 0320 	orrmi.w	r3, r3, #32
 800d15a:	6023      	strmi	r3, [r4, #0]
 800d15c:	b11d      	cbz	r5, 800d166 <_printf_i+0x19e>
 800d15e:	2310      	movs	r3, #16
 800d160:	e7ac      	b.n	800d0bc <_printf_i+0xf4>
 800d162:	4827      	ldr	r0, [pc, #156]	@ (800d200 <_printf_i+0x238>)
 800d164:	e7e9      	b.n	800d13a <_printf_i+0x172>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	f023 0320 	bic.w	r3, r3, #32
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	e7f6      	b.n	800d15e <_printf_i+0x196>
 800d170:	4616      	mov	r6, r2
 800d172:	e7bd      	b.n	800d0f0 <_printf_i+0x128>
 800d174:	6833      	ldr	r3, [r6, #0]
 800d176:	6825      	ldr	r5, [r4, #0]
 800d178:	6961      	ldr	r1, [r4, #20]
 800d17a:	1d18      	adds	r0, r3, #4
 800d17c:	6030      	str	r0, [r6, #0]
 800d17e:	062e      	lsls	r6, r5, #24
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	d501      	bpl.n	800d188 <_printf_i+0x1c0>
 800d184:	6019      	str	r1, [r3, #0]
 800d186:	e002      	b.n	800d18e <_printf_i+0x1c6>
 800d188:	0668      	lsls	r0, r5, #25
 800d18a:	d5fb      	bpl.n	800d184 <_printf_i+0x1bc>
 800d18c:	8019      	strh	r1, [r3, #0]
 800d18e:	2300      	movs	r3, #0
 800d190:	6123      	str	r3, [r4, #16]
 800d192:	4616      	mov	r6, r2
 800d194:	e7bc      	b.n	800d110 <_printf_i+0x148>
 800d196:	6833      	ldr	r3, [r6, #0]
 800d198:	1d1a      	adds	r2, r3, #4
 800d19a:	6032      	str	r2, [r6, #0]
 800d19c:	681e      	ldr	r6, [r3, #0]
 800d19e:	6862      	ldr	r2, [r4, #4]
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f7f3 f814 	bl	80001d0 <memchr>
 800d1a8:	b108      	cbz	r0, 800d1ae <_printf_i+0x1e6>
 800d1aa:	1b80      	subs	r0, r0, r6
 800d1ac:	6060      	str	r0, [r4, #4]
 800d1ae:	6863      	ldr	r3, [r4, #4]
 800d1b0:	6123      	str	r3, [r4, #16]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1b8:	e7aa      	b.n	800d110 <_printf_i+0x148>
 800d1ba:	6923      	ldr	r3, [r4, #16]
 800d1bc:	4632      	mov	r2, r6
 800d1be:	4649      	mov	r1, r9
 800d1c0:	4640      	mov	r0, r8
 800d1c2:	47d0      	blx	sl
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	d0ad      	beq.n	800d124 <_printf_i+0x15c>
 800d1c8:	6823      	ldr	r3, [r4, #0]
 800d1ca:	079b      	lsls	r3, r3, #30
 800d1cc:	d413      	bmi.n	800d1f6 <_printf_i+0x22e>
 800d1ce:	68e0      	ldr	r0, [r4, #12]
 800d1d0:	9b03      	ldr	r3, [sp, #12]
 800d1d2:	4298      	cmp	r0, r3
 800d1d4:	bfb8      	it	lt
 800d1d6:	4618      	movlt	r0, r3
 800d1d8:	e7a6      	b.n	800d128 <_printf_i+0x160>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	4632      	mov	r2, r6
 800d1de:	4649      	mov	r1, r9
 800d1e0:	4640      	mov	r0, r8
 800d1e2:	47d0      	blx	sl
 800d1e4:	3001      	adds	r0, #1
 800d1e6:	d09d      	beq.n	800d124 <_printf_i+0x15c>
 800d1e8:	3501      	adds	r5, #1
 800d1ea:	68e3      	ldr	r3, [r4, #12]
 800d1ec:	9903      	ldr	r1, [sp, #12]
 800d1ee:	1a5b      	subs	r3, r3, r1
 800d1f0:	42ab      	cmp	r3, r5
 800d1f2:	dcf2      	bgt.n	800d1da <_printf_i+0x212>
 800d1f4:	e7eb      	b.n	800d1ce <_printf_i+0x206>
 800d1f6:	2500      	movs	r5, #0
 800d1f8:	f104 0619 	add.w	r6, r4, #25
 800d1fc:	e7f5      	b.n	800d1ea <_printf_i+0x222>
 800d1fe:	bf00      	nop
 800d200:	080101d2 	.word	0x080101d2
 800d204:	080101e3 	.word	0x080101e3

0800d208 <std>:
 800d208:	2300      	movs	r3, #0
 800d20a:	b510      	push	{r4, lr}
 800d20c:	4604      	mov	r4, r0
 800d20e:	e9c0 3300 	strd	r3, r3, [r0]
 800d212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d216:	6083      	str	r3, [r0, #8]
 800d218:	8181      	strh	r1, [r0, #12]
 800d21a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d21c:	81c2      	strh	r2, [r0, #14]
 800d21e:	6183      	str	r3, [r0, #24]
 800d220:	4619      	mov	r1, r3
 800d222:	2208      	movs	r2, #8
 800d224:	305c      	adds	r0, #92	@ 0x5c
 800d226:	f000 f928 	bl	800d47a <memset>
 800d22a:	4b0d      	ldr	r3, [pc, #52]	@ (800d260 <std+0x58>)
 800d22c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d22e:	4b0d      	ldr	r3, [pc, #52]	@ (800d264 <std+0x5c>)
 800d230:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d232:	4b0d      	ldr	r3, [pc, #52]	@ (800d268 <std+0x60>)
 800d234:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d236:	4b0d      	ldr	r3, [pc, #52]	@ (800d26c <std+0x64>)
 800d238:	6323      	str	r3, [r4, #48]	@ 0x30
 800d23a:	4b0d      	ldr	r3, [pc, #52]	@ (800d270 <std+0x68>)
 800d23c:	6224      	str	r4, [r4, #32]
 800d23e:	429c      	cmp	r4, r3
 800d240:	d006      	beq.n	800d250 <std+0x48>
 800d242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d246:	4294      	cmp	r4, r2
 800d248:	d002      	beq.n	800d250 <std+0x48>
 800d24a:	33d0      	adds	r3, #208	@ 0xd0
 800d24c:	429c      	cmp	r4, r3
 800d24e:	d105      	bne.n	800d25c <std+0x54>
 800d250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d258:	f000 b9e2 	b.w	800d620 <__retarget_lock_init_recursive>
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	bf00      	nop
 800d260:	0800d3f5 	.word	0x0800d3f5
 800d264:	0800d417 	.word	0x0800d417
 800d268:	0800d44f 	.word	0x0800d44f
 800d26c:	0800d473 	.word	0x0800d473
 800d270:	20004f94 	.word	0x20004f94

0800d274 <stdio_exit_handler>:
 800d274:	4a02      	ldr	r2, [pc, #8]	@ (800d280 <stdio_exit_handler+0xc>)
 800d276:	4903      	ldr	r1, [pc, #12]	@ (800d284 <stdio_exit_handler+0x10>)
 800d278:	4803      	ldr	r0, [pc, #12]	@ (800d288 <stdio_exit_handler+0x14>)
 800d27a:	f000 b869 	b.w	800d350 <_fwalk_sglue>
 800d27e:	bf00      	nop
 800d280:	20000010 	.word	0x20000010
 800d284:	0800ef9d 	.word	0x0800ef9d
 800d288:	20000020 	.word	0x20000020

0800d28c <cleanup_stdio>:
 800d28c:	6841      	ldr	r1, [r0, #4]
 800d28e:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c0 <cleanup_stdio+0x34>)
 800d290:	4299      	cmp	r1, r3
 800d292:	b510      	push	{r4, lr}
 800d294:	4604      	mov	r4, r0
 800d296:	d001      	beq.n	800d29c <cleanup_stdio+0x10>
 800d298:	f001 fe80 	bl	800ef9c <_fflush_r>
 800d29c:	68a1      	ldr	r1, [r4, #8]
 800d29e:	4b09      	ldr	r3, [pc, #36]	@ (800d2c4 <cleanup_stdio+0x38>)
 800d2a0:	4299      	cmp	r1, r3
 800d2a2:	d002      	beq.n	800d2aa <cleanup_stdio+0x1e>
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f001 fe79 	bl	800ef9c <_fflush_r>
 800d2aa:	68e1      	ldr	r1, [r4, #12]
 800d2ac:	4b06      	ldr	r3, [pc, #24]	@ (800d2c8 <cleanup_stdio+0x3c>)
 800d2ae:	4299      	cmp	r1, r3
 800d2b0:	d004      	beq.n	800d2bc <cleanup_stdio+0x30>
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2b8:	f001 be70 	b.w	800ef9c <_fflush_r>
 800d2bc:	bd10      	pop	{r4, pc}
 800d2be:	bf00      	nop
 800d2c0:	20004f94 	.word	0x20004f94
 800d2c4:	20004ffc 	.word	0x20004ffc
 800d2c8:	20005064 	.word	0x20005064

0800d2cc <global_stdio_init.part.0>:
 800d2cc:	b510      	push	{r4, lr}
 800d2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d2fc <global_stdio_init.part.0+0x30>)
 800d2d0:	4c0b      	ldr	r4, [pc, #44]	@ (800d300 <global_stdio_init.part.0+0x34>)
 800d2d2:	4a0c      	ldr	r2, [pc, #48]	@ (800d304 <global_stdio_init.part.0+0x38>)
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	2200      	movs	r2, #0
 800d2da:	2104      	movs	r1, #4
 800d2dc:	f7ff ff94 	bl	800d208 <std>
 800d2e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	2109      	movs	r1, #9
 800d2e8:	f7ff ff8e 	bl	800d208 <std>
 800d2ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2f6:	2112      	movs	r1, #18
 800d2f8:	f7ff bf86 	b.w	800d208 <std>
 800d2fc:	200050cc 	.word	0x200050cc
 800d300:	20004f94 	.word	0x20004f94
 800d304:	0800d275 	.word	0x0800d275

0800d308 <__sfp_lock_acquire>:
 800d308:	4801      	ldr	r0, [pc, #4]	@ (800d310 <__sfp_lock_acquire+0x8>)
 800d30a:	f000 b98a 	b.w	800d622 <__retarget_lock_acquire_recursive>
 800d30e:	bf00      	nop
 800d310:	200050d5 	.word	0x200050d5

0800d314 <__sfp_lock_release>:
 800d314:	4801      	ldr	r0, [pc, #4]	@ (800d31c <__sfp_lock_release+0x8>)
 800d316:	f000 b985 	b.w	800d624 <__retarget_lock_release_recursive>
 800d31a:	bf00      	nop
 800d31c:	200050d5 	.word	0x200050d5

0800d320 <__sinit>:
 800d320:	b510      	push	{r4, lr}
 800d322:	4604      	mov	r4, r0
 800d324:	f7ff fff0 	bl	800d308 <__sfp_lock_acquire>
 800d328:	6a23      	ldr	r3, [r4, #32]
 800d32a:	b11b      	cbz	r3, 800d334 <__sinit+0x14>
 800d32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d330:	f7ff bff0 	b.w	800d314 <__sfp_lock_release>
 800d334:	4b04      	ldr	r3, [pc, #16]	@ (800d348 <__sinit+0x28>)
 800d336:	6223      	str	r3, [r4, #32]
 800d338:	4b04      	ldr	r3, [pc, #16]	@ (800d34c <__sinit+0x2c>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1f5      	bne.n	800d32c <__sinit+0xc>
 800d340:	f7ff ffc4 	bl	800d2cc <global_stdio_init.part.0>
 800d344:	e7f2      	b.n	800d32c <__sinit+0xc>
 800d346:	bf00      	nop
 800d348:	0800d28d 	.word	0x0800d28d
 800d34c:	200050cc 	.word	0x200050cc

0800d350 <_fwalk_sglue>:
 800d350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d354:	4607      	mov	r7, r0
 800d356:	4688      	mov	r8, r1
 800d358:	4614      	mov	r4, r2
 800d35a:	2600      	movs	r6, #0
 800d35c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d360:	f1b9 0901 	subs.w	r9, r9, #1
 800d364:	d505      	bpl.n	800d372 <_fwalk_sglue+0x22>
 800d366:	6824      	ldr	r4, [r4, #0]
 800d368:	2c00      	cmp	r4, #0
 800d36a:	d1f7      	bne.n	800d35c <_fwalk_sglue+0xc>
 800d36c:	4630      	mov	r0, r6
 800d36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d372:	89ab      	ldrh	r3, [r5, #12]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d907      	bls.n	800d388 <_fwalk_sglue+0x38>
 800d378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d37c:	3301      	adds	r3, #1
 800d37e:	d003      	beq.n	800d388 <_fwalk_sglue+0x38>
 800d380:	4629      	mov	r1, r5
 800d382:	4638      	mov	r0, r7
 800d384:	47c0      	blx	r8
 800d386:	4306      	orrs	r6, r0
 800d388:	3568      	adds	r5, #104	@ 0x68
 800d38a:	e7e9      	b.n	800d360 <_fwalk_sglue+0x10>

0800d38c <sniprintf>:
 800d38c:	b40c      	push	{r2, r3}
 800d38e:	b530      	push	{r4, r5, lr}
 800d390:	4b17      	ldr	r3, [pc, #92]	@ (800d3f0 <sniprintf+0x64>)
 800d392:	1e0c      	subs	r4, r1, #0
 800d394:	681d      	ldr	r5, [r3, #0]
 800d396:	b09d      	sub	sp, #116	@ 0x74
 800d398:	da08      	bge.n	800d3ac <sniprintf+0x20>
 800d39a:	238b      	movs	r3, #139	@ 0x8b
 800d39c:	602b      	str	r3, [r5, #0]
 800d39e:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a2:	b01d      	add	sp, #116	@ 0x74
 800d3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3a8:	b002      	add	sp, #8
 800d3aa:	4770      	bx	lr
 800d3ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d3b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d3b4:	bf14      	ite	ne
 800d3b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d3ba:	4623      	moveq	r3, r4
 800d3bc:	9304      	str	r3, [sp, #16]
 800d3be:	9307      	str	r3, [sp, #28]
 800d3c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d3c4:	9002      	str	r0, [sp, #8]
 800d3c6:	9006      	str	r0, [sp, #24]
 800d3c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d3cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d3ce:	ab21      	add	r3, sp, #132	@ 0x84
 800d3d0:	a902      	add	r1, sp, #8
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	f001 fc61 	bl	800ec9c <_svfiprintf_r>
 800d3da:	1c43      	adds	r3, r0, #1
 800d3dc:	bfbc      	itt	lt
 800d3de:	238b      	movlt	r3, #139	@ 0x8b
 800d3e0:	602b      	strlt	r3, [r5, #0]
 800d3e2:	2c00      	cmp	r4, #0
 800d3e4:	d0dd      	beq.n	800d3a2 <sniprintf+0x16>
 800d3e6:	9b02      	ldr	r3, [sp, #8]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	701a      	strb	r2, [r3, #0]
 800d3ec:	e7d9      	b.n	800d3a2 <sniprintf+0x16>
 800d3ee:	bf00      	nop
 800d3f0:	2000001c 	.word	0x2000001c

0800d3f4 <__sread>:
 800d3f4:	b510      	push	{r4, lr}
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3fc:	f000 f8c2 	bl	800d584 <_read_r>
 800d400:	2800      	cmp	r0, #0
 800d402:	bfab      	itete	ge
 800d404:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d406:	89a3      	ldrhlt	r3, [r4, #12]
 800d408:	181b      	addge	r3, r3, r0
 800d40a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d40e:	bfac      	ite	ge
 800d410:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d412:	81a3      	strhlt	r3, [r4, #12]
 800d414:	bd10      	pop	{r4, pc}

0800d416 <__swrite>:
 800d416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d41a:	461f      	mov	r7, r3
 800d41c:	898b      	ldrh	r3, [r1, #12]
 800d41e:	05db      	lsls	r3, r3, #23
 800d420:	4605      	mov	r5, r0
 800d422:	460c      	mov	r4, r1
 800d424:	4616      	mov	r6, r2
 800d426:	d505      	bpl.n	800d434 <__swrite+0x1e>
 800d428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42c:	2302      	movs	r3, #2
 800d42e:	2200      	movs	r2, #0
 800d430:	f000 f896 	bl	800d560 <_lseek_r>
 800d434:	89a3      	ldrh	r3, [r4, #12]
 800d436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d43a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d43e:	81a3      	strh	r3, [r4, #12]
 800d440:	4632      	mov	r2, r6
 800d442:	463b      	mov	r3, r7
 800d444:	4628      	mov	r0, r5
 800d446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d44a:	f000 b8ad 	b.w	800d5a8 <_write_r>

0800d44e <__sseek>:
 800d44e:	b510      	push	{r4, lr}
 800d450:	460c      	mov	r4, r1
 800d452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d456:	f000 f883 	bl	800d560 <_lseek_r>
 800d45a:	1c43      	adds	r3, r0, #1
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	bf15      	itete	ne
 800d460:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d462:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d466:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d46a:	81a3      	strheq	r3, [r4, #12]
 800d46c:	bf18      	it	ne
 800d46e:	81a3      	strhne	r3, [r4, #12]
 800d470:	bd10      	pop	{r4, pc}

0800d472 <__sclose>:
 800d472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d476:	f000 b80d 	b.w	800d494 <_close_r>

0800d47a <memset>:
 800d47a:	4402      	add	r2, r0
 800d47c:	4603      	mov	r3, r0
 800d47e:	4293      	cmp	r3, r2
 800d480:	d100      	bne.n	800d484 <memset+0xa>
 800d482:	4770      	bx	lr
 800d484:	f803 1b01 	strb.w	r1, [r3], #1
 800d488:	e7f9      	b.n	800d47e <memset+0x4>
	...

0800d48c <_localeconv_r>:
 800d48c:	4800      	ldr	r0, [pc, #0]	@ (800d490 <_localeconv_r+0x4>)
 800d48e:	4770      	bx	lr
 800d490:	2000015c 	.word	0x2000015c

0800d494 <_close_r>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	4d06      	ldr	r5, [pc, #24]	@ (800d4b0 <_close_r+0x1c>)
 800d498:	2300      	movs	r3, #0
 800d49a:	4604      	mov	r4, r0
 800d49c:	4608      	mov	r0, r1
 800d49e:	602b      	str	r3, [r5, #0]
 800d4a0:	f7f5 ffb0 	bl	8003404 <_close>
 800d4a4:	1c43      	adds	r3, r0, #1
 800d4a6:	d102      	bne.n	800d4ae <_close_r+0x1a>
 800d4a8:	682b      	ldr	r3, [r5, #0]
 800d4aa:	b103      	cbz	r3, 800d4ae <_close_r+0x1a>
 800d4ac:	6023      	str	r3, [r4, #0]
 800d4ae:	bd38      	pop	{r3, r4, r5, pc}
 800d4b0:	200050d0 	.word	0x200050d0

0800d4b4 <_reclaim_reent>:
 800d4b4:	4b29      	ldr	r3, [pc, #164]	@ (800d55c <_reclaim_reent+0xa8>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4283      	cmp	r3, r0
 800d4ba:	b570      	push	{r4, r5, r6, lr}
 800d4bc:	4604      	mov	r4, r0
 800d4be:	d04b      	beq.n	800d558 <_reclaim_reent+0xa4>
 800d4c0:	69c3      	ldr	r3, [r0, #28]
 800d4c2:	b1ab      	cbz	r3, 800d4f0 <_reclaim_reent+0x3c>
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	b16b      	cbz	r3, 800d4e4 <_reclaim_reent+0x30>
 800d4c8:	2500      	movs	r5, #0
 800d4ca:	69e3      	ldr	r3, [r4, #28]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	5959      	ldr	r1, [r3, r5]
 800d4d0:	2900      	cmp	r1, #0
 800d4d2:	d13b      	bne.n	800d54c <_reclaim_reent+0x98>
 800d4d4:	3504      	adds	r5, #4
 800d4d6:	2d80      	cmp	r5, #128	@ 0x80
 800d4d8:	d1f7      	bne.n	800d4ca <_reclaim_reent+0x16>
 800d4da:	69e3      	ldr	r3, [r4, #28]
 800d4dc:	4620      	mov	r0, r4
 800d4de:	68d9      	ldr	r1, [r3, #12]
 800d4e0:	f000 fefe 	bl	800e2e0 <_free_r>
 800d4e4:	69e3      	ldr	r3, [r4, #28]
 800d4e6:	6819      	ldr	r1, [r3, #0]
 800d4e8:	b111      	cbz	r1, 800d4f0 <_reclaim_reent+0x3c>
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f000 fef8 	bl	800e2e0 <_free_r>
 800d4f0:	6961      	ldr	r1, [r4, #20]
 800d4f2:	b111      	cbz	r1, 800d4fa <_reclaim_reent+0x46>
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f000 fef3 	bl	800e2e0 <_free_r>
 800d4fa:	69e1      	ldr	r1, [r4, #28]
 800d4fc:	b111      	cbz	r1, 800d504 <_reclaim_reent+0x50>
 800d4fe:	4620      	mov	r0, r4
 800d500:	f000 feee 	bl	800e2e0 <_free_r>
 800d504:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d506:	b111      	cbz	r1, 800d50e <_reclaim_reent+0x5a>
 800d508:	4620      	mov	r0, r4
 800d50a:	f000 fee9 	bl	800e2e0 <_free_r>
 800d50e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d510:	b111      	cbz	r1, 800d518 <_reclaim_reent+0x64>
 800d512:	4620      	mov	r0, r4
 800d514:	f000 fee4 	bl	800e2e0 <_free_r>
 800d518:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d51a:	b111      	cbz	r1, 800d522 <_reclaim_reent+0x6e>
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 fedf 	bl	800e2e0 <_free_r>
 800d522:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d524:	b111      	cbz	r1, 800d52c <_reclaim_reent+0x78>
 800d526:	4620      	mov	r0, r4
 800d528:	f000 feda 	bl	800e2e0 <_free_r>
 800d52c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d52e:	b111      	cbz	r1, 800d536 <_reclaim_reent+0x82>
 800d530:	4620      	mov	r0, r4
 800d532:	f000 fed5 	bl	800e2e0 <_free_r>
 800d536:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d538:	b111      	cbz	r1, 800d540 <_reclaim_reent+0x8c>
 800d53a:	4620      	mov	r0, r4
 800d53c:	f000 fed0 	bl	800e2e0 <_free_r>
 800d540:	6a23      	ldr	r3, [r4, #32]
 800d542:	b14b      	cbz	r3, 800d558 <_reclaim_reent+0xa4>
 800d544:	4620      	mov	r0, r4
 800d546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d54a:	4718      	bx	r3
 800d54c:	680e      	ldr	r6, [r1, #0]
 800d54e:	4620      	mov	r0, r4
 800d550:	f000 fec6 	bl	800e2e0 <_free_r>
 800d554:	4631      	mov	r1, r6
 800d556:	e7bb      	b.n	800d4d0 <_reclaim_reent+0x1c>
 800d558:	bd70      	pop	{r4, r5, r6, pc}
 800d55a:	bf00      	nop
 800d55c:	2000001c 	.word	0x2000001c

0800d560 <_lseek_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d07      	ldr	r5, [pc, #28]	@ (800d580 <_lseek_r+0x20>)
 800d564:	4604      	mov	r4, r0
 800d566:	4608      	mov	r0, r1
 800d568:	4611      	mov	r1, r2
 800d56a:	2200      	movs	r2, #0
 800d56c:	602a      	str	r2, [r5, #0]
 800d56e:	461a      	mov	r2, r3
 800d570:	f7f5 ff6f 	bl	8003452 <_lseek>
 800d574:	1c43      	adds	r3, r0, #1
 800d576:	d102      	bne.n	800d57e <_lseek_r+0x1e>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	b103      	cbz	r3, 800d57e <_lseek_r+0x1e>
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	bd38      	pop	{r3, r4, r5, pc}
 800d580:	200050d0 	.word	0x200050d0

0800d584 <_read_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4d07      	ldr	r5, [pc, #28]	@ (800d5a4 <_read_r+0x20>)
 800d588:	4604      	mov	r4, r0
 800d58a:	4608      	mov	r0, r1
 800d58c:	4611      	mov	r1, r2
 800d58e:	2200      	movs	r2, #0
 800d590:	602a      	str	r2, [r5, #0]
 800d592:	461a      	mov	r2, r3
 800d594:	f7f5 fefd 	bl	8003392 <_read>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	d102      	bne.n	800d5a2 <_read_r+0x1e>
 800d59c:	682b      	ldr	r3, [r5, #0]
 800d59e:	b103      	cbz	r3, 800d5a2 <_read_r+0x1e>
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	bd38      	pop	{r3, r4, r5, pc}
 800d5a4:	200050d0 	.word	0x200050d0

0800d5a8 <_write_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4d07      	ldr	r5, [pc, #28]	@ (800d5c8 <_write_r+0x20>)
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	4608      	mov	r0, r1
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	602a      	str	r2, [r5, #0]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	f7f5 ff08 	bl	80033cc <_write>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	d102      	bne.n	800d5c6 <_write_r+0x1e>
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	b103      	cbz	r3, 800d5c6 <_write_r+0x1e>
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	bd38      	pop	{r3, r4, r5, pc}
 800d5c8:	200050d0 	.word	0x200050d0

0800d5cc <__errno>:
 800d5cc:	4b01      	ldr	r3, [pc, #4]	@ (800d5d4 <__errno+0x8>)
 800d5ce:	6818      	ldr	r0, [r3, #0]
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	2000001c 	.word	0x2000001c

0800d5d8 <__libc_init_array>:
 800d5d8:	b570      	push	{r4, r5, r6, lr}
 800d5da:	4d0d      	ldr	r5, [pc, #52]	@ (800d610 <__libc_init_array+0x38>)
 800d5dc:	4c0d      	ldr	r4, [pc, #52]	@ (800d614 <__libc_init_array+0x3c>)
 800d5de:	1b64      	subs	r4, r4, r5
 800d5e0:	10a4      	asrs	r4, r4, #2
 800d5e2:	2600      	movs	r6, #0
 800d5e4:	42a6      	cmp	r6, r4
 800d5e6:	d109      	bne.n	800d5fc <__libc_init_array+0x24>
 800d5e8:	4d0b      	ldr	r5, [pc, #44]	@ (800d618 <__libc_init_array+0x40>)
 800d5ea:	4c0c      	ldr	r4, [pc, #48]	@ (800d61c <__libc_init_array+0x44>)
 800d5ec:	f002 fc30 	bl	800fe50 <_init>
 800d5f0:	1b64      	subs	r4, r4, r5
 800d5f2:	10a4      	asrs	r4, r4, #2
 800d5f4:	2600      	movs	r6, #0
 800d5f6:	42a6      	cmp	r6, r4
 800d5f8:	d105      	bne.n	800d606 <__libc_init_array+0x2e>
 800d5fa:	bd70      	pop	{r4, r5, r6, pc}
 800d5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d600:	4798      	blx	r3
 800d602:	3601      	adds	r6, #1
 800d604:	e7ee      	b.n	800d5e4 <__libc_init_array+0xc>
 800d606:	f855 3b04 	ldr.w	r3, [r5], #4
 800d60a:	4798      	blx	r3
 800d60c:	3601      	adds	r6, #1
 800d60e:	e7f2      	b.n	800d5f6 <__libc_init_array+0x1e>
 800d610:	08010550 	.word	0x08010550
 800d614:	08010550 	.word	0x08010550
 800d618:	08010550 	.word	0x08010550
 800d61c:	08010554 	.word	0x08010554

0800d620 <__retarget_lock_init_recursive>:
 800d620:	4770      	bx	lr

0800d622 <__retarget_lock_acquire_recursive>:
 800d622:	4770      	bx	lr

0800d624 <__retarget_lock_release_recursive>:
 800d624:	4770      	bx	lr

0800d626 <memcpy>:
 800d626:	440a      	add	r2, r1
 800d628:	4291      	cmp	r1, r2
 800d62a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d62e:	d100      	bne.n	800d632 <memcpy+0xc>
 800d630:	4770      	bx	lr
 800d632:	b510      	push	{r4, lr}
 800d634:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d638:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d63c:	4291      	cmp	r1, r2
 800d63e:	d1f9      	bne.n	800d634 <memcpy+0xe>
 800d640:	bd10      	pop	{r4, pc}

0800d642 <quorem>:
 800d642:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d646:	6903      	ldr	r3, [r0, #16]
 800d648:	690c      	ldr	r4, [r1, #16]
 800d64a:	42a3      	cmp	r3, r4
 800d64c:	4607      	mov	r7, r0
 800d64e:	db7e      	blt.n	800d74e <quorem+0x10c>
 800d650:	3c01      	subs	r4, #1
 800d652:	f101 0814 	add.w	r8, r1, #20
 800d656:	00a3      	lsls	r3, r4, #2
 800d658:	f100 0514 	add.w	r5, r0, #20
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d662:	9301      	str	r3, [sp, #4]
 800d664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d66c:	3301      	adds	r3, #1
 800d66e:	429a      	cmp	r2, r3
 800d670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d674:	fbb2 f6f3 	udiv	r6, r2, r3
 800d678:	d32e      	bcc.n	800d6d8 <quorem+0x96>
 800d67a:	f04f 0a00 	mov.w	sl, #0
 800d67e:	46c4      	mov	ip, r8
 800d680:	46ae      	mov	lr, r5
 800d682:	46d3      	mov	fp, sl
 800d684:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d688:	b298      	uxth	r0, r3
 800d68a:	fb06 a000 	mla	r0, r6, r0, sl
 800d68e:	0c02      	lsrs	r2, r0, #16
 800d690:	0c1b      	lsrs	r3, r3, #16
 800d692:	fb06 2303 	mla	r3, r6, r3, r2
 800d696:	f8de 2000 	ldr.w	r2, [lr]
 800d69a:	b280      	uxth	r0, r0
 800d69c:	b292      	uxth	r2, r2
 800d69e:	1a12      	subs	r2, r2, r0
 800d6a0:	445a      	add	r2, fp
 800d6a2:	f8de 0000 	ldr.w	r0, [lr]
 800d6a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d6b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d6b4:	b292      	uxth	r2, r2
 800d6b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d6ba:	45e1      	cmp	r9, ip
 800d6bc:	f84e 2b04 	str.w	r2, [lr], #4
 800d6c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d6c4:	d2de      	bcs.n	800d684 <quorem+0x42>
 800d6c6:	9b00      	ldr	r3, [sp, #0]
 800d6c8:	58eb      	ldr	r3, [r5, r3]
 800d6ca:	b92b      	cbnz	r3, 800d6d8 <quorem+0x96>
 800d6cc:	9b01      	ldr	r3, [sp, #4]
 800d6ce:	3b04      	subs	r3, #4
 800d6d0:	429d      	cmp	r5, r3
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	d32f      	bcc.n	800d736 <quorem+0xf4>
 800d6d6:	613c      	str	r4, [r7, #16]
 800d6d8:	4638      	mov	r0, r7
 800d6da:	f001 f97b 	bl	800e9d4 <__mcmp>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	db25      	blt.n	800d72e <quorem+0xec>
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6ea:	f8d1 c000 	ldr.w	ip, [r1]
 800d6ee:	fa1f fe82 	uxth.w	lr, r2
 800d6f2:	fa1f f38c 	uxth.w	r3, ip
 800d6f6:	eba3 030e 	sub.w	r3, r3, lr
 800d6fa:	4403      	add	r3, r0
 800d6fc:	0c12      	lsrs	r2, r2, #16
 800d6fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d702:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d706:	b29b      	uxth	r3, r3
 800d708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d70c:	45c1      	cmp	r9, r8
 800d70e:	f841 3b04 	str.w	r3, [r1], #4
 800d712:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d716:	d2e6      	bcs.n	800d6e6 <quorem+0xa4>
 800d718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d71c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d720:	b922      	cbnz	r2, 800d72c <quorem+0xea>
 800d722:	3b04      	subs	r3, #4
 800d724:	429d      	cmp	r5, r3
 800d726:	461a      	mov	r2, r3
 800d728:	d30b      	bcc.n	800d742 <quorem+0x100>
 800d72a:	613c      	str	r4, [r7, #16]
 800d72c:	3601      	adds	r6, #1
 800d72e:	4630      	mov	r0, r6
 800d730:	b003      	add	sp, #12
 800d732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d736:	6812      	ldr	r2, [r2, #0]
 800d738:	3b04      	subs	r3, #4
 800d73a:	2a00      	cmp	r2, #0
 800d73c:	d1cb      	bne.n	800d6d6 <quorem+0x94>
 800d73e:	3c01      	subs	r4, #1
 800d740:	e7c6      	b.n	800d6d0 <quorem+0x8e>
 800d742:	6812      	ldr	r2, [r2, #0]
 800d744:	3b04      	subs	r3, #4
 800d746:	2a00      	cmp	r2, #0
 800d748:	d1ef      	bne.n	800d72a <quorem+0xe8>
 800d74a:	3c01      	subs	r4, #1
 800d74c:	e7ea      	b.n	800d724 <quorem+0xe2>
 800d74e:	2000      	movs	r0, #0
 800d750:	e7ee      	b.n	800d730 <quorem+0xee>
 800d752:	0000      	movs	r0, r0
 800d754:	0000      	movs	r0, r0
	...

0800d758 <_dtoa_r>:
 800d758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d75c:	69c7      	ldr	r7, [r0, #28]
 800d75e:	b099      	sub	sp, #100	@ 0x64
 800d760:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d764:	ec55 4b10 	vmov	r4, r5, d0
 800d768:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d76a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d76c:	4683      	mov	fp, r0
 800d76e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d770:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d772:	b97f      	cbnz	r7, 800d794 <_dtoa_r+0x3c>
 800d774:	2010      	movs	r0, #16
 800d776:	f000 fdfd 	bl	800e374 <malloc>
 800d77a:	4602      	mov	r2, r0
 800d77c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d780:	b920      	cbnz	r0, 800d78c <_dtoa_r+0x34>
 800d782:	4ba7      	ldr	r3, [pc, #668]	@ (800da20 <_dtoa_r+0x2c8>)
 800d784:	21ef      	movs	r1, #239	@ 0xef
 800d786:	48a7      	ldr	r0, [pc, #668]	@ (800da24 <_dtoa_r+0x2cc>)
 800d788:	f001 fc5a 	bl	800f040 <__assert_func>
 800d78c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d790:	6007      	str	r7, [r0, #0]
 800d792:	60c7      	str	r7, [r0, #12]
 800d794:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d798:	6819      	ldr	r1, [r3, #0]
 800d79a:	b159      	cbz	r1, 800d7b4 <_dtoa_r+0x5c>
 800d79c:	685a      	ldr	r2, [r3, #4]
 800d79e:	604a      	str	r2, [r1, #4]
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	4093      	lsls	r3, r2
 800d7a4:	608b      	str	r3, [r1, #8]
 800d7a6:	4658      	mov	r0, fp
 800d7a8:	f000 feda 	bl	800e560 <_Bfree>
 800d7ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	1e2b      	subs	r3, r5, #0
 800d7b6:	bfb9      	ittee	lt
 800d7b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d7bc:	9303      	strlt	r3, [sp, #12]
 800d7be:	2300      	movge	r3, #0
 800d7c0:	6033      	strge	r3, [r6, #0]
 800d7c2:	9f03      	ldr	r7, [sp, #12]
 800d7c4:	4b98      	ldr	r3, [pc, #608]	@ (800da28 <_dtoa_r+0x2d0>)
 800d7c6:	bfbc      	itt	lt
 800d7c8:	2201      	movlt	r2, #1
 800d7ca:	6032      	strlt	r2, [r6, #0]
 800d7cc:	43bb      	bics	r3, r7
 800d7ce:	d112      	bne.n	800d7f6 <_dtoa_r+0x9e>
 800d7d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d7d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d7d6:	6013      	str	r3, [r2, #0]
 800d7d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7dc:	4323      	orrs	r3, r4
 800d7de:	f000 854d 	beq.w	800e27c <_dtoa_r+0xb24>
 800d7e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d7e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800da3c <_dtoa_r+0x2e4>
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 854f 	beq.w	800e28c <_dtoa_r+0xb34>
 800d7ee:	f10a 0303 	add.w	r3, sl, #3
 800d7f2:	f000 bd49 	b.w	800e288 <_dtoa_r+0xb30>
 800d7f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	ec51 0b17 	vmov	r0, r1, d7
 800d800:	2300      	movs	r3, #0
 800d802:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d806:	f7f3 f95f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d80a:	4680      	mov	r8, r0
 800d80c:	b158      	cbz	r0, 800d826 <_dtoa_r+0xce>
 800d80e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d810:	2301      	movs	r3, #1
 800d812:	6013      	str	r3, [r2, #0]
 800d814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d816:	b113      	cbz	r3, 800d81e <_dtoa_r+0xc6>
 800d818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d81a:	4b84      	ldr	r3, [pc, #528]	@ (800da2c <_dtoa_r+0x2d4>)
 800d81c:	6013      	str	r3, [r2, #0]
 800d81e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800da40 <_dtoa_r+0x2e8>
 800d822:	f000 bd33 	b.w	800e28c <_dtoa_r+0xb34>
 800d826:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d82a:	aa16      	add	r2, sp, #88	@ 0x58
 800d82c:	a917      	add	r1, sp, #92	@ 0x5c
 800d82e:	4658      	mov	r0, fp
 800d830:	f001 f980 	bl	800eb34 <__d2b>
 800d834:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d838:	4681      	mov	r9, r0
 800d83a:	2e00      	cmp	r6, #0
 800d83c:	d077      	beq.n	800d92e <_dtoa_r+0x1d6>
 800d83e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d840:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d84c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d850:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d854:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d858:	4619      	mov	r1, r3
 800d85a:	2200      	movs	r2, #0
 800d85c:	4b74      	ldr	r3, [pc, #464]	@ (800da30 <_dtoa_r+0x2d8>)
 800d85e:	f7f2 fd13 	bl	8000288 <__aeabi_dsub>
 800d862:	a369      	add	r3, pc, #420	@ (adr r3, 800da08 <_dtoa_r+0x2b0>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f7f2 fec6 	bl	80005f8 <__aeabi_dmul>
 800d86c:	a368      	add	r3, pc, #416	@ (adr r3, 800da10 <_dtoa_r+0x2b8>)
 800d86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d872:	f7f2 fd0b 	bl	800028c <__adddf3>
 800d876:	4604      	mov	r4, r0
 800d878:	4630      	mov	r0, r6
 800d87a:	460d      	mov	r5, r1
 800d87c:	f7f2 fe52 	bl	8000524 <__aeabi_i2d>
 800d880:	a365      	add	r3, pc, #404	@ (adr r3, 800da18 <_dtoa_r+0x2c0>)
 800d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d886:	f7f2 feb7 	bl	80005f8 <__aeabi_dmul>
 800d88a:	4602      	mov	r2, r0
 800d88c:	460b      	mov	r3, r1
 800d88e:	4620      	mov	r0, r4
 800d890:	4629      	mov	r1, r5
 800d892:	f7f2 fcfb 	bl	800028c <__adddf3>
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	f7f3 f95d 	bl	8000b58 <__aeabi_d2iz>
 800d89e:	2200      	movs	r2, #0
 800d8a0:	4607      	mov	r7, r0
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	f7f3 f918 	bl	8000adc <__aeabi_dcmplt>
 800d8ac:	b140      	cbz	r0, 800d8c0 <_dtoa_r+0x168>
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	f7f2 fe38 	bl	8000524 <__aeabi_i2d>
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	f7f3 f906 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8bc:	b900      	cbnz	r0, 800d8c0 <_dtoa_r+0x168>
 800d8be:	3f01      	subs	r7, #1
 800d8c0:	2f16      	cmp	r7, #22
 800d8c2:	d851      	bhi.n	800d968 <_dtoa_r+0x210>
 800d8c4:	4b5b      	ldr	r3, [pc, #364]	@ (800da34 <_dtoa_r+0x2dc>)
 800d8c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8d2:	f7f3 f903 	bl	8000adc <__aeabi_dcmplt>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d048      	beq.n	800d96c <_dtoa_r+0x214>
 800d8da:	3f01      	subs	r7, #1
 800d8dc:	2300      	movs	r3, #0
 800d8de:	9312      	str	r3, [sp, #72]	@ 0x48
 800d8e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d8e2:	1b9b      	subs	r3, r3, r6
 800d8e4:	1e5a      	subs	r2, r3, #1
 800d8e6:	bf44      	itt	mi
 800d8e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d8ec:	2300      	movmi	r3, #0
 800d8ee:	9208      	str	r2, [sp, #32]
 800d8f0:	bf54      	ite	pl
 800d8f2:	f04f 0800 	movpl.w	r8, #0
 800d8f6:	9308      	strmi	r3, [sp, #32]
 800d8f8:	2f00      	cmp	r7, #0
 800d8fa:	db39      	blt.n	800d970 <_dtoa_r+0x218>
 800d8fc:	9b08      	ldr	r3, [sp, #32]
 800d8fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d900:	443b      	add	r3, r7
 800d902:	9308      	str	r3, [sp, #32]
 800d904:	2300      	movs	r3, #0
 800d906:	930a      	str	r3, [sp, #40]	@ 0x28
 800d908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d90a:	2b09      	cmp	r3, #9
 800d90c:	d864      	bhi.n	800d9d8 <_dtoa_r+0x280>
 800d90e:	2b05      	cmp	r3, #5
 800d910:	bfc4      	itt	gt
 800d912:	3b04      	subgt	r3, #4
 800d914:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d918:	f1a3 0302 	sub.w	r3, r3, #2
 800d91c:	bfcc      	ite	gt
 800d91e:	2400      	movgt	r4, #0
 800d920:	2401      	movle	r4, #1
 800d922:	2b03      	cmp	r3, #3
 800d924:	d863      	bhi.n	800d9ee <_dtoa_r+0x296>
 800d926:	e8df f003 	tbb	[pc, r3]
 800d92a:	372a      	.short	0x372a
 800d92c:	5535      	.short	0x5535
 800d92e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d932:	441e      	add	r6, r3
 800d934:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d938:	2b20      	cmp	r3, #32
 800d93a:	bfc1      	itttt	gt
 800d93c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d940:	409f      	lslgt	r7, r3
 800d942:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d946:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d94a:	bfd6      	itet	le
 800d94c:	f1c3 0320 	rsble	r3, r3, #32
 800d950:	ea47 0003 	orrgt.w	r0, r7, r3
 800d954:	fa04 f003 	lslle.w	r0, r4, r3
 800d958:	f7f2 fdd4 	bl	8000504 <__aeabi_ui2d>
 800d95c:	2201      	movs	r2, #1
 800d95e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d962:	3e01      	subs	r6, #1
 800d964:	9214      	str	r2, [sp, #80]	@ 0x50
 800d966:	e777      	b.n	800d858 <_dtoa_r+0x100>
 800d968:	2301      	movs	r3, #1
 800d96a:	e7b8      	b.n	800d8de <_dtoa_r+0x186>
 800d96c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d96e:	e7b7      	b.n	800d8e0 <_dtoa_r+0x188>
 800d970:	427b      	negs	r3, r7
 800d972:	930a      	str	r3, [sp, #40]	@ 0x28
 800d974:	2300      	movs	r3, #0
 800d976:	eba8 0807 	sub.w	r8, r8, r7
 800d97a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d97c:	e7c4      	b.n	800d908 <_dtoa_r+0x1b0>
 800d97e:	2300      	movs	r3, #0
 800d980:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d984:	2b00      	cmp	r3, #0
 800d986:	dc35      	bgt.n	800d9f4 <_dtoa_r+0x29c>
 800d988:	2301      	movs	r3, #1
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	9307      	str	r3, [sp, #28]
 800d98e:	461a      	mov	r2, r3
 800d990:	920e      	str	r2, [sp, #56]	@ 0x38
 800d992:	e00b      	b.n	800d9ac <_dtoa_r+0x254>
 800d994:	2301      	movs	r3, #1
 800d996:	e7f3      	b.n	800d980 <_dtoa_r+0x228>
 800d998:	2300      	movs	r3, #0
 800d99a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d99c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d99e:	18fb      	adds	r3, r7, r3
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	9307      	str	r3, [sp, #28]
 800d9a8:	bfb8      	it	lt
 800d9aa:	2301      	movlt	r3, #1
 800d9ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	2204      	movs	r2, #4
 800d9b4:	f102 0514 	add.w	r5, r2, #20
 800d9b8:	429d      	cmp	r5, r3
 800d9ba:	d91f      	bls.n	800d9fc <_dtoa_r+0x2a4>
 800d9bc:	6041      	str	r1, [r0, #4]
 800d9be:	4658      	mov	r0, fp
 800d9c0:	f000 fd8e 	bl	800e4e0 <_Balloc>
 800d9c4:	4682      	mov	sl, r0
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d13c      	bne.n	800da44 <_dtoa_r+0x2ec>
 800d9ca:	4b1b      	ldr	r3, [pc, #108]	@ (800da38 <_dtoa_r+0x2e0>)
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800d9d2:	e6d8      	b.n	800d786 <_dtoa_r+0x2e>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e7e0      	b.n	800d99a <_dtoa_r+0x242>
 800d9d8:	2401      	movs	r4, #1
 800d9da:	2300      	movs	r3, #0
 800d9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	9307      	str	r3, [sp, #28]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	2312      	movs	r3, #18
 800d9ec:	e7d0      	b.n	800d990 <_dtoa_r+0x238>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9f2:	e7f5      	b.n	800d9e0 <_dtoa_r+0x288>
 800d9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	9307      	str	r3, [sp, #28]
 800d9fa:	e7d7      	b.n	800d9ac <_dtoa_r+0x254>
 800d9fc:	3101      	adds	r1, #1
 800d9fe:	0052      	lsls	r2, r2, #1
 800da00:	e7d8      	b.n	800d9b4 <_dtoa_r+0x25c>
 800da02:	bf00      	nop
 800da04:	f3af 8000 	nop.w
 800da08:	636f4361 	.word	0x636f4361
 800da0c:	3fd287a7 	.word	0x3fd287a7
 800da10:	8b60c8b3 	.word	0x8b60c8b3
 800da14:	3fc68a28 	.word	0x3fc68a28
 800da18:	509f79fb 	.word	0x509f79fb
 800da1c:	3fd34413 	.word	0x3fd34413
 800da20:	08010201 	.word	0x08010201
 800da24:	08010218 	.word	0x08010218
 800da28:	7ff00000 	.word	0x7ff00000
 800da2c:	080101d1 	.word	0x080101d1
 800da30:	3ff80000 	.word	0x3ff80000
 800da34:	08010310 	.word	0x08010310
 800da38:	08010270 	.word	0x08010270
 800da3c:	080101fd 	.word	0x080101fd
 800da40:	080101d0 	.word	0x080101d0
 800da44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800da48:	6018      	str	r0, [r3, #0]
 800da4a:	9b07      	ldr	r3, [sp, #28]
 800da4c:	2b0e      	cmp	r3, #14
 800da4e:	f200 80a4 	bhi.w	800db9a <_dtoa_r+0x442>
 800da52:	2c00      	cmp	r4, #0
 800da54:	f000 80a1 	beq.w	800db9a <_dtoa_r+0x442>
 800da58:	2f00      	cmp	r7, #0
 800da5a:	dd33      	ble.n	800dac4 <_dtoa_r+0x36c>
 800da5c:	4bad      	ldr	r3, [pc, #692]	@ (800dd14 <_dtoa_r+0x5bc>)
 800da5e:	f007 020f 	and.w	r2, r7, #15
 800da62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da66:	ed93 7b00 	vldr	d7, [r3]
 800da6a:	05f8      	lsls	r0, r7, #23
 800da6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800da70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800da74:	d516      	bpl.n	800daa4 <_dtoa_r+0x34c>
 800da76:	4ba8      	ldr	r3, [pc, #672]	@ (800dd18 <_dtoa_r+0x5c0>)
 800da78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da80:	f7f2 fee4 	bl	800084c <__aeabi_ddiv>
 800da84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da88:	f004 040f 	and.w	r4, r4, #15
 800da8c:	2603      	movs	r6, #3
 800da8e:	4da2      	ldr	r5, [pc, #648]	@ (800dd18 <_dtoa_r+0x5c0>)
 800da90:	b954      	cbnz	r4, 800daa8 <_dtoa_r+0x350>
 800da92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da9a:	f7f2 fed7 	bl	800084c <__aeabi_ddiv>
 800da9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daa2:	e028      	b.n	800daf6 <_dtoa_r+0x39e>
 800daa4:	2602      	movs	r6, #2
 800daa6:	e7f2      	b.n	800da8e <_dtoa_r+0x336>
 800daa8:	07e1      	lsls	r1, r4, #31
 800daaa:	d508      	bpl.n	800dabe <_dtoa_r+0x366>
 800daac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dab4:	f7f2 fda0 	bl	80005f8 <__aeabi_dmul>
 800dab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dabc:	3601      	adds	r6, #1
 800dabe:	1064      	asrs	r4, r4, #1
 800dac0:	3508      	adds	r5, #8
 800dac2:	e7e5      	b.n	800da90 <_dtoa_r+0x338>
 800dac4:	f000 80d2 	beq.w	800dc6c <_dtoa_r+0x514>
 800dac8:	427c      	negs	r4, r7
 800daca:	4b92      	ldr	r3, [pc, #584]	@ (800dd14 <_dtoa_r+0x5bc>)
 800dacc:	4d92      	ldr	r5, [pc, #584]	@ (800dd18 <_dtoa_r+0x5c0>)
 800dace:	f004 020f 	and.w	r2, r4, #15
 800dad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dade:	f7f2 fd8b 	bl	80005f8 <__aeabi_dmul>
 800dae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dae6:	1124      	asrs	r4, r4, #4
 800dae8:	2300      	movs	r3, #0
 800daea:	2602      	movs	r6, #2
 800daec:	2c00      	cmp	r4, #0
 800daee:	f040 80b2 	bne.w	800dc56 <_dtoa_r+0x4fe>
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d1d3      	bne.n	800da9e <_dtoa_r+0x346>
 800daf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800daf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f000 80b7 	beq.w	800dc70 <_dtoa_r+0x518>
 800db02:	4b86      	ldr	r3, [pc, #536]	@ (800dd1c <_dtoa_r+0x5c4>)
 800db04:	2200      	movs	r2, #0
 800db06:	4620      	mov	r0, r4
 800db08:	4629      	mov	r1, r5
 800db0a:	f7f2 ffe7 	bl	8000adc <__aeabi_dcmplt>
 800db0e:	2800      	cmp	r0, #0
 800db10:	f000 80ae 	beq.w	800dc70 <_dtoa_r+0x518>
 800db14:	9b07      	ldr	r3, [sp, #28]
 800db16:	2b00      	cmp	r3, #0
 800db18:	f000 80aa 	beq.w	800dc70 <_dtoa_r+0x518>
 800db1c:	9b00      	ldr	r3, [sp, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	dd37      	ble.n	800db92 <_dtoa_r+0x43a>
 800db22:	1e7b      	subs	r3, r7, #1
 800db24:	9304      	str	r3, [sp, #16]
 800db26:	4620      	mov	r0, r4
 800db28:	4b7d      	ldr	r3, [pc, #500]	@ (800dd20 <_dtoa_r+0x5c8>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	4629      	mov	r1, r5
 800db2e:	f7f2 fd63 	bl	80005f8 <__aeabi_dmul>
 800db32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db36:	9c00      	ldr	r4, [sp, #0]
 800db38:	3601      	adds	r6, #1
 800db3a:	4630      	mov	r0, r6
 800db3c:	f7f2 fcf2 	bl	8000524 <__aeabi_i2d>
 800db40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db44:	f7f2 fd58 	bl	80005f8 <__aeabi_dmul>
 800db48:	4b76      	ldr	r3, [pc, #472]	@ (800dd24 <_dtoa_r+0x5cc>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	f7f2 fb9e 	bl	800028c <__adddf3>
 800db50:	4605      	mov	r5, r0
 800db52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800db56:	2c00      	cmp	r4, #0
 800db58:	f040 808d 	bne.w	800dc76 <_dtoa_r+0x51e>
 800db5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db60:	4b71      	ldr	r3, [pc, #452]	@ (800dd28 <_dtoa_r+0x5d0>)
 800db62:	2200      	movs	r2, #0
 800db64:	f7f2 fb90 	bl	8000288 <__aeabi_dsub>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db70:	462a      	mov	r2, r5
 800db72:	4633      	mov	r3, r6
 800db74:	f7f2 ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 800db78:	2800      	cmp	r0, #0
 800db7a:	f040 828b 	bne.w	800e094 <_dtoa_r+0x93c>
 800db7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db82:	462a      	mov	r2, r5
 800db84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800db88:	f7f2 ffa8 	bl	8000adc <__aeabi_dcmplt>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	f040 8128 	bne.w	800dde2 <_dtoa_r+0x68a>
 800db92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800db96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800db9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f2c0 815a 	blt.w	800de56 <_dtoa_r+0x6fe>
 800dba2:	2f0e      	cmp	r7, #14
 800dba4:	f300 8157 	bgt.w	800de56 <_dtoa_r+0x6fe>
 800dba8:	4b5a      	ldr	r3, [pc, #360]	@ (800dd14 <_dtoa_r+0x5bc>)
 800dbaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dbae:	ed93 7b00 	vldr	d7, [r3]
 800dbb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	ed8d 7b00 	vstr	d7, [sp]
 800dbba:	da03      	bge.n	800dbc4 <_dtoa_r+0x46c>
 800dbbc:	9b07      	ldr	r3, [sp, #28]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f340 8101 	ble.w	800ddc6 <_dtoa_r+0x66e>
 800dbc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dbc8:	4656      	mov	r6, sl
 800dbca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbce:	4620      	mov	r0, r4
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	f7f2 fe3b 	bl	800084c <__aeabi_ddiv>
 800dbd6:	f7f2 ffbf 	bl	8000b58 <__aeabi_d2iz>
 800dbda:	4680      	mov	r8, r0
 800dbdc:	f7f2 fca2 	bl	8000524 <__aeabi_i2d>
 800dbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbe4:	f7f2 fd08 	bl	80005f8 <__aeabi_dmul>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	4620      	mov	r0, r4
 800dbee:	4629      	mov	r1, r5
 800dbf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dbf4:	f7f2 fb48 	bl	8000288 <__aeabi_dsub>
 800dbf8:	f806 4b01 	strb.w	r4, [r6], #1
 800dbfc:	9d07      	ldr	r5, [sp, #28]
 800dbfe:	eba6 040a 	sub.w	r4, r6, sl
 800dc02:	42a5      	cmp	r5, r4
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	f040 8117 	bne.w	800de3a <_dtoa_r+0x6e2>
 800dc0c:	f7f2 fb3e 	bl	800028c <__adddf3>
 800dc10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc14:	4604      	mov	r4, r0
 800dc16:	460d      	mov	r5, r1
 800dc18:	f7f2 ff7e 	bl	8000b18 <__aeabi_dcmpgt>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	f040 80f9 	bne.w	800de14 <_dtoa_r+0x6bc>
 800dc22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc26:	4620      	mov	r0, r4
 800dc28:	4629      	mov	r1, r5
 800dc2a:	f7f2 ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc2e:	b118      	cbz	r0, 800dc38 <_dtoa_r+0x4e0>
 800dc30:	f018 0f01 	tst.w	r8, #1
 800dc34:	f040 80ee 	bne.w	800de14 <_dtoa_r+0x6bc>
 800dc38:	4649      	mov	r1, r9
 800dc3a:	4658      	mov	r0, fp
 800dc3c:	f000 fc90 	bl	800e560 <_Bfree>
 800dc40:	2300      	movs	r3, #0
 800dc42:	7033      	strb	r3, [r6, #0]
 800dc44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dc46:	3701      	adds	r7, #1
 800dc48:	601f      	str	r7, [r3, #0]
 800dc4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f000 831d 	beq.w	800e28c <_dtoa_r+0xb34>
 800dc52:	601e      	str	r6, [r3, #0]
 800dc54:	e31a      	b.n	800e28c <_dtoa_r+0xb34>
 800dc56:	07e2      	lsls	r2, r4, #31
 800dc58:	d505      	bpl.n	800dc66 <_dtoa_r+0x50e>
 800dc5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc5e:	f7f2 fccb 	bl	80005f8 <__aeabi_dmul>
 800dc62:	3601      	adds	r6, #1
 800dc64:	2301      	movs	r3, #1
 800dc66:	1064      	asrs	r4, r4, #1
 800dc68:	3508      	adds	r5, #8
 800dc6a:	e73f      	b.n	800daec <_dtoa_r+0x394>
 800dc6c:	2602      	movs	r6, #2
 800dc6e:	e742      	b.n	800daf6 <_dtoa_r+0x39e>
 800dc70:	9c07      	ldr	r4, [sp, #28]
 800dc72:	9704      	str	r7, [sp, #16]
 800dc74:	e761      	b.n	800db3a <_dtoa_r+0x3e2>
 800dc76:	4b27      	ldr	r3, [pc, #156]	@ (800dd14 <_dtoa_r+0x5bc>)
 800dc78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc82:	4454      	add	r4, sl
 800dc84:	2900      	cmp	r1, #0
 800dc86:	d053      	beq.n	800dd30 <_dtoa_r+0x5d8>
 800dc88:	4928      	ldr	r1, [pc, #160]	@ (800dd2c <_dtoa_r+0x5d4>)
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	f7f2 fdde 	bl	800084c <__aeabi_ddiv>
 800dc90:	4633      	mov	r3, r6
 800dc92:	462a      	mov	r2, r5
 800dc94:	f7f2 faf8 	bl	8000288 <__aeabi_dsub>
 800dc98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dc9c:	4656      	mov	r6, sl
 800dc9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dca2:	f7f2 ff59 	bl	8000b58 <__aeabi_d2iz>
 800dca6:	4605      	mov	r5, r0
 800dca8:	f7f2 fc3c 	bl	8000524 <__aeabi_i2d>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcb4:	f7f2 fae8 	bl	8000288 <__aeabi_dsub>
 800dcb8:	3530      	adds	r5, #48	@ 0x30
 800dcba:	4602      	mov	r2, r0
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dcc2:	f806 5b01 	strb.w	r5, [r6], #1
 800dcc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dcca:	f7f2 ff07 	bl	8000adc <__aeabi_dcmplt>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d171      	bne.n	800ddb6 <_dtoa_r+0x65e>
 800dcd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcd6:	4911      	ldr	r1, [pc, #68]	@ (800dd1c <_dtoa_r+0x5c4>)
 800dcd8:	2000      	movs	r0, #0
 800dcda:	f7f2 fad5 	bl	8000288 <__aeabi_dsub>
 800dcde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dce2:	f7f2 fefb 	bl	8000adc <__aeabi_dcmplt>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	f040 8095 	bne.w	800de16 <_dtoa_r+0x6be>
 800dcec:	42a6      	cmp	r6, r4
 800dcee:	f43f af50 	beq.w	800db92 <_dtoa_r+0x43a>
 800dcf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dcf6:	4b0a      	ldr	r3, [pc, #40]	@ (800dd20 <_dtoa_r+0x5c8>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f7f2 fc7d 	bl	80005f8 <__aeabi_dmul>
 800dcfe:	4b08      	ldr	r3, [pc, #32]	@ (800dd20 <_dtoa_r+0x5c8>)
 800dd00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dd04:	2200      	movs	r2, #0
 800dd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd0a:	f7f2 fc75 	bl	80005f8 <__aeabi_dmul>
 800dd0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd12:	e7c4      	b.n	800dc9e <_dtoa_r+0x546>
 800dd14:	08010310 	.word	0x08010310
 800dd18:	080102e8 	.word	0x080102e8
 800dd1c:	3ff00000 	.word	0x3ff00000
 800dd20:	40240000 	.word	0x40240000
 800dd24:	401c0000 	.word	0x401c0000
 800dd28:	40140000 	.word	0x40140000
 800dd2c:	3fe00000 	.word	0x3fe00000
 800dd30:	4631      	mov	r1, r6
 800dd32:	4628      	mov	r0, r5
 800dd34:	f7f2 fc60 	bl	80005f8 <__aeabi_dmul>
 800dd38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dd3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800dd3e:	4656      	mov	r6, sl
 800dd40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd44:	f7f2 ff08 	bl	8000b58 <__aeabi_d2iz>
 800dd48:	4605      	mov	r5, r0
 800dd4a:	f7f2 fbeb 	bl	8000524 <__aeabi_i2d>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd56:	f7f2 fa97 	bl	8000288 <__aeabi_dsub>
 800dd5a:	3530      	adds	r5, #48	@ 0x30
 800dd5c:	f806 5b01 	strb.w	r5, [r6], #1
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	42a6      	cmp	r6, r4
 800dd66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dd6a:	f04f 0200 	mov.w	r2, #0
 800dd6e:	d124      	bne.n	800ddba <_dtoa_r+0x662>
 800dd70:	4bac      	ldr	r3, [pc, #688]	@ (800e024 <_dtoa_r+0x8cc>)
 800dd72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dd76:	f7f2 fa89 	bl	800028c <__adddf3>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd82:	f7f2 fec9 	bl	8000b18 <__aeabi_dcmpgt>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d145      	bne.n	800de16 <_dtoa_r+0x6be>
 800dd8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dd8e:	49a5      	ldr	r1, [pc, #660]	@ (800e024 <_dtoa_r+0x8cc>)
 800dd90:	2000      	movs	r0, #0
 800dd92:	f7f2 fa79 	bl	8000288 <__aeabi_dsub>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd9e:	f7f2 fe9d 	bl	8000adc <__aeabi_dcmplt>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	f43f aef5 	beq.w	800db92 <_dtoa_r+0x43a>
 800dda8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ddaa:	1e73      	subs	r3, r6, #1
 800ddac:	9315      	str	r3, [sp, #84]	@ 0x54
 800ddae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ddb2:	2b30      	cmp	r3, #48	@ 0x30
 800ddb4:	d0f8      	beq.n	800dda8 <_dtoa_r+0x650>
 800ddb6:	9f04      	ldr	r7, [sp, #16]
 800ddb8:	e73e      	b.n	800dc38 <_dtoa_r+0x4e0>
 800ddba:	4b9b      	ldr	r3, [pc, #620]	@ (800e028 <_dtoa_r+0x8d0>)
 800ddbc:	f7f2 fc1c 	bl	80005f8 <__aeabi_dmul>
 800ddc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddc4:	e7bc      	b.n	800dd40 <_dtoa_r+0x5e8>
 800ddc6:	d10c      	bne.n	800dde2 <_dtoa_r+0x68a>
 800ddc8:	4b98      	ldr	r3, [pc, #608]	@ (800e02c <_dtoa_r+0x8d4>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddd0:	f7f2 fc12 	bl	80005f8 <__aeabi_dmul>
 800ddd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddd8:	f7f2 fe94 	bl	8000b04 <__aeabi_dcmpge>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	f000 8157 	beq.w	800e090 <_dtoa_r+0x938>
 800dde2:	2400      	movs	r4, #0
 800dde4:	4625      	mov	r5, r4
 800dde6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dde8:	43db      	mvns	r3, r3
 800ddea:	9304      	str	r3, [sp, #16]
 800ddec:	4656      	mov	r6, sl
 800ddee:	2700      	movs	r7, #0
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4658      	mov	r0, fp
 800ddf4:	f000 fbb4 	bl	800e560 <_Bfree>
 800ddf8:	2d00      	cmp	r5, #0
 800ddfa:	d0dc      	beq.n	800ddb6 <_dtoa_r+0x65e>
 800ddfc:	b12f      	cbz	r7, 800de0a <_dtoa_r+0x6b2>
 800ddfe:	42af      	cmp	r7, r5
 800de00:	d003      	beq.n	800de0a <_dtoa_r+0x6b2>
 800de02:	4639      	mov	r1, r7
 800de04:	4658      	mov	r0, fp
 800de06:	f000 fbab 	bl	800e560 <_Bfree>
 800de0a:	4629      	mov	r1, r5
 800de0c:	4658      	mov	r0, fp
 800de0e:	f000 fba7 	bl	800e560 <_Bfree>
 800de12:	e7d0      	b.n	800ddb6 <_dtoa_r+0x65e>
 800de14:	9704      	str	r7, [sp, #16]
 800de16:	4633      	mov	r3, r6
 800de18:	461e      	mov	r6, r3
 800de1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de1e:	2a39      	cmp	r2, #57	@ 0x39
 800de20:	d107      	bne.n	800de32 <_dtoa_r+0x6da>
 800de22:	459a      	cmp	sl, r3
 800de24:	d1f8      	bne.n	800de18 <_dtoa_r+0x6c0>
 800de26:	9a04      	ldr	r2, [sp, #16]
 800de28:	3201      	adds	r2, #1
 800de2a:	9204      	str	r2, [sp, #16]
 800de2c:	2230      	movs	r2, #48	@ 0x30
 800de2e:	f88a 2000 	strb.w	r2, [sl]
 800de32:	781a      	ldrb	r2, [r3, #0]
 800de34:	3201      	adds	r2, #1
 800de36:	701a      	strb	r2, [r3, #0]
 800de38:	e7bd      	b.n	800ddb6 <_dtoa_r+0x65e>
 800de3a:	4b7b      	ldr	r3, [pc, #492]	@ (800e028 <_dtoa_r+0x8d0>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	f7f2 fbdb 	bl	80005f8 <__aeabi_dmul>
 800de42:	2200      	movs	r2, #0
 800de44:	2300      	movs	r3, #0
 800de46:	4604      	mov	r4, r0
 800de48:	460d      	mov	r5, r1
 800de4a:	f7f2 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800de4e:	2800      	cmp	r0, #0
 800de50:	f43f aebb 	beq.w	800dbca <_dtoa_r+0x472>
 800de54:	e6f0      	b.n	800dc38 <_dtoa_r+0x4e0>
 800de56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800de58:	2a00      	cmp	r2, #0
 800de5a:	f000 80db 	beq.w	800e014 <_dtoa_r+0x8bc>
 800de5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de60:	2a01      	cmp	r2, #1
 800de62:	f300 80bf 	bgt.w	800dfe4 <_dtoa_r+0x88c>
 800de66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800de68:	2a00      	cmp	r2, #0
 800de6a:	f000 80b7 	beq.w	800dfdc <_dtoa_r+0x884>
 800de6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800de72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800de74:	4646      	mov	r6, r8
 800de76:	9a08      	ldr	r2, [sp, #32]
 800de78:	2101      	movs	r1, #1
 800de7a:	441a      	add	r2, r3
 800de7c:	4658      	mov	r0, fp
 800de7e:	4498      	add	r8, r3
 800de80:	9208      	str	r2, [sp, #32]
 800de82:	f000 fc21 	bl	800e6c8 <__i2b>
 800de86:	4605      	mov	r5, r0
 800de88:	b15e      	cbz	r6, 800dea2 <_dtoa_r+0x74a>
 800de8a:	9b08      	ldr	r3, [sp, #32]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	dd08      	ble.n	800dea2 <_dtoa_r+0x74a>
 800de90:	42b3      	cmp	r3, r6
 800de92:	9a08      	ldr	r2, [sp, #32]
 800de94:	bfa8      	it	ge
 800de96:	4633      	movge	r3, r6
 800de98:	eba8 0803 	sub.w	r8, r8, r3
 800de9c:	1af6      	subs	r6, r6, r3
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	9308      	str	r3, [sp, #32]
 800dea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dea4:	b1f3      	cbz	r3, 800dee4 <_dtoa_r+0x78c>
 800dea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 80b7 	beq.w	800e01c <_dtoa_r+0x8c4>
 800deae:	b18c      	cbz	r4, 800ded4 <_dtoa_r+0x77c>
 800deb0:	4629      	mov	r1, r5
 800deb2:	4622      	mov	r2, r4
 800deb4:	4658      	mov	r0, fp
 800deb6:	f000 fcc7 	bl	800e848 <__pow5mult>
 800deba:	464a      	mov	r2, r9
 800debc:	4601      	mov	r1, r0
 800debe:	4605      	mov	r5, r0
 800dec0:	4658      	mov	r0, fp
 800dec2:	f000 fc17 	bl	800e6f4 <__multiply>
 800dec6:	4649      	mov	r1, r9
 800dec8:	9004      	str	r0, [sp, #16]
 800deca:	4658      	mov	r0, fp
 800decc:	f000 fb48 	bl	800e560 <_Bfree>
 800ded0:	9b04      	ldr	r3, [sp, #16]
 800ded2:	4699      	mov	r9, r3
 800ded4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ded6:	1b1a      	subs	r2, r3, r4
 800ded8:	d004      	beq.n	800dee4 <_dtoa_r+0x78c>
 800deda:	4649      	mov	r1, r9
 800dedc:	4658      	mov	r0, fp
 800dede:	f000 fcb3 	bl	800e848 <__pow5mult>
 800dee2:	4681      	mov	r9, r0
 800dee4:	2101      	movs	r1, #1
 800dee6:	4658      	mov	r0, fp
 800dee8:	f000 fbee 	bl	800e6c8 <__i2b>
 800deec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deee:	4604      	mov	r4, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	f000 81cf 	beq.w	800e294 <_dtoa_r+0xb3c>
 800def6:	461a      	mov	r2, r3
 800def8:	4601      	mov	r1, r0
 800defa:	4658      	mov	r0, fp
 800defc:	f000 fca4 	bl	800e848 <__pow5mult>
 800df00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df02:	2b01      	cmp	r3, #1
 800df04:	4604      	mov	r4, r0
 800df06:	f300 8095 	bgt.w	800e034 <_dtoa_r+0x8dc>
 800df0a:	9b02      	ldr	r3, [sp, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f040 8087 	bne.w	800e020 <_dtoa_r+0x8c8>
 800df12:	9b03      	ldr	r3, [sp, #12]
 800df14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f040 8089 	bne.w	800e030 <_dtoa_r+0x8d8>
 800df1e:	9b03      	ldr	r3, [sp, #12]
 800df20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df24:	0d1b      	lsrs	r3, r3, #20
 800df26:	051b      	lsls	r3, r3, #20
 800df28:	b12b      	cbz	r3, 800df36 <_dtoa_r+0x7de>
 800df2a:	9b08      	ldr	r3, [sp, #32]
 800df2c:	3301      	adds	r3, #1
 800df2e:	9308      	str	r3, [sp, #32]
 800df30:	f108 0801 	add.w	r8, r8, #1
 800df34:	2301      	movs	r3, #1
 800df36:	930a      	str	r3, [sp, #40]	@ 0x28
 800df38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f000 81b0 	beq.w	800e2a0 <_dtoa_r+0xb48>
 800df40:	6923      	ldr	r3, [r4, #16]
 800df42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df46:	6918      	ldr	r0, [r3, #16]
 800df48:	f000 fb72 	bl	800e630 <__hi0bits>
 800df4c:	f1c0 0020 	rsb	r0, r0, #32
 800df50:	9b08      	ldr	r3, [sp, #32]
 800df52:	4418      	add	r0, r3
 800df54:	f010 001f 	ands.w	r0, r0, #31
 800df58:	d077      	beq.n	800e04a <_dtoa_r+0x8f2>
 800df5a:	f1c0 0320 	rsb	r3, r0, #32
 800df5e:	2b04      	cmp	r3, #4
 800df60:	dd6b      	ble.n	800e03a <_dtoa_r+0x8e2>
 800df62:	9b08      	ldr	r3, [sp, #32]
 800df64:	f1c0 001c 	rsb	r0, r0, #28
 800df68:	4403      	add	r3, r0
 800df6a:	4480      	add	r8, r0
 800df6c:	4406      	add	r6, r0
 800df6e:	9308      	str	r3, [sp, #32]
 800df70:	f1b8 0f00 	cmp.w	r8, #0
 800df74:	dd05      	ble.n	800df82 <_dtoa_r+0x82a>
 800df76:	4649      	mov	r1, r9
 800df78:	4642      	mov	r2, r8
 800df7a:	4658      	mov	r0, fp
 800df7c:	f000 fcbe 	bl	800e8fc <__lshift>
 800df80:	4681      	mov	r9, r0
 800df82:	9b08      	ldr	r3, [sp, #32]
 800df84:	2b00      	cmp	r3, #0
 800df86:	dd05      	ble.n	800df94 <_dtoa_r+0x83c>
 800df88:	4621      	mov	r1, r4
 800df8a:	461a      	mov	r2, r3
 800df8c:	4658      	mov	r0, fp
 800df8e:	f000 fcb5 	bl	800e8fc <__lshift>
 800df92:	4604      	mov	r4, r0
 800df94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df96:	2b00      	cmp	r3, #0
 800df98:	d059      	beq.n	800e04e <_dtoa_r+0x8f6>
 800df9a:	4621      	mov	r1, r4
 800df9c:	4648      	mov	r0, r9
 800df9e:	f000 fd19 	bl	800e9d4 <__mcmp>
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	da53      	bge.n	800e04e <_dtoa_r+0x8f6>
 800dfa6:	1e7b      	subs	r3, r7, #1
 800dfa8:	9304      	str	r3, [sp, #16]
 800dfaa:	4649      	mov	r1, r9
 800dfac:	2300      	movs	r3, #0
 800dfae:	220a      	movs	r2, #10
 800dfb0:	4658      	mov	r0, fp
 800dfb2:	f000 faf7 	bl	800e5a4 <__multadd>
 800dfb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfb8:	4681      	mov	r9, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f000 8172 	beq.w	800e2a4 <_dtoa_r+0xb4c>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	220a      	movs	r2, #10
 800dfc6:	4658      	mov	r0, fp
 800dfc8:	f000 faec 	bl	800e5a4 <__multadd>
 800dfcc:	9b00      	ldr	r3, [sp, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	4605      	mov	r5, r0
 800dfd2:	dc67      	bgt.n	800e0a4 <_dtoa_r+0x94c>
 800dfd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfd6:	2b02      	cmp	r3, #2
 800dfd8:	dc41      	bgt.n	800e05e <_dtoa_r+0x906>
 800dfda:	e063      	b.n	800e0a4 <_dtoa_r+0x94c>
 800dfdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dfde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dfe2:	e746      	b.n	800de72 <_dtoa_r+0x71a>
 800dfe4:	9b07      	ldr	r3, [sp, #28]
 800dfe6:	1e5c      	subs	r4, r3, #1
 800dfe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfea:	42a3      	cmp	r3, r4
 800dfec:	bfbf      	itttt	lt
 800dfee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dff0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dff2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dff4:	1ae3      	sublt	r3, r4, r3
 800dff6:	bfb4      	ite	lt
 800dff8:	18d2      	addlt	r2, r2, r3
 800dffa:	1b1c      	subge	r4, r3, r4
 800dffc:	9b07      	ldr	r3, [sp, #28]
 800dffe:	bfbc      	itt	lt
 800e000:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e002:	2400      	movlt	r4, #0
 800e004:	2b00      	cmp	r3, #0
 800e006:	bfb5      	itete	lt
 800e008:	eba8 0603 	sublt.w	r6, r8, r3
 800e00c:	9b07      	ldrge	r3, [sp, #28]
 800e00e:	2300      	movlt	r3, #0
 800e010:	4646      	movge	r6, r8
 800e012:	e730      	b.n	800de76 <_dtoa_r+0x71e>
 800e014:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e016:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e018:	4646      	mov	r6, r8
 800e01a:	e735      	b.n	800de88 <_dtoa_r+0x730>
 800e01c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e01e:	e75c      	b.n	800deda <_dtoa_r+0x782>
 800e020:	2300      	movs	r3, #0
 800e022:	e788      	b.n	800df36 <_dtoa_r+0x7de>
 800e024:	3fe00000 	.word	0x3fe00000
 800e028:	40240000 	.word	0x40240000
 800e02c:	40140000 	.word	0x40140000
 800e030:	9b02      	ldr	r3, [sp, #8]
 800e032:	e780      	b.n	800df36 <_dtoa_r+0x7de>
 800e034:	2300      	movs	r3, #0
 800e036:	930a      	str	r3, [sp, #40]	@ 0x28
 800e038:	e782      	b.n	800df40 <_dtoa_r+0x7e8>
 800e03a:	d099      	beq.n	800df70 <_dtoa_r+0x818>
 800e03c:	9a08      	ldr	r2, [sp, #32]
 800e03e:	331c      	adds	r3, #28
 800e040:	441a      	add	r2, r3
 800e042:	4498      	add	r8, r3
 800e044:	441e      	add	r6, r3
 800e046:	9208      	str	r2, [sp, #32]
 800e048:	e792      	b.n	800df70 <_dtoa_r+0x818>
 800e04a:	4603      	mov	r3, r0
 800e04c:	e7f6      	b.n	800e03c <_dtoa_r+0x8e4>
 800e04e:	9b07      	ldr	r3, [sp, #28]
 800e050:	9704      	str	r7, [sp, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	dc20      	bgt.n	800e098 <_dtoa_r+0x940>
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e05a:	2b02      	cmp	r3, #2
 800e05c:	dd1e      	ble.n	800e09c <_dtoa_r+0x944>
 800e05e:	9b00      	ldr	r3, [sp, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	f47f aec0 	bne.w	800dde6 <_dtoa_r+0x68e>
 800e066:	4621      	mov	r1, r4
 800e068:	2205      	movs	r2, #5
 800e06a:	4658      	mov	r0, fp
 800e06c:	f000 fa9a 	bl	800e5a4 <__multadd>
 800e070:	4601      	mov	r1, r0
 800e072:	4604      	mov	r4, r0
 800e074:	4648      	mov	r0, r9
 800e076:	f000 fcad 	bl	800e9d4 <__mcmp>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	f77f aeb3 	ble.w	800dde6 <_dtoa_r+0x68e>
 800e080:	4656      	mov	r6, sl
 800e082:	2331      	movs	r3, #49	@ 0x31
 800e084:	f806 3b01 	strb.w	r3, [r6], #1
 800e088:	9b04      	ldr	r3, [sp, #16]
 800e08a:	3301      	adds	r3, #1
 800e08c:	9304      	str	r3, [sp, #16]
 800e08e:	e6ae      	b.n	800ddee <_dtoa_r+0x696>
 800e090:	9c07      	ldr	r4, [sp, #28]
 800e092:	9704      	str	r7, [sp, #16]
 800e094:	4625      	mov	r5, r4
 800e096:	e7f3      	b.n	800e080 <_dtoa_r+0x928>
 800e098:	9b07      	ldr	r3, [sp, #28]
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 8104 	beq.w	800e2ac <_dtoa_r+0xb54>
 800e0a4:	2e00      	cmp	r6, #0
 800e0a6:	dd05      	ble.n	800e0b4 <_dtoa_r+0x95c>
 800e0a8:	4629      	mov	r1, r5
 800e0aa:	4632      	mov	r2, r6
 800e0ac:	4658      	mov	r0, fp
 800e0ae:	f000 fc25 	bl	800e8fc <__lshift>
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d05a      	beq.n	800e170 <_dtoa_r+0xa18>
 800e0ba:	6869      	ldr	r1, [r5, #4]
 800e0bc:	4658      	mov	r0, fp
 800e0be:	f000 fa0f 	bl	800e4e0 <_Balloc>
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	b928      	cbnz	r0, 800e0d2 <_dtoa_r+0x97a>
 800e0c6:	4b84      	ldr	r3, [pc, #528]	@ (800e2d8 <_dtoa_r+0xb80>)
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e0ce:	f7ff bb5a 	b.w	800d786 <_dtoa_r+0x2e>
 800e0d2:	692a      	ldr	r2, [r5, #16]
 800e0d4:	3202      	adds	r2, #2
 800e0d6:	0092      	lsls	r2, r2, #2
 800e0d8:	f105 010c 	add.w	r1, r5, #12
 800e0dc:	300c      	adds	r0, #12
 800e0de:	f7ff faa2 	bl	800d626 <memcpy>
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	4631      	mov	r1, r6
 800e0e6:	4658      	mov	r0, fp
 800e0e8:	f000 fc08 	bl	800e8fc <__lshift>
 800e0ec:	f10a 0301 	add.w	r3, sl, #1
 800e0f0:	9307      	str	r3, [sp, #28]
 800e0f2:	9b00      	ldr	r3, [sp, #0]
 800e0f4:	4453      	add	r3, sl
 800e0f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0f8:	9b02      	ldr	r3, [sp, #8]
 800e0fa:	f003 0301 	and.w	r3, r3, #1
 800e0fe:	462f      	mov	r7, r5
 800e100:	930a      	str	r3, [sp, #40]	@ 0x28
 800e102:	4605      	mov	r5, r0
 800e104:	9b07      	ldr	r3, [sp, #28]
 800e106:	4621      	mov	r1, r4
 800e108:	3b01      	subs	r3, #1
 800e10a:	4648      	mov	r0, r9
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	f7ff fa98 	bl	800d642 <quorem>
 800e112:	4639      	mov	r1, r7
 800e114:	9002      	str	r0, [sp, #8]
 800e116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e11a:	4648      	mov	r0, r9
 800e11c:	f000 fc5a 	bl	800e9d4 <__mcmp>
 800e120:	462a      	mov	r2, r5
 800e122:	9008      	str	r0, [sp, #32]
 800e124:	4621      	mov	r1, r4
 800e126:	4658      	mov	r0, fp
 800e128:	f000 fc70 	bl	800ea0c <__mdiff>
 800e12c:	68c2      	ldr	r2, [r0, #12]
 800e12e:	4606      	mov	r6, r0
 800e130:	bb02      	cbnz	r2, 800e174 <_dtoa_r+0xa1c>
 800e132:	4601      	mov	r1, r0
 800e134:	4648      	mov	r0, r9
 800e136:	f000 fc4d 	bl	800e9d4 <__mcmp>
 800e13a:	4602      	mov	r2, r0
 800e13c:	4631      	mov	r1, r6
 800e13e:	4658      	mov	r0, fp
 800e140:	920e      	str	r2, [sp, #56]	@ 0x38
 800e142:	f000 fa0d 	bl	800e560 <_Bfree>
 800e146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e14a:	9e07      	ldr	r6, [sp, #28]
 800e14c:	ea43 0102 	orr.w	r1, r3, r2
 800e150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e152:	4319      	orrs	r1, r3
 800e154:	d110      	bne.n	800e178 <_dtoa_r+0xa20>
 800e156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e15a:	d029      	beq.n	800e1b0 <_dtoa_r+0xa58>
 800e15c:	9b08      	ldr	r3, [sp, #32]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	dd02      	ble.n	800e168 <_dtoa_r+0xa10>
 800e162:	9b02      	ldr	r3, [sp, #8]
 800e164:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e168:	9b00      	ldr	r3, [sp, #0]
 800e16a:	f883 8000 	strb.w	r8, [r3]
 800e16e:	e63f      	b.n	800ddf0 <_dtoa_r+0x698>
 800e170:	4628      	mov	r0, r5
 800e172:	e7bb      	b.n	800e0ec <_dtoa_r+0x994>
 800e174:	2201      	movs	r2, #1
 800e176:	e7e1      	b.n	800e13c <_dtoa_r+0x9e4>
 800e178:	9b08      	ldr	r3, [sp, #32]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	db04      	blt.n	800e188 <_dtoa_r+0xa30>
 800e17e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e180:	430b      	orrs	r3, r1
 800e182:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e184:	430b      	orrs	r3, r1
 800e186:	d120      	bne.n	800e1ca <_dtoa_r+0xa72>
 800e188:	2a00      	cmp	r2, #0
 800e18a:	dded      	ble.n	800e168 <_dtoa_r+0xa10>
 800e18c:	4649      	mov	r1, r9
 800e18e:	2201      	movs	r2, #1
 800e190:	4658      	mov	r0, fp
 800e192:	f000 fbb3 	bl	800e8fc <__lshift>
 800e196:	4621      	mov	r1, r4
 800e198:	4681      	mov	r9, r0
 800e19a:	f000 fc1b 	bl	800e9d4 <__mcmp>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	dc03      	bgt.n	800e1aa <_dtoa_r+0xa52>
 800e1a2:	d1e1      	bne.n	800e168 <_dtoa_r+0xa10>
 800e1a4:	f018 0f01 	tst.w	r8, #1
 800e1a8:	d0de      	beq.n	800e168 <_dtoa_r+0xa10>
 800e1aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e1ae:	d1d8      	bne.n	800e162 <_dtoa_r+0xa0a>
 800e1b0:	9a00      	ldr	r2, [sp, #0]
 800e1b2:	2339      	movs	r3, #57	@ 0x39
 800e1b4:	7013      	strb	r3, [r2, #0]
 800e1b6:	4633      	mov	r3, r6
 800e1b8:	461e      	mov	r6, r3
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e1c0:	2a39      	cmp	r2, #57	@ 0x39
 800e1c2:	d052      	beq.n	800e26a <_dtoa_r+0xb12>
 800e1c4:	3201      	adds	r2, #1
 800e1c6:	701a      	strb	r2, [r3, #0]
 800e1c8:	e612      	b.n	800ddf0 <_dtoa_r+0x698>
 800e1ca:	2a00      	cmp	r2, #0
 800e1cc:	dd07      	ble.n	800e1de <_dtoa_r+0xa86>
 800e1ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e1d2:	d0ed      	beq.n	800e1b0 <_dtoa_r+0xa58>
 800e1d4:	9a00      	ldr	r2, [sp, #0]
 800e1d6:	f108 0301 	add.w	r3, r8, #1
 800e1da:	7013      	strb	r3, [r2, #0]
 800e1dc:	e608      	b.n	800ddf0 <_dtoa_r+0x698>
 800e1de:	9b07      	ldr	r3, [sp, #28]
 800e1e0:	9a07      	ldr	r2, [sp, #28]
 800e1e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d028      	beq.n	800e23e <_dtoa_r+0xae6>
 800e1ec:	4649      	mov	r1, r9
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	220a      	movs	r2, #10
 800e1f2:	4658      	mov	r0, fp
 800e1f4:	f000 f9d6 	bl	800e5a4 <__multadd>
 800e1f8:	42af      	cmp	r7, r5
 800e1fa:	4681      	mov	r9, r0
 800e1fc:	f04f 0300 	mov.w	r3, #0
 800e200:	f04f 020a 	mov.w	r2, #10
 800e204:	4639      	mov	r1, r7
 800e206:	4658      	mov	r0, fp
 800e208:	d107      	bne.n	800e21a <_dtoa_r+0xac2>
 800e20a:	f000 f9cb 	bl	800e5a4 <__multadd>
 800e20e:	4607      	mov	r7, r0
 800e210:	4605      	mov	r5, r0
 800e212:	9b07      	ldr	r3, [sp, #28]
 800e214:	3301      	adds	r3, #1
 800e216:	9307      	str	r3, [sp, #28]
 800e218:	e774      	b.n	800e104 <_dtoa_r+0x9ac>
 800e21a:	f000 f9c3 	bl	800e5a4 <__multadd>
 800e21e:	4629      	mov	r1, r5
 800e220:	4607      	mov	r7, r0
 800e222:	2300      	movs	r3, #0
 800e224:	220a      	movs	r2, #10
 800e226:	4658      	mov	r0, fp
 800e228:	f000 f9bc 	bl	800e5a4 <__multadd>
 800e22c:	4605      	mov	r5, r0
 800e22e:	e7f0      	b.n	800e212 <_dtoa_r+0xaba>
 800e230:	9b00      	ldr	r3, [sp, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	bfcc      	ite	gt
 800e236:	461e      	movgt	r6, r3
 800e238:	2601      	movle	r6, #1
 800e23a:	4456      	add	r6, sl
 800e23c:	2700      	movs	r7, #0
 800e23e:	4649      	mov	r1, r9
 800e240:	2201      	movs	r2, #1
 800e242:	4658      	mov	r0, fp
 800e244:	f000 fb5a 	bl	800e8fc <__lshift>
 800e248:	4621      	mov	r1, r4
 800e24a:	4681      	mov	r9, r0
 800e24c:	f000 fbc2 	bl	800e9d4 <__mcmp>
 800e250:	2800      	cmp	r0, #0
 800e252:	dcb0      	bgt.n	800e1b6 <_dtoa_r+0xa5e>
 800e254:	d102      	bne.n	800e25c <_dtoa_r+0xb04>
 800e256:	f018 0f01 	tst.w	r8, #1
 800e25a:	d1ac      	bne.n	800e1b6 <_dtoa_r+0xa5e>
 800e25c:	4633      	mov	r3, r6
 800e25e:	461e      	mov	r6, r3
 800e260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e264:	2a30      	cmp	r2, #48	@ 0x30
 800e266:	d0fa      	beq.n	800e25e <_dtoa_r+0xb06>
 800e268:	e5c2      	b.n	800ddf0 <_dtoa_r+0x698>
 800e26a:	459a      	cmp	sl, r3
 800e26c:	d1a4      	bne.n	800e1b8 <_dtoa_r+0xa60>
 800e26e:	9b04      	ldr	r3, [sp, #16]
 800e270:	3301      	adds	r3, #1
 800e272:	9304      	str	r3, [sp, #16]
 800e274:	2331      	movs	r3, #49	@ 0x31
 800e276:	f88a 3000 	strb.w	r3, [sl]
 800e27a:	e5b9      	b.n	800ddf0 <_dtoa_r+0x698>
 800e27c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e27e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e2dc <_dtoa_r+0xb84>
 800e282:	b11b      	cbz	r3, 800e28c <_dtoa_r+0xb34>
 800e284:	f10a 0308 	add.w	r3, sl, #8
 800e288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e28a:	6013      	str	r3, [r2, #0]
 800e28c:	4650      	mov	r0, sl
 800e28e:	b019      	add	sp, #100	@ 0x64
 800e290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e296:	2b01      	cmp	r3, #1
 800e298:	f77f ae37 	ble.w	800df0a <_dtoa_r+0x7b2>
 800e29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2a0:	2001      	movs	r0, #1
 800e2a2:	e655      	b.n	800df50 <_dtoa_r+0x7f8>
 800e2a4:	9b00      	ldr	r3, [sp, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f77f aed6 	ble.w	800e058 <_dtoa_r+0x900>
 800e2ac:	4656      	mov	r6, sl
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	4648      	mov	r0, r9
 800e2b2:	f7ff f9c6 	bl	800d642 <quorem>
 800e2b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e2ba:	f806 8b01 	strb.w	r8, [r6], #1
 800e2be:	9b00      	ldr	r3, [sp, #0]
 800e2c0:	eba6 020a 	sub.w	r2, r6, sl
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	ddb3      	ble.n	800e230 <_dtoa_r+0xad8>
 800e2c8:	4649      	mov	r1, r9
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	220a      	movs	r2, #10
 800e2ce:	4658      	mov	r0, fp
 800e2d0:	f000 f968 	bl	800e5a4 <__multadd>
 800e2d4:	4681      	mov	r9, r0
 800e2d6:	e7ea      	b.n	800e2ae <_dtoa_r+0xb56>
 800e2d8:	08010270 	.word	0x08010270
 800e2dc:	080101f4 	.word	0x080101f4

0800e2e0 <_free_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	2900      	cmp	r1, #0
 800e2e6:	d041      	beq.n	800e36c <_free_r+0x8c>
 800e2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2ec:	1f0c      	subs	r4, r1, #4
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	bfb8      	it	lt
 800e2f2:	18e4      	addlt	r4, r4, r3
 800e2f4:	f000 f8e8 	bl	800e4c8 <__malloc_lock>
 800e2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800e370 <_free_r+0x90>)
 800e2fa:	6813      	ldr	r3, [r2, #0]
 800e2fc:	b933      	cbnz	r3, 800e30c <_free_r+0x2c>
 800e2fe:	6063      	str	r3, [r4, #4]
 800e300:	6014      	str	r4, [r2, #0]
 800e302:	4628      	mov	r0, r5
 800e304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e308:	f000 b8e4 	b.w	800e4d4 <__malloc_unlock>
 800e30c:	42a3      	cmp	r3, r4
 800e30e:	d908      	bls.n	800e322 <_free_r+0x42>
 800e310:	6820      	ldr	r0, [r4, #0]
 800e312:	1821      	adds	r1, r4, r0
 800e314:	428b      	cmp	r3, r1
 800e316:	bf01      	itttt	eq
 800e318:	6819      	ldreq	r1, [r3, #0]
 800e31a:	685b      	ldreq	r3, [r3, #4]
 800e31c:	1809      	addeq	r1, r1, r0
 800e31e:	6021      	streq	r1, [r4, #0]
 800e320:	e7ed      	b.n	800e2fe <_free_r+0x1e>
 800e322:	461a      	mov	r2, r3
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	b10b      	cbz	r3, 800e32c <_free_r+0x4c>
 800e328:	42a3      	cmp	r3, r4
 800e32a:	d9fa      	bls.n	800e322 <_free_r+0x42>
 800e32c:	6811      	ldr	r1, [r2, #0]
 800e32e:	1850      	adds	r0, r2, r1
 800e330:	42a0      	cmp	r0, r4
 800e332:	d10b      	bne.n	800e34c <_free_r+0x6c>
 800e334:	6820      	ldr	r0, [r4, #0]
 800e336:	4401      	add	r1, r0
 800e338:	1850      	adds	r0, r2, r1
 800e33a:	4283      	cmp	r3, r0
 800e33c:	6011      	str	r1, [r2, #0]
 800e33e:	d1e0      	bne.n	800e302 <_free_r+0x22>
 800e340:	6818      	ldr	r0, [r3, #0]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	6053      	str	r3, [r2, #4]
 800e346:	4408      	add	r0, r1
 800e348:	6010      	str	r0, [r2, #0]
 800e34a:	e7da      	b.n	800e302 <_free_r+0x22>
 800e34c:	d902      	bls.n	800e354 <_free_r+0x74>
 800e34e:	230c      	movs	r3, #12
 800e350:	602b      	str	r3, [r5, #0]
 800e352:	e7d6      	b.n	800e302 <_free_r+0x22>
 800e354:	6820      	ldr	r0, [r4, #0]
 800e356:	1821      	adds	r1, r4, r0
 800e358:	428b      	cmp	r3, r1
 800e35a:	bf04      	itt	eq
 800e35c:	6819      	ldreq	r1, [r3, #0]
 800e35e:	685b      	ldreq	r3, [r3, #4]
 800e360:	6063      	str	r3, [r4, #4]
 800e362:	bf04      	itt	eq
 800e364:	1809      	addeq	r1, r1, r0
 800e366:	6021      	streq	r1, [r4, #0]
 800e368:	6054      	str	r4, [r2, #4]
 800e36a:	e7ca      	b.n	800e302 <_free_r+0x22>
 800e36c:	bd38      	pop	{r3, r4, r5, pc}
 800e36e:	bf00      	nop
 800e370:	200050dc 	.word	0x200050dc

0800e374 <malloc>:
 800e374:	4b02      	ldr	r3, [pc, #8]	@ (800e380 <malloc+0xc>)
 800e376:	4601      	mov	r1, r0
 800e378:	6818      	ldr	r0, [r3, #0]
 800e37a:	f000 b825 	b.w	800e3c8 <_malloc_r>
 800e37e:	bf00      	nop
 800e380:	2000001c 	.word	0x2000001c

0800e384 <sbrk_aligned>:
 800e384:	b570      	push	{r4, r5, r6, lr}
 800e386:	4e0f      	ldr	r6, [pc, #60]	@ (800e3c4 <sbrk_aligned+0x40>)
 800e388:	460c      	mov	r4, r1
 800e38a:	6831      	ldr	r1, [r6, #0]
 800e38c:	4605      	mov	r5, r0
 800e38e:	b911      	cbnz	r1, 800e396 <sbrk_aligned+0x12>
 800e390:	f000 fe46 	bl	800f020 <_sbrk_r>
 800e394:	6030      	str	r0, [r6, #0]
 800e396:	4621      	mov	r1, r4
 800e398:	4628      	mov	r0, r5
 800e39a:	f000 fe41 	bl	800f020 <_sbrk_r>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	d103      	bne.n	800e3aa <sbrk_aligned+0x26>
 800e3a2:	f04f 34ff 	mov.w	r4, #4294967295
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	bd70      	pop	{r4, r5, r6, pc}
 800e3aa:	1cc4      	adds	r4, r0, #3
 800e3ac:	f024 0403 	bic.w	r4, r4, #3
 800e3b0:	42a0      	cmp	r0, r4
 800e3b2:	d0f8      	beq.n	800e3a6 <sbrk_aligned+0x22>
 800e3b4:	1a21      	subs	r1, r4, r0
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f000 fe32 	bl	800f020 <_sbrk_r>
 800e3bc:	3001      	adds	r0, #1
 800e3be:	d1f2      	bne.n	800e3a6 <sbrk_aligned+0x22>
 800e3c0:	e7ef      	b.n	800e3a2 <sbrk_aligned+0x1e>
 800e3c2:	bf00      	nop
 800e3c4:	200050d8 	.word	0x200050d8

0800e3c8 <_malloc_r>:
 800e3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3cc:	1ccd      	adds	r5, r1, #3
 800e3ce:	f025 0503 	bic.w	r5, r5, #3
 800e3d2:	3508      	adds	r5, #8
 800e3d4:	2d0c      	cmp	r5, #12
 800e3d6:	bf38      	it	cc
 800e3d8:	250c      	movcc	r5, #12
 800e3da:	2d00      	cmp	r5, #0
 800e3dc:	4606      	mov	r6, r0
 800e3de:	db01      	blt.n	800e3e4 <_malloc_r+0x1c>
 800e3e0:	42a9      	cmp	r1, r5
 800e3e2:	d904      	bls.n	800e3ee <_malloc_r+0x26>
 800e3e4:	230c      	movs	r3, #12
 800e3e6:	6033      	str	r3, [r6, #0]
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e4c4 <_malloc_r+0xfc>
 800e3f2:	f000 f869 	bl	800e4c8 <__malloc_lock>
 800e3f6:	f8d8 3000 	ldr.w	r3, [r8]
 800e3fa:	461c      	mov	r4, r3
 800e3fc:	bb44      	cbnz	r4, 800e450 <_malloc_r+0x88>
 800e3fe:	4629      	mov	r1, r5
 800e400:	4630      	mov	r0, r6
 800e402:	f7ff ffbf 	bl	800e384 <sbrk_aligned>
 800e406:	1c43      	adds	r3, r0, #1
 800e408:	4604      	mov	r4, r0
 800e40a:	d158      	bne.n	800e4be <_malloc_r+0xf6>
 800e40c:	f8d8 4000 	ldr.w	r4, [r8]
 800e410:	4627      	mov	r7, r4
 800e412:	2f00      	cmp	r7, #0
 800e414:	d143      	bne.n	800e49e <_malloc_r+0xd6>
 800e416:	2c00      	cmp	r4, #0
 800e418:	d04b      	beq.n	800e4b2 <_malloc_r+0xea>
 800e41a:	6823      	ldr	r3, [r4, #0]
 800e41c:	4639      	mov	r1, r7
 800e41e:	4630      	mov	r0, r6
 800e420:	eb04 0903 	add.w	r9, r4, r3
 800e424:	f000 fdfc 	bl	800f020 <_sbrk_r>
 800e428:	4581      	cmp	r9, r0
 800e42a:	d142      	bne.n	800e4b2 <_malloc_r+0xea>
 800e42c:	6821      	ldr	r1, [r4, #0]
 800e42e:	1a6d      	subs	r5, r5, r1
 800e430:	4629      	mov	r1, r5
 800e432:	4630      	mov	r0, r6
 800e434:	f7ff ffa6 	bl	800e384 <sbrk_aligned>
 800e438:	3001      	adds	r0, #1
 800e43a:	d03a      	beq.n	800e4b2 <_malloc_r+0xea>
 800e43c:	6823      	ldr	r3, [r4, #0]
 800e43e:	442b      	add	r3, r5
 800e440:	6023      	str	r3, [r4, #0]
 800e442:	f8d8 3000 	ldr.w	r3, [r8]
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	bb62      	cbnz	r2, 800e4a4 <_malloc_r+0xdc>
 800e44a:	f8c8 7000 	str.w	r7, [r8]
 800e44e:	e00f      	b.n	800e470 <_malloc_r+0xa8>
 800e450:	6822      	ldr	r2, [r4, #0]
 800e452:	1b52      	subs	r2, r2, r5
 800e454:	d420      	bmi.n	800e498 <_malloc_r+0xd0>
 800e456:	2a0b      	cmp	r2, #11
 800e458:	d917      	bls.n	800e48a <_malloc_r+0xc2>
 800e45a:	1961      	adds	r1, r4, r5
 800e45c:	42a3      	cmp	r3, r4
 800e45e:	6025      	str	r5, [r4, #0]
 800e460:	bf18      	it	ne
 800e462:	6059      	strne	r1, [r3, #4]
 800e464:	6863      	ldr	r3, [r4, #4]
 800e466:	bf08      	it	eq
 800e468:	f8c8 1000 	streq.w	r1, [r8]
 800e46c:	5162      	str	r2, [r4, r5]
 800e46e:	604b      	str	r3, [r1, #4]
 800e470:	4630      	mov	r0, r6
 800e472:	f000 f82f 	bl	800e4d4 <__malloc_unlock>
 800e476:	f104 000b 	add.w	r0, r4, #11
 800e47a:	1d23      	adds	r3, r4, #4
 800e47c:	f020 0007 	bic.w	r0, r0, #7
 800e480:	1ac2      	subs	r2, r0, r3
 800e482:	bf1c      	itt	ne
 800e484:	1a1b      	subne	r3, r3, r0
 800e486:	50a3      	strne	r3, [r4, r2]
 800e488:	e7af      	b.n	800e3ea <_malloc_r+0x22>
 800e48a:	6862      	ldr	r2, [r4, #4]
 800e48c:	42a3      	cmp	r3, r4
 800e48e:	bf0c      	ite	eq
 800e490:	f8c8 2000 	streq.w	r2, [r8]
 800e494:	605a      	strne	r2, [r3, #4]
 800e496:	e7eb      	b.n	800e470 <_malloc_r+0xa8>
 800e498:	4623      	mov	r3, r4
 800e49a:	6864      	ldr	r4, [r4, #4]
 800e49c:	e7ae      	b.n	800e3fc <_malloc_r+0x34>
 800e49e:	463c      	mov	r4, r7
 800e4a0:	687f      	ldr	r7, [r7, #4]
 800e4a2:	e7b6      	b.n	800e412 <_malloc_r+0x4a>
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	42a3      	cmp	r3, r4
 800e4aa:	d1fb      	bne.n	800e4a4 <_malloc_r+0xdc>
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	6053      	str	r3, [r2, #4]
 800e4b0:	e7de      	b.n	800e470 <_malloc_r+0xa8>
 800e4b2:	230c      	movs	r3, #12
 800e4b4:	6033      	str	r3, [r6, #0]
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f000 f80c 	bl	800e4d4 <__malloc_unlock>
 800e4bc:	e794      	b.n	800e3e8 <_malloc_r+0x20>
 800e4be:	6005      	str	r5, [r0, #0]
 800e4c0:	e7d6      	b.n	800e470 <_malloc_r+0xa8>
 800e4c2:	bf00      	nop
 800e4c4:	200050dc 	.word	0x200050dc

0800e4c8 <__malloc_lock>:
 800e4c8:	4801      	ldr	r0, [pc, #4]	@ (800e4d0 <__malloc_lock+0x8>)
 800e4ca:	f7ff b8aa 	b.w	800d622 <__retarget_lock_acquire_recursive>
 800e4ce:	bf00      	nop
 800e4d0:	200050d4 	.word	0x200050d4

0800e4d4 <__malloc_unlock>:
 800e4d4:	4801      	ldr	r0, [pc, #4]	@ (800e4dc <__malloc_unlock+0x8>)
 800e4d6:	f7ff b8a5 	b.w	800d624 <__retarget_lock_release_recursive>
 800e4da:	bf00      	nop
 800e4dc:	200050d4 	.word	0x200050d4

0800e4e0 <_Balloc>:
 800e4e0:	b570      	push	{r4, r5, r6, lr}
 800e4e2:	69c6      	ldr	r6, [r0, #28]
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	b976      	cbnz	r6, 800e508 <_Balloc+0x28>
 800e4ea:	2010      	movs	r0, #16
 800e4ec:	f7ff ff42 	bl	800e374 <malloc>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	61e0      	str	r0, [r4, #28]
 800e4f4:	b920      	cbnz	r0, 800e500 <_Balloc+0x20>
 800e4f6:	4b18      	ldr	r3, [pc, #96]	@ (800e558 <_Balloc+0x78>)
 800e4f8:	4818      	ldr	r0, [pc, #96]	@ (800e55c <_Balloc+0x7c>)
 800e4fa:	216b      	movs	r1, #107	@ 0x6b
 800e4fc:	f000 fda0 	bl	800f040 <__assert_func>
 800e500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e504:	6006      	str	r6, [r0, #0]
 800e506:	60c6      	str	r6, [r0, #12]
 800e508:	69e6      	ldr	r6, [r4, #28]
 800e50a:	68f3      	ldr	r3, [r6, #12]
 800e50c:	b183      	cbz	r3, 800e530 <_Balloc+0x50>
 800e50e:	69e3      	ldr	r3, [r4, #28]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e516:	b9b8      	cbnz	r0, 800e548 <_Balloc+0x68>
 800e518:	2101      	movs	r1, #1
 800e51a:	fa01 f605 	lsl.w	r6, r1, r5
 800e51e:	1d72      	adds	r2, r6, #5
 800e520:	0092      	lsls	r2, r2, #2
 800e522:	4620      	mov	r0, r4
 800e524:	f000 fdaa 	bl	800f07c <_calloc_r>
 800e528:	b160      	cbz	r0, 800e544 <_Balloc+0x64>
 800e52a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e52e:	e00e      	b.n	800e54e <_Balloc+0x6e>
 800e530:	2221      	movs	r2, #33	@ 0x21
 800e532:	2104      	movs	r1, #4
 800e534:	4620      	mov	r0, r4
 800e536:	f000 fda1 	bl	800f07c <_calloc_r>
 800e53a:	69e3      	ldr	r3, [r4, #28]
 800e53c:	60f0      	str	r0, [r6, #12]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1e4      	bne.n	800e50e <_Balloc+0x2e>
 800e544:	2000      	movs	r0, #0
 800e546:	bd70      	pop	{r4, r5, r6, pc}
 800e548:	6802      	ldr	r2, [r0, #0]
 800e54a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e54e:	2300      	movs	r3, #0
 800e550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e554:	e7f7      	b.n	800e546 <_Balloc+0x66>
 800e556:	bf00      	nop
 800e558:	08010201 	.word	0x08010201
 800e55c:	08010281 	.word	0x08010281

0800e560 <_Bfree>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	69c6      	ldr	r6, [r0, #28]
 800e564:	4605      	mov	r5, r0
 800e566:	460c      	mov	r4, r1
 800e568:	b976      	cbnz	r6, 800e588 <_Bfree+0x28>
 800e56a:	2010      	movs	r0, #16
 800e56c:	f7ff ff02 	bl	800e374 <malloc>
 800e570:	4602      	mov	r2, r0
 800e572:	61e8      	str	r0, [r5, #28]
 800e574:	b920      	cbnz	r0, 800e580 <_Bfree+0x20>
 800e576:	4b09      	ldr	r3, [pc, #36]	@ (800e59c <_Bfree+0x3c>)
 800e578:	4809      	ldr	r0, [pc, #36]	@ (800e5a0 <_Bfree+0x40>)
 800e57a:	218f      	movs	r1, #143	@ 0x8f
 800e57c:	f000 fd60 	bl	800f040 <__assert_func>
 800e580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e584:	6006      	str	r6, [r0, #0]
 800e586:	60c6      	str	r6, [r0, #12]
 800e588:	b13c      	cbz	r4, 800e59a <_Bfree+0x3a>
 800e58a:	69eb      	ldr	r3, [r5, #28]
 800e58c:	6862      	ldr	r2, [r4, #4]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e594:	6021      	str	r1, [r4, #0]
 800e596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e59a:	bd70      	pop	{r4, r5, r6, pc}
 800e59c:	08010201 	.word	0x08010201
 800e5a0:	08010281 	.word	0x08010281

0800e5a4 <__multadd>:
 800e5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a8:	690d      	ldr	r5, [r1, #16]
 800e5aa:	4607      	mov	r7, r0
 800e5ac:	460c      	mov	r4, r1
 800e5ae:	461e      	mov	r6, r3
 800e5b0:	f101 0c14 	add.w	ip, r1, #20
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	f8dc 3000 	ldr.w	r3, [ip]
 800e5ba:	b299      	uxth	r1, r3
 800e5bc:	fb02 6101 	mla	r1, r2, r1, r6
 800e5c0:	0c1e      	lsrs	r6, r3, #16
 800e5c2:	0c0b      	lsrs	r3, r1, #16
 800e5c4:	fb02 3306 	mla	r3, r2, r6, r3
 800e5c8:	b289      	uxth	r1, r1
 800e5ca:	3001      	adds	r0, #1
 800e5cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5d0:	4285      	cmp	r5, r0
 800e5d2:	f84c 1b04 	str.w	r1, [ip], #4
 800e5d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5da:	dcec      	bgt.n	800e5b6 <__multadd+0x12>
 800e5dc:	b30e      	cbz	r6, 800e622 <__multadd+0x7e>
 800e5de:	68a3      	ldr	r3, [r4, #8]
 800e5e0:	42ab      	cmp	r3, r5
 800e5e2:	dc19      	bgt.n	800e618 <__multadd+0x74>
 800e5e4:	6861      	ldr	r1, [r4, #4]
 800e5e6:	4638      	mov	r0, r7
 800e5e8:	3101      	adds	r1, #1
 800e5ea:	f7ff ff79 	bl	800e4e0 <_Balloc>
 800e5ee:	4680      	mov	r8, r0
 800e5f0:	b928      	cbnz	r0, 800e5fe <__multadd+0x5a>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e628 <__multadd+0x84>)
 800e5f6:	480d      	ldr	r0, [pc, #52]	@ (800e62c <__multadd+0x88>)
 800e5f8:	21ba      	movs	r1, #186	@ 0xba
 800e5fa:	f000 fd21 	bl	800f040 <__assert_func>
 800e5fe:	6922      	ldr	r2, [r4, #16]
 800e600:	3202      	adds	r2, #2
 800e602:	f104 010c 	add.w	r1, r4, #12
 800e606:	0092      	lsls	r2, r2, #2
 800e608:	300c      	adds	r0, #12
 800e60a:	f7ff f80c 	bl	800d626 <memcpy>
 800e60e:	4621      	mov	r1, r4
 800e610:	4638      	mov	r0, r7
 800e612:	f7ff ffa5 	bl	800e560 <_Bfree>
 800e616:	4644      	mov	r4, r8
 800e618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e61c:	3501      	adds	r5, #1
 800e61e:	615e      	str	r6, [r3, #20]
 800e620:	6125      	str	r5, [r4, #16]
 800e622:	4620      	mov	r0, r4
 800e624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e628:	08010270 	.word	0x08010270
 800e62c:	08010281 	.word	0x08010281

0800e630 <__hi0bits>:
 800e630:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e634:	4603      	mov	r3, r0
 800e636:	bf36      	itet	cc
 800e638:	0403      	lslcc	r3, r0, #16
 800e63a:	2000      	movcs	r0, #0
 800e63c:	2010      	movcc	r0, #16
 800e63e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e642:	bf3c      	itt	cc
 800e644:	021b      	lslcc	r3, r3, #8
 800e646:	3008      	addcc	r0, #8
 800e648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e64c:	bf3c      	itt	cc
 800e64e:	011b      	lslcc	r3, r3, #4
 800e650:	3004      	addcc	r0, #4
 800e652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e656:	bf3c      	itt	cc
 800e658:	009b      	lslcc	r3, r3, #2
 800e65a:	3002      	addcc	r0, #2
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	db05      	blt.n	800e66c <__hi0bits+0x3c>
 800e660:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e664:	f100 0001 	add.w	r0, r0, #1
 800e668:	bf08      	it	eq
 800e66a:	2020      	moveq	r0, #32
 800e66c:	4770      	bx	lr

0800e66e <__lo0bits>:
 800e66e:	6803      	ldr	r3, [r0, #0]
 800e670:	4602      	mov	r2, r0
 800e672:	f013 0007 	ands.w	r0, r3, #7
 800e676:	d00b      	beq.n	800e690 <__lo0bits+0x22>
 800e678:	07d9      	lsls	r1, r3, #31
 800e67a:	d421      	bmi.n	800e6c0 <__lo0bits+0x52>
 800e67c:	0798      	lsls	r0, r3, #30
 800e67e:	bf49      	itett	mi
 800e680:	085b      	lsrmi	r3, r3, #1
 800e682:	089b      	lsrpl	r3, r3, #2
 800e684:	2001      	movmi	r0, #1
 800e686:	6013      	strmi	r3, [r2, #0]
 800e688:	bf5c      	itt	pl
 800e68a:	6013      	strpl	r3, [r2, #0]
 800e68c:	2002      	movpl	r0, #2
 800e68e:	4770      	bx	lr
 800e690:	b299      	uxth	r1, r3
 800e692:	b909      	cbnz	r1, 800e698 <__lo0bits+0x2a>
 800e694:	0c1b      	lsrs	r3, r3, #16
 800e696:	2010      	movs	r0, #16
 800e698:	b2d9      	uxtb	r1, r3
 800e69a:	b909      	cbnz	r1, 800e6a0 <__lo0bits+0x32>
 800e69c:	3008      	adds	r0, #8
 800e69e:	0a1b      	lsrs	r3, r3, #8
 800e6a0:	0719      	lsls	r1, r3, #28
 800e6a2:	bf04      	itt	eq
 800e6a4:	091b      	lsreq	r3, r3, #4
 800e6a6:	3004      	addeq	r0, #4
 800e6a8:	0799      	lsls	r1, r3, #30
 800e6aa:	bf04      	itt	eq
 800e6ac:	089b      	lsreq	r3, r3, #2
 800e6ae:	3002      	addeq	r0, #2
 800e6b0:	07d9      	lsls	r1, r3, #31
 800e6b2:	d403      	bmi.n	800e6bc <__lo0bits+0x4e>
 800e6b4:	085b      	lsrs	r3, r3, #1
 800e6b6:	f100 0001 	add.w	r0, r0, #1
 800e6ba:	d003      	beq.n	800e6c4 <__lo0bits+0x56>
 800e6bc:	6013      	str	r3, [r2, #0]
 800e6be:	4770      	bx	lr
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	4770      	bx	lr
 800e6c4:	2020      	movs	r0, #32
 800e6c6:	4770      	bx	lr

0800e6c8 <__i2b>:
 800e6c8:	b510      	push	{r4, lr}
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	f7ff ff07 	bl	800e4e0 <_Balloc>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	b928      	cbnz	r0, 800e6e2 <__i2b+0x1a>
 800e6d6:	4b05      	ldr	r3, [pc, #20]	@ (800e6ec <__i2b+0x24>)
 800e6d8:	4805      	ldr	r0, [pc, #20]	@ (800e6f0 <__i2b+0x28>)
 800e6da:	f240 1145 	movw	r1, #325	@ 0x145
 800e6de:	f000 fcaf 	bl	800f040 <__assert_func>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	6144      	str	r4, [r0, #20]
 800e6e6:	6103      	str	r3, [r0, #16]
 800e6e8:	bd10      	pop	{r4, pc}
 800e6ea:	bf00      	nop
 800e6ec:	08010270 	.word	0x08010270
 800e6f0:	08010281 	.word	0x08010281

0800e6f4 <__multiply>:
 800e6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f8:	4614      	mov	r4, r2
 800e6fa:	690a      	ldr	r2, [r1, #16]
 800e6fc:	6923      	ldr	r3, [r4, #16]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	bfa8      	it	ge
 800e702:	4623      	movge	r3, r4
 800e704:	460f      	mov	r7, r1
 800e706:	bfa4      	itt	ge
 800e708:	460c      	movge	r4, r1
 800e70a:	461f      	movge	r7, r3
 800e70c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e710:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e714:	68a3      	ldr	r3, [r4, #8]
 800e716:	6861      	ldr	r1, [r4, #4]
 800e718:	eb0a 0609 	add.w	r6, sl, r9
 800e71c:	42b3      	cmp	r3, r6
 800e71e:	b085      	sub	sp, #20
 800e720:	bfb8      	it	lt
 800e722:	3101      	addlt	r1, #1
 800e724:	f7ff fedc 	bl	800e4e0 <_Balloc>
 800e728:	b930      	cbnz	r0, 800e738 <__multiply+0x44>
 800e72a:	4602      	mov	r2, r0
 800e72c:	4b44      	ldr	r3, [pc, #272]	@ (800e840 <__multiply+0x14c>)
 800e72e:	4845      	ldr	r0, [pc, #276]	@ (800e844 <__multiply+0x150>)
 800e730:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e734:	f000 fc84 	bl	800f040 <__assert_func>
 800e738:	f100 0514 	add.w	r5, r0, #20
 800e73c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e740:	462b      	mov	r3, r5
 800e742:	2200      	movs	r2, #0
 800e744:	4543      	cmp	r3, r8
 800e746:	d321      	bcc.n	800e78c <__multiply+0x98>
 800e748:	f107 0114 	add.w	r1, r7, #20
 800e74c:	f104 0214 	add.w	r2, r4, #20
 800e750:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e754:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e758:	9302      	str	r3, [sp, #8]
 800e75a:	1b13      	subs	r3, r2, r4
 800e75c:	3b15      	subs	r3, #21
 800e75e:	f023 0303 	bic.w	r3, r3, #3
 800e762:	3304      	adds	r3, #4
 800e764:	f104 0715 	add.w	r7, r4, #21
 800e768:	42ba      	cmp	r2, r7
 800e76a:	bf38      	it	cc
 800e76c:	2304      	movcc	r3, #4
 800e76e:	9301      	str	r3, [sp, #4]
 800e770:	9b02      	ldr	r3, [sp, #8]
 800e772:	9103      	str	r1, [sp, #12]
 800e774:	428b      	cmp	r3, r1
 800e776:	d80c      	bhi.n	800e792 <__multiply+0x9e>
 800e778:	2e00      	cmp	r6, #0
 800e77a:	dd03      	ble.n	800e784 <__multiply+0x90>
 800e77c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e780:	2b00      	cmp	r3, #0
 800e782:	d05b      	beq.n	800e83c <__multiply+0x148>
 800e784:	6106      	str	r6, [r0, #16]
 800e786:	b005      	add	sp, #20
 800e788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78c:	f843 2b04 	str.w	r2, [r3], #4
 800e790:	e7d8      	b.n	800e744 <__multiply+0x50>
 800e792:	f8b1 a000 	ldrh.w	sl, [r1]
 800e796:	f1ba 0f00 	cmp.w	sl, #0
 800e79a:	d024      	beq.n	800e7e6 <__multiply+0xf2>
 800e79c:	f104 0e14 	add.w	lr, r4, #20
 800e7a0:	46a9      	mov	r9, r5
 800e7a2:	f04f 0c00 	mov.w	ip, #0
 800e7a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e7aa:	f8d9 3000 	ldr.w	r3, [r9]
 800e7ae:	fa1f fb87 	uxth.w	fp, r7
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e7b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e7bc:	f8d9 7000 	ldr.w	r7, [r9]
 800e7c0:	4463      	add	r3, ip
 800e7c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e7c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e7ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e7d4:	4572      	cmp	r2, lr
 800e7d6:	f849 3b04 	str.w	r3, [r9], #4
 800e7da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e7de:	d8e2      	bhi.n	800e7a6 <__multiply+0xb2>
 800e7e0:	9b01      	ldr	r3, [sp, #4]
 800e7e2:	f845 c003 	str.w	ip, [r5, r3]
 800e7e6:	9b03      	ldr	r3, [sp, #12]
 800e7e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e7ec:	3104      	adds	r1, #4
 800e7ee:	f1b9 0f00 	cmp.w	r9, #0
 800e7f2:	d021      	beq.n	800e838 <__multiply+0x144>
 800e7f4:	682b      	ldr	r3, [r5, #0]
 800e7f6:	f104 0c14 	add.w	ip, r4, #20
 800e7fa:	46ae      	mov	lr, r5
 800e7fc:	f04f 0a00 	mov.w	sl, #0
 800e800:	f8bc b000 	ldrh.w	fp, [ip]
 800e804:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e808:	fb09 770b 	mla	r7, r9, fp, r7
 800e80c:	4457      	add	r7, sl
 800e80e:	b29b      	uxth	r3, r3
 800e810:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e814:	f84e 3b04 	str.w	r3, [lr], #4
 800e818:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e81c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e820:	f8be 3000 	ldrh.w	r3, [lr]
 800e824:	fb09 330a 	mla	r3, r9, sl, r3
 800e828:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e82c:	4562      	cmp	r2, ip
 800e82e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e832:	d8e5      	bhi.n	800e800 <__multiply+0x10c>
 800e834:	9f01      	ldr	r7, [sp, #4]
 800e836:	51eb      	str	r3, [r5, r7]
 800e838:	3504      	adds	r5, #4
 800e83a:	e799      	b.n	800e770 <__multiply+0x7c>
 800e83c:	3e01      	subs	r6, #1
 800e83e:	e79b      	b.n	800e778 <__multiply+0x84>
 800e840:	08010270 	.word	0x08010270
 800e844:	08010281 	.word	0x08010281

0800e848 <__pow5mult>:
 800e848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e84c:	4615      	mov	r5, r2
 800e84e:	f012 0203 	ands.w	r2, r2, #3
 800e852:	4607      	mov	r7, r0
 800e854:	460e      	mov	r6, r1
 800e856:	d007      	beq.n	800e868 <__pow5mult+0x20>
 800e858:	4c25      	ldr	r4, [pc, #148]	@ (800e8f0 <__pow5mult+0xa8>)
 800e85a:	3a01      	subs	r2, #1
 800e85c:	2300      	movs	r3, #0
 800e85e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e862:	f7ff fe9f 	bl	800e5a4 <__multadd>
 800e866:	4606      	mov	r6, r0
 800e868:	10ad      	asrs	r5, r5, #2
 800e86a:	d03d      	beq.n	800e8e8 <__pow5mult+0xa0>
 800e86c:	69fc      	ldr	r4, [r7, #28]
 800e86e:	b97c      	cbnz	r4, 800e890 <__pow5mult+0x48>
 800e870:	2010      	movs	r0, #16
 800e872:	f7ff fd7f 	bl	800e374 <malloc>
 800e876:	4602      	mov	r2, r0
 800e878:	61f8      	str	r0, [r7, #28]
 800e87a:	b928      	cbnz	r0, 800e888 <__pow5mult+0x40>
 800e87c:	4b1d      	ldr	r3, [pc, #116]	@ (800e8f4 <__pow5mult+0xac>)
 800e87e:	481e      	ldr	r0, [pc, #120]	@ (800e8f8 <__pow5mult+0xb0>)
 800e880:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e884:	f000 fbdc 	bl	800f040 <__assert_func>
 800e888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e88c:	6004      	str	r4, [r0, #0]
 800e88e:	60c4      	str	r4, [r0, #12]
 800e890:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e898:	b94c      	cbnz	r4, 800e8ae <__pow5mult+0x66>
 800e89a:	f240 2171 	movw	r1, #625	@ 0x271
 800e89e:	4638      	mov	r0, r7
 800e8a0:	f7ff ff12 	bl	800e6c8 <__i2b>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	6003      	str	r3, [r0, #0]
 800e8ae:	f04f 0900 	mov.w	r9, #0
 800e8b2:	07eb      	lsls	r3, r5, #31
 800e8b4:	d50a      	bpl.n	800e8cc <__pow5mult+0x84>
 800e8b6:	4631      	mov	r1, r6
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	4638      	mov	r0, r7
 800e8bc:	f7ff ff1a 	bl	800e6f4 <__multiply>
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4680      	mov	r8, r0
 800e8c4:	4638      	mov	r0, r7
 800e8c6:	f7ff fe4b 	bl	800e560 <_Bfree>
 800e8ca:	4646      	mov	r6, r8
 800e8cc:	106d      	asrs	r5, r5, #1
 800e8ce:	d00b      	beq.n	800e8e8 <__pow5mult+0xa0>
 800e8d0:	6820      	ldr	r0, [r4, #0]
 800e8d2:	b938      	cbnz	r0, 800e8e4 <__pow5mult+0x9c>
 800e8d4:	4622      	mov	r2, r4
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	4638      	mov	r0, r7
 800e8da:	f7ff ff0b 	bl	800e6f4 <__multiply>
 800e8de:	6020      	str	r0, [r4, #0]
 800e8e0:	f8c0 9000 	str.w	r9, [r0]
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	e7e4      	b.n	800e8b2 <__pow5mult+0x6a>
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8ee:	bf00      	nop
 800e8f0:	080102dc 	.word	0x080102dc
 800e8f4:	08010201 	.word	0x08010201
 800e8f8:	08010281 	.word	0x08010281

0800e8fc <__lshift>:
 800e8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e900:	460c      	mov	r4, r1
 800e902:	6849      	ldr	r1, [r1, #4]
 800e904:	6923      	ldr	r3, [r4, #16]
 800e906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e90a:	68a3      	ldr	r3, [r4, #8]
 800e90c:	4607      	mov	r7, r0
 800e90e:	4691      	mov	r9, r2
 800e910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e914:	f108 0601 	add.w	r6, r8, #1
 800e918:	42b3      	cmp	r3, r6
 800e91a:	db0b      	blt.n	800e934 <__lshift+0x38>
 800e91c:	4638      	mov	r0, r7
 800e91e:	f7ff fddf 	bl	800e4e0 <_Balloc>
 800e922:	4605      	mov	r5, r0
 800e924:	b948      	cbnz	r0, 800e93a <__lshift+0x3e>
 800e926:	4602      	mov	r2, r0
 800e928:	4b28      	ldr	r3, [pc, #160]	@ (800e9cc <__lshift+0xd0>)
 800e92a:	4829      	ldr	r0, [pc, #164]	@ (800e9d0 <__lshift+0xd4>)
 800e92c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e930:	f000 fb86 	bl	800f040 <__assert_func>
 800e934:	3101      	adds	r1, #1
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	e7ee      	b.n	800e918 <__lshift+0x1c>
 800e93a:	2300      	movs	r3, #0
 800e93c:	f100 0114 	add.w	r1, r0, #20
 800e940:	f100 0210 	add.w	r2, r0, #16
 800e944:	4618      	mov	r0, r3
 800e946:	4553      	cmp	r3, sl
 800e948:	db33      	blt.n	800e9b2 <__lshift+0xb6>
 800e94a:	6920      	ldr	r0, [r4, #16]
 800e94c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e950:	f104 0314 	add.w	r3, r4, #20
 800e954:	f019 091f 	ands.w	r9, r9, #31
 800e958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e95c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e960:	d02b      	beq.n	800e9ba <__lshift+0xbe>
 800e962:	f1c9 0e20 	rsb	lr, r9, #32
 800e966:	468a      	mov	sl, r1
 800e968:	2200      	movs	r2, #0
 800e96a:	6818      	ldr	r0, [r3, #0]
 800e96c:	fa00 f009 	lsl.w	r0, r0, r9
 800e970:	4310      	orrs	r0, r2
 800e972:	f84a 0b04 	str.w	r0, [sl], #4
 800e976:	f853 2b04 	ldr.w	r2, [r3], #4
 800e97a:	459c      	cmp	ip, r3
 800e97c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e980:	d8f3      	bhi.n	800e96a <__lshift+0x6e>
 800e982:	ebac 0304 	sub.w	r3, ip, r4
 800e986:	3b15      	subs	r3, #21
 800e988:	f023 0303 	bic.w	r3, r3, #3
 800e98c:	3304      	adds	r3, #4
 800e98e:	f104 0015 	add.w	r0, r4, #21
 800e992:	4584      	cmp	ip, r0
 800e994:	bf38      	it	cc
 800e996:	2304      	movcc	r3, #4
 800e998:	50ca      	str	r2, [r1, r3]
 800e99a:	b10a      	cbz	r2, 800e9a0 <__lshift+0xa4>
 800e99c:	f108 0602 	add.w	r6, r8, #2
 800e9a0:	3e01      	subs	r6, #1
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	612e      	str	r6, [r5, #16]
 800e9a6:	4621      	mov	r1, r4
 800e9a8:	f7ff fdda 	bl	800e560 <_Bfree>
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	e7c5      	b.n	800e946 <__lshift+0x4a>
 800e9ba:	3904      	subs	r1, #4
 800e9bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9c4:	459c      	cmp	ip, r3
 800e9c6:	d8f9      	bhi.n	800e9bc <__lshift+0xc0>
 800e9c8:	e7ea      	b.n	800e9a0 <__lshift+0xa4>
 800e9ca:	bf00      	nop
 800e9cc:	08010270 	.word	0x08010270
 800e9d0:	08010281 	.word	0x08010281

0800e9d4 <__mcmp>:
 800e9d4:	690a      	ldr	r2, [r1, #16]
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	6900      	ldr	r0, [r0, #16]
 800e9da:	1a80      	subs	r0, r0, r2
 800e9dc:	b530      	push	{r4, r5, lr}
 800e9de:	d10e      	bne.n	800e9fe <__mcmp+0x2a>
 800e9e0:	3314      	adds	r3, #20
 800e9e2:	3114      	adds	r1, #20
 800e9e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e9e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e9ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e9f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e9f4:	4295      	cmp	r5, r2
 800e9f6:	d003      	beq.n	800ea00 <__mcmp+0x2c>
 800e9f8:	d205      	bcs.n	800ea06 <__mcmp+0x32>
 800e9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e9fe:	bd30      	pop	{r4, r5, pc}
 800ea00:	42a3      	cmp	r3, r4
 800ea02:	d3f3      	bcc.n	800e9ec <__mcmp+0x18>
 800ea04:	e7fb      	b.n	800e9fe <__mcmp+0x2a>
 800ea06:	2001      	movs	r0, #1
 800ea08:	e7f9      	b.n	800e9fe <__mcmp+0x2a>
	...

0800ea0c <__mdiff>:
 800ea0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea10:	4689      	mov	r9, r1
 800ea12:	4606      	mov	r6, r0
 800ea14:	4611      	mov	r1, r2
 800ea16:	4648      	mov	r0, r9
 800ea18:	4614      	mov	r4, r2
 800ea1a:	f7ff ffdb 	bl	800e9d4 <__mcmp>
 800ea1e:	1e05      	subs	r5, r0, #0
 800ea20:	d112      	bne.n	800ea48 <__mdiff+0x3c>
 800ea22:	4629      	mov	r1, r5
 800ea24:	4630      	mov	r0, r6
 800ea26:	f7ff fd5b 	bl	800e4e0 <_Balloc>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	b928      	cbnz	r0, 800ea3a <__mdiff+0x2e>
 800ea2e:	4b3f      	ldr	r3, [pc, #252]	@ (800eb2c <__mdiff+0x120>)
 800ea30:	f240 2137 	movw	r1, #567	@ 0x237
 800ea34:	483e      	ldr	r0, [pc, #248]	@ (800eb30 <__mdiff+0x124>)
 800ea36:	f000 fb03 	bl	800f040 <__assert_func>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea40:	4610      	mov	r0, r2
 800ea42:	b003      	add	sp, #12
 800ea44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea48:	bfbc      	itt	lt
 800ea4a:	464b      	movlt	r3, r9
 800ea4c:	46a1      	movlt	r9, r4
 800ea4e:	4630      	mov	r0, r6
 800ea50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea54:	bfba      	itte	lt
 800ea56:	461c      	movlt	r4, r3
 800ea58:	2501      	movlt	r5, #1
 800ea5a:	2500      	movge	r5, #0
 800ea5c:	f7ff fd40 	bl	800e4e0 <_Balloc>
 800ea60:	4602      	mov	r2, r0
 800ea62:	b918      	cbnz	r0, 800ea6c <__mdiff+0x60>
 800ea64:	4b31      	ldr	r3, [pc, #196]	@ (800eb2c <__mdiff+0x120>)
 800ea66:	f240 2145 	movw	r1, #581	@ 0x245
 800ea6a:	e7e3      	b.n	800ea34 <__mdiff+0x28>
 800ea6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea70:	6926      	ldr	r6, [r4, #16]
 800ea72:	60c5      	str	r5, [r0, #12]
 800ea74:	f109 0310 	add.w	r3, r9, #16
 800ea78:	f109 0514 	add.w	r5, r9, #20
 800ea7c:	f104 0e14 	add.w	lr, r4, #20
 800ea80:	f100 0b14 	add.w	fp, r0, #20
 800ea84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ea88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	46d9      	mov	r9, fp
 800ea90:	f04f 0c00 	mov.w	ip, #0
 800ea94:	9b01      	ldr	r3, [sp, #4]
 800ea96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ea9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ea9e:	9301      	str	r3, [sp, #4]
 800eaa0:	fa1f f38a 	uxth.w	r3, sl
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	b283      	uxth	r3, r0
 800eaa8:	1acb      	subs	r3, r1, r3
 800eaaa:	0c00      	lsrs	r0, r0, #16
 800eaac:	4463      	add	r3, ip
 800eaae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eab2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eabc:	4576      	cmp	r6, lr
 800eabe:	f849 3b04 	str.w	r3, [r9], #4
 800eac2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eac6:	d8e5      	bhi.n	800ea94 <__mdiff+0x88>
 800eac8:	1b33      	subs	r3, r6, r4
 800eaca:	3b15      	subs	r3, #21
 800eacc:	f023 0303 	bic.w	r3, r3, #3
 800ead0:	3415      	adds	r4, #21
 800ead2:	3304      	adds	r3, #4
 800ead4:	42a6      	cmp	r6, r4
 800ead6:	bf38      	it	cc
 800ead8:	2304      	movcc	r3, #4
 800eada:	441d      	add	r5, r3
 800eadc:	445b      	add	r3, fp
 800eade:	461e      	mov	r6, r3
 800eae0:	462c      	mov	r4, r5
 800eae2:	4544      	cmp	r4, r8
 800eae4:	d30e      	bcc.n	800eb04 <__mdiff+0xf8>
 800eae6:	f108 0103 	add.w	r1, r8, #3
 800eaea:	1b49      	subs	r1, r1, r5
 800eaec:	f021 0103 	bic.w	r1, r1, #3
 800eaf0:	3d03      	subs	r5, #3
 800eaf2:	45a8      	cmp	r8, r5
 800eaf4:	bf38      	it	cc
 800eaf6:	2100      	movcc	r1, #0
 800eaf8:	440b      	add	r3, r1
 800eafa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eafe:	b191      	cbz	r1, 800eb26 <__mdiff+0x11a>
 800eb00:	6117      	str	r7, [r2, #16]
 800eb02:	e79d      	b.n	800ea40 <__mdiff+0x34>
 800eb04:	f854 1b04 	ldr.w	r1, [r4], #4
 800eb08:	46e6      	mov	lr, ip
 800eb0a:	0c08      	lsrs	r0, r1, #16
 800eb0c:	fa1c fc81 	uxtah	ip, ip, r1
 800eb10:	4471      	add	r1, lr
 800eb12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eb16:	b289      	uxth	r1, r1
 800eb18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eb1c:	f846 1b04 	str.w	r1, [r6], #4
 800eb20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb24:	e7dd      	b.n	800eae2 <__mdiff+0xd6>
 800eb26:	3f01      	subs	r7, #1
 800eb28:	e7e7      	b.n	800eafa <__mdiff+0xee>
 800eb2a:	bf00      	nop
 800eb2c:	08010270 	.word	0x08010270
 800eb30:	08010281 	.word	0x08010281

0800eb34 <__d2b>:
 800eb34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb38:	460f      	mov	r7, r1
 800eb3a:	2101      	movs	r1, #1
 800eb3c:	ec59 8b10 	vmov	r8, r9, d0
 800eb40:	4616      	mov	r6, r2
 800eb42:	f7ff fccd 	bl	800e4e0 <_Balloc>
 800eb46:	4604      	mov	r4, r0
 800eb48:	b930      	cbnz	r0, 800eb58 <__d2b+0x24>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	4b23      	ldr	r3, [pc, #140]	@ (800ebdc <__d2b+0xa8>)
 800eb4e:	4824      	ldr	r0, [pc, #144]	@ (800ebe0 <__d2b+0xac>)
 800eb50:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb54:	f000 fa74 	bl	800f040 <__assert_func>
 800eb58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb60:	b10d      	cbz	r5, 800eb66 <__d2b+0x32>
 800eb62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb66:	9301      	str	r3, [sp, #4]
 800eb68:	f1b8 0300 	subs.w	r3, r8, #0
 800eb6c:	d023      	beq.n	800ebb6 <__d2b+0x82>
 800eb6e:	4668      	mov	r0, sp
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	f7ff fd7c 	bl	800e66e <__lo0bits>
 800eb76:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb7a:	b1d0      	cbz	r0, 800ebb2 <__d2b+0x7e>
 800eb7c:	f1c0 0320 	rsb	r3, r0, #32
 800eb80:	fa02 f303 	lsl.w	r3, r2, r3
 800eb84:	430b      	orrs	r3, r1
 800eb86:	40c2      	lsrs	r2, r0
 800eb88:	6163      	str	r3, [r4, #20]
 800eb8a:	9201      	str	r2, [sp, #4]
 800eb8c:	9b01      	ldr	r3, [sp, #4]
 800eb8e:	61a3      	str	r3, [r4, #24]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	bf0c      	ite	eq
 800eb94:	2201      	moveq	r2, #1
 800eb96:	2202      	movne	r2, #2
 800eb98:	6122      	str	r2, [r4, #16]
 800eb9a:	b1a5      	cbz	r5, 800ebc6 <__d2b+0x92>
 800eb9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eba0:	4405      	add	r5, r0
 800eba2:	603d      	str	r5, [r7, #0]
 800eba4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eba8:	6030      	str	r0, [r6, #0]
 800ebaa:	4620      	mov	r0, r4
 800ebac:	b003      	add	sp, #12
 800ebae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebb2:	6161      	str	r1, [r4, #20]
 800ebb4:	e7ea      	b.n	800eb8c <__d2b+0x58>
 800ebb6:	a801      	add	r0, sp, #4
 800ebb8:	f7ff fd59 	bl	800e66e <__lo0bits>
 800ebbc:	9b01      	ldr	r3, [sp, #4]
 800ebbe:	6163      	str	r3, [r4, #20]
 800ebc0:	3020      	adds	r0, #32
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	e7e8      	b.n	800eb98 <__d2b+0x64>
 800ebc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ebce:	6038      	str	r0, [r7, #0]
 800ebd0:	6918      	ldr	r0, [r3, #16]
 800ebd2:	f7ff fd2d 	bl	800e630 <__hi0bits>
 800ebd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ebda:	e7e5      	b.n	800eba8 <__d2b+0x74>
 800ebdc:	08010270 	.word	0x08010270
 800ebe0:	08010281 	.word	0x08010281

0800ebe4 <__ssputs_r>:
 800ebe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe8:	688e      	ldr	r6, [r1, #8]
 800ebea:	461f      	mov	r7, r3
 800ebec:	42be      	cmp	r6, r7
 800ebee:	680b      	ldr	r3, [r1, #0]
 800ebf0:	4682      	mov	sl, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	4690      	mov	r8, r2
 800ebf6:	d82d      	bhi.n	800ec54 <__ssputs_r+0x70>
 800ebf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ec00:	d026      	beq.n	800ec50 <__ssputs_r+0x6c>
 800ec02:	6965      	ldr	r5, [r4, #20]
 800ec04:	6909      	ldr	r1, [r1, #16]
 800ec06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec0a:	eba3 0901 	sub.w	r9, r3, r1
 800ec0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec12:	1c7b      	adds	r3, r7, #1
 800ec14:	444b      	add	r3, r9
 800ec16:	106d      	asrs	r5, r5, #1
 800ec18:	429d      	cmp	r5, r3
 800ec1a:	bf38      	it	cc
 800ec1c:	461d      	movcc	r5, r3
 800ec1e:	0553      	lsls	r3, r2, #21
 800ec20:	d527      	bpl.n	800ec72 <__ssputs_r+0x8e>
 800ec22:	4629      	mov	r1, r5
 800ec24:	f7ff fbd0 	bl	800e3c8 <_malloc_r>
 800ec28:	4606      	mov	r6, r0
 800ec2a:	b360      	cbz	r0, 800ec86 <__ssputs_r+0xa2>
 800ec2c:	6921      	ldr	r1, [r4, #16]
 800ec2e:	464a      	mov	r2, r9
 800ec30:	f7fe fcf9 	bl	800d626 <memcpy>
 800ec34:	89a3      	ldrh	r3, [r4, #12]
 800ec36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ec3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec3e:	81a3      	strh	r3, [r4, #12]
 800ec40:	6126      	str	r6, [r4, #16]
 800ec42:	6165      	str	r5, [r4, #20]
 800ec44:	444e      	add	r6, r9
 800ec46:	eba5 0509 	sub.w	r5, r5, r9
 800ec4a:	6026      	str	r6, [r4, #0]
 800ec4c:	60a5      	str	r5, [r4, #8]
 800ec4e:	463e      	mov	r6, r7
 800ec50:	42be      	cmp	r6, r7
 800ec52:	d900      	bls.n	800ec56 <__ssputs_r+0x72>
 800ec54:	463e      	mov	r6, r7
 800ec56:	6820      	ldr	r0, [r4, #0]
 800ec58:	4632      	mov	r2, r6
 800ec5a:	4641      	mov	r1, r8
 800ec5c:	f000 f9c6 	bl	800efec <memmove>
 800ec60:	68a3      	ldr	r3, [r4, #8]
 800ec62:	1b9b      	subs	r3, r3, r6
 800ec64:	60a3      	str	r3, [r4, #8]
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	4433      	add	r3, r6
 800ec6a:	6023      	str	r3, [r4, #0]
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec72:	462a      	mov	r2, r5
 800ec74:	f000 fa28 	bl	800f0c8 <_realloc_r>
 800ec78:	4606      	mov	r6, r0
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	d1e0      	bne.n	800ec40 <__ssputs_r+0x5c>
 800ec7e:	6921      	ldr	r1, [r4, #16]
 800ec80:	4650      	mov	r0, sl
 800ec82:	f7ff fb2d 	bl	800e2e0 <_free_r>
 800ec86:	230c      	movs	r3, #12
 800ec88:	f8ca 3000 	str.w	r3, [sl]
 800ec8c:	89a3      	ldrh	r3, [r4, #12]
 800ec8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec92:	81a3      	strh	r3, [r4, #12]
 800ec94:	f04f 30ff 	mov.w	r0, #4294967295
 800ec98:	e7e9      	b.n	800ec6e <__ssputs_r+0x8a>
	...

0800ec9c <_svfiprintf_r>:
 800ec9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca0:	4698      	mov	r8, r3
 800eca2:	898b      	ldrh	r3, [r1, #12]
 800eca4:	061b      	lsls	r3, r3, #24
 800eca6:	b09d      	sub	sp, #116	@ 0x74
 800eca8:	4607      	mov	r7, r0
 800ecaa:	460d      	mov	r5, r1
 800ecac:	4614      	mov	r4, r2
 800ecae:	d510      	bpl.n	800ecd2 <_svfiprintf_r+0x36>
 800ecb0:	690b      	ldr	r3, [r1, #16]
 800ecb2:	b973      	cbnz	r3, 800ecd2 <_svfiprintf_r+0x36>
 800ecb4:	2140      	movs	r1, #64	@ 0x40
 800ecb6:	f7ff fb87 	bl	800e3c8 <_malloc_r>
 800ecba:	6028      	str	r0, [r5, #0]
 800ecbc:	6128      	str	r0, [r5, #16]
 800ecbe:	b930      	cbnz	r0, 800ecce <_svfiprintf_r+0x32>
 800ecc0:	230c      	movs	r3, #12
 800ecc2:	603b      	str	r3, [r7, #0]
 800ecc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc8:	b01d      	add	sp, #116	@ 0x74
 800ecca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecce:	2340      	movs	r3, #64	@ 0x40
 800ecd0:	616b      	str	r3, [r5, #20]
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecd6:	2320      	movs	r3, #32
 800ecd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ecdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ece0:	2330      	movs	r3, #48	@ 0x30
 800ece2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ee80 <_svfiprintf_r+0x1e4>
 800ece6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ecea:	f04f 0901 	mov.w	r9, #1
 800ecee:	4623      	mov	r3, r4
 800ecf0:	469a      	mov	sl, r3
 800ecf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecf6:	b10a      	cbz	r2, 800ecfc <_svfiprintf_r+0x60>
 800ecf8:	2a25      	cmp	r2, #37	@ 0x25
 800ecfa:	d1f9      	bne.n	800ecf0 <_svfiprintf_r+0x54>
 800ecfc:	ebba 0b04 	subs.w	fp, sl, r4
 800ed00:	d00b      	beq.n	800ed1a <_svfiprintf_r+0x7e>
 800ed02:	465b      	mov	r3, fp
 800ed04:	4622      	mov	r2, r4
 800ed06:	4629      	mov	r1, r5
 800ed08:	4638      	mov	r0, r7
 800ed0a:	f7ff ff6b 	bl	800ebe4 <__ssputs_r>
 800ed0e:	3001      	adds	r0, #1
 800ed10:	f000 80a7 	beq.w	800ee62 <_svfiprintf_r+0x1c6>
 800ed14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed16:	445a      	add	r2, fp
 800ed18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 809f 	beq.w	800ee62 <_svfiprintf_r+0x1c6>
 800ed24:	2300      	movs	r3, #0
 800ed26:	f04f 32ff 	mov.w	r2, #4294967295
 800ed2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed2e:	f10a 0a01 	add.w	sl, sl, #1
 800ed32:	9304      	str	r3, [sp, #16]
 800ed34:	9307      	str	r3, [sp, #28]
 800ed36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed3c:	4654      	mov	r4, sl
 800ed3e:	2205      	movs	r2, #5
 800ed40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed44:	484e      	ldr	r0, [pc, #312]	@ (800ee80 <_svfiprintf_r+0x1e4>)
 800ed46:	f7f1 fa43 	bl	80001d0 <memchr>
 800ed4a:	9a04      	ldr	r2, [sp, #16]
 800ed4c:	b9d8      	cbnz	r0, 800ed86 <_svfiprintf_r+0xea>
 800ed4e:	06d0      	lsls	r0, r2, #27
 800ed50:	bf44      	itt	mi
 800ed52:	2320      	movmi	r3, #32
 800ed54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed58:	0711      	lsls	r1, r2, #28
 800ed5a:	bf44      	itt	mi
 800ed5c:	232b      	movmi	r3, #43	@ 0x2b
 800ed5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed62:	f89a 3000 	ldrb.w	r3, [sl]
 800ed66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed68:	d015      	beq.n	800ed96 <_svfiprintf_r+0xfa>
 800ed6a:	9a07      	ldr	r2, [sp, #28]
 800ed6c:	4654      	mov	r4, sl
 800ed6e:	2000      	movs	r0, #0
 800ed70:	f04f 0c0a 	mov.w	ip, #10
 800ed74:	4621      	mov	r1, r4
 800ed76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed7a:	3b30      	subs	r3, #48	@ 0x30
 800ed7c:	2b09      	cmp	r3, #9
 800ed7e:	d94b      	bls.n	800ee18 <_svfiprintf_r+0x17c>
 800ed80:	b1b0      	cbz	r0, 800edb0 <_svfiprintf_r+0x114>
 800ed82:	9207      	str	r2, [sp, #28]
 800ed84:	e014      	b.n	800edb0 <_svfiprintf_r+0x114>
 800ed86:	eba0 0308 	sub.w	r3, r0, r8
 800ed8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	9304      	str	r3, [sp, #16]
 800ed92:	46a2      	mov	sl, r4
 800ed94:	e7d2      	b.n	800ed3c <_svfiprintf_r+0xa0>
 800ed96:	9b03      	ldr	r3, [sp, #12]
 800ed98:	1d19      	adds	r1, r3, #4
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	9103      	str	r1, [sp, #12]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	bfbb      	ittet	lt
 800eda2:	425b      	neglt	r3, r3
 800eda4:	f042 0202 	orrlt.w	r2, r2, #2
 800eda8:	9307      	strge	r3, [sp, #28]
 800edaa:	9307      	strlt	r3, [sp, #28]
 800edac:	bfb8      	it	lt
 800edae:	9204      	strlt	r2, [sp, #16]
 800edb0:	7823      	ldrb	r3, [r4, #0]
 800edb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800edb4:	d10a      	bne.n	800edcc <_svfiprintf_r+0x130>
 800edb6:	7863      	ldrb	r3, [r4, #1]
 800edb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800edba:	d132      	bne.n	800ee22 <_svfiprintf_r+0x186>
 800edbc:	9b03      	ldr	r3, [sp, #12]
 800edbe:	1d1a      	adds	r2, r3, #4
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	9203      	str	r2, [sp, #12]
 800edc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800edc8:	3402      	adds	r4, #2
 800edca:	9305      	str	r3, [sp, #20]
 800edcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ee90 <_svfiprintf_r+0x1f4>
 800edd0:	7821      	ldrb	r1, [r4, #0]
 800edd2:	2203      	movs	r2, #3
 800edd4:	4650      	mov	r0, sl
 800edd6:	f7f1 f9fb 	bl	80001d0 <memchr>
 800edda:	b138      	cbz	r0, 800edec <_svfiprintf_r+0x150>
 800eddc:	9b04      	ldr	r3, [sp, #16]
 800edde:	eba0 000a 	sub.w	r0, r0, sl
 800ede2:	2240      	movs	r2, #64	@ 0x40
 800ede4:	4082      	lsls	r2, r0
 800ede6:	4313      	orrs	r3, r2
 800ede8:	3401      	adds	r4, #1
 800edea:	9304      	str	r3, [sp, #16]
 800edec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edf0:	4824      	ldr	r0, [pc, #144]	@ (800ee84 <_svfiprintf_r+0x1e8>)
 800edf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800edf6:	2206      	movs	r2, #6
 800edf8:	f7f1 f9ea 	bl	80001d0 <memchr>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	d036      	beq.n	800ee6e <_svfiprintf_r+0x1d2>
 800ee00:	4b21      	ldr	r3, [pc, #132]	@ (800ee88 <_svfiprintf_r+0x1ec>)
 800ee02:	bb1b      	cbnz	r3, 800ee4c <_svfiprintf_r+0x1b0>
 800ee04:	9b03      	ldr	r3, [sp, #12]
 800ee06:	3307      	adds	r3, #7
 800ee08:	f023 0307 	bic.w	r3, r3, #7
 800ee0c:	3308      	adds	r3, #8
 800ee0e:	9303      	str	r3, [sp, #12]
 800ee10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee12:	4433      	add	r3, r6
 800ee14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee16:	e76a      	b.n	800ecee <_svfiprintf_r+0x52>
 800ee18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee1c:	460c      	mov	r4, r1
 800ee1e:	2001      	movs	r0, #1
 800ee20:	e7a8      	b.n	800ed74 <_svfiprintf_r+0xd8>
 800ee22:	2300      	movs	r3, #0
 800ee24:	3401      	adds	r4, #1
 800ee26:	9305      	str	r3, [sp, #20]
 800ee28:	4619      	mov	r1, r3
 800ee2a:	f04f 0c0a 	mov.w	ip, #10
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee34:	3a30      	subs	r2, #48	@ 0x30
 800ee36:	2a09      	cmp	r2, #9
 800ee38:	d903      	bls.n	800ee42 <_svfiprintf_r+0x1a6>
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d0c6      	beq.n	800edcc <_svfiprintf_r+0x130>
 800ee3e:	9105      	str	r1, [sp, #20]
 800ee40:	e7c4      	b.n	800edcc <_svfiprintf_r+0x130>
 800ee42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee46:	4604      	mov	r4, r0
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e7f0      	b.n	800ee2e <_svfiprintf_r+0x192>
 800ee4c:	ab03      	add	r3, sp, #12
 800ee4e:	9300      	str	r3, [sp, #0]
 800ee50:	462a      	mov	r2, r5
 800ee52:	4b0e      	ldr	r3, [pc, #56]	@ (800ee8c <_svfiprintf_r+0x1f0>)
 800ee54:	a904      	add	r1, sp, #16
 800ee56:	4638      	mov	r0, r7
 800ee58:	f7fd fe1e 	bl	800ca98 <_printf_float>
 800ee5c:	1c42      	adds	r2, r0, #1
 800ee5e:	4606      	mov	r6, r0
 800ee60:	d1d6      	bne.n	800ee10 <_svfiprintf_r+0x174>
 800ee62:	89ab      	ldrh	r3, [r5, #12]
 800ee64:	065b      	lsls	r3, r3, #25
 800ee66:	f53f af2d 	bmi.w	800ecc4 <_svfiprintf_r+0x28>
 800ee6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee6c:	e72c      	b.n	800ecc8 <_svfiprintf_r+0x2c>
 800ee6e:	ab03      	add	r3, sp, #12
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	462a      	mov	r2, r5
 800ee74:	4b05      	ldr	r3, [pc, #20]	@ (800ee8c <_svfiprintf_r+0x1f0>)
 800ee76:	a904      	add	r1, sp, #16
 800ee78:	4638      	mov	r0, r7
 800ee7a:	f7fe f8a5 	bl	800cfc8 <_printf_i>
 800ee7e:	e7ed      	b.n	800ee5c <_svfiprintf_r+0x1c0>
 800ee80:	080103d8 	.word	0x080103d8
 800ee84:	080103e2 	.word	0x080103e2
 800ee88:	0800ca99 	.word	0x0800ca99
 800ee8c:	0800ebe5 	.word	0x0800ebe5
 800ee90:	080103de 	.word	0x080103de

0800ee94 <__sflush_r>:
 800ee94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9c:	0716      	lsls	r6, r2, #28
 800ee9e:	4605      	mov	r5, r0
 800eea0:	460c      	mov	r4, r1
 800eea2:	d454      	bmi.n	800ef4e <__sflush_r+0xba>
 800eea4:	684b      	ldr	r3, [r1, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	dc02      	bgt.n	800eeb0 <__sflush_r+0x1c>
 800eeaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	dd48      	ble.n	800ef42 <__sflush_r+0xae>
 800eeb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eeb2:	2e00      	cmp	r6, #0
 800eeb4:	d045      	beq.n	800ef42 <__sflush_r+0xae>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eebc:	682f      	ldr	r7, [r5, #0]
 800eebe:	6a21      	ldr	r1, [r4, #32]
 800eec0:	602b      	str	r3, [r5, #0]
 800eec2:	d030      	beq.n	800ef26 <__sflush_r+0x92>
 800eec4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eec6:	89a3      	ldrh	r3, [r4, #12]
 800eec8:	0759      	lsls	r1, r3, #29
 800eeca:	d505      	bpl.n	800eed8 <__sflush_r+0x44>
 800eecc:	6863      	ldr	r3, [r4, #4]
 800eece:	1ad2      	subs	r2, r2, r3
 800eed0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eed2:	b10b      	cbz	r3, 800eed8 <__sflush_r+0x44>
 800eed4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eed6:	1ad2      	subs	r2, r2, r3
 800eed8:	2300      	movs	r3, #0
 800eeda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eedc:	6a21      	ldr	r1, [r4, #32]
 800eede:	4628      	mov	r0, r5
 800eee0:	47b0      	blx	r6
 800eee2:	1c43      	adds	r3, r0, #1
 800eee4:	89a3      	ldrh	r3, [r4, #12]
 800eee6:	d106      	bne.n	800eef6 <__sflush_r+0x62>
 800eee8:	6829      	ldr	r1, [r5, #0]
 800eeea:	291d      	cmp	r1, #29
 800eeec:	d82b      	bhi.n	800ef46 <__sflush_r+0xb2>
 800eeee:	4a2a      	ldr	r2, [pc, #168]	@ (800ef98 <__sflush_r+0x104>)
 800eef0:	410a      	asrs	r2, r1
 800eef2:	07d6      	lsls	r6, r2, #31
 800eef4:	d427      	bmi.n	800ef46 <__sflush_r+0xb2>
 800eef6:	2200      	movs	r2, #0
 800eef8:	6062      	str	r2, [r4, #4]
 800eefa:	04d9      	lsls	r1, r3, #19
 800eefc:	6922      	ldr	r2, [r4, #16]
 800eefe:	6022      	str	r2, [r4, #0]
 800ef00:	d504      	bpl.n	800ef0c <__sflush_r+0x78>
 800ef02:	1c42      	adds	r2, r0, #1
 800ef04:	d101      	bne.n	800ef0a <__sflush_r+0x76>
 800ef06:	682b      	ldr	r3, [r5, #0]
 800ef08:	b903      	cbnz	r3, 800ef0c <__sflush_r+0x78>
 800ef0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef0e:	602f      	str	r7, [r5, #0]
 800ef10:	b1b9      	cbz	r1, 800ef42 <__sflush_r+0xae>
 800ef12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef16:	4299      	cmp	r1, r3
 800ef18:	d002      	beq.n	800ef20 <__sflush_r+0x8c>
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	f7ff f9e0 	bl	800e2e0 <_free_r>
 800ef20:	2300      	movs	r3, #0
 800ef22:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef24:	e00d      	b.n	800ef42 <__sflush_r+0xae>
 800ef26:	2301      	movs	r3, #1
 800ef28:	4628      	mov	r0, r5
 800ef2a:	47b0      	blx	r6
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	1c50      	adds	r0, r2, #1
 800ef30:	d1c9      	bne.n	800eec6 <__sflush_r+0x32>
 800ef32:	682b      	ldr	r3, [r5, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d0c6      	beq.n	800eec6 <__sflush_r+0x32>
 800ef38:	2b1d      	cmp	r3, #29
 800ef3a:	d001      	beq.n	800ef40 <__sflush_r+0xac>
 800ef3c:	2b16      	cmp	r3, #22
 800ef3e:	d11e      	bne.n	800ef7e <__sflush_r+0xea>
 800ef40:	602f      	str	r7, [r5, #0]
 800ef42:	2000      	movs	r0, #0
 800ef44:	e022      	b.n	800ef8c <__sflush_r+0xf8>
 800ef46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef4a:	b21b      	sxth	r3, r3
 800ef4c:	e01b      	b.n	800ef86 <__sflush_r+0xf2>
 800ef4e:	690f      	ldr	r7, [r1, #16]
 800ef50:	2f00      	cmp	r7, #0
 800ef52:	d0f6      	beq.n	800ef42 <__sflush_r+0xae>
 800ef54:	0793      	lsls	r3, r2, #30
 800ef56:	680e      	ldr	r6, [r1, #0]
 800ef58:	bf08      	it	eq
 800ef5a:	694b      	ldreq	r3, [r1, #20]
 800ef5c:	600f      	str	r7, [r1, #0]
 800ef5e:	bf18      	it	ne
 800ef60:	2300      	movne	r3, #0
 800ef62:	eba6 0807 	sub.w	r8, r6, r7
 800ef66:	608b      	str	r3, [r1, #8]
 800ef68:	f1b8 0f00 	cmp.w	r8, #0
 800ef6c:	dde9      	ble.n	800ef42 <__sflush_r+0xae>
 800ef6e:	6a21      	ldr	r1, [r4, #32]
 800ef70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ef72:	4643      	mov	r3, r8
 800ef74:	463a      	mov	r2, r7
 800ef76:	4628      	mov	r0, r5
 800ef78:	47b0      	blx	r6
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	dc08      	bgt.n	800ef90 <__sflush_r+0xfc>
 800ef7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef86:	81a3      	strh	r3, [r4, #12]
 800ef88:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef90:	4407      	add	r7, r0
 800ef92:	eba8 0800 	sub.w	r8, r8, r0
 800ef96:	e7e7      	b.n	800ef68 <__sflush_r+0xd4>
 800ef98:	dfbffffe 	.word	0xdfbffffe

0800ef9c <_fflush_r>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	690b      	ldr	r3, [r1, #16]
 800efa0:	4605      	mov	r5, r0
 800efa2:	460c      	mov	r4, r1
 800efa4:	b913      	cbnz	r3, 800efac <_fflush_r+0x10>
 800efa6:	2500      	movs	r5, #0
 800efa8:	4628      	mov	r0, r5
 800efaa:	bd38      	pop	{r3, r4, r5, pc}
 800efac:	b118      	cbz	r0, 800efb6 <_fflush_r+0x1a>
 800efae:	6a03      	ldr	r3, [r0, #32]
 800efb0:	b90b      	cbnz	r3, 800efb6 <_fflush_r+0x1a>
 800efb2:	f7fe f9b5 	bl	800d320 <__sinit>
 800efb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d0f3      	beq.n	800efa6 <_fflush_r+0xa>
 800efbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800efc0:	07d0      	lsls	r0, r2, #31
 800efc2:	d404      	bmi.n	800efce <_fflush_r+0x32>
 800efc4:	0599      	lsls	r1, r3, #22
 800efc6:	d402      	bmi.n	800efce <_fflush_r+0x32>
 800efc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efca:	f7fe fb2a 	bl	800d622 <__retarget_lock_acquire_recursive>
 800efce:	4628      	mov	r0, r5
 800efd0:	4621      	mov	r1, r4
 800efd2:	f7ff ff5f 	bl	800ee94 <__sflush_r>
 800efd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efd8:	07da      	lsls	r2, r3, #31
 800efda:	4605      	mov	r5, r0
 800efdc:	d4e4      	bmi.n	800efa8 <_fflush_r+0xc>
 800efde:	89a3      	ldrh	r3, [r4, #12]
 800efe0:	059b      	lsls	r3, r3, #22
 800efe2:	d4e1      	bmi.n	800efa8 <_fflush_r+0xc>
 800efe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efe6:	f7fe fb1d 	bl	800d624 <__retarget_lock_release_recursive>
 800efea:	e7dd      	b.n	800efa8 <_fflush_r+0xc>

0800efec <memmove>:
 800efec:	4288      	cmp	r0, r1
 800efee:	b510      	push	{r4, lr}
 800eff0:	eb01 0402 	add.w	r4, r1, r2
 800eff4:	d902      	bls.n	800effc <memmove+0x10>
 800eff6:	4284      	cmp	r4, r0
 800eff8:	4623      	mov	r3, r4
 800effa:	d807      	bhi.n	800f00c <memmove+0x20>
 800effc:	1e43      	subs	r3, r0, #1
 800effe:	42a1      	cmp	r1, r4
 800f000:	d008      	beq.n	800f014 <memmove+0x28>
 800f002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f00a:	e7f8      	b.n	800effe <memmove+0x12>
 800f00c:	4402      	add	r2, r0
 800f00e:	4601      	mov	r1, r0
 800f010:	428a      	cmp	r2, r1
 800f012:	d100      	bne.n	800f016 <memmove+0x2a>
 800f014:	bd10      	pop	{r4, pc}
 800f016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f01e:	e7f7      	b.n	800f010 <memmove+0x24>

0800f020 <_sbrk_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	4d06      	ldr	r5, [pc, #24]	@ (800f03c <_sbrk_r+0x1c>)
 800f024:	2300      	movs	r3, #0
 800f026:	4604      	mov	r4, r0
 800f028:	4608      	mov	r0, r1
 800f02a:	602b      	str	r3, [r5, #0]
 800f02c:	f7f4 fa1e 	bl	800346c <_sbrk>
 800f030:	1c43      	adds	r3, r0, #1
 800f032:	d102      	bne.n	800f03a <_sbrk_r+0x1a>
 800f034:	682b      	ldr	r3, [r5, #0]
 800f036:	b103      	cbz	r3, 800f03a <_sbrk_r+0x1a>
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	200050d0 	.word	0x200050d0

0800f040 <__assert_func>:
 800f040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f042:	4614      	mov	r4, r2
 800f044:	461a      	mov	r2, r3
 800f046:	4b09      	ldr	r3, [pc, #36]	@ (800f06c <__assert_func+0x2c>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	4605      	mov	r5, r0
 800f04c:	68d8      	ldr	r0, [r3, #12]
 800f04e:	b954      	cbnz	r4, 800f066 <__assert_func+0x26>
 800f050:	4b07      	ldr	r3, [pc, #28]	@ (800f070 <__assert_func+0x30>)
 800f052:	461c      	mov	r4, r3
 800f054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f058:	9100      	str	r1, [sp, #0]
 800f05a:	462b      	mov	r3, r5
 800f05c:	4905      	ldr	r1, [pc, #20]	@ (800f074 <__assert_func+0x34>)
 800f05e:	f000 f86f 	bl	800f140 <fiprintf>
 800f062:	f000 f87f 	bl	800f164 <abort>
 800f066:	4b04      	ldr	r3, [pc, #16]	@ (800f078 <__assert_func+0x38>)
 800f068:	e7f4      	b.n	800f054 <__assert_func+0x14>
 800f06a:	bf00      	nop
 800f06c:	2000001c 	.word	0x2000001c
 800f070:	0801042e 	.word	0x0801042e
 800f074:	08010400 	.word	0x08010400
 800f078:	080103f3 	.word	0x080103f3

0800f07c <_calloc_r>:
 800f07c:	b570      	push	{r4, r5, r6, lr}
 800f07e:	fba1 5402 	umull	r5, r4, r1, r2
 800f082:	b93c      	cbnz	r4, 800f094 <_calloc_r+0x18>
 800f084:	4629      	mov	r1, r5
 800f086:	f7ff f99f 	bl	800e3c8 <_malloc_r>
 800f08a:	4606      	mov	r6, r0
 800f08c:	b928      	cbnz	r0, 800f09a <_calloc_r+0x1e>
 800f08e:	2600      	movs	r6, #0
 800f090:	4630      	mov	r0, r6
 800f092:	bd70      	pop	{r4, r5, r6, pc}
 800f094:	220c      	movs	r2, #12
 800f096:	6002      	str	r2, [r0, #0]
 800f098:	e7f9      	b.n	800f08e <_calloc_r+0x12>
 800f09a:	462a      	mov	r2, r5
 800f09c:	4621      	mov	r1, r4
 800f09e:	f7fe f9ec 	bl	800d47a <memset>
 800f0a2:	e7f5      	b.n	800f090 <_calloc_r+0x14>

0800f0a4 <__ascii_mbtowc>:
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	b901      	cbnz	r1, 800f0aa <__ascii_mbtowc+0x6>
 800f0a8:	a901      	add	r1, sp, #4
 800f0aa:	b142      	cbz	r2, 800f0be <__ascii_mbtowc+0x1a>
 800f0ac:	b14b      	cbz	r3, 800f0c2 <__ascii_mbtowc+0x1e>
 800f0ae:	7813      	ldrb	r3, [r2, #0]
 800f0b0:	600b      	str	r3, [r1, #0]
 800f0b2:	7812      	ldrb	r2, [r2, #0]
 800f0b4:	1e10      	subs	r0, r2, #0
 800f0b6:	bf18      	it	ne
 800f0b8:	2001      	movne	r0, #1
 800f0ba:	b002      	add	sp, #8
 800f0bc:	4770      	bx	lr
 800f0be:	4610      	mov	r0, r2
 800f0c0:	e7fb      	b.n	800f0ba <__ascii_mbtowc+0x16>
 800f0c2:	f06f 0001 	mvn.w	r0, #1
 800f0c6:	e7f8      	b.n	800f0ba <__ascii_mbtowc+0x16>

0800f0c8 <_realloc_r>:
 800f0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0cc:	4680      	mov	r8, r0
 800f0ce:	4615      	mov	r5, r2
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	b921      	cbnz	r1, 800f0de <_realloc_r+0x16>
 800f0d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d8:	4611      	mov	r1, r2
 800f0da:	f7ff b975 	b.w	800e3c8 <_malloc_r>
 800f0de:	b92a      	cbnz	r2, 800f0ec <_realloc_r+0x24>
 800f0e0:	f7ff f8fe 	bl	800e2e0 <_free_r>
 800f0e4:	2400      	movs	r4, #0
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ec:	f000 f841 	bl	800f172 <_malloc_usable_size_r>
 800f0f0:	4285      	cmp	r5, r0
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	d802      	bhi.n	800f0fc <_realloc_r+0x34>
 800f0f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f0fa:	d8f4      	bhi.n	800f0e6 <_realloc_r+0x1e>
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	4640      	mov	r0, r8
 800f100:	f7ff f962 	bl	800e3c8 <_malloc_r>
 800f104:	4607      	mov	r7, r0
 800f106:	2800      	cmp	r0, #0
 800f108:	d0ec      	beq.n	800f0e4 <_realloc_r+0x1c>
 800f10a:	42b5      	cmp	r5, r6
 800f10c:	462a      	mov	r2, r5
 800f10e:	4621      	mov	r1, r4
 800f110:	bf28      	it	cs
 800f112:	4632      	movcs	r2, r6
 800f114:	f7fe fa87 	bl	800d626 <memcpy>
 800f118:	4621      	mov	r1, r4
 800f11a:	4640      	mov	r0, r8
 800f11c:	f7ff f8e0 	bl	800e2e0 <_free_r>
 800f120:	463c      	mov	r4, r7
 800f122:	e7e0      	b.n	800f0e6 <_realloc_r+0x1e>

0800f124 <__ascii_wctomb>:
 800f124:	4603      	mov	r3, r0
 800f126:	4608      	mov	r0, r1
 800f128:	b141      	cbz	r1, 800f13c <__ascii_wctomb+0x18>
 800f12a:	2aff      	cmp	r2, #255	@ 0xff
 800f12c:	d904      	bls.n	800f138 <__ascii_wctomb+0x14>
 800f12e:	228a      	movs	r2, #138	@ 0x8a
 800f130:	601a      	str	r2, [r3, #0]
 800f132:	f04f 30ff 	mov.w	r0, #4294967295
 800f136:	4770      	bx	lr
 800f138:	700a      	strb	r2, [r1, #0]
 800f13a:	2001      	movs	r0, #1
 800f13c:	4770      	bx	lr
	...

0800f140 <fiprintf>:
 800f140:	b40e      	push	{r1, r2, r3}
 800f142:	b503      	push	{r0, r1, lr}
 800f144:	4601      	mov	r1, r0
 800f146:	ab03      	add	r3, sp, #12
 800f148:	4805      	ldr	r0, [pc, #20]	@ (800f160 <fiprintf+0x20>)
 800f14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f14e:	6800      	ldr	r0, [r0, #0]
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	f000 f83f 	bl	800f1d4 <_vfiprintf_r>
 800f156:	b002      	add	sp, #8
 800f158:	f85d eb04 	ldr.w	lr, [sp], #4
 800f15c:	b003      	add	sp, #12
 800f15e:	4770      	bx	lr
 800f160:	2000001c 	.word	0x2000001c

0800f164 <abort>:
 800f164:	b508      	push	{r3, lr}
 800f166:	2006      	movs	r0, #6
 800f168:	f000 fa08 	bl	800f57c <raise>
 800f16c:	2001      	movs	r0, #1
 800f16e:	f7f4 f905 	bl	800337c <_exit>

0800f172 <_malloc_usable_size_r>:
 800f172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f176:	1f18      	subs	r0, r3, #4
 800f178:	2b00      	cmp	r3, #0
 800f17a:	bfbc      	itt	lt
 800f17c:	580b      	ldrlt	r3, [r1, r0]
 800f17e:	18c0      	addlt	r0, r0, r3
 800f180:	4770      	bx	lr

0800f182 <__sfputc_r>:
 800f182:	6893      	ldr	r3, [r2, #8]
 800f184:	3b01      	subs	r3, #1
 800f186:	2b00      	cmp	r3, #0
 800f188:	b410      	push	{r4}
 800f18a:	6093      	str	r3, [r2, #8]
 800f18c:	da08      	bge.n	800f1a0 <__sfputc_r+0x1e>
 800f18e:	6994      	ldr	r4, [r2, #24]
 800f190:	42a3      	cmp	r3, r4
 800f192:	db01      	blt.n	800f198 <__sfputc_r+0x16>
 800f194:	290a      	cmp	r1, #10
 800f196:	d103      	bne.n	800f1a0 <__sfputc_r+0x1e>
 800f198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f19c:	f000 b932 	b.w	800f404 <__swbuf_r>
 800f1a0:	6813      	ldr	r3, [r2, #0]
 800f1a2:	1c58      	adds	r0, r3, #1
 800f1a4:	6010      	str	r0, [r2, #0]
 800f1a6:	7019      	strb	r1, [r3, #0]
 800f1a8:	4608      	mov	r0, r1
 800f1aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <__sfputs_r>:
 800f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	460f      	mov	r7, r1
 800f1b6:	4614      	mov	r4, r2
 800f1b8:	18d5      	adds	r5, r2, r3
 800f1ba:	42ac      	cmp	r4, r5
 800f1bc:	d101      	bne.n	800f1c2 <__sfputs_r+0x12>
 800f1be:	2000      	movs	r0, #0
 800f1c0:	e007      	b.n	800f1d2 <__sfputs_r+0x22>
 800f1c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1c6:	463a      	mov	r2, r7
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f7ff ffda 	bl	800f182 <__sfputc_r>
 800f1ce:	1c43      	adds	r3, r0, #1
 800f1d0:	d1f3      	bne.n	800f1ba <__sfputs_r+0xa>
 800f1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1d4 <_vfiprintf_r>:
 800f1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d8:	460d      	mov	r5, r1
 800f1da:	b09d      	sub	sp, #116	@ 0x74
 800f1dc:	4614      	mov	r4, r2
 800f1de:	4698      	mov	r8, r3
 800f1e0:	4606      	mov	r6, r0
 800f1e2:	b118      	cbz	r0, 800f1ec <_vfiprintf_r+0x18>
 800f1e4:	6a03      	ldr	r3, [r0, #32]
 800f1e6:	b90b      	cbnz	r3, 800f1ec <_vfiprintf_r+0x18>
 800f1e8:	f7fe f89a 	bl	800d320 <__sinit>
 800f1ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1ee:	07d9      	lsls	r1, r3, #31
 800f1f0:	d405      	bmi.n	800f1fe <_vfiprintf_r+0x2a>
 800f1f2:	89ab      	ldrh	r3, [r5, #12]
 800f1f4:	059a      	lsls	r2, r3, #22
 800f1f6:	d402      	bmi.n	800f1fe <_vfiprintf_r+0x2a>
 800f1f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1fa:	f7fe fa12 	bl	800d622 <__retarget_lock_acquire_recursive>
 800f1fe:	89ab      	ldrh	r3, [r5, #12]
 800f200:	071b      	lsls	r3, r3, #28
 800f202:	d501      	bpl.n	800f208 <_vfiprintf_r+0x34>
 800f204:	692b      	ldr	r3, [r5, #16]
 800f206:	b99b      	cbnz	r3, 800f230 <_vfiprintf_r+0x5c>
 800f208:	4629      	mov	r1, r5
 800f20a:	4630      	mov	r0, r6
 800f20c:	f000 f938 	bl	800f480 <__swsetup_r>
 800f210:	b170      	cbz	r0, 800f230 <_vfiprintf_r+0x5c>
 800f212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f214:	07dc      	lsls	r4, r3, #31
 800f216:	d504      	bpl.n	800f222 <_vfiprintf_r+0x4e>
 800f218:	f04f 30ff 	mov.w	r0, #4294967295
 800f21c:	b01d      	add	sp, #116	@ 0x74
 800f21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f222:	89ab      	ldrh	r3, [r5, #12]
 800f224:	0598      	lsls	r0, r3, #22
 800f226:	d4f7      	bmi.n	800f218 <_vfiprintf_r+0x44>
 800f228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f22a:	f7fe f9fb 	bl	800d624 <__retarget_lock_release_recursive>
 800f22e:	e7f3      	b.n	800f218 <_vfiprintf_r+0x44>
 800f230:	2300      	movs	r3, #0
 800f232:	9309      	str	r3, [sp, #36]	@ 0x24
 800f234:	2320      	movs	r3, #32
 800f236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f23a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f23e:	2330      	movs	r3, #48	@ 0x30
 800f240:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3f0 <_vfiprintf_r+0x21c>
 800f244:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f248:	f04f 0901 	mov.w	r9, #1
 800f24c:	4623      	mov	r3, r4
 800f24e:	469a      	mov	sl, r3
 800f250:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f254:	b10a      	cbz	r2, 800f25a <_vfiprintf_r+0x86>
 800f256:	2a25      	cmp	r2, #37	@ 0x25
 800f258:	d1f9      	bne.n	800f24e <_vfiprintf_r+0x7a>
 800f25a:	ebba 0b04 	subs.w	fp, sl, r4
 800f25e:	d00b      	beq.n	800f278 <_vfiprintf_r+0xa4>
 800f260:	465b      	mov	r3, fp
 800f262:	4622      	mov	r2, r4
 800f264:	4629      	mov	r1, r5
 800f266:	4630      	mov	r0, r6
 800f268:	f7ff ffa2 	bl	800f1b0 <__sfputs_r>
 800f26c:	3001      	adds	r0, #1
 800f26e:	f000 80a7 	beq.w	800f3c0 <_vfiprintf_r+0x1ec>
 800f272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f274:	445a      	add	r2, fp
 800f276:	9209      	str	r2, [sp, #36]	@ 0x24
 800f278:	f89a 3000 	ldrb.w	r3, [sl]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f000 809f 	beq.w	800f3c0 <_vfiprintf_r+0x1ec>
 800f282:	2300      	movs	r3, #0
 800f284:	f04f 32ff 	mov.w	r2, #4294967295
 800f288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f28c:	f10a 0a01 	add.w	sl, sl, #1
 800f290:	9304      	str	r3, [sp, #16]
 800f292:	9307      	str	r3, [sp, #28]
 800f294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f298:	931a      	str	r3, [sp, #104]	@ 0x68
 800f29a:	4654      	mov	r4, sl
 800f29c:	2205      	movs	r2, #5
 800f29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2a2:	4853      	ldr	r0, [pc, #332]	@ (800f3f0 <_vfiprintf_r+0x21c>)
 800f2a4:	f7f0 ff94 	bl	80001d0 <memchr>
 800f2a8:	9a04      	ldr	r2, [sp, #16]
 800f2aa:	b9d8      	cbnz	r0, 800f2e4 <_vfiprintf_r+0x110>
 800f2ac:	06d1      	lsls	r1, r2, #27
 800f2ae:	bf44      	itt	mi
 800f2b0:	2320      	movmi	r3, #32
 800f2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2b6:	0713      	lsls	r3, r2, #28
 800f2b8:	bf44      	itt	mi
 800f2ba:	232b      	movmi	r3, #43	@ 0x2b
 800f2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2c6:	d015      	beq.n	800f2f4 <_vfiprintf_r+0x120>
 800f2c8:	9a07      	ldr	r2, [sp, #28]
 800f2ca:	4654      	mov	r4, sl
 800f2cc:	2000      	movs	r0, #0
 800f2ce:	f04f 0c0a 	mov.w	ip, #10
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2d8:	3b30      	subs	r3, #48	@ 0x30
 800f2da:	2b09      	cmp	r3, #9
 800f2dc:	d94b      	bls.n	800f376 <_vfiprintf_r+0x1a2>
 800f2de:	b1b0      	cbz	r0, 800f30e <_vfiprintf_r+0x13a>
 800f2e0:	9207      	str	r2, [sp, #28]
 800f2e2:	e014      	b.n	800f30e <_vfiprintf_r+0x13a>
 800f2e4:	eba0 0308 	sub.w	r3, r0, r8
 800f2e8:	fa09 f303 	lsl.w	r3, r9, r3
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	9304      	str	r3, [sp, #16]
 800f2f0:	46a2      	mov	sl, r4
 800f2f2:	e7d2      	b.n	800f29a <_vfiprintf_r+0xc6>
 800f2f4:	9b03      	ldr	r3, [sp, #12]
 800f2f6:	1d19      	adds	r1, r3, #4
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	9103      	str	r1, [sp, #12]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	bfbb      	ittet	lt
 800f300:	425b      	neglt	r3, r3
 800f302:	f042 0202 	orrlt.w	r2, r2, #2
 800f306:	9307      	strge	r3, [sp, #28]
 800f308:	9307      	strlt	r3, [sp, #28]
 800f30a:	bfb8      	it	lt
 800f30c:	9204      	strlt	r2, [sp, #16]
 800f30e:	7823      	ldrb	r3, [r4, #0]
 800f310:	2b2e      	cmp	r3, #46	@ 0x2e
 800f312:	d10a      	bne.n	800f32a <_vfiprintf_r+0x156>
 800f314:	7863      	ldrb	r3, [r4, #1]
 800f316:	2b2a      	cmp	r3, #42	@ 0x2a
 800f318:	d132      	bne.n	800f380 <_vfiprintf_r+0x1ac>
 800f31a:	9b03      	ldr	r3, [sp, #12]
 800f31c:	1d1a      	adds	r2, r3, #4
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	9203      	str	r2, [sp, #12]
 800f322:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f326:	3402      	adds	r4, #2
 800f328:	9305      	str	r3, [sp, #20]
 800f32a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f400 <_vfiprintf_r+0x22c>
 800f32e:	7821      	ldrb	r1, [r4, #0]
 800f330:	2203      	movs	r2, #3
 800f332:	4650      	mov	r0, sl
 800f334:	f7f0 ff4c 	bl	80001d0 <memchr>
 800f338:	b138      	cbz	r0, 800f34a <_vfiprintf_r+0x176>
 800f33a:	9b04      	ldr	r3, [sp, #16]
 800f33c:	eba0 000a 	sub.w	r0, r0, sl
 800f340:	2240      	movs	r2, #64	@ 0x40
 800f342:	4082      	lsls	r2, r0
 800f344:	4313      	orrs	r3, r2
 800f346:	3401      	adds	r4, #1
 800f348:	9304      	str	r3, [sp, #16]
 800f34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f34e:	4829      	ldr	r0, [pc, #164]	@ (800f3f4 <_vfiprintf_r+0x220>)
 800f350:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f354:	2206      	movs	r2, #6
 800f356:	f7f0 ff3b 	bl	80001d0 <memchr>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d03f      	beq.n	800f3de <_vfiprintf_r+0x20a>
 800f35e:	4b26      	ldr	r3, [pc, #152]	@ (800f3f8 <_vfiprintf_r+0x224>)
 800f360:	bb1b      	cbnz	r3, 800f3aa <_vfiprintf_r+0x1d6>
 800f362:	9b03      	ldr	r3, [sp, #12]
 800f364:	3307      	adds	r3, #7
 800f366:	f023 0307 	bic.w	r3, r3, #7
 800f36a:	3308      	adds	r3, #8
 800f36c:	9303      	str	r3, [sp, #12]
 800f36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f370:	443b      	add	r3, r7
 800f372:	9309      	str	r3, [sp, #36]	@ 0x24
 800f374:	e76a      	b.n	800f24c <_vfiprintf_r+0x78>
 800f376:	fb0c 3202 	mla	r2, ip, r2, r3
 800f37a:	460c      	mov	r4, r1
 800f37c:	2001      	movs	r0, #1
 800f37e:	e7a8      	b.n	800f2d2 <_vfiprintf_r+0xfe>
 800f380:	2300      	movs	r3, #0
 800f382:	3401      	adds	r4, #1
 800f384:	9305      	str	r3, [sp, #20]
 800f386:	4619      	mov	r1, r3
 800f388:	f04f 0c0a 	mov.w	ip, #10
 800f38c:	4620      	mov	r0, r4
 800f38e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f392:	3a30      	subs	r2, #48	@ 0x30
 800f394:	2a09      	cmp	r2, #9
 800f396:	d903      	bls.n	800f3a0 <_vfiprintf_r+0x1cc>
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d0c6      	beq.n	800f32a <_vfiprintf_r+0x156>
 800f39c:	9105      	str	r1, [sp, #20]
 800f39e:	e7c4      	b.n	800f32a <_vfiprintf_r+0x156>
 800f3a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	e7f0      	b.n	800f38c <_vfiprintf_r+0x1b8>
 800f3aa:	ab03      	add	r3, sp, #12
 800f3ac:	9300      	str	r3, [sp, #0]
 800f3ae:	462a      	mov	r2, r5
 800f3b0:	4b12      	ldr	r3, [pc, #72]	@ (800f3fc <_vfiprintf_r+0x228>)
 800f3b2:	a904      	add	r1, sp, #16
 800f3b4:	4630      	mov	r0, r6
 800f3b6:	f7fd fb6f 	bl	800ca98 <_printf_float>
 800f3ba:	4607      	mov	r7, r0
 800f3bc:	1c78      	adds	r0, r7, #1
 800f3be:	d1d6      	bne.n	800f36e <_vfiprintf_r+0x19a>
 800f3c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3c2:	07d9      	lsls	r1, r3, #31
 800f3c4:	d405      	bmi.n	800f3d2 <_vfiprintf_r+0x1fe>
 800f3c6:	89ab      	ldrh	r3, [r5, #12]
 800f3c8:	059a      	lsls	r2, r3, #22
 800f3ca:	d402      	bmi.n	800f3d2 <_vfiprintf_r+0x1fe>
 800f3cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3ce:	f7fe f929 	bl	800d624 <__retarget_lock_release_recursive>
 800f3d2:	89ab      	ldrh	r3, [r5, #12]
 800f3d4:	065b      	lsls	r3, r3, #25
 800f3d6:	f53f af1f 	bmi.w	800f218 <_vfiprintf_r+0x44>
 800f3da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3dc:	e71e      	b.n	800f21c <_vfiprintf_r+0x48>
 800f3de:	ab03      	add	r3, sp, #12
 800f3e0:	9300      	str	r3, [sp, #0]
 800f3e2:	462a      	mov	r2, r5
 800f3e4:	4b05      	ldr	r3, [pc, #20]	@ (800f3fc <_vfiprintf_r+0x228>)
 800f3e6:	a904      	add	r1, sp, #16
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	f7fd fded 	bl	800cfc8 <_printf_i>
 800f3ee:	e7e4      	b.n	800f3ba <_vfiprintf_r+0x1e6>
 800f3f0:	080103d8 	.word	0x080103d8
 800f3f4:	080103e2 	.word	0x080103e2
 800f3f8:	0800ca99 	.word	0x0800ca99
 800f3fc:	0800f1b1 	.word	0x0800f1b1
 800f400:	080103de 	.word	0x080103de

0800f404 <__swbuf_r>:
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	460e      	mov	r6, r1
 800f408:	4614      	mov	r4, r2
 800f40a:	4605      	mov	r5, r0
 800f40c:	b118      	cbz	r0, 800f416 <__swbuf_r+0x12>
 800f40e:	6a03      	ldr	r3, [r0, #32]
 800f410:	b90b      	cbnz	r3, 800f416 <__swbuf_r+0x12>
 800f412:	f7fd ff85 	bl	800d320 <__sinit>
 800f416:	69a3      	ldr	r3, [r4, #24]
 800f418:	60a3      	str	r3, [r4, #8]
 800f41a:	89a3      	ldrh	r3, [r4, #12]
 800f41c:	071a      	lsls	r2, r3, #28
 800f41e:	d501      	bpl.n	800f424 <__swbuf_r+0x20>
 800f420:	6923      	ldr	r3, [r4, #16]
 800f422:	b943      	cbnz	r3, 800f436 <__swbuf_r+0x32>
 800f424:	4621      	mov	r1, r4
 800f426:	4628      	mov	r0, r5
 800f428:	f000 f82a 	bl	800f480 <__swsetup_r>
 800f42c:	b118      	cbz	r0, 800f436 <__swbuf_r+0x32>
 800f42e:	f04f 37ff 	mov.w	r7, #4294967295
 800f432:	4638      	mov	r0, r7
 800f434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f436:	6823      	ldr	r3, [r4, #0]
 800f438:	6922      	ldr	r2, [r4, #16]
 800f43a:	1a98      	subs	r0, r3, r2
 800f43c:	6963      	ldr	r3, [r4, #20]
 800f43e:	b2f6      	uxtb	r6, r6
 800f440:	4283      	cmp	r3, r0
 800f442:	4637      	mov	r7, r6
 800f444:	dc05      	bgt.n	800f452 <__swbuf_r+0x4e>
 800f446:	4621      	mov	r1, r4
 800f448:	4628      	mov	r0, r5
 800f44a:	f7ff fda7 	bl	800ef9c <_fflush_r>
 800f44e:	2800      	cmp	r0, #0
 800f450:	d1ed      	bne.n	800f42e <__swbuf_r+0x2a>
 800f452:	68a3      	ldr	r3, [r4, #8]
 800f454:	3b01      	subs	r3, #1
 800f456:	60a3      	str	r3, [r4, #8]
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	1c5a      	adds	r2, r3, #1
 800f45c:	6022      	str	r2, [r4, #0]
 800f45e:	701e      	strb	r6, [r3, #0]
 800f460:	6962      	ldr	r2, [r4, #20]
 800f462:	1c43      	adds	r3, r0, #1
 800f464:	429a      	cmp	r2, r3
 800f466:	d004      	beq.n	800f472 <__swbuf_r+0x6e>
 800f468:	89a3      	ldrh	r3, [r4, #12]
 800f46a:	07db      	lsls	r3, r3, #31
 800f46c:	d5e1      	bpl.n	800f432 <__swbuf_r+0x2e>
 800f46e:	2e0a      	cmp	r6, #10
 800f470:	d1df      	bne.n	800f432 <__swbuf_r+0x2e>
 800f472:	4621      	mov	r1, r4
 800f474:	4628      	mov	r0, r5
 800f476:	f7ff fd91 	bl	800ef9c <_fflush_r>
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d0d9      	beq.n	800f432 <__swbuf_r+0x2e>
 800f47e:	e7d6      	b.n	800f42e <__swbuf_r+0x2a>

0800f480 <__swsetup_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4b29      	ldr	r3, [pc, #164]	@ (800f528 <__swsetup_r+0xa8>)
 800f484:	4605      	mov	r5, r0
 800f486:	6818      	ldr	r0, [r3, #0]
 800f488:	460c      	mov	r4, r1
 800f48a:	b118      	cbz	r0, 800f494 <__swsetup_r+0x14>
 800f48c:	6a03      	ldr	r3, [r0, #32]
 800f48e:	b90b      	cbnz	r3, 800f494 <__swsetup_r+0x14>
 800f490:	f7fd ff46 	bl	800d320 <__sinit>
 800f494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f498:	0719      	lsls	r1, r3, #28
 800f49a:	d422      	bmi.n	800f4e2 <__swsetup_r+0x62>
 800f49c:	06da      	lsls	r2, r3, #27
 800f49e:	d407      	bmi.n	800f4b0 <__swsetup_r+0x30>
 800f4a0:	2209      	movs	r2, #9
 800f4a2:	602a      	str	r2, [r5, #0]
 800f4a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4a8:	81a3      	strh	r3, [r4, #12]
 800f4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ae:	e033      	b.n	800f518 <__swsetup_r+0x98>
 800f4b0:	0758      	lsls	r0, r3, #29
 800f4b2:	d512      	bpl.n	800f4da <__swsetup_r+0x5a>
 800f4b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4b6:	b141      	cbz	r1, 800f4ca <__swsetup_r+0x4a>
 800f4b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4bc:	4299      	cmp	r1, r3
 800f4be:	d002      	beq.n	800f4c6 <__swsetup_r+0x46>
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	f7fe ff0d 	bl	800e2e0 <_free_r>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4ca:	89a3      	ldrh	r3, [r4, #12]
 800f4cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4d0:	81a3      	strh	r3, [r4, #12]
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	6063      	str	r3, [r4, #4]
 800f4d6:	6923      	ldr	r3, [r4, #16]
 800f4d8:	6023      	str	r3, [r4, #0]
 800f4da:	89a3      	ldrh	r3, [r4, #12]
 800f4dc:	f043 0308 	orr.w	r3, r3, #8
 800f4e0:	81a3      	strh	r3, [r4, #12]
 800f4e2:	6923      	ldr	r3, [r4, #16]
 800f4e4:	b94b      	cbnz	r3, 800f4fa <__swsetup_r+0x7a>
 800f4e6:	89a3      	ldrh	r3, [r4, #12]
 800f4e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4f0:	d003      	beq.n	800f4fa <__swsetup_r+0x7a>
 800f4f2:	4621      	mov	r1, r4
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	f000 f883 	bl	800f600 <__smakebuf_r>
 800f4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4fe:	f013 0201 	ands.w	r2, r3, #1
 800f502:	d00a      	beq.n	800f51a <__swsetup_r+0x9a>
 800f504:	2200      	movs	r2, #0
 800f506:	60a2      	str	r2, [r4, #8]
 800f508:	6962      	ldr	r2, [r4, #20]
 800f50a:	4252      	negs	r2, r2
 800f50c:	61a2      	str	r2, [r4, #24]
 800f50e:	6922      	ldr	r2, [r4, #16]
 800f510:	b942      	cbnz	r2, 800f524 <__swsetup_r+0xa4>
 800f512:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f516:	d1c5      	bne.n	800f4a4 <__swsetup_r+0x24>
 800f518:	bd38      	pop	{r3, r4, r5, pc}
 800f51a:	0799      	lsls	r1, r3, #30
 800f51c:	bf58      	it	pl
 800f51e:	6962      	ldrpl	r2, [r4, #20]
 800f520:	60a2      	str	r2, [r4, #8]
 800f522:	e7f4      	b.n	800f50e <__swsetup_r+0x8e>
 800f524:	2000      	movs	r0, #0
 800f526:	e7f7      	b.n	800f518 <__swsetup_r+0x98>
 800f528:	2000001c 	.word	0x2000001c

0800f52c <_raise_r>:
 800f52c:	291f      	cmp	r1, #31
 800f52e:	b538      	push	{r3, r4, r5, lr}
 800f530:	4605      	mov	r5, r0
 800f532:	460c      	mov	r4, r1
 800f534:	d904      	bls.n	800f540 <_raise_r+0x14>
 800f536:	2316      	movs	r3, #22
 800f538:	6003      	str	r3, [r0, #0]
 800f53a:	f04f 30ff 	mov.w	r0, #4294967295
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f542:	b112      	cbz	r2, 800f54a <_raise_r+0x1e>
 800f544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f548:	b94b      	cbnz	r3, 800f55e <_raise_r+0x32>
 800f54a:	4628      	mov	r0, r5
 800f54c:	f000 f830 	bl	800f5b0 <_getpid_r>
 800f550:	4622      	mov	r2, r4
 800f552:	4601      	mov	r1, r0
 800f554:	4628      	mov	r0, r5
 800f556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f55a:	f000 b817 	b.w	800f58c <_kill_r>
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d00a      	beq.n	800f578 <_raise_r+0x4c>
 800f562:	1c59      	adds	r1, r3, #1
 800f564:	d103      	bne.n	800f56e <_raise_r+0x42>
 800f566:	2316      	movs	r3, #22
 800f568:	6003      	str	r3, [r0, #0]
 800f56a:	2001      	movs	r0, #1
 800f56c:	e7e7      	b.n	800f53e <_raise_r+0x12>
 800f56e:	2100      	movs	r1, #0
 800f570:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f574:	4620      	mov	r0, r4
 800f576:	4798      	blx	r3
 800f578:	2000      	movs	r0, #0
 800f57a:	e7e0      	b.n	800f53e <_raise_r+0x12>

0800f57c <raise>:
 800f57c:	4b02      	ldr	r3, [pc, #8]	@ (800f588 <raise+0xc>)
 800f57e:	4601      	mov	r1, r0
 800f580:	6818      	ldr	r0, [r3, #0]
 800f582:	f7ff bfd3 	b.w	800f52c <_raise_r>
 800f586:	bf00      	nop
 800f588:	2000001c 	.word	0x2000001c

0800f58c <_kill_r>:
 800f58c:	b538      	push	{r3, r4, r5, lr}
 800f58e:	4d07      	ldr	r5, [pc, #28]	@ (800f5ac <_kill_r+0x20>)
 800f590:	2300      	movs	r3, #0
 800f592:	4604      	mov	r4, r0
 800f594:	4608      	mov	r0, r1
 800f596:	4611      	mov	r1, r2
 800f598:	602b      	str	r3, [r5, #0]
 800f59a:	f7f3 fedf 	bl	800335c <_kill>
 800f59e:	1c43      	adds	r3, r0, #1
 800f5a0:	d102      	bne.n	800f5a8 <_kill_r+0x1c>
 800f5a2:	682b      	ldr	r3, [r5, #0]
 800f5a4:	b103      	cbz	r3, 800f5a8 <_kill_r+0x1c>
 800f5a6:	6023      	str	r3, [r4, #0]
 800f5a8:	bd38      	pop	{r3, r4, r5, pc}
 800f5aa:	bf00      	nop
 800f5ac:	200050d0 	.word	0x200050d0

0800f5b0 <_getpid_r>:
 800f5b0:	f7f3 becc 	b.w	800334c <_getpid>

0800f5b4 <__swhatbuf_r>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	460c      	mov	r4, r1
 800f5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5bc:	2900      	cmp	r1, #0
 800f5be:	b096      	sub	sp, #88	@ 0x58
 800f5c0:	4615      	mov	r5, r2
 800f5c2:	461e      	mov	r6, r3
 800f5c4:	da0d      	bge.n	800f5e2 <__swhatbuf_r+0x2e>
 800f5c6:	89a3      	ldrh	r3, [r4, #12]
 800f5c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f5cc:	f04f 0100 	mov.w	r1, #0
 800f5d0:	bf14      	ite	ne
 800f5d2:	2340      	movne	r3, #64	@ 0x40
 800f5d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5d8:	2000      	movs	r0, #0
 800f5da:	6031      	str	r1, [r6, #0]
 800f5dc:	602b      	str	r3, [r5, #0]
 800f5de:	b016      	add	sp, #88	@ 0x58
 800f5e0:	bd70      	pop	{r4, r5, r6, pc}
 800f5e2:	466a      	mov	r2, sp
 800f5e4:	f000 f848 	bl	800f678 <_fstat_r>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	dbec      	blt.n	800f5c6 <__swhatbuf_r+0x12>
 800f5ec:	9901      	ldr	r1, [sp, #4]
 800f5ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f5f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f5f6:	4259      	negs	r1, r3
 800f5f8:	4159      	adcs	r1, r3
 800f5fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5fe:	e7eb      	b.n	800f5d8 <__swhatbuf_r+0x24>

0800f600 <__smakebuf_r>:
 800f600:	898b      	ldrh	r3, [r1, #12]
 800f602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f604:	079d      	lsls	r5, r3, #30
 800f606:	4606      	mov	r6, r0
 800f608:	460c      	mov	r4, r1
 800f60a:	d507      	bpl.n	800f61c <__smakebuf_r+0x1c>
 800f60c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f610:	6023      	str	r3, [r4, #0]
 800f612:	6123      	str	r3, [r4, #16]
 800f614:	2301      	movs	r3, #1
 800f616:	6163      	str	r3, [r4, #20]
 800f618:	b003      	add	sp, #12
 800f61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f61c:	ab01      	add	r3, sp, #4
 800f61e:	466a      	mov	r2, sp
 800f620:	f7ff ffc8 	bl	800f5b4 <__swhatbuf_r>
 800f624:	9f00      	ldr	r7, [sp, #0]
 800f626:	4605      	mov	r5, r0
 800f628:	4639      	mov	r1, r7
 800f62a:	4630      	mov	r0, r6
 800f62c:	f7fe fecc 	bl	800e3c8 <_malloc_r>
 800f630:	b948      	cbnz	r0, 800f646 <__smakebuf_r+0x46>
 800f632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f636:	059a      	lsls	r2, r3, #22
 800f638:	d4ee      	bmi.n	800f618 <__smakebuf_r+0x18>
 800f63a:	f023 0303 	bic.w	r3, r3, #3
 800f63e:	f043 0302 	orr.w	r3, r3, #2
 800f642:	81a3      	strh	r3, [r4, #12]
 800f644:	e7e2      	b.n	800f60c <__smakebuf_r+0xc>
 800f646:	89a3      	ldrh	r3, [r4, #12]
 800f648:	6020      	str	r0, [r4, #0]
 800f64a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f64e:	81a3      	strh	r3, [r4, #12]
 800f650:	9b01      	ldr	r3, [sp, #4]
 800f652:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f656:	b15b      	cbz	r3, 800f670 <__smakebuf_r+0x70>
 800f658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f65c:	4630      	mov	r0, r6
 800f65e:	f000 f81d 	bl	800f69c <_isatty_r>
 800f662:	b128      	cbz	r0, 800f670 <__smakebuf_r+0x70>
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	f023 0303 	bic.w	r3, r3, #3
 800f66a:	f043 0301 	orr.w	r3, r3, #1
 800f66e:	81a3      	strh	r3, [r4, #12]
 800f670:	89a3      	ldrh	r3, [r4, #12]
 800f672:	431d      	orrs	r5, r3
 800f674:	81a5      	strh	r5, [r4, #12]
 800f676:	e7cf      	b.n	800f618 <__smakebuf_r+0x18>

0800f678 <_fstat_r>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	4d07      	ldr	r5, [pc, #28]	@ (800f698 <_fstat_r+0x20>)
 800f67c:	2300      	movs	r3, #0
 800f67e:	4604      	mov	r4, r0
 800f680:	4608      	mov	r0, r1
 800f682:	4611      	mov	r1, r2
 800f684:	602b      	str	r3, [r5, #0]
 800f686:	f7f3 fec9 	bl	800341c <_fstat>
 800f68a:	1c43      	adds	r3, r0, #1
 800f68c:	d102      	bne.n	800f694 <_fstat_r+0x1c>
 800f68e:	682b      	ldr	r3, [r5, #0]
 800f690:	b103      	cbz	r3, 800f694 <_fstat_r+0x1c>
 800f692:	6023      	str	r3, [r4, #0]
 800f694:	bd38      	pop	{r3, r4, r5, pc}
 800f696:	bf00      	nop
 800f698:	200050d0 	.word	0x200050d0

0800f69c <_isatty_r>:
 800f69c:	b538      	push	{r3, r4, r5, lr}
 800f69e:	4d06      	ldr	r5, [pc, #24]	@ (800f6b8 <_isatty_r+0x1c>)
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	4604      	mov	r4, r0
 800f6a4:	4608      	mov	r0, r1
 800f6a6:	602b      	str	r3, [r5, #0]
 800f6a8:	f7f3 fec8 	bl	800343c <_isatty>
 800f6ac:	1c43      	adds	r3, r0, #1
 800f6ae:	d102      	bne.n	800f6b6 <_isatty_r+0x1a>
 800f6b0:	682b      	ldr	r3, [r5, #0]
 800f6b2:	b103      	cbz	r3, 800f6b6 <_isatty_r+0x1a>
 800f6b4:	6023      	str	r3, [r4, #0]
 800f6b6:	bd38      	pop	{r3, r4, r5, pc}
 800f6b8:	200050d0 	.word	0x200050d0

0800f6bc <powf>:
 800f6bc:	b508      	push	{r3, lr}
 800f6be:	ed2d 8b04 	vpush	{d8-d9}
 800f6c2:	eeb0 8a60 	vmov.f32	s16, s1
 800f6c6:	eeb0 9a40 	vmov.f32	s18, s0
 800f6ca:	f000 f859 	bl	800f780 <__ieee754_powf>
 800f6ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800f6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d6:	eef0 8a40 	vmov.f32	s17, s0
 800f6da:	d63e      	bvs.n	800f75a <powf+0x9e>
 800f6dc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e4:	d112      	bne.n	800f70c <powf+0x50>
 800f6e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ee:	d039      	beq.n	800f764 <powf+0xa8>
 800f6f0:	eeb0 0a48 	vmov.f32	s0, s16
 800f6f4:	f000 f839 	bl	800f76a <finitef>
 800f6f8:	b378      	cbz	r0, 800f75a <powf+0x9e>
 800f6fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f702:	d52a      	bpl.n	800f75a <powf+0x9e>
 800f704:	f7fd ff62 	bl	800d5cc <__errno>
 800f708:	2322      	movs	r3, #34	@ 0x22
 800f70a:	e014      	b.n	800f736 <powf+0x7a>
 800f70c:	f000 f82d 	bl	800f76a <finitef>
 800f710:	b998      	cbnz	r0, 800f73a <powf+0x7e>
 800f712:	eeb0 0a49 	vmov.f32	s0, s18
 800f716:	f000 f828 	bl	800f76a <finitef>
 800f71a:	b170      	cbz	r0, 800f73a <powf+0x7e>
 800f71c:	eeb0 0a48 	vmov.f32	s0, s16
 800f720:	f000 f823 	bl	800f76a <finitef>
 800f724:	b148      	cbz	r0, 800f73a <powf+0x7e>
 800f726:	eef4 8a68 	vcmp.f32	s17, s17
 800f72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f72e:	d7e9      	bvc.n	800f704 <powf+0x48>
 800f730:	f7fd ff4c 	bl	800d5cc <__errno>
 800f734:	2321      	movs	r3, #33	@ 0x21
 800f736:	6003      	str	r3, [r0, #0]
 800f738:	e00f      	b.n	800f75a <powf+0x9e>
 800f73a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f742:	d10a      	bne.n	800f75a <powf+0x9e>
 800f744:	eeb0 0a49 	vmov.f32	s0, s18
 800f748:	f000 f80f 	bl	800f76a <finitef>
 800f74c:	b128      	cbz	r0, 800f75a <powf+0x9e>
 800f74e:	eeb0 0a48 	vmov.f32	s0, s16
 800f752:	f000 f80a 	bl	800f76a <finitef>
 800f756:	2800      	cmp	r0, #0
 800f758:	d1d4      	bne.n	800f704 <powf+0x48>
 800f75a:	eeb0 0a68 	vmov.f32	s0, s17
 800f75e:	ecbd 8b04 	vpop	{d8-d9}
 800f762:	bd08      	pop	{r3, pc}
 800f764:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f768:	e7f7      	b.n	800f75a <powf+0x9e>

0800f76a <finitef>:
 800f76a:	ee10 3a10 	vmov	r3, s0
 800f76e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f772:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f776:	bfac      	ite	ge
 800f778:	2000      	movge	r0, #0
 800f77a:	2001      	movlt	r0, #1
 800f77c:	4770      	bx	lr
	...

0800f780 <__ieee754_powf>:
 800f780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f784:	ee10 4a90 	vmov	r4, s1
 800f788:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f78c:	ed2d 8b02 	vpush	{d8}
 800f790:	ee10 6a10 	vmov	r6, s0
 800f794:	eeb0 8a40 	vmov.f32	s16, s0
 800f798:	eef0 8a60 	vmov.f32	s17, s1
 800f79c:	d10c      	bne.n	800f7b8 <__ieee754_powf+0x38>
 800f79e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f7a2:	0076      	lsls	r6, r6, #1
 800f7a4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f7a8:	f240 829c 	bls.w	800fce4 <__ieee754_powf+0x564>
 800f7ac:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f7b0:	ecbd 8b02 	vpop	{d8}
 800f7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f7bc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f7c0:	d802      	bhi.n	800f7c8 <__ieee754_powf+0x48>
 800f7c2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f7c6:	d908      	bls.n	800f7da <__ieee754_powf+0x5a>
 800f7c8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f7cc:	d1ee      	bne.n	800f7ac <__ieee754_powf+0x2c>
 800f7ce:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f7d2:	0064      	lsls	r4, r4, #1
 800f7d4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f7d8:	e7e6      	b.n	800f7a8 <__ieee754_powf+0x28>
 800f7da:	2e00      	cmp	r6, #0
 800f7dc:	da1e      	bge.n	800f81c <__ieee754_powf+0x9c>
 800f7de:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f7e2:	d22b      	bcs.n	800f83c <__ieee754_powf+0xbc>
 800f7e4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f7e8:	d332      	bcc.n	800f850 <__ieee754_powf+0xd0>
 800f7ea:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f7ee:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f7f2:	fa49 f503 	asr.w	r5, r9, r3
 800f7f6:	fa05 f303 	lsl.w	r3, r5, r3
 800f7fa:	454b      	cmp	r3, r9
 800f7fc:	d126      	bne.n	800f84c <__ieee754_powf+0xcc>
 800f7fe:	f005 0501 	and.w	r5, r5, #1
 800f802:	f1c5 0502 	rsb	r5, r5, #2
 800f806:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f80a:	d122      	bne.n	800f852 <__ieee754_powf+0xd2>
 800f80c:	2c00      	cmp	r4, #0
 800f80e:	f280 826f 	bge.w	800fcf0 <__ieee754_powf+0x570>
 800f812:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f816:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f81a:	e7c9      	b.n	800f7b0 <__ieee754_powf+0x30>
 800f81c:	2500      	movs	r5, #0
 800f81e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f822:	d1f0      	bne.n	800f806 <__ieee754_powf+0x86>
 800f824:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f828:	f000 825c 	beq.w	800fce4 <__ieee754_powf+0x564>
 800f82c:	d908      	bls.n	800f840 <__ieee754_powf+0xc0>
 800f82e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800fb90 <__ieee754_powf+0x410>
 800f832:	2c00      	cmp	r4, #0
 800f834:	bfa8      	it	ge
 800f836:	eeb0 0a68 	vmovge.f32	s0, s17
 800f83a:	e7b9      	b.n	800f7b0 <__ieee754_powf+0x30>
 800f83c:	2502      	movs	r5, #2
 800f83e:	e7ee      	b.n	800f81e <__ieee754_powf+0x9e>
 800f840:	2c00      	cmp	r4, #0
 800f842:	f280 8252 	bge.w	800fcea <__ieee754_powf+0x56a>
 800f846:	eeb1 0a68 	vneg.f32	s0, s17
 800f84a:	e7b1      	b.n	800f7b0 <__ieee754_powf+0x30>
 800f84c:	2500      	movs	r5, #0
 800f84e:	e7da      	b.n	800f806 <__ieee754_powf+0x86>
 800f850:	2500      	movs	r5, #0
 800f852:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f856:	d102      	bne.n	800f85e <__ieee754_powf+0xde>
 800f858:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f85c:	e7a8      	b.n	800f7b0 <__ieee754_powf+0x30>
 800f85e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f862:	d109      	bne.n	800f878 <__ieee754_powf+0xf8>
 800f864:	2e00      	cmp	r6, #0
 800f866:	db07      	blt.n	800f878 <__ieee754_powf+0xf8>
 800f868:	eeb0 0a48 	vmov.f32	s0, s16
 800f86c:	ecbd 8b02 	vpop	{d8}
 800f870:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f874:	f000 bae8 	b.w	800fe48 <__ieee754_sqrtf>
 800f878:	eeb0 0a48 	vmov.f32	s0, s16
 800f87c:	f000 fa50 	bl	800fd20 <fabsf>
 800f880:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f884:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f888:	4647      	mov	r7, r8
 800f88a:	d002      	beq.n	800f892 <__ieee754_powf+0x112>
 800f88c:	f1b8 0f00 	cmp.w	r8, #0
 800f890:	d117      	bne.n	800f8c2 <__ieee754_powf+0x142>
 800f892:	2c00      	cmp	r4, #0
 800f894:	bfbc      	itt	lt
 800f896:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f89a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f89e:	2e00      	cmp	r6, #0
 800f8a0:	da86      	bge.n	800f7b0 <__ieee754_powf+0x30>
 800f8a2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f8a6:	ea58 0805 	orrs.w	r8, r8, r5
 800f8aa:	d104      	bne.n	800f8b6 <__ieee754_powf+0x136>
 800f8ac:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f8b0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f8b4:	e77c      	b.n	800f7b0 <__ieee754_powf+0x30>
 800f8b6:	2d01      	cmp	r5, #1
 800f8b8:	f47f af7a 	bne.w	800f7b0 <__ieee754_powf+0x30>
 800f8bc:	eeb1 0a40 	vneg.f32	s0, s0
 800f8c0:	e776      	b.n	800f7b0 <__ieee754_powf+0x30>
 800f8c2:	0ff0      	lsrs	r0, r6, #31
 800f8c4:	3801      	subs	r0, #1
 800f8c6:	ea55 0300 	orrs.w	r3, r5, r0
 800f8ca:	d104      	bne.n	800f8d6 <__ieee754_powf+0x156>
 800f8cc:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f8d0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f8d4:	e76c      	b.n	800f7b0 <__ieee754_powf+0x30>
 800f8d6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f8da:	d973      	bls.n	800f9c4 <__ieee754_powf+0x244>
 800f8dc:	4bad      	ldr	r3, [pc, #692]	@ (800fb94 <__ieee754_powf+0x414>)
 800f8de:	4598      	cmp	r8, r3
 800f8e0:	d808      	bhi.n	800f8f4 <__ieee754_powf+0x174>
 800f8e2:	2c00      	cmp	r4, #0
 800f8e4:	da0b      	bge.n	800f8fe <__ieee754_powf+0x17e>
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	ecbd 8b02 	vpop	{d8}
 800f8ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8f0:	f000 baa4 	b.w	800fe3c <__math_oflowf>
 800f8f4:	4ba8      	ldr	r3, [pc, #672]	@ (800fb98 <__ieee754_powf+0x418>)
 800f8f6:	4598      	cmp	r8, r3
 800f8f8:	d908      	bls.n	800f90c <__ieee754_powf+0x18c>
 800f8fa:	2c00      	cmp	r4, #0
 800f8fc:	dcf3      	bgt.n	800f8e6 <__ieee754_powf+0x166>
 800f8fe:	2000      	movs	r0, #0
 800f900:	ecbd 8b02 	vpop	{d8}
 800f904:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f908:	f000 ba92 	b.w	800fe30 <__math_uflowf>
 800f90c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f910:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f914:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800fb9c <__ieee754_powf+0x41c>
 800f918:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f91c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f920:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f924:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f928:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f92c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f930:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800fba0 <__ieee754_powf+0x420>
 800f934:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f938:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800fba4 <__ieee754_powf+0x424>
 800f93c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f940:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800fba8 <__ieee754_powf+0x428>
 800f944:	eef0 6a67 	vmov.f32	s13, s15
 800f948:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f94c:	ee16 3a90 	vmov	r3, s13
 800f950:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f954:	f023 030f 	bic.w	r3, r3, #15
 800f958:	ee06 3a90 	vmov	s13, r3
 800f95c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f960:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f964:	3d01      	subs	r5, #1
 800f966:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800f96a:	4305      	orrs	r5, r0
 800f96c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f970:	f024 040f 	bic.w	r4, r4, #15
 800f974:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f978:	bf18      	it	ne
 800f97a:	eeb0 8a47 	vmovne.f32	s16, s14
 800f97e:	ee07 4a10 	vmov	s14, r4
 800f982:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f986:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f98a:	ee07 3a90 	vmov	s15, r3
 800f98e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f992:	ee07 4a10 	vmov	s14, r4
 800f996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f99a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f99e:	ee17 1a10 	vmov	r1, s14
 800f9a2:	2900      	cmp	r1, #0
 800f9a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f9a8:	f340 80dd 	ble.w	800fb66 <__ieee754_powf+0x3e6>
 800f9ac:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f9b0:	f240 80ca 	bls.w	800fb48 <__ieee754_powf+0x3c8>
 800f9b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9bc:	bf4c      	ite	mi
 800f9be:	2001      	movmi	r0, #1
 800f9c0:	2000      	movpl	r0, #0
 800f9c2:	e791      	b.n	800f8e8 <__ieee754_powf+0x168>
 800f9c4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f9c8:	bf01      	itttt	eq
 800f9ca:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800fbac <__ieee754_powf+0x42c>
 800f9ce:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f9d2:	f06f 0317 	mvneq.w	r3, #23
 800f9d6:	ee17 7a90 	vmoveq	r7, s15
 800f9da:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f9de:	bf18      	it	ne
 800f9e0:	2300      	movne	r3, #0
 800f9e2:	3a7f      	subs	r2, #127	@ 0x7f
 800f9e4:	441a      	add	r2, r3
 800f9e6:	4b72      	ldr	r3, [pc, #456]	@ (800fbb0 <__ieee754_powf+0x430>)
 800f9e8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f9ec:	429f      	cmp	r7, r3
 800f9ee:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f9f2:	dd06      	ble.n	800fa02 <__ieee754_powf+0x282>
 800f9f4:	4b6f      	ldr	r3, [pc, #444]	@ (800fbb4 <__ieee754_powf+0x434>)
 800f9f6:	429f      	cmp	r7, r3
 800f9f8:	f340 80a4 	ble.w	800fb44 <__ieee754_powf+0x3c4>
 800f9fc:	3201      	adds	r2, #1
 800f9fe:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800fa02:	2600      	movs	r6, #0
 800fa04:	4b6c      	ldr	r3, [pc, #432]	@ (800fbb8 <__ieee754_powf+0x438>)
 800fa06:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800fa0a:	ee07 1a10 	vmov	s14, r1
 800fa0e:	edd3 5a00 	vldr	s11, [r3]
 800fa12:	4b6a      	ldr	r3, [pc, #424]	@ (800fbbc <__ieee754_powf+0x43c>)
 800fa14:	ee75 7a87 	vadd.f32	s15, s11, s14
 800fa18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa1c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800fa20:	1049      	asrs	r1, r1, #1
 800fa22:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800fa26:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800fa2a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800fa2e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800fa32:	ee07 1a90 	vmov	s15, r1
 800fa36:	ee26 5a24 	vmul.f32	s10, s12, s9
 800fa3a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800fa3e:	ee15 7a10 	vmov	r7, s10
 800fa42:	401f      	ands	r7, r3
 800fa44:	ee06 7a90 	vmov	s13, r7
 800fa48:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800fa4c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fa50:	ee65 7a05 	vmul.f32	s15, s10, s10
 800fa54:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fa58:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800fbc0 <__ieee754_powf+0x440>
 800fa5c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fbc4 <__ieee754_powf+0x444>
 800fa60:	eee7 5a87 	vfma.f32	s11, s15, s14
 800fa64:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800fbc8 <__ieee754_powf+0x448>
 800fa68:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fa6c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800fb9c <__ieee754_powf+0x41c>
 800fa70:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fa74:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800fbcc <__ieee754_powf+0x44c>
 800fa78:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fa7c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800fbd0 <__ieee754_powf+0x450>
 800fa80:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fa84:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fa88:	ee35 7a26 	vadd.f32	s14, s10, s13
 800fa8c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800fa90:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fa94:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800fa98:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800fa9c:	eef0 5a67 	vmov.f32	s11, s15
 800faa0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800faa4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800faa8:	ee15 1a90 	vmov	r1, s11
 800faac:	4019      	ands	r1, r3
 800faae:	ee05 1a90 	vmov	s11, r1
 800fab2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fab6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800faba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fabe:	ee67 7a85 	vmul.f32	s15, s15, s10
 800fac2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fac6:	eeb0 6a67 	vmov.f32	s12, s15
 800faca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800face:	ee16 1a10 	vmov	r1, s12
 800fad2:	4019      	ands	r1, r3
 800fad4:	ee06 1a10 	vmov	s12, r1
 800fad8:	eeb0 7a46 	vmov.f32	s14, s12
 800fadc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800fae0:	493c      	ldr	r1, [pc, #240]	@ (800fbd4 <__ieee754_powf+0x454>)
 800fae2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800fae6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800faea:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fbd8 <__ieee754_powf+0x458>
 800faee:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800fbdc <__ieee754_powf+0x45c>
 800faf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800faf6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800fbe0 <__ieee754_powf+0x460>
 800fafa:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fafe:	ed91 7a00 	vldr	s14, [r1]
 800fb02:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb06:	ee07 2a10 	vmov	s14, r2
 800fb0a:	eef0 6a67 	vmov.f32	s13, s15
 800fb0e:	4a35      	ldr	r2, [pc, #212]	@ (800fbe4 <__ieee754_powf+0x464>)
 800fb10:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fb14:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800fb18:	ed92 5a00 	vldr	s10, [r2]
 800fb1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fb20:	ee76 6a85 	vadd.f32	s13, s13, s10
 800fb24:	ee76 6a87 	vadd.f32	s13, s13, s14
 800fb28:	ee16 2a90 	vmov	r2, s13
 800fb2c:	4013      	ands	r3, r2
 800fb2e:	ee06 3a90 	vmov	s13, r3
 800fb32:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fb36:	ee37 7a45 	vsub.f32	s14, s14, s10
 800fb3a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800fb3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb42:	e70f      	b.n	800f964 <__ieee754_powf+0x1e4>
 800fb44:	2601      	movs	r6, #1
 800fb46:	e75d      	b.n	800fa04 <__ieee754_powf+0x284>
 800fb48:	d152      	bne.n	800fbf0 <__ieee754_powf+0x470>
 800fb4a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800fbe8 <__ieee754_powf+0x468>
 800fb4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb52:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fb56:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5e:	f73f af29 	bgt.w	800f9b4 <__ieee754_powf+0x234>
 800fb62:	2386      	movs	r3, #134	@ 0x86
 800fb64:	e048      	b.n	800fbf8 <__ieee754_powf+0x478>
 800fb66:	4a21      	ldr	r2, [pc, #132]	@ (800fbec <__ieee754_powf+0x46c>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d907      	bls.n	800fb7c <__ieee754_powf+0x3fc>
 800fb6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb74:	bf4c      	ite	mi
 800fb76:	2001      	movmi	r0, #1
 800fb78:	2000      	movpl	r0, #0
 800fb7a:	e6c1      	b.n	800f900 <__ieee754_powf+0x180>
 800fb7c:	d138      	bne.n	800fbf0 <__ieee754_powf+0x470>
 800fb7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb82:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb8a:	dbea      	blt.n	800fb62 <__ieee754_powf+0x3e2>
 800fb8c:	e7ee      	b.n	800fb6c <__ieee754_powf+0x3ec>
 800fb8e:	bf00      	nop
 800fb90:	00000000 	.word	0x00000000
 800fb94:	3f7ffff3 	.word	0x3f7ffff3
 800fb98:	3f800007 	.word	0x3f800007
 800fb9c:	3eaaaaab 	.word	0x3eaaaaab
 800fba0:	3fb8aa3b 	.word	0x3fb8aa3b
 800fba4:	36eca570 	.word	0x36eca570
 800fba8:	3fb8aa00 	.word	0x3fb8aa00
 800fbac:	4b800000 	.word	0x4b800000
 800fbb0:	001cc471 	.word	0x001cc471
 800fbb4:	005db3d6 	.word	0x005db3d6
 800fbb8:	08010540 	.word	0x08010540
 800fbbc:	fffff000 	.word	0xfffff000
 800fbc0:	3e6c3255 	.word	0x3e6c3255
 800fbc4:	3e53f142 	.word	0x3e53f142
 800fbc8:	3e8ba305 	.word	0x3e8ba305
 800fbcc:	3edb6db7 	.word	0x3edb6db7
 800fbd0:	3f19999a 	.word	0x3f19999a
 800fbd4:	08010530 	.word	0x08010530
 800fbd8:	3f76384f 	.word	0x3f76384f
 800fbdc:	3f763800 	.word	0x3f763800
 800fbe0:	369dc3a0 	.word	0x369dc3a0
 800fbe4:	08010538 	.word	0x08010538
 800fbe8:	3338aa3c 	.word	0x3338aa3c
 800fbec:	43160000 	.word	0x43160000
 800fbf0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800fbf4:	d971      	bls.n	800fcda <__ieee754_powf+0x55a>
 800fbf6:	15db      	asrs	r3, r3, #23
 800fbf8:	3b7e      	subs	r3, #126	@ 0x7e
 800fbfa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800fbfe:	4118      	asrs	r0, r3
 800fc00:	4408      	add	r0, r1
 800fc02:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fc06:	4a3c      	ldr	r2, [pc, #240]	@ (800fcf8 <__ieee754_powf+0x578>)
 800fc08:	3b7f      	subs	r3, #127	@ 0x7f
 800fc0a:	411a      	asrs	r2, r3
 800fc0c:	4002      	ands	r2, r0
 800fc0e:	ee07 2a10 	vmov	s14, r2
 800fc12:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800fc16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800fc1a:	f1c3 0317 	rsb	r3, r3, #23
 800fc1e:	4118      	asrs	r0, r3
 800fc20:	2900      	cmp	r1, #0
 800fc22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc26:	bfb8      	it	lt
 800fc28:	4240      	neglt	r0, r0
 800fc2a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fc2e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800fcfc <__ieee754_powf+0x57c>
 800fc32:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800fd00 <__ieee754_powf+0x580>
 800fc36:	ee17 3a10 	vmov	r3, s14
 800fc3a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800fc3e:	f023 030f 	bic.w	r3, r3, #15
 800fc42:	ee07 3a10 	vmov	s14, r3
 800fc46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc4a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fc4e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fc52:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800fd04 <__ieee754_powf+0x584>
 800fc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc5a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800fc5e:	eef0 6a67 	vmov.f32	s13, s15
 800fc62:	eee7 6a06 	vfma.f32	s13, s14, s12
 800fc66:	eef0 5a66 	vmov.f32	s11, s13
 800fc6a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800fc6e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fc72:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fc76:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800fd08 <__ieee754_powf+0x588>
 800fc7a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800fd0c <__ieee754_powf+0x58c>
 800fc7e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800fc82:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800fd10 <__ieee754_powf+0x590>
 800fc86:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fc8a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800fd14 <__ieee754_powf+0x594>
 800fc8e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fc92:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800fd18 <__ieee754_powf+0x598>
 800fc96:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fc9a:	eeb0 6a66 	vmov.f32	s12, s13
 800fc9e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800fca2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800fca6:	ee66 5a86 	vmul.f32	s11, s13, s12
 800fcaa:	ee36 6a47 	vsub.f32	s12, s12, s14
 800fcae:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800fcb2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800fcb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fcbe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fcc2:	ee10 3a10 	vmov	r3, s0
 800fcc6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fcca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fcce:	da06      	bge.n	800fcde <__ieee754_powf+0x55e>
 800fcd0:	f000 f82e 	bl	800fd30 <scalbnf>
 800fcd4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fcd8:	e56a      	b.n	800f7b0 <__ieee754_powf+0x30>
 800fcda:	2000      	movs	r0, #0
 800fcdc:	e7a5      	b.n	800fc2a <__ieee754_powf+0x4aa>
 800fcde:	ee00 3a10 	vmov	s0, r3
 800fce2:	e7f7      	b.n	800fcd4 <__ieee754_powf+0x554>
 800fce4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fce8:	e562      	b.n	800f7b0 <__ieee754_powf+0x30>
 800fcea:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800fd1c <__ieee754_powf+0x59c>
 800fcee:	e55f      	b.n	800f7b0 <__ieee754_powf+0x30>
 800fcf0:	eeb0 0a48 	vmov.f32	s0, s16
 800fcf4:	e55c      	b.n	800f7b0 <__ieee754_powf+0x30>
 800fcf6:	bf00      	nop
 800fcf8:	ff800000 	.word	0xff800000
 800fcfc:	3f317218 	.word	0x3f317218
 800fd00:	3f317200 	.word	0x3f317200
 800fd04:	35bfbe8c 	.word	0x35bfbe8c
 800fd08:	b5ddea0e 	.word	0xb5ddea0e
 800fd0c:	3331bb4c 	.word	0x3331bb4c
 800fd10:	388ab355 	.word	0x388ab355
 800fd14:	bb360b61 	.word	0xbb360b61
 800fd18:	3e2aaaab 	.word	0x3e2aaaab
 800fd1c:	00000000 	.word	0x00000000

0800fd20 <fabsf>:
 800fd20:	ee10 3a10 	vmov	r3, s0
 800fd24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd28:	ee00 3a10 	vmov	s0, r3
 800fd2c:	4770      	bx	lr
	...

0800fd30 <scalbnf>:
 800fd30:	ee10 3a10 	vmov	r3, s0
 800fd34:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fd38:	d02b      	beq.n	800fd92 <scalbnf+0x62>
 800fd3a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fd3e:	d302      	bcc.n	800fd46 <scalbnf+0x16>
 800fd40:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fd44:	4770      	bx	lr
 800fd46:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fd4a:	d123      	bne.n	800fd94 <scalbnf+0x64>
 800fd4c:	4b24      	ldr	r3, [pc, #144]	@ (800fde0 <scalbnf+0xb0>)
 800fd4e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fde4 <scalbnf+0xb4>
 800fd52:	4298      	cmp	r0, r3
 800fd54:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fd58:	db17      	blt.n	800fd8a <scalbnf+0x5a>
 800fd5a:	ee10 3a10 	vmov	r3, s0
 800fd5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fd62:	3a19      	subs	r2, #25
 800fd64:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fd68:	4288      	cmp	r0, r1
 800fd6a:	dd15      	ble.n	800fd98 <scalbnf+0x68>
 800fd6c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fde8 <scalbnf+0xb8>
 800fd70:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fdec <scalbnf+0xbc>
 800fd74:	ee10 3a10 	vmov	r3, s0
 800fd78:	eeb0 7a67 	vmov.f32	s14, s15
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	bfb8      	it	lt
 800fd80:	eef0 7a66 	vmovlt.f32	s15, s13
 800fd84:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fd88:	4770      	bx	lr
 800fd8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fdf0 <scalbnf+0xc0>
 800fd8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fd92:	4770      	bx	lr
 800fd94:	0dd2      	lsrs	r2, r2, #23
 800fd96:	e7e5      	b.n	800fd64 <scalbnf+0x34>
 800fd98:	4410      	add	r0, r2
 800fd9a:	28fe      	cmp	r0, #254	@ 0xfe
 800fd9c:	dce6      	bgt.n	800fd6c <scalbnf+0x3c>
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	dd06      	ble.n	800fdb0 <scalbnf+0x80>
 800fda2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fda6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fdaa:	ee00 3a10 	vmov	s0, r3
 800fdae:	4770      	bx	lr
 800fdb0:	f110 0f16 	cmn.w	r0, #22
 800fdb4:	da09      	bge.n	800fdca <scalbnf+0x9a>
 800fdb6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fdf0 <scalbnf+0xc0>
 800fdba:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fdf4 <scalbnf+0xc4>
 800fdbe:	ee10 3a10 	vmov	r3, s0
 800fdc2:	eeb0 7a67 	vmov.f32	s14, s15
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	e7d9      	b.n	800fd7e <scalbnf+0x4e>
 800fdca:	3019      	adds	r0, #25
 800fdcc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fdd0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fdd4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fdf8 <scalbnf+0xc8>
 800fdd8:	ee07 3a90 	vmov	s15, r3
 800fddc:	e7d7      	b.n	800fd8e <scalbnf+0x5e>
 800fdde:	bf00      	nop
 800fde0:	ffff3cb0 	.word	0xffff3cb0
 800fde4:	4c000000 	.word	0x4c000000
 800fde8:	7149f2ca 	.word	0x7149f2ca
 800fdec:	f149f2ca 	.word	0xf149f2ca
 800fdf0:	0da24260 	.word	0x0da24260
 800fdf4:	8da24260 	.word	0x8da24260
 800fdf8:	33000000 	.word	0x33000000

0800fdfc <with_errnof>:
 800fdfc:	b510      	push	{r4, lr}
 800fdfe:	ed2d 8b02 	vpush	{d8}
 800fe02:	eeb0 8a40 	vmov.f32	s16, s0
 800fe06:	4604      	mov	r4, r0
 800fe08:	f7fd fbe0 	bl	800d5cc <__errno>
 800fe0c:	eeb0 0a48 	vmov.f32	s0, s16
 800fe10:	ecbd 8b02 	vpop	{d8}
 800fe14:	6004      	str	r4, [r0, #0]
 800fe16:	bd10      	pop	{r4, pc}

0800fe18 <xflowf>:
 800fe18:	b130      	cbz	r0, 800fe28 <xflowf+0x10>
 800fe1a:	eef1 7a40 	vneg.f32	s15, s0
 800fe1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fe22:	2022      	movs	r0, #34	@ 0x22
 800fe24:	f7ff bfea 	b.w	800fdfc <with_errnof>
 800fe28:	eef0 7a40 	vmov.f32	s15, s0
 800fe2c:	e7f7      	b.n	800fe1e <xflowf+0x6>
	...

0800fe30 <__math_uflowf>:
 800fe30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fe38 <__math_uflowf+0x8>
 800fe34:	f7ff bff0 	b.w	800fe18 <xflowf>
 800fe38:	10000000 	.word	0x10000000

0800fe3c <__math_oflowf>:
 800fe3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fe44 <__math_oflowf+0x8>
 800fe40:	f7ff bfea 	b.w	800fe18 <xflowf>
 800fe44:	70000000 	.word	0x70000000

0800fe48 <__ieee754_sqrtf>:
 800fe48:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fe4c:	4770      	bx	lr
	...

0800fe50 <_init>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	bf00      	nop
 800fe54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe56:	bc08      	pop	{r3}
 800fe58:	469e      	mov	lr, r3
 800fe5a:	4770      	bx	lr

0800fe5c <_fini>:
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	bf00      	nop
 800fe60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe62:	bc08      	pop	{r3}
 800fe64:	469e      	mov	lr, r3
 800fe66:	4770      	bx	lr
